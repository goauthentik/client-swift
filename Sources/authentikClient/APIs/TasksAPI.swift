//
// TasksAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class TasksAPI {

    /**

     - parameter actorName: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter paused: (query)  (optional)
     - parameter relObjContentTypeAppLabel: (query)  (optional)
     - parameter relObjContentTypeModel: (query)  (optional)
     - parameter relObjId: (query)  (optional)
     - parameter relObjIdIsnull: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedScheduleList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func tasksSchedulesList(actorName: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, paused: Bool? = nil, relObjContentTypeAppLabel: String? = nil, relObjContentTypeModel: String? = nil, relObjId: String? = nil, relObjIdIsnull: Bool? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedScheduleList {
        return try await tasksSchedulesListWithRequestBuilder(actorName: actorName, ordering: ordering, page: page, pageSize: pageSize, paused: paused, relObjContentTypeAppLabel: relObjContentTypeAppLabel, relObjContentTypeModel: relObjContentTypeModel, relObjId: relObjId, relObjIdIsnull: relObjIdIsnull, search: search, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /tasks/schedules/
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter actorName: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter paused: (query)  (optional)
     - parameter relObjContentTypeAppLabel: (query)  (optional)
     - parameter relObjContentTypeModel: (query)  (optional)
     - parameter relObjId: (query)  (optional)
     - parameter relObjIdIsnull: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedScheduleList> 
     */
    open class func tasksSchedulesListWithRequestBuilder(actorName: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, paused: Bool? = nil, relObjContentTypeAppLabel: String? = nil, relObjContentTypeModel: String? = nil, relObjId: String? = nil, relObjIdIsnull: Bool? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedScheduleList> {
        let localVariablePath = "/tasks/schedules/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "actor_name": (wrappedValue: actorName?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "paused": (wrappedValue: paused?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "rel_obj_content_type__app_label": (wrappedValue: relObjContentTypeAppLabel?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "rel_obj_content_type__model": (wrappedValue: relObjContentTypeModel?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "rel_obj_id": (wrappedValue: relObjId?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "rel_obj_id__isnull": (wrappedValue: relObjIdIsnull?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedScheduleList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A UUID string identifying this Schedule. 
     - parameter patchedScheduleRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Schedule
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func tasksSchedulesPartialUpdate(id: UUID, patchedScheduleRequest: PatchedScheduleRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> Schedule {
        return try await tasksSchedulesPartialUpdateWithRequestBuilder(id: id, patchedScheduleRequest: patchedScheduleRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /tasks/schedules/{id}/
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A UUID string identifying this Schedule. 
     - parameter patchedScheduleRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Schedule> 
     */
    open class func tasksSchedulesPartialUpdateWithRequestBuilder(id: UUID, patchedScheduleRequest: PatchedScheduleRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Schedule> {
        var localVariablePath = "/tasks/schedules/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedScheduleRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Schedule>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A UUID string identifying this Schedule. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Schedule
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func tasksSchedulesRetrieve(id: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> Schedule {
        return try await tasksSchedulesRetrieveWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /tasks/schedules/{id}/
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A UUID string identifying this Schedule. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Schedule> 
     */
    open class func tasksSchedulesRetrieveWithRequestBuilder(id: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Schedule> {
        var localVariablePath = "/tasks/schedules/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Schedule>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A UUID string identifying this Schedule. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func tasksSchedulesSendCreate(id: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await tasksSchedulesSendCreateWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /tasks/schedules/{id}/send/
     - Trigger this schedule now
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A UUID string identifying this Schedule. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func tasksSchedulesSendCreateWithRequestBuilder(id: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/tasks/schedules/{id}/send/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A UUID string identifying this Schedule. 
     - parameter scheduleRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Schedule
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func tasksSchedulesUpdate(id: UUID, scheduleRequest: ScheduleRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> Schedule {
        return try await tasksSchedulesUpdateWithRequestBuilder(id: id, scheduleRequest: scheduleRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /tasks/schedules/{id}/
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A UUID string identifying this Schedule. 
     - parameter scheduleRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Schedule> 
     */
    open class func tasksSchedulesUpdateWithRequestBuilder(id: UUID, scheduleRequest: ScheduleRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Schedule> {
        var localVariablePath = "/tasks/schedules/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: scheduleRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Schedule>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter aggregatedStatus
     */
    public enum AggregatedStatus_tasksTasksList: String, Sendable, CaseIterable {
        case consumed = "consumed"
        case done = "done"
        case error = "error"
        case info = "info"
        case postprocess = "postprocess"
        case preprocess = "preprocess"
        case queued = "queued"
        case rejected = "rejected"
        case running = "running"
        case warning = "warning"
    }

    /**
     * enum for parameter state
     */
    public enum State_tasksTasksList: String, Sendable, CaseIterable {
        case consumed = "consumed"
        case done = "done"
        case postprocess = "postprocess"
        case preprocess = "preprocess"
        case queued = "queued"
        case rejected = "rejected"
        case running = "running"
    }

    /**

     - parameter actorName: (query)  (optional)
     - parameter aggregatedStatus: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter queueName: (query)  (optional)
     - parameter relObjContentTypeAppLabel: (query)  (optional)
     - parameter relObjContentTypeModel: (query)  (optional)
     - parameter relObjId: (query)  (optional)
     - parameter relObjIdIsnull: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter state: (query) Task status   (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedTaskList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func tasksTasksList(actorName: String? = nil, aggregatedStatus: [AggregatedStatus_tasksTasksList]? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, queueName: String? = nil, relObjContentTypeAppLabel: String? = nil, relObjContentTypeModel: String? = nil, relObjId: String? = nil, relObjIdIsnull: Bool? = nil, search: String? = nil, state: State_tasksTasksList? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedTaskList {
        return try await tasksTasksListWithRequestBuilder(actorName: actorName, aggregatedStatus: aggregatedStatus, ordering: ordering, page: page, pageSize: pageSize, queueName: queueName, relObjContentTypeAppLabel: relObjContentTypeAppLabel, relObjContentTypeModel: relObjContentTypeModel, relObjId: relObjId, relObjIdIsnull: relObjIdIsnull, search: search, state: state, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /tasks/tasks/
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter actorName: (query)  (optional)
     - parameter aggregatedStatus: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter queueName: (query)  (optional)
     - parameter relObjContentTypeAppLabel: (query)  (optional)
     - parameter relObjContentTypeModel: (query)  (optional)
     - parameter relObjId: (query)  (optional)
     - parameter relObjIdIsnull: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter state: (query) Task status   (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedTaskList> 
     */
    open class func tasksTasksListWithRequestBuilder(actorName: String? = nil, aggregatedStatus: [AggregatedStatus_tasksTasksList]? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, queueName: String? = nil, relObjContentTypeAppLabel: String? = nil, relObjContentTypeModel: String? = nil, relObjId: String? = nil, relObjIdIsnull: Bool? = nil, search: String? = nil, state: State_tasksTasksList? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedTaskList> {
        let localVariablePath = "/tasks/tasks/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "actor_name": (wrappedValue: actorName?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "aggregated_status": (wrappedValue: aggregatedStatus?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "queue_name": (wrappedValue: queueName?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "rel_obj_content_type__app_label": (wrappedValue: relObjContentTypeAppLabel?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "rel_obj_content_type__model": (wrappedValue: relObjContentTypeModel?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "rel_obj_id": (wrappedValue: relObjId?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "rel_obj_id__isnull": (wrappedValue: relObjIdIsnull?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "state": (wrappedValue: state?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedTaskList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter messageId: (path) A UUID string identifying this Task. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Task
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func tasksTasksRetrieve(messageId: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> Task {
        return try await tasksTasksRetrieveWithRequestBuilder(messageId: messageId, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /tasks/tasks/{message_id}/
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter messageId: (path) A UUID string identifying this Task. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Task> 
     */
    open class func tasksTasksRetrieveWithRequestBuilder(messageId: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Task> {
        var localVariablePath = "/tasks/tasks/{message_id}/"
        let messageIdPreEscape = "\(APIHelper.mapValueToPathItem(messageId))"
        let messageIdPostEscape = messageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{message_id}", with: messageIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Task>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter messageId: (path) A UUID string identifying this Task. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func tasksTasksRetryCreate(messageId: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await tasksTasksRetryCreateWithRequestBuilder(messageId: messageId, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /tasks/tasks/{message_id}/retry/
     - Retry task
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter messageId: (path) A UUID string identifying this Task. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func tasksTasksRetryCreateWithRequestBuilder(messageId: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/tasks/tasks/{message_id}/retry/"
        let messageIdPreEscape = "\(APIHelper.mapValueToPathItem(messageId))"
        let messageIdPostEscape = messageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{message_id}", with: messageIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter apiConfiguration: The configuration for the http request.
     - returns: GlobalTaskStatus
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func tasksTasksStatusRetrieve(apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> GlobalTaskStatus {
        return try await tasksTasksStatusRetrieveWithRequestBuilder(apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /tasks/tasks/status/
     - Global status summary for all tasks
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GlobalTaskStatus> 
     */
    open class func tasksTasksStatusRetrieveWithRequestBuilder(apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<GlobalTaskStatus> {
        let localVariablePath = "/tasks/tasks/status/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GlobalTaskStatus>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter apiConfiguration: The configuration for the http request.
     - returns: [Worker]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func tasksWorkersList(apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [Worker] {
        return try await tasksWorkersListWithRequestBuilder(apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /tasks/workers
     - Get currently connected worker count.
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[Worker]> 
     */
    open class func tasksWorkersListWithRequestBuilder(apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[Worker]> {
        let localVariablePath = "/tasks/workers"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[Worker]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }
}
