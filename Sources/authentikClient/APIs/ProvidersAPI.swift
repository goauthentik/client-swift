//
// ProvidersAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class ProvidersAPI {

    /**

     - parameter id: (path) A unique integer value identifying this provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersAllDestroy(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await providersAllDestroyWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /providers/all/{id}/
     - Provider Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func providersAllDestroyWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/providers/all/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter applicationIsnull: (query)  (optional)
     - parameter backchannel: (query) When not set all providers are returned. When set to true, only backchannel providers are returned. When set to false, backchannel providers are excluded (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedProviderList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersAllList(applicationIsnull: Bool? = nil, backchannel: Bool? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedProviderList {
        return try await providersAllListWithRequestBuilder(applicationIsnull: applicationIsnull, backchannel: backchannel, ordering: ordering, page: page, pageSize: pageSize, search: search, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /providers/all/
     - Provider Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter applicationIsnull: (query)  (optional)
     - parameter backchannel: (query) When not set all providers are returned. When set to true, only backchannel providers are returned. When set to false, backchannel providers are excluded (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedProviderList> 
     */
    open class func providersAllListWithRequestBuilder(applicationIsnull: Bool? = nil, backchannel: Bool? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedProviderList> {
        let localVariablePath = "/providers/all/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "application__isnull": (wrappedValue: applicationIsnull?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "backchannel": (wrappedValue: backchannel?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedProviderList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Provider
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersAllRetrieve(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> Provider {
        return try await providersAllRetrieveWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /providers/all/{id}/
     - Provider Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Provider> 
     */
    open class func providersAllRetrieveWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Provider> {
        var localVariablePath = "/providers/all/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Provider>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter apiConfiguration: The configuration for the http request.
     - returns: [TypeCreate]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersAllTypesList(apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [TypeCreate] {
        return try await providersAllTypesListWithRequestBuilder(apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /providers/all/types/
     - Get all creatable types
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[TypeCreate]> 
     */
    open class func providersAllTypesListWithRequestBuilder(apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[TypeCreate]> {
        let localVariablePath = "/providers/all/types/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[TypeCreate]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersAllUsedByList(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await providersAllUsedByListWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /providers/all/{id}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func providersAllUsedByListWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/providers/all/{id}/used_by/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter googleWorkspaceProviderRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GoogleWorkspaceProvider
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersGoogleWorkspaceCreate(googleWorkspaceProviderRequest: GoogleWorkspaceProviderRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> GoogleWorkspaceProvider {
        return try await providersGoogleWorkspaceCreateWithRequestBuilder(googleWorkspaceProviderRequest: googleWorkspaceProviderRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /providers/google_workspace/
     - GoogleWorkspaceProvider Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter googleWorkspaceProviderRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GoogleWorkspaceProvider> 
     */
    open class func providersGoogleWorkspaceCreateWithRequestBuilder(googleWorkspaceProviderRequest: GoogleWorkspaceProviderRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<GoogleWorkspaceProvider> {
        let localVariablePath = "/providers/google_workspace/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: googleWorkspaceProviderRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GoogleWorkspaceProvider>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Google Workspace Provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersGoogleWorkspaceDestroy(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await providersGoogleWorkspaceDestroyWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /providers/google_workspace/{id}/
     - GoogleWorkspaceProvider Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Google Workspace Provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func providersGoogleWorkspaceDestroyWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/providers/google_workspace/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter googleWorkspaceProviderGroupRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GoogleWorkspaceProviderGroup
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersGoogleWorkspaceGroupsCreate(googleWorkspaceProviderGroupRequest: GoogleWorkspaceProviderGroupRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> GoogleWorkspaceProviderGroup {
        return try await providersGoogleWorkspaceGroupsCreateWithRequestBuilder(googleWorkspaceProviderGroupRequest: googleWorkspaceProviderGroupRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /providers/google_workspace_groups/
     - GoogleWorkspaceProviderGroup Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter googleWorkspaceProviderGroupRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GoogleWorkspaceProviderGroup> 
     */
    open class func providersGoogleWorkspaceGroupsCreateWithRequestBuilder(googleWorkspaceProviderGroupRequest: GoogleWorkspaceProviderGroupRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<GoogleWorkspaceProviderGroup> {
        let localVariablePath = "/providers/google_workspace_groups/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: googleWorkspaceProviderGroupRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GoogleWorkspaceProviderGroup>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A UUID string identifying this Google Workspace Provider Group. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersGoogleWorkspaceGroupsDestroy(id: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await providersGoogleWorkspaceGroupsDestroyWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /providers/google_workspace_groups/{id}/
     - GoogleWorkspaceProviderGroup Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A UUID string identifying this Google Workspace Provider Group. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func providersGoogleWorkspaceGroupsDestroyWithRequestBuilder(id: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/providers/google_workspace_groups/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter groupGroupUuid: (query)  (optional)
     - parameter groupName: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter providerId: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedGoogleWorkspaceProviderGroupList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersGoogleWorkspaceGroupsList(groupGroupUuid: UUID? = nil, groupName: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, providerId: Int? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedGoogleWorkspaceProviderGroupList {
        return try await providersGoogleWorkspaceGroupsListWithRequestBuilder(groupGroupUuid: groupGroupUuid, groupName: groupName, ordering: ordering, page: page, pageSize: pageSize, providerId: providerId, search: search, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /providers/google_workspace_groups/
     - GoogleWorkspaceProviderGroup Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter groupGroupUuid: (query)  (optional)
     - parameter groupName: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter providerId: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedGoogleWorkspaceProviderGroupList> 
     */
    open class func providersGoogleWorkspaceGroupsListWithRequestBuilder(groupGroupUuid: UUID? = nil, groupName: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, providerId: Int? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedGoogleWorkspaceProviderGroupList> {
        let localVariablePath = "/providers/google_workspace_groups/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "group__group_uuid": (wrappedValue: groupGroupUuid?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "group__name": (wrappedValue: groupName?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "provider__id": (wrappedValue: providerId?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedGoogleWorkspaceProviderGroupList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A UUID string identifying this Google Workspace Provider Group. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GoogleWorkspaceProviderGroup
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersGoogleWorkspaceGroupsRetrieve(id: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> GoogleWorkspaceProviderGroup {
        return try await providersGoogleWorkspaceGroupsRetrieveWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /providers/google_workspace_groups/{id}/
     - GoogleWorkspaceProviderGroup Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A UUID string identifying this Google Workspace Provider Group. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GoogleWorkspaceProviderGroup> 
     */
    open class func providersGoogleWorkspaceGroupsRetrieveWithRequestBuilder(id: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<GoogleWorkspaceProviderGroup> {
        var localVariablePath = "/providers/google_workspace_groups/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GoogleWorkspaceProviderGroup>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A UUID string identifying this Google Workspace Provider Group. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersGoogleWorkspaceGroupsUsedByList(id: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await providersGoogleWorkspaceGroupsUsedByListWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /providers/google_workspace_groups/{id}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A UUID string identifying this Google Workspace Provider Group. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func providersGoogleWorkspaceGroupsUsedByListWithRequestBuilder(id: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/providers/google_workspace_groups/{id}/used_by/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter delegatedSubject: (query)  (optional)
     - parameter excludeUsersServiceAccount: (query)  (optional)
     - parameter filterGroup: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedGoogleWorkspaceProviderList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersGoogleWorkspaceList(delegatedSubject: String? = nil, excludeUsersServiceAccount: Bool? = nil, filterGroup: UUID? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedGoogleWorkspaceProviderList {
        return try await providersGoogleWorkspaceListWithRequestBuilder(delegatedSubject: delegatedSubject, excludeUsersServiceAccount: excludeUsersServiceAccount, filterGroup: filterGroup, name: name, ordering: ordering, page: page, pageSize: pageSize, search: search, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /providers/google_workspace/
     - GoogleWorkspaceProvider Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter delegatedSubject: (query)  (optional)
     - parameter excludeUsersServiceAccount: (query)  (optional)
     - parameter filterGroup: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedGoogleWorkspaceProviderList> 
     */
    open class func providersGoogleWorkspaceListWithRequestBuilder(delegatedSubject: String? = nil, excludeUsersServiceAccount: Bool? = nil, filterGroup: UUID? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedGoogleWorkspaceProviderList> {
        let localVariablePath = "/providers/google_workspace/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "delegated_subject": (wrappedValue: delegatedSubject?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "exclude_users_service_account": (wrappedValue: excludeUsersServiceAccount?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "filter_group": (wrappedValue: filterGroup?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedGoogleWorkspaceProviderList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Google Workspace Provider. 
     - parameter patchedGoogleWorkspaceProviderRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GoogleWorkspaceProvider
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersGoogleWorkspacePartialUpdate(id: Int, patchedGoogleWorkspaceProviderRequest: PatchedGoogleWorkspaceProviderRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> GoogleWorkspaceProvider {
        return try await providersGoogleWorkspacePartialUpdateWithRequestBuilder(id: id, patchedGoogleWorkspaceProviderRequest: patchedGoogleWorkspaceProviderRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /providers/google_workspace/{id}/
     - GoogleWorkspaceProvider Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Google Workspace Provider. 
     - parameter patchedGoogleWorkspaceProviderRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GoogleWorkspaceProvider> 
     */
    open class func providersGoogleWorkspacePartialUpdateWithRequestBuilder(id: Int, patchedGoogleWorkspaceProviderRequest: PatchedGoogleWorkspaceProviderRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<GoogleWorkspaceProvider> {
        var localVariablePath = "/providers/google_workspace/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedGoogleWorkspaceProviderRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GoogleWorkspaceProvider>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Google Workspace Provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GoogleWorkspaceProvider
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersGoogleWorkspaceRetrieve(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> GoogleWorkspaceProvider {
        return try await providersGoogleWorkspaceRetrieveWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /providers/google_workspace/{id}/
     - GoogleWorkspaceProvider Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Google Workspace Provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GoogleWorkspaceProvider> 
     */
    open class func providersGoogleWorkspaceRetrieveWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<GoogleWorkspaceProvider> {
        var localVariablePath = "/providers/google_workspace/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GoogleWorkspaceProvider>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Google Workspace Provider. 
     - parameter syncObjectRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SyncObjectResult
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersGoogleWorkspaceSyncObjectCreate(id: Int, syncObjectRequest: SyncObjectRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> SyncObjectResult {
        return try await providersGoogleWorkspaceSyncObjectCreateWithRequestBuilder(id: id, syncObjectRequest: syncObjectRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /providers/google_workspace/{id}/sync/object/
     - Sync/Re-sync a single user/group object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Google Workspace Provider. 
     - parameter syncObjectRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SyncObjectResult> 
     */
    open class func providersGoogleWorkspaceSyncObjectCreateWithRequestBuilder(id: Int, syncObjectRequest: SyncObjectRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<SyncObjectResult> {
        var localVariablePath = "/providers/google_workspace/{id}/sync/object/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: syncObjectRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SyncObjectResult>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Google Workspace Provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SyncStatus
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersGoogleWorkspaceSyncStatusRetrieve(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> SyncStatus {
        return try await providersGoogleWorkspaceSyncStatusRetrieveWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /providers/google_workspace/{id}/sync/status/
     - Get provider's sync status
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Google Workspace Provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SyncStatus> 
     */
    open class func providersGoogleWorkspaceSyncStatusRetrieveWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<SyncStatus> {
        var localVariablePath = "/providers/google_workspace/{id}/sync/status/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SyncStatus>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Google Workspace Provider. 
     - parameter googleWorkspaceProviderRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GoogleWorkspaceProvider
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersGoogleWorkspaceUpdate(id: Int, googleWorkspaceProviderRequest: GoogleWorkspaceProviderRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> GoogleWorkspaceProvider {
        return try await providersGoogleWorkspaceUpdateWithRequestBuilder(id: id, googleWorkspaceProviderRequest: googleWorkspaceProviderRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /providers/google_workspace/{id}/
     - GoogleWorkspaceProvider Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Google Workspace Provider. 
     - parameter googleWorkspaceProviderRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GoogleWorkspaceProvider> 
     */
    open class func providersGoogleWorkspaceUpdateWithRequestBuilder(id: Int, googleWorkspaceProviderRequest: GoogleWorkspaceProviderRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<GoogleWorkspaceProvider> {
        var localVariablePath = "/providers/google_workspace/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: googleWorkspaceProviderRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GoogleWorkspaceProvider>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Google Workspace Provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersGoogleWorkspaceUsedByList(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await providersGoogleWorkspaceUsedByListWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /providers/google_workspace/{id}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Google Workspace Provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func providersGoogleWorkspaceUsedByListWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/providers/google_workspace/{id}/used_by/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter googleWorkspaceProviderUserRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GoogleWorkspaceProviderUser
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersGoogleWorkspaceUsersCreate(googleWorkspaceProviderUserRequest: GoogleWorkspaceProviderUserRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> GoogleWorkspaceProviderUser {
        return try await providersGoogleWorkspaceUsersCreateWithRequestBuilder(googleWorkspaceProviderUserRequest: googleWorkspaceProviderUserRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /providers/google_workspace_users/
     - GoogleWorkspaceProviderUser Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter googleWorkspaceProviderUserRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GoogleWorkspaceProviderUser> 
     */
    open class func providersGoogleWorkspaceUsersCreateWithRequestBuilder(googleWorkspaceProviderUserRequest: GoogleWorkspaceProviderUserRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<GoogleWorkspaceProviderUser> {
        let localVariablePath = "/providers/google_workspace_users/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: googleWorkspaceProviderUserRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GoogleWorkspaceProviderUser>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A UUID string identifying this Google Workspace Provider User. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersGoogleWorkspaceUsersDestroy(id: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await providersGoogleWorkspaceUsersDestroyWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /providers/google_workspace_users/{id}/
     - GoogleWorkspaceProviderUser Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A UUID string identifying this Google Workspace Provider User. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func providersGoogleWorkspaceUsersDestroyWithRequestBuilder(id: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/providers/google_workspace_users/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter providerId: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter userId: (query)  (optional)
     - parameter userUsername: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedGoogleWorkspaceProviderUserList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersGoogleWorkspaceUsersList(ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, providerId: Int? = nil, search: String? = nil, userId: Int? = nil, userUsername: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedGoogleWorkspaceProviderUserList {
        return try await providersGoogleWorkspaceUsersListWithRequestBuilder(ordering: ordering, page: page, pageSize: pageSize, providerId: providerId, search: search, userId: userId, userUsername: userUsername, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /providers/google_workspace_users/
     - GoogleWorkspaceProviderUser Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter providerId: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter userId: (query)  (optional)
     - parameter userUsername: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedGoogleWorkspaceProviderUserList> 
     */
    open class func providersGoogleWorkspaceUsersListWithRequestBuilder(ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, providerId: Int? = nil, search: String? = nil, userId: Int? = nil, userUsername: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedGoogleWorkspaceProviderUserList> {
        let localVariablePath = "/providers/google_workspace_users/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "provider__id": (wrappedValue: providerId?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "user__id": (wrappedValue: userId?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "user__username": (wrappedValue: userUsername?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedGoogleWorkspaceProviderUserList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A UUID string identifying this Google Workspace Provider User. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GoogleWorkspaceProviderUser
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersGoogleWorkspaceUsersRetrieve(id: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> GoogleWorkspaceProviderUser {
        return try await providersGoogleWorkspaceUsersRetrieveWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /providers/google_workspace_users/{id}/
     - GoogleWorkspaceProviderUser Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A UUID string identifying this Google Workspace Provider User. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GoogleWorkspaceProviderUser> 
     */
    open class func providersGoogleWorkspaceUsersRetrieveWithRequestBuilder(id: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<GoogleWorkspaceProviderUser> {
        var localVariablePath = "/providers/google_workspace_users/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GoogleWorkspaceProviderUser>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A UUID string identifying this Google Workspace Provider User. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersGoogleWorkspaceUsersUsedByList(id: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await providersGoogleWorkspaceUsersUsedByListWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /providers/google_workspace_users/{id}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A UUID string identifying this Google Workspace Provider User. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func providersGoogleWorkspaceUsersUsedByListWithRequestBuilder(id: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/providers/google_workspace_users/{id}/used_by/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter lDAPProviderRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: LDAPProvider
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersLdapCreate(lDAPProviderRequest: LDAPProviderRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> LDAPProvider {
        return try await providersLdapCreateWithRequestBuilder(lDAPProviderRequest: lDAPProviderRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /providers/ldap/
     - LDAPProvider Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter lDAPProviderRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<LDAPProvider> 
     */
    open class func providersLdapCreateWithRequestBuilder(lDAPProviderRequest: LDAPProviderRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<LDAPProvider> {
        let localVariablePath = "/providers/ldap/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: lDAPProviderRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LDAPProvider>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this LDAP Provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersLdapDestroy(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await providersLdapDestroyWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /providers/ldap/{id}/
     - LDAPProvider Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this LDAP Provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func providersLdapDestroyWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/providers/ldap/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter applicationIsnull: (query)  (optional)
     - parameter authorizationFlowSlugIexact: (query)  (optional)
     - parameter baseDnIexact: (query)  (optional)
     - parameter certificateKpUuidIexact: (query)  (optional)
     - parameter certificateNameIexact: (query)  (optional)
     - parameter gidStartNumberIexact: (query)  (optional)
     - parameter nameIexact: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter tlsServerNameIexact: (query)  (optional)
     - parameter uidStartNumberIexact: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedLDAPProviderList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersLdapList(applicationIsnull: Bool? = nil, authorizationFlowSlugIexact: String? = nil, baseDnIexact: String? = nil, certificateKpUuidIexact: UUID? = nil, certificateNameIexact: String? = nil, gidStartNumberIexact: Int? = nil, nameIexact: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, tlsServerNameIexact: String? = nil, uidStartNumberIexact: Int? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedLDAPProviderList {
        return try await providersLdapListWithRequestBuilder(applicationIsnull: applicationIsnull, authorizationFlowSlugIexact: authorizationFlowSlugIexact, baseDnIexact: baseDnIexact, certificateKpUuidIexact: certificateKpUuidIexact, certificateNameIexact: certificateNameIexact, gidStartNumberIexact: gidStartNumberIexact, nameIexact: nameIexact, ordering: ordering, page: page, pageSize: pageSize, search: search, tlsServerNameIexact: tlsServerNameIexact, uidStartNumberIexact: uidStartNumberIexact, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /providers/ldap/
     - LDAPProvider Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter applicationIsnull: (query)  (optional)
     - parameter authorizationFlowSlugIexact: (query)  (optional)
     - parameter baseDnIexact: (query)  (optional)
     - parameter certificateKpUuidIexact: (query)  (optional)
     - parameter certificateNameIexact: (query)  (optional)
     - parameter gidStartNumberIexact: (query)  (optional)
     - parameter nameIexact: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter tlsServerNameIexact: (query)  (optional)
     - parameter uidStartNumberIexact: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedLDAPProviderList> 
     */
    open class func providersLdapListWithRequestBuilder(applicationIsnull: Bool? = nil, authorizationFlowSlugIexact: String? = nil, baseDnIexact: String? = nil, certificateKpUuidIexact: UUID? = nil, certificateNameIexact: String? = nil, gidStartNumberIexact: Int? = nil, nameIexact: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, tlsServerNameIexact: String? = nil, uidStartNumberIexact: Int? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedLDAPProviderList> {
        let localVariablePath = "/providers/ldap/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "application__isnull": (wrappedValue: applicationIsnull?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "authorization_flow__slug__iexact": (wrappedValue: authorizationFlowSlugIexact?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "base_dn__iexact": (wrappedValue: baseDnIexact?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "certificate__kp_uuid__iexact": (wrappedValue: certificateKpUuidIexact?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "certificate__name__iexact": (wrappedValue: certificateNameIexact?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "gid_start_number__iexact": (wrappedValue: gidStartNumberIexact?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name__iexact": (wrappedValue: nameIexact?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "tls_server_name__iexact": (wrappedValue: tlsServerNameIexact?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "uid_start_number__iexact": (wrappedValue: uidStartNumberIexact?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedLDAPProviderList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this LDAP Provider. 
     - parameter patchedLDAPProviderRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: LDAPProvider
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersLdapPartialUpdate(id: Int, patchedLDAPProviderRequest: PatchedLDAPProviderRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> LDAPProvider {
        return try await providersLdapPartialUpdateWithRequestBuilder(id: id, patchedLDAPProviderRequest: patchedLDAPProviderRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /providers/ldap/{id}/
     - LDAPProvider Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this LDAP Provider. 
     - parameter patchedLDAPProviderRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<LDAPProvider> 
     */
    open class func providersLdapPartialUpdateWithRequestBuilder(id: Int, patchedLDAPProviderRequest: PatchedLDAPProviderRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<LDAPProvider> {
        var localVariablePath = "/providers/ldap/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedLDAPProviderRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LDAPProvider>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this LDAP Provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: LDAPProvider
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersLdapRetrieve(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> LDAPProvider {
        return try await providersLdapRetrieveWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /providers/ldap/{id}/
     - LDAPProvider Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this LDAP Provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<LDAPProvider> 
     */
    open class func providersLdapRetrieveWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<LDAPProvider> {
        var localVariablePath = "/providers/ldap/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LDAPProvider>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this LDAP Provider. 
     - parameter lDAPProviderRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: LDAPProvider
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersLdapUpdate(id: Int, lDAPProviderRequest: LDAPProviderRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> LDAPProvider {
        return try await providersLdapUpdateWithRequestBuilder(id: id, lDAPProviderRequest: lDAPProviderRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /providers/ldap/{id}/
     - LDAPProvider Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this LDAP Provider. 
     - parameter lDAPProviderRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<LDAPProvider> 
     */
    open class func providersLdapUpdateWithRequestBuilder(id: Int, lDAPProviderRequest: LDAPProviderRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<LDAPProvider> {
        var localVariablePath = "/providers/ldap/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: lDAPProviderRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LDAPProvider>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this LDAP Provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersLdapUsedByList(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await providersLdapUsedByListWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /providers/ldap/{id}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this LDAP Provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func providersLdapUsedByListWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/providers/ldap/{id}/used_by/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter microsoftEntraProviderRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: MicrosoftEntraProvider
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersMicrosoftEntraCreate(microsoftEntraProviderRequest: MicrosoftEntraProviderRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> MicrosoftEntraProvider {
        return try await providersMicrosoftEntraCreateWithRequestBuilder(microsoftEntraProviderRequest: microsoftEntraProviderRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /providers/microsoft_entra/
     - MicrosoftEntraProvider Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter microsoftEntraProviderRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<MicrosoftEntraProvider> 
     */
    open class func providersMicrosoftEntraCreateWithRequestBuilder(microsoftEntraProviderRequest: MicrosoftEntraProviderRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<MicrosoftEntraProvider> {
        let localVariablePath = "/providers/microsoft_entra/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: microsoftEntraProviderRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MicrosoftEntraProvider>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Microsoft Entra Provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersMicrosoftEntraDestroy(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await providersMicrosoftEntraDestroyWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /providers/microsoft_entra/{id}/
     - MicrosoftEntraProvider Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Microsoft Entra Provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func providersMicrosoftEntraDestroyWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/providers/microsoft_entra/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter microsoftEntraProviderGroupRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: MicrosoftEntraProviderGroup
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersMicrosoftEntraGroupsCreate(microsoftEntraProviderGroupRequest: MicrosoftEntraProviderGroupRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> MicrosoftEntraProviderGroup {
        return try await providersMicrosoftEntraGroupsCreateWithRequestBuilder(microsoftEntraProviderGroupRequest: microsoftEntraProviderGroupRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /providers/microsoft_entra_groups/
     - MicrosoftEntraProviderGroup Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter microsoftEntraProviderGroupRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<MicrosoftEntraProviderGroup> 
     */
    open class func providersMicrosoftEntraGroupsCreateWithRequestBuilder(microsoftEntraProviderGroupRequest: MicrosoftEntraProviderGroupRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<MicrosoftEntraProviderGroup> {
        let localVariablePath = "/providers/microsoft_entra_groups/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: microsoftEntraProviderGroupRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MicrosoftEntraProviderGroup>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A UUID string identifying this Microsoft Entra Provider Group. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersMicrosoftEntraGroupsDestroy(id: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await providersMicrosoftEntraGroupsDestroyWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /providers/microsoft_entra_groups/{id}/
     - MicrosoftEntraProviderGroup Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A UUID string identifying this Microsoft Entra Provider Group. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func providersMicrosoftEntraGroupsDestroyWithRequestBuilder(id: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/providers/microsoft_entra_groups/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter groupGroupUuid: (query)  (optional)
     - parameter groupName: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter providerId: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedMicrosoftEntraProviderGroupList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersMicrosoftEntraGroupsList(groupGroupUuid: UUID? = nil, groupName: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, providerId: Int? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedMicrosoftEntraProviderGroupList {
        return try await providersMicrosoftEntraGroupsListWithRequestBuilder(groupGroupUuid: groupGroupUuid, groupName: groupName, ordering: ordering, page: page, pageSize: pageSize, providerId: providerId, search: search, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /providers/microsoft_entra_groups/
     - MicrosoftEntraProviderGroup Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter groupGroupUuid: (query)  (optional)
     - parameter groupName: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter providerId: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedMicrosoftEntraProviderGroupList> 
     */
    open class func providersMicrosoftEntraGroupsListWithRequestBuilder(groupGroupUuid: UUID? = nil, groupName: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, providerId: Int? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedMicrosoftEntraProviderGroupList> {
        let localVariablePath = "/providers/microsoft_entra_groups/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "group__group_uuid": (wrappedValue: groupGroupUuid?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "group__name": (wrappedValue: groupName?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "provider__id": (wrappedValue: providerId?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedMicrosoftEntraProviderGroupList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A UUID string identifying this Microsoft Entra Provider Group. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: MicrosoftEntraProviderGroup
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersMicrosoftEntraGroupsRetrieve(id: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> MicrosoftEntraProviderGroup {
        return try await providersMicrosoftEntraGroupsRetrieveWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /providers/microsoft_entra_groups/{id}/
     - MicrosoftEntraProviderGroup Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A UUID string identifying this Microsoft Entra Provider Group. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<MicrosoftEntraProviderGroup> 
     */
    open class func providersMicrosoftEntraGroupsRetrieveWithRequestBuilder(id: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<MicrosoftEntraProviderGroup> {
        var localVariablePath = "/providers/microsoft_entra_groups/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MicrosoftEntraProviderGroup>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A UUID string identifying this Microsoft Entra Provider Group. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersMicrosoftEntraGroupsUsedByList(id: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await providersMicrosoftEntraGroupsUsedByListWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /providers/microsoft_entra_groups/{id}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A UUID string identifying this Microsoft Entra Provider Group. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func providersMicrosoftEntraGroupsUsedByListWithRequestBuilder(id: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/providers/microsoft_entra_groups/{id}/used_by/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter excludeUsersServiceAccount: (query)  (optional)
     - parameter filterGroup: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedMicrosoftEntraProviderList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersMicrosoftEntraList(excludeUsersServiceAccount: Bool? = nil, filterGroup: UUID? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedMicrosoftEntraProviderList {
        return try await providersMicrosoftEntraListWithRequestBuilder(excludeUsersServiceAccount: excludeUsersServiceAccount, filterGroup: filterGroup, name: name, ordering: ordering, page: page, pageSize: pageSize, search: search, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /providers/microsoft_entra/
     - MicrosoftEntraProvider Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter excludeUsersServiceAccount: (query)  (optional)
     - parameter filterGroup: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedMicrosoftEntraProviderList> 
     */
    open class func providersMicrosoftEntraListWithRequestBuilder(excludeUsersServiceAccount: Bool? = nil, filterGroup: UUID? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedMicrosoftEntraProviderList> {
        let localVariablePath = "/providers/microsoft_entra/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "exclude_users_service_account": (wrappedValue: excludeUsersServiceAccount?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "filter_group": (wrappedValue: filterGroup?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedMicrosoftEntraProviderList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Microsoft Entra Provider. 
     - parameter patchedMicrosoftEntraProviderRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: MicrosoftEntraProvider
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersMicrosoftEntraPartialUpdate(id: Int, patchedMicrosoftEntraProviderRequest: PatchedMicrosoftEntraProviderRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> MicrosoftEntraProvider {
        return try await providersMicrosoftEntraPartialUpdateWithRequestBuilder(id: id, patchedMicrosoftEntraProviderRequest: patchedMicrosoftEntraProviderRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /providers/microsoft_entra/{id}/
     - MicrosoftEntraProvider Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Microsoft Entra Provider. 
     - parameter patchedMicrosoftEntraProviderRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<MicrosoftEntraProvider> 
     */
    open class func providersMicrosoftEntraPartialUpdateWithRequestBuilder(id: Int, patchedMicrosoftEntraProviderRequest: PatchedMicrosoftEntraProviderRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<MicrosoftEntraProvider> {
        var localVariablePath = "/providers/microsoft_entra/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedMicrosoftEntraProviderRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MicrosoftEntraProvider>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Microsoft Entra Provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: MicrosoftEntraProvider
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersMicrosoftEntraRetrieve(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> MicrosoftEntraProvider {
        return try await providersMicrosoftEntraRetrieveWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /providers/microsoft_entra/{id}/
     - MicrosoftEntraProvider Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Microsoft Entra Provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<MicrosoftEntraProvider> 
     */
    open class func providersMicrosoftEntraRetrieveWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<MicrosoftEntraProvider> {
        var localVariablePath = "/providers/microsoft_entra/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MicrosoftEntraProvider>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Microsoft Entra Provider. 
     - parameter syncObjectRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SyncObjectResult
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersMicrosoftEntraSyncObjectCreate(id: Int, syncObjectRequest: SyncObjectRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> SyncObjectResult {
        return try await providersMicrosoftEntraSyncObjectCreateWithRequestBuilder(id: id, syncObjectRequest: syncObjectRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /providers/microsoft_entra/{id}/sync/object/
     - Sync/Re-sync a single user/group object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Microsoft Entra Provider. 
     - parameter syncObjectRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SyncObjectResult> 
     */
    open class func providersMicrosoftEntraSyncObjectCreateWithRequestBuilder(id: Int, syncObjectRequest: SyncObjectRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<SyncObjectResult> {
        var localVariablePath = "/providers/microsoft_entra/{id}/sync/object/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: syncObjectRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SyncObjectResult>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Microsoft Entra Provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SyncStatus
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersMicrosoftEntraSyncStatusRetrieve(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> SyncStatus {
        return try await providersMicrosoftEntraSyncStatusRetrieveWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /providers/microsoft_entra/{id}/sync/status/
     - Get provider's sync status
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Microsoft Entra Provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SyncStatus> 
     */
    open class func providersMicrosoftEntraSyncStatusRetrieveWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<SyncStatus> {
        var localVariablePath = "/providers/microsoft_entra/{id}/sync/status/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SyncStatus>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Microsoft Entra Provider. 
     - parameter microsoftEntraProviderRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: MicrosoftEntraProvider
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersMicrosoftEntraUpdate(id: Int, microsoftEntraProviderRequest: MicrosoftEntraProviderRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> MicrosoftEntraProvider {
        return try await providersMicrosoftEntraUpdateWithRequestBuilder(id: id, microsoftEntraProviderRequest: microsoftEntraProviderRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /providers/microsoft_entra/{id}/
     - MicrosoftEntraProvider Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Microsoft Entra Provider. 
     - parameter microsoftEntraProviderRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<MicrosoftEntraProvider> 
     */
    open class func providersMicrosoftEntraUpdateWithRequestBuilder(id: Int, microsoftEntraProviderRequest: MicrosoftEntraProviderRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<MicrosoftEntraProvider> {
        var localVariablePath = "/providers/microsoft_entra/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: microsoftEntraProviderRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MicrosoftEntraProvider>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Microsoft Entra Provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersMicrosoftEntraUsedByList(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await providersMicrosoftEntraUsedByListWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /providers/microsoft_entra/{id}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Microsoft Entra Provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func providersMicrosoftEntraUsedByListWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/providers/microsoft_entra/{id}/used_by/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter microsoftEntraProviderUserRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: MicrosoftEntraProviderUser
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersMicrosoftEntraUsersCreate(microsoftEntraProviderUserRequest: MicrosoftEntraProviderUserRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> MicrosoftEntraProviderUser {
        return try await providersMicrosoftEntraUsersCreateWithRequestBuilder(microsoftEntraProviderUserRequest: microsoftEntraProviderUserRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /providers/microsoft_entra_users/
     - MicrosoftEntraProviderUser Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter microsoftEntraProviderUserRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<MicrosoftEntraProviderUser> 
     */
    open class func providersMicrosoftEntraUsersCreateWithRequestBuilder(microsoftEntraProviderUserRequest: MicrosoftEntraProviderUserRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<MicrosoftEntraProviderUser> {
        let localVariablePath = "/providers/microsoft_entra_users/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: microsoftEntraProviderUserRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MicrosoftEntraProviderUser>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A UUID string identifying this Microsoft Entra Provider User. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersMicrosoftEntraUsersDestroy(id: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await providersMicrosoftEntraUsersDestroyWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /providers/microsoft_entra_users/{id}/
     - MicrosoftEntraProviderUser Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A UUID string identifying this Microsoft Entra Provider User. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func providersMicrosoftEntraUsersDestroyWithRequestBuilder(id: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/providers/microsoft_entra_users/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter providerId: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter userId: (query)  (optional)
     - parameter userUsername: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedMicrosoftEntraProviderUserList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersMicrosoftEntraUsersList(ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, providerId: Int? = nil, search: String? = nil, userId: Int? = nil, userUsername: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedMicrosoftEntraProviderUserList {
        return try await providersMicrosoftEntraUsersListWithRequestBuilder(ordering: ordering, page: page, pageSize: pageSize, providerId: providerId, search: search, userId: userId, userUsername: userUsername, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /providers/microsoft_entra_users/
     - MicrosoftEntraProviderUser Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter providerId: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter userId: (query)  (optional)
     - parameter userUsername: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedMicrosoftEntraProviderUserList> 
     */
    open class func providersMicrosoftEntraUsersListWithRequestBuilder(ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, providerId: Int? = nil, search: String? = nil, userId: Int? = nil, userUsername: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedMicrosoftEntraProviderUserList> {
        let localVariablePath = "/providers/microsoft_entra_users/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "provider__id": (wrappedValue: providerId?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "user__id": (wrappedValue: userId?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "user__username": (wrappedValue: userUsername?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedMicrosoftEntraProviderUserList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A UUID string identifying this Microsoft Entra Provider User. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: MicrosoftEntraProviderUser
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersMicrosoftEntraUsersRetrieve(id: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> MicrosoftEntraProviderUser {
        return try await providersMicrosoftEntraUsersRetrieveWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /providers/microsoft_entra_users/{id}/
     - MicrosoftEntraProviderUser Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A UUID string identifying this Microsoft Entra Provider User. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<MicrosoftEntraProviderUser> 
     */
    open class func providersMicrosoftEntraUsersRetrieveWithRequestBuilder(id: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<MicrosoftEntraProviderUser> {
        var localVariablePath = "/providers/microsoft_entra_users/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MicrosoftEntraProviderUser>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A UUID string identifying this Microsoft Entra Provider User. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersMicrosoftEntraUsersUsedByList(id: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await providersMicrosoftEntraUsersUsedByListWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /providers/microsoft_entra_users/{id}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A UUID string identifying this Microsoft Entra Provider User. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func providersMicrosoftEntraUsersUsedByListWithRequestBuilder(id: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/providers/microsoft_entra_users/{id}/used_by/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter oAuth2ProviderRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: OAuth2Provider
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersOauth2Create(oAuth2ProviderRequest: OAuth2ProviderRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> OAuth2Provider {
        return try await providersOauth2CreateWithRequestBuilder(oAuth2ProviderRequest: oAuth2ProviderRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /providers/oauth2/
     - OAuth2Provider Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter oAuth2ProviderRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<OAuth2Provider> 
     */
    open class func providersOauth2CreateWithRequestBuilder(oAuth2ProviderRequest: OAuth2ProviderRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<OAuth2Provider> {
        let localVariablePath = "/providers/oauth2/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: oAuth2ProviderRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OAuth2Provider>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this OAuth2/OpenID Provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersOauth2Destroy(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await providersOauth2DestroyWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /providers/oauth2/{id}/
     - OAuth2Provider Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this OAuth2/OpenID Provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func providersOauth2DestroyWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/providers/oauth2/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter clientType
     */
    public enum ClientType_providersOauth2List: String, Sendable, CaseIterable {
        case confidential = "confidential"
        case _public = "public"
    }

    /**
     * enum for parameter issuerMode
     */
    public enum IssuerMode_providersOauth2List: String, Sendable, CaseIterable {
        case global = "global"
        case perProvider = "per_provider"
    }

    /**
     * enum for parameter subMode
     */
    public enum SubMode_providersOauth2List: String, Sendable, CaseIterable {
        case hashedUserId = "hashed_user_id"
        case userEmail = "user_email"
        case userId = "user_id"
        case userUpn = "user_upn"
        case userUsername = "user_username"
        case userUuid = "user_uuid"
    }

    /**

     - parameter accessCodeValidity: (query)  (optional)
     - parameter accessTokenValidity: (query)  (optional)
     - parameter application: (query)  (optional)
     - parameter authorizationFlow: (query)  (optional)
     - parameter clientId: (query)  (optional)
     - parameter clientType: (query) Confidential clients are capable of maintaining the confidentiality of their credentials. Public clients are incapable   (optional)
     - parameter includeClaimsInIdToken: (query)  (optional)
     - parameter issuerMode: (query) Configure how the issuer field of the ID Token should be filled.   (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter propertyMappings: (query)  (optional)
     - parameter refreshTokenValidity: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter signingKey: (query)  (optional)
     - parameter subMode: (query) Configure what data should be used as unique User Identifier. For most cases, the default should be fine.   (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedOAuth2ProviderList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersOauth2List(accessCodeValidity: String? = nil, accessTokenValidity: String? = nil, application: UUID? = nil, authorizationFlow: UUID? = nil, clientId: String? = nil, clientType: ClientType_providersOauth2List? = nil, includeClaimsInIdToken: Bool? = nil, issuerMode: IssuerMode_providersOauth2List? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, propertyMappings: [UUID]? = nil, refreshTokenValidity: String? = nil, search: String? = nil, signingKey: UUID? = nil, subMode: SubMode_providersOauth2List? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedOAuth2ProviderList {
        return try await providersOauth2ListWithRequestBuilder(accessCodeValidity: accessCodeValidity, accessTokenValidity: accessTokenValidity, application: application, authorizationFlow: authorizationFlow, clientId: clientId, clientType: clientType, includeClaimsInIdToken: includeClaimsInIdToken, issuerMode: issuerMode, name: name, ordering: ordering, page: page, pageSize: pageSize, propertyMappings: propertyMappings, refreshTokenValidity: refreshTokenValidity, search: search, signingKey: signingKey, subMode: subMode, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /providers/oauth2/
     - OAuth2Provider Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter accessCodeValidity: (query)  (optional)
     - parameter accessTokenValidity: (query)  (optional)
     - parameter application: (query)  (optional)
     - parameter authorizationFlow: (query)  (optional)
     - parameter clientId: (query)  (optional)
     - parameter clientType: (query) Confidential clients are capable of maintaining the confidentiality of their credentials. Public clients are incapable   (optional)
     - parameter includeClaimsInIdToken: (query)  (optional)
     - parameter issuerMode: (query) Configure how the issuer field of the ID Token should be filled.   (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter propertyMappings: (query)  (optional)
     - parameter refreshTokenValidity: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter signingKey: (query)  (optional)
     - parameter subMode: (query) Configure what data should be used as unique User Identifier. For most cases, the default should be fine.   (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedOAuth2ProviderList> 
     */
    open class func providersOauth2ListWithRequestBuilder(accessCodeValidity: String? = nil, accessTokenValidity: String? = nil, application: UUID? = nil, authorizationFlow: UUID? = nil, clientId: String? = nil, clientType: ClientType_providersOauth2List? = nil, includeClaimsInIdToken: Bool? = nil, issuerMode: IssuerMode_providersOauth2List? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, propertyMappings: [UUID]? = nil, refreshTokenValidity: String? = nil, search: String? = nil, signingKey: UUID? = nil, subMode: SubMode_providersOauth2List? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedOAuth2ProviderList> {
        let localVariablePath = "/providers/oauth2/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_code_validity": (wrappedValue: accessCodeValidity?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "access_token_validity": (wrappedValue: accessTokenValidity?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "application": (wrappedValue: application?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "authorization_flow": (wrappedValue: authorizationFlow?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "client_id": (wrappedValue: clientId?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "client_type": (wrappedValue: clientType?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "include_claims_in_id_token": (wrappedValue: includeClaimsInIdToken?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "issuer_mode": (wrappedValue: issuerMode?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "property_mappings": (wrappedValue: propertyMappings?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "refresh_token_validity": (wrappedValue: refreshTokenValidity?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "signing_key": (wrappedValue: signingKey?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "sub_mode": (wrappedValue: subMode?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedOAuth2ProviderList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this OAuth2/OpenID Provider. 
     - parameter patchedOAuth2ProviderRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: OAuth2Provider
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersOauth2PartialUpdate(id: Int, patchedOAuth2ProviderRequest: PatchedOAuth2ProviderRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> OAuth2Provider {
        return try await providersOauth2PartialUpdateWithRequestBuilder(id: id, patchedOAuth2ProviderRequest: patchedOAuth2ProviderRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /providers/oauth2/{id}/
     - OAuth2Provider Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this OAuth2/OpenID Provider. 
     - parameter patchedOAuth2ProviderRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<OAuth2Provider> 
     */
    open class func providersOauth2PartialUpdateWithRequestBuilder(id: Int, patchedOAuth2ProviderRequest: PatchedOAuth2ProviderRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<OAuth2Provider> {
        var localVariablePath = "/providers/oauth2/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedOAuth2ProviderRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OAuth2Provider>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this OAuth2/OpenID Provider. 
     - parameter forUser: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PropertyMappingPreview
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersOauth2PreviewUserRetrieve(id: Int, forUser: Int? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PropertyMappingPreview {
        return try await providersOauth2PreviewUserRetrieveWithRequestBuilder(id: id, forUser: forUser, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /providers/oauth2/{id}/preview_user/
     - Preview user data for provider
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this OAuth2/OpenID Provider. 
     - parameter forUser: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PropertyMappingPreview> 
     */
    open class func providersOauth2PreviewUserRetrieveWithRequestBuilder(id: Int, forUser: Int? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PropertyMappingPreview> {
        var localVariablePath = "/providers/oauth2/{id}/preview_user/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "for_user": (wrappedValue: forUser?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PropertyMappingPreview>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this OAuth2/OpenID Provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: OAuth2Provider
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersOauth2Retrieve(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> OAuth2Provider {
        return try await providersOauth2RetrieveWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /providers/oauth2/{id}/
     - OAuth2Provider Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this OAuth2/OpenID Provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<OAuth2Provider> 
     */
    open class func providersOauth2RetrieveWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<OAuth2Provider> {
        var localVariablePath = "/providers/oauth2/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OAuth2Provider>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this OAuth2/OpenID Provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: OAuth2ProviderSetupURLs
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersOauth2SetupUrlsRetrieve(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> OAuth2ProviderSetupURLs {
        return try await providersOauth2SetupUrlsRetrieveWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /providers/oauth2/{id}/setup_urls/
     - Get Providers setup URLs
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this OAuth2/OpenID Provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<OAuth2ProviderSetupURLs> 
     */
    open class func providersOauth2SetupUrlsRetrieveWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<OAuth2ProviderSetupURLs> {
        var localVariablePath = "/providers/oauth2/{id}/setup_urls/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OAuth2ProviderSetupURLs>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this OAuth2/OpenID Provider. 
     - parameter oAuth2ProviderRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: OAuth2Provider
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersOauth2Update(id: Int, oAuth2ProviderRequest: OAuth2ProviderRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> OAuth2Provider {
        return try await providersOauth2UpdateWithRequestBuilder(id: id, oAuth2ProviderRequest: oAuth2ProviderRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /providers/oauth2/{id}/
     - OAuth2Provider Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this OAuth2/OpenID Provider. 
     - parameter oAuth2ProviderRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<OAuth2Provider> 
     */
    open class func providersOauth2UpdateWithRequestBuilder(id: Int, oAuth2ProviderRequest: OAuth2ProviderRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<OAuth2Provider> {
        var localVariablePath = "/providers/oauth2/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: oAuth2ProviderRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OAuth2Provider>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this OAuth2/OpenID Provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersOauth2UsedByList(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await providersOauth2UsedByListWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /providers/oauth2/{id}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this OAuth2/OpenID Provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func providersOauth2UsedByListWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/providers/oauth2/{id}/used_by/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter proxyProviderRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ProxyProvider
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersProxyCreate(proxyProviderRequest: ProxyProviderRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> ProxyProvider {
        return try await providersProxyCreateWithRequestBuilder(proxyProviderRequest: proxyProviderRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /providers/proxy/
     - ProxyProvider Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter proxyProviderRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ProxyProvider> 
     */
    open class func providersProxyCreateWithRequestBuilder(proxyProviderRequest: ProxyProviderRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<ProxyProvider> {
        let localVariablePath = "/providers/proxy/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: proxyProviderRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProxyProvider>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Proxy Provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersProxyDestroy(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await providersProxyDestroyWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /providers/proxy/{id}/
     - ProxyProvider Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Proxy Provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func providersProxyDestroyWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/providers/proxy/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter applicationIsnull: (query)  (optional)
     - parameter authorizationFlowSlugIexact: (query)  (optional)
     - parameter basicAuthEnabledIexact: (query)  (optional)
     - parameter basicAuthPasswordAttributeIexact: (query)  (optional)
     - parameter basicAuthUserAttributeIexact: (query)  (optional)
     - parameter certificateKpUuidIexact: (query)  (optional)
     - parameter certificateNameIexact: (query)  (optional)
     - parameter cookieDomainIexact: (query)  (optional)
     - parameter externalHostIexact: (query)  (optional)
     - parameter internalHostIexact: (query)  (optional)
     - parameter internalHostSslValidationIexact: (query)  (optional)
     - parameter modeIexact: (query)  (optional)
     - parameter nameIexact: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter propertyMappingsIexact: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter skipPathRegexIexact: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedProxyProviderList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersProxyList(applicationIsnull: Bool? = nil, authorizationFlowSlugIexact: String? = nil, basicAuthEnabledIexact: Bool? = nil, basicAuthPasswordAttributeIexact: String? = nil, basicAuthUserAttributeIexact: String? = nil, certificateKpUuidIexact: UUID? = nil, certificateNameIexact: String? = nil, cookieDomainIexact: String? = nil, externalHostIexact: String? = nil, internalHostIexact: String? = nil, internalHostSslValidationIexact: Bool? = nil, modeIexact: String? = nil, nameIexact: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, propertyMappingsIexact: [UUID]? = nil, search: String? = nil, skipPathRegexIexact: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedProxyProviderList {
        return try await providersProxyListWithRequestBuilder(applicationIsnull: applicationIsnull, authorizationFlowSlugIexact: authorizationFlowSlugIexact, basicAuthEnabledIexact: basicAuthEnabledIexact, basicAuthPasswordAttributeIexact: basicAuthPasswordAttributeIexact, basicAuthUserAttributeIexact: basicAuthUserAttributeIexact, certificateKpUuidIexact: certificateKpUuidIexact, certificateNameIexact: certificateNameIexact, cookieDomainIexact: cookieDomainIexact, externalHostIexact: externalHostIexact, internalHostIexact: internalHostIexact, internalHostSslValidationIexact: internalHostSslValidationIexact, modeIexact: modeIexact, nameIexact: nameIexact, ordering: ordering, page: page, pageSize: pageSize, propertyMappingsIexact: propertyMappingsIexact, search: search, skipPathRegexIexact: skipPathRegexIexact, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /providers/proxy/
     - ProxyProvider Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter applicationIsnull: (query)  (optional)
     - parameter authorizationFlowSlugIexact: (query)  (optional)
     - parameter basicAuthEnabledIexact: (query)  (optional)
     - parameter basicAuthPasswordAttributeIexact: (query)  (optional)
     - parameter basicAuthUserAttributeIexact: (query)  (optional)
     - parameter certificateKpUuidIexact: (query)  (optional)
     - parameter certificateNameIexact: (query)  (optional)
     - parameter cookieDomainIexact: (query)  (optional)
     - parameter externalHostIexact: (query)  (optional)
     - parameter internalHostIexact: (query)  (optional)
     - parameter internalHostSslValidationIexact: (query)  (optional)
     - parameter modeIexact: (query)  (optional)
     - parameter nameIexact: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter propertyMappingsIexact: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter skipPathRegexIexact: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedProxyProviderList> 
     */
    open class func providersProxyListWithRequestBuilder(applicationIsnull: Bool? = nil, authorizationFlowSlugIexact: String? = nil, basicAuthEnabledIexact: Bool? = nil, basicAuthPasswordAttributeIexact: String? = nil, basicAuthUserAttributeIexact: String? = nil, certificateKpUuidIexact: UUID? = nil, certificateNameIexact: String? = nil, cookieDomainIexact: String? = nil, externalHostIexact: String? = nil, internalHostIexact: String? = nil, internalHostSslValidationIexact: Bool? = nil, modeIexact: String? = nil, nameIexact: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, propertyMappingsIexact: [UUID]? = nil, search: String? = nil, skipPathRegexIexact: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedProxyProviderList> {
        let localVariablePath = "/providers/proxy/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "application__isnull": (wrappedValue: applicationIsnull?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "authorization_flow__slug__iexact": (wrappedValue: authorizationFlowSlugIexact?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "basic_auth_enabled__iexact": (wrappedValue: basicAuthEnabledIexact?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "basic_auth_password_attribute__iexact": (wrappedValue: basicAuthPasswordAttributeIexact?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "basic_auth_user_attribute__iexact": (wrappedValue: basicAuthUserAttributeIexact?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "certificate__kp_uuid__iexact": (wrappedValue: certificateKpUuidIexact?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "certificate__name__iexact": (wrappedValue: certificateNameIexact?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "cookie_domain__iexact": (wrappedValue: cookieDomainIexact?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "external_host__iexact": (wrappedValue: externalHostIexact?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "internal_host__iexact": (wrappedValue: internalHostIexact?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "internal_host_ssl_validation__iexact": (wrappedValue: internalHostSslValidationIexact?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "mode__iexact": (wrappedValue: modeIexact?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name__iexact": (wrappedValue: nameIexact?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "property_mappings__iexact": (wrappedValue: propertyMappingsIexact?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "skip_path_regex__iexact": (wrappedValue: skipPathRegexIexact?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedProxyProviderList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Proxy Provider. 
     - parameter patchedProxyProviderRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ProxyProvider
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersProxyPartialUpdate(id: Int, patchedProxyProviderRequest: PatchedProxyProviderRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> ProxyProvider {
        return try await providersProxyPartialUpdateWithRequestBuilder(id: id, patchedProxyProviderRequest: patchedProxyProviderRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /providers/proxy/{id}/
     - ProxyProvider Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Proxy Provider. 
     - parameter patchedProxyProviderRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ProxyProvider> 
     */
    open class func providersProxyPartialUpdateWithRequestBuilder(id: Int, patchedProxyProviderRequest: PatchedProxyProviderRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<ProxyProvider> {
        var localVariablePath = "/providers/proxy/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedProxyProviderRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProxyProvider>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Proxy Provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ProxyProvider
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersProxyRetrieve(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> ProxyProvider {
        return try await providersProxyRetrieveWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /providers/proxy/{id}/
     - ProxyProvider Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Proxy Provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ProxyProvider> 
     */
    open class func providersProxyRetrieveWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<ProxyProvider> {
        var localVariablePath = "/providers/proxy/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProxyProvider>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Proxy Provider. 
     - parameter proxyProviderRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ProxyProvider
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersProxyUpdate(id: Int, proxyProviderRequest: ProxyProviderRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> ProxyProvider {
        return try await providersProxyUpdateWithRequestBuilder(id: id, proxyProviderRequest: proxyProviderRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /providers/proxy/{id}/
     - ProxyProvider Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Proxy Provider. 
     - parameter proxyProviderRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ProxyProvider> 
     */
    open class func providersProxyUpdateWithRequestBuilder(id: Int, proxyProviderRequest: ProxyProviderRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<ProxyProvider> {
        var localVariablePath = "/providers/proxy/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: proxyProviderRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProxyProvider>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Proxy Provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersProxyUsedByList(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await providersProxyUsedByListWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /providers/proxy/{id}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Proxy Provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func providersProxyUsedByListWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/providers/proxy/{id}/used_by/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter rACProviderRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RACProvider
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersRacCreate(rACProviderRequest: RACProviderRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> RACProvider {
        return try await providersRacCreateWithRequestBuilder(rACProviderRequest: rACProviderRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /providers/rac/
     - RACProvider Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter rACProviderRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<RACProvider> 
     */
    open class func providersRacCreateWithRequestBuilder(rACProviderRequest: RACProviderRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<RACProvider> {
        let localVariablePath = "/providers/rac/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: rACProviderRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RACProvider>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this RAC Provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersRacDestroy(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await providersRacDestroyWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /providers/rac/{id}/
     - RACProvider Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this RAC Provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func providersRacDestroyWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/providers/rac/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter applicationIsnull: (query)  (optional)
     - parameter nameIexact: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedRACProviderList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersRacList(applicationIsnull: Bool? = nil, nameIexact: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedRACProviderList {
        return try await providersRacListWithRequestBuilder(applicationIsnull: applicationIsnull, nameIexact: nameIexact, ordering: ordering, page: page, pageSize: pageSize, search: search, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /providers/rac/
     - RACProvider Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter applicationIsnull: (query)  (optional)
     - parameter nameIexact: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedRACProviderList> 
     */
    open class func providersRacListWithRequestBuilder(applicationIsnull: Bool? = nil, nameIexact: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedRACProviderList> {
        let localVariablePath = "/providers/rac/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "application__isnull": (wrappedValue: applicationIsnull?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name__iexact": (wrappedValue: nameIexact?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedRACProviderList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this RAC Provider. 
     - parameter patchedRACProviderRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RACProvider
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersRacPartialUpdate(id: Int, patchedRACProviderRequest: PatchedRACProviderRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> RACProvider {
        return try await providersRacPartialUpdateWithRequestBuilder(id: id, patchedRACProviderRequest: patchedRACProviderRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /providers/rac/{id}/
     - RACProvider Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this RAC Provider. 
     - parameter patchedRACProviderRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<RACProvider> 
     */
    open class func providersRacPartialUpdateWithRequestBuilder(id: Int, patchedRACProviderRequest: PatchedRACProviderRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<RACProvider> {
        var localVariablePath = "/providers/rac/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedRACProviderRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RACProvider>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this RAC Provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RACProvider
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersRacRetrieve(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> RACProvider {
        return try await providersRacRetrieveWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /providers/rac/{id}/
     - RACProvider Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this RAC Provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<RACProvider> 
     */
    open class func providersRacRetrieveWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<RACProvider> {
        var localVariablePath = "/providers/rac/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RACProvider>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this RAC Provider. 
     - parameter rACProviderRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RACProvider
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersRacUpdate(id: Int, rACProviderRequest: RACProviderRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> RACProvider {
        return try await providersRacUpdateWithRequestBuilder(id: id, rACProviderRequest: rACProviderRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /providers/rac/{id}/
     - RACProvider Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this RAC Provider. 
     - parameter rACProviderRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<RACProvider> 
     */
    open class func providersRacUpdateWithRequestBuilder(id: Int, rACProviderRequest: RACProviderRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<RACProvider> {
        var localVariablePath = "/providers/rac/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: rACProviderRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RACProvider>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this RAC Provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersRacUsedByList(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await providersRacUsedByListWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /providers/rac/{id}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this RAC Provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func providersRacUsedByListWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/providers/rac/{id}/used_by/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter radiusProviderRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RadiusProvider
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersRadiusCreate(radiusProviderRequest: RadiusProviderRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> RadiusProvider {
        return try await providersRadiusCreateWithRequestBuilder(radiusProviderRequest: radiusProviderRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /providers/radius/
     - RadiusProvider Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter radiusProviderRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<RadiusProvider> 
     */
    open class func providersRadiusCreateWithRequestBuilder(radiusProviderRequest: RadiusProviderRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<RadiusProvider> {
        let localVariablePath = "/providers/radius/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: radiusProviderRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RadiusProvider>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Radius Provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersRadiusDestroy(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await providersRadiusDestroyWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /providers/radius/{id}/
     - RadiusProvider Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Radius Provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func providersRadiusDestroyWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/providers/radius/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter applicationIsnull: (query)  (optional)
     - parameter authorizationFlowSlugIexact: (query)  (optional)
     - parameter clientNetworksIexact: (query)  (optional)
     - parameter nameIexact: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedRadiusProviderList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersRadiusList(applicationIsnull: Bool? = nil, authorizationFlowSlugIexact: String? = nil, clientNetworksIexact: String? = nil, nameIexact: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedRadiusProviderList {
        return try await providersRadiusListWithRequestBuilder(applicationIsnull: applicationIsnull, authorizationFlowSlugIexact: authorizationFlowSlugIexact, clientNetworksIexact: clientNetworksIexact, nameIexact: nameIexact, ordering: ordering, page: page, pageSize: pageSize, search: search, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /providers/radius/
     - RadiusProvider Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter applicationIsnull: (query)  (optional)
     - parameter authorizationFlowSlugIexact: (query)  (optional)
     - parameter clientNetworksIexact: (query)  (optional)
     - parameter nameIexact: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedRadiusProviderList> 
     */
    open class func providersRadiusListWithRequestBuilder(applicationIsnull: Bool? = nil, authorizationFlowSlugIexact: String? = nil, clientNetworksIexact: String? = nil, nameIexact: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedRadiusProviderList> {
        let localVariablePath = "/providers/radius/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "application__isnull": (wrappedValue: applicationIsnull?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "authorization_flow__slug__iexact": (wrappedValue: authorizationFlowSlugIexact?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "client_networks__iexact": (wrappedValue: clientNetworksIexact?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name__iexact": (wrappedValue: nameIexact?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedRadiusProviderList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Radius Provider. 
     - parameter patchedRadiusProviderRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RadiusProvider
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersRadiusPartialUpdate(id: Int, patchedRadiusProviderRequest: PatchedRadiusProviderRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> RadiusProvider {
        return try await providersRadiusPartialUpdateWithRequestBuilder(id: id, patchedRadiusProviderRequest: patchedRadiusProviderRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /providers/radius/{id}/
     - RadiusProvider Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Radius Provider. 
     - parameter patchedRadiusProviderRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<RadiusProvider> 
     */
    open class func providersRadiusPartialUpdateWithRequestBuilder(id: Int, patchedRadiusProviderRequest: PatchedRadiusProviderRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<RadiusProvider> {
        var localVariablePath = "/providers/radius/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedRadiusProviderRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RadiusProvider>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Radius Provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RadiusProvider
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersRadiusRetrieve(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> RadiusProvider {
        return try await providersRadiusRetrieveWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /providers/radius/{id}/
     - RadiusProvider Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Radius Provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<RadiusProvider> 
     */
    open class func providersRadiusRetrieveWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<RadiusProvider> {
        var localVariablePath = "/providers/radius/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RadiusProvider>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Radius Provider. 
     - parameter radiusProviderRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RadiusProvider
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersRadiusUpdate(id: Int, radiusProviderRequest: RadiusProviderRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> RadiusProvider {
        return try await providersRadiusUpdateWithRequestBuilder(id: id, radiusProviderRequest: radiusProviderRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /providers/radius/{id}/
     - RadiusProvider Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Radius Provider. 
     - parameter radiusProviderRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<RadiusProvider> 
     */
    open class func providersRadiusUpdateWithRequestBuilder(id: Int, radiusProviderRequest: RadiusProviderRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<RadiusProvider> {
        var localVariablePath = "/providers/radius/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: radiusProviderRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RadiusProvider>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Radius Provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersRadiusUsedByList(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await providersRadiusUsedByListWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /providers/radius/{id}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Radius Provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func providersRadiusUsedByListWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/providers/radius/{id}/used_by/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter sAMLProviderRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SAMLProvider
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersSamlCreate(sAMLProviderRequest: SAMLProviderRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> SAMLProvider {
        return try await providersSamlCreateWithRequestBuilder(sAMLProviderRequest: sAMLProviderRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /providers/saml/
     - SAMLProvider Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter sAMLProviderRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SAMLProvider> 
     */
    open class func providersSamlCreateWithRequestBuilder(sAMLProviderRequest: SAMLProviderRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<SAMLProvider> {
        let localVariablePath = "/providers/saml/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sAMLProviderRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SAMLProvider>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this SAML Provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersSamlDestroy(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await providersSamlDestroyWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /providers/saml/{id}/
     - SAMLProvider Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this SAML Provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func providersSamlDestroyWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/providers/saml/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter name: (form)  
     - parameter authorizationFlow: (form)  
     - parameter invalidationFlow: (form)  
     - parameter file: (form)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersSamlImportMetadataCreate(name: String, authorizationFlow: UUID, invalidationFlow: UUID, file: URL, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await providersSamlImportMetadataCreateWithRequestBuilder(name: name, authorizationFlow: authorizationFlow, invalidationFlow: invalidationFlow, file: file, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /providers/saml/import_metadata/
     - Create provider from SAML Metadata
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter name: (form)  
     - parameter authorizationFlow: (form)  
     - parameter invalidationFlow: (form)  
     - parameter file: (form)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func providersSamlImportMetadataCreateWithRequestBuilder(name: String, authorizationFlow: UUID, invalidationFlow: UUID, file: URL, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        let localVariablePath = "/providers/saml/import_metadata/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableFormParams: [String: (any Sendable)?] = [
            "name": name.asParameter(codableHelper: apiConfiguration.codableHelper),
            "authorization_flow": authorizationFlow.asParameter(codableHelper: apiConfiguration.codableHelper),
            "invalidation_flow": invalidationFlow.asParameter(codableHelper: apiConfiguration.codableHelper),
            "file": file.asParameter(codableHelper: apiConfiguration.codableHelper),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "multipart/form-data",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter digestAlgorithm
     */
    public enum DigestAlgorithm_providersSamlList: String, Sendable, CaseIterable {
        case httpSlashSlashWwwPeriodW3PeriodOrgSlash2000Slash09SlashXmldsigHashSha1 = "http://www.w3.org/2000/09/xmldsig#sha1"
        case httpSlashSlashWwwPeriodW3PeriodOrgSlash2001Slash04SlashXmldsigMoreHashSha384 = "http://www.w3.org/2001/04/xmldsig-more#sha384"
        case httpSlashSlashWwwPeriodW3PeriodOrgSlash2001Slash04SlashXmlencHashSha256 = "http://www.w3.org/2001/04/xmlenc#sha256"
        case httpSlashSlashWwwPeriodW3PeriodOrgSlash2001Slash04SlashXmlencHashSha512 = "http://www.w3.org/2001/04/xmlenc#sha512"
    }

    /**
     * enum for parameter signatureAlgorithm
     */
    public enum SignatureAlgorithm_providersSamlList: String, Sendable, CaseIterable {
        case httpSlashSlashWwwPeriodW3PeriodOrgSlash2000Slash09SlashXmldsigHashDsaSha1 = "http://www.w3.org/2000/09/xmldsig#dsa-sha1"
        case httpSlashSlashWwwPeriodW3PeriodOrgSlash2000Slash09SlashXmldsigHashRsaSha1 = "http://www.w3.org/2000/09/xmldsig#rsa-sha1"
        case httpSlashSlashWwwPeriodW3PeriodOrgSlash2001Slash04SlashXmldsigMoreHashEcdsaSha1 = "http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha1"
        case httpSlashSlashWwwPeriodW3PeriodOrgSlash2001Slash04SlashXmldsigMoreHashEcdsaSha256 = "http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha256"
        case httpSlashSlashWwwPeriodW3PeriodOrgSlash2001Slash04SlashXmldsigMoreHashEcdsaSha384 = "http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha384"
        case httpSlashSlashWwwPeriodW3PeriodOrgSlash2001Slash04SlashXmldsigMoreHashEcdsaSha512 = "http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha512"
        case httpSlashSlashWwwPeriodW3PeriodOrgSlash2001Slash04SlashXmldsigMoreHashRsaSha256 = "http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"
        case httpSlashSlashWwwPeriodW3PeriodOrgSlash2001Slash04SlashXmldsigMoreHashRsaSha384 = "http://www.w3.org/2001/04/xmldsig-more#rsa-sha384"
        case httpSlashSlashWwwPeriodW3PeriodOrgSlash2001Slash04SlashXmldsigMoreHashRsaSha512 = "http://www.w3.org/2001/04/xmldsig-more#rsa-sha512"
    }

    /**
     * enum for parameter spBinding
     */
    public enum SpBinding_providersSamlList: String, Sendable, CaseIterable {
        case post = "post"
        case redirect = "redirect"
    }

    /**

     - parameter acsUrl: (query)  (optional)
     - parameter assertionValidNotBefore: (query)  (optional)
     - parameter assertionValidNotOnOrAfter: (query)  (optional)
     - parameter audience: (query)  (optional)
     - parameter authenticationFlow: (query)  (optional)
     - parameter authnContextClassRefMapping: (query)  (optional)
     - parameter authorizationFlow: (query)  (optional)
     - parameter backchannelApplication: (query)  (optional)
     - parameter defaultRelayState: (query)  (optional)
     - parameter digestAlgorithm: (query)  (optional)
     - parameter encryptionKp: (query)  (optional)
     - parameter invalidationFlow: (query)  (optional)
     - parameter isBackchannel: (query)  (optional)
     - parameter issuer: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter nameIdMapping: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter propertyMappings: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter sessionValidNotOnOrAfter: (query)  (optional)
     - parameter signAssertion: (query)  (optional)
     - parameter signResponse: (query)  (optional)
     - parameter signatureAlgorithm: (query)  (optional)
     - parameter signingKp: (query)  (optional)
     - parameter spBinding: (query) This determines how authentik sends the response back to the Service Provider.   (optional)
     - parameter verificationKp: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedSAMLProviderList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersSamlList(acsUrl: String? = nil, assertionValidNotBefore: String? = nil, assertionValidNotOnOrAfter: String? = nil, audience: String? = nil, authenticationFlow: UUID? = nil, authnContextClassRefMapping: UUID? = nil, authorizationFlow: UUID? = nil, backchannelApplication: UUID? = nil, defaultRelayState: String? = nil, digestAlgorithm: DigestAlgorithm_providersSamlList? = nil, encryptionKp: UUID? = nil, invalidationFlow: UUID? = nil, isBackchannel: Bool? = nil, issuer: String? = nil, name: String? = nil, nameIdMapping: UUID? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, propertyMappings: [UUID]? = nil, search: String? = nil, sessionValidNotOnOrAfter: String? = nil, signAssertion: Bool? = nil, signResponse: Bool? = nil, signatureAlgorithm: SignatureAlgorithm_providersSamlList? = nil, signingKp: UUID? = nil, spBinding: SpBinding_providersSamlList? = nil, verificationKp: UUID? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedSAMLProviderList {
        return try await providersSamlListWithRequestBuilder(acsUrl: acsUrl, assertionValidNotBefore: assertionValidNotBefore, assertionValidNotOnOrAfter: assertionValidNotOnOrAfter, audience: audience, authenticationFlow: authenticationFlow, authnContextClassRefMapping: authnContextClassRefMapping, authorizationFlow: authorizationFlow, backchannelApplication: backchannelApplication, defaultRelayState: defaultRelayState, digestAlgorithm: digestAlgorithm, encryptionKp: encryptionKp, invalidationFlow: invalidationFlow, isBackchannel: isBackchannel, issuer: issuer, name: name, nameIdMapping: nameIdMapping, ordering: ordering, page: page, pageSize: pageSize, propertyMappings: propertyMappings, search: search, sessionValidNotOnOrAfter: sessionValidNotOnOrAfter, signAssertion: signAssertion, signResponse: signResponse, signatureAlgorithm: signatureAlgorithm, signingKp: signingKp, spBinding: spBinding, verificationKp: verificationKp, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /providers/saml/
     - SAMLProvider Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter acsUrl: (query)  (optional)
     - parameter assertionValidNotBefore: (query)  (optional)
     - parameter assertionValidNotOnOrAfter: (query)  (optional)
     - parameter audience: (query)  (optional)
     - parameter authenticationFlow: (query)  (optional)
     - parameter authnContextClassRefMapping: (query)  (optional)
     - parameter authorizationFlow: (query)  (optional)
     - parameter backchannelApplication: (query)  (optional)
     - parameter defaultRelayState: (query)  (optional)
     - parameter digestAlgorithm: (query)  (optional)
     - parameter encryptionKp: (query)  (optional)
     - parameter invalidationFlow: (query)  (optional)
     - parameter isBackchannel: (query)  (optional)
     - parameter issuer: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter nameIdMapping: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter propertyMappings: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter sessionValidNotOnOrAfter: (query)  (optional)
     - parameter signAssertion: (query)  (optional)
     - parameter signResponse: (query)  (optional)
     - parameter signatureAlgorithm: (query)  (optional)
     - parameter signingKp: (query)  (optional)
     - parameter spBinding: (query) This determines how authentik sends the response back to the Service Provider.   (optional)
     - parameter verificationKp: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedSAMLProviderList> 
     */
    open class func providersSamlListWithRequestBuilder(acsUrl: String? = nil, assertionValidNotBefore: String? = nil, assertionValidNotOnOrAfter: String? = nil, audience: String? = nil, authenticationFlow: UUID? = nil, authnContextClassRefMapping: UUID? = nil, authorizationFlow: UUID? = nil, backchannelApplication: UUID? = nil, defaultRelayState: String? = nil, digestAlgorithm: DigestAlgorithm_providersSamlList? = nil, encryptionKp: UUID? = nil, invalidationFlow: UUID? = nil, isBackchannel: Bool? = nil, issuer: String? = nil, name: String? = nil, nameIdMapping: UUID? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, propertyMappings: [UUID]? = nil, search: String? = nil, sessionValidNotOnOrAfter: String? = nil, signAssertion: Bool? = nil, signResponse: Bool? = nil, signatureAlgorithm: SignatureAlgorithm_providersSamlList? = nil, signingKp: UUID? = nil, spBinding: SpBinding_providersSamlList? = nil, verificationKp: UUID? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedSAMLProviderList> {
        let localVariablePath = "/providers/saml/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "acs_url": (wrappedValue: acsUrl?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "assertion_valid_not_before": (wrappedValue: assertionValidNotBefore?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "assertion_valid_not_on_or_after": (wrappedValue: assertionValidNotOnOrAfter?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "audience": (wrappedValue: audience?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "authentication_flow": (wrappedValue: authenticationFlow?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "authn_context_class_ref_mapping": (wrappedValue: authnContextClassRefMapping?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "authorization_flow": (wrappedValue: authorizationFlow?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "backchannel_application": (wrappedValue: backchannelApplication?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "default_relay_state": (wrappedValue: defaultRelayState?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "digest_algorithm": (wrappedValue: digestAlgorithm?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "encryption_kp": (wrappedValue: encryptionKp?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "invalidation_flow": (wrappedValue: invalidationFlow?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "is_backchannel": (wrappedValue: isBackchannel?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "issuer": (wrappedValue: issuer?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name_id_mapping": (wrappedValue: nameIdMapping?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "property_mappings": (wrappedValue: propertyMappings?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "session_valid_not_on_or_after": (wrappedValue: sessionValidNotOnOrAfter?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "sign_assertion": (wrappedValue: signAssertion?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "sign_response": (wrappedValue: signResponse?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "signature_algorithm": (wrappedValue: signatureAlgorithm?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "signing_kp": (wrappedValue: signingKp?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "sp_binding": (wrappedValue: spBinding?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "verification_kp": (wrappedValue: verificationKp?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedSAMLProviderList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter forceBinding
     */
    public enum ForceBinding_providersSamlMetadataRetrieve: String, Sendable, CaseIterable {
        case urnOasisNamesTcSaml2Period0BindingsHttpPost = "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST"
        case urnOasisNamesTcSaml2Period0BindingsHttpRedirect = "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect"
    }

    /**

     - parameter id: (path) A unique integer value identifying this SAML Provider. 
     - parameter download: (query)  (optional)
     - parameter forceBinding: (query) Optionally force the metadata to only include one binding. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SAMLMetadata
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersSamlMetadataRetrieve(id: Int, download: Bool? = nil, forceBinding: ForceBinding_providersSamlMetadataRetrieve? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> SAMLMetadata {
        return try await providersSamlMetadataRetrieveWithRequestBuilder(id: id, download: download, forceBinding: forceBinding, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /providers/saml/{id}/metadata/
     - Return metadata as XML string
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this SAML Provider. 
     - parameter download: (query)  (optional)
     - parameter forceBinding: (query) Optionally force the metadata to only include one binding. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SAMLMetadata> 
     */
    open class func providersSamlMetadataRetrieveWithRequestBuilder(id: Int, download: Bool? = nil, forceBinding: ForceBinding_providersSamlMetadataRetrieve? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<SAMLMetadata> {
        var localVariablePath = "/providers/saml/{id}/metadata/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "download": (wrappedValue: download?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "force_binding": (wrappedValue: forceBinding?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SAMLMetadata>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this SAML Provider. 
     - parameter patchedSAMLProviderRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SAMLProvider
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersSamlPartialUpdate(id: Int, patchedSAMLProviderRequest: PatchedSAMLProviderRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> SAMLProvider {
        return try await providersSamlPartialUpdateWithRequestBuilder(id: id, patchedSAMLProviderRequest: patchedSAMLProviderRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /providers/saml/{id}/
     - SAMLProvider Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this SAML Provider. 
     - parameter patchedSAMLProviderRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SAMLProvider> 
     */
    open class func providersSamlPartialUpdateWithRequestBuilder(id: Int, patchedSAMLProviderRequest: PatchedSAMLProviderRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<SAMLProvider> {
        var localVariablePath = "/providers/saml/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedSAMLProviderRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SAMLProvider>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this SAML Provider. 
     - parameter forUser: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PropertyMappingPreview
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersSamlPreviewUserRetrieve(id: Int, forUser: Int? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PropertyMappingPreview {
        return try await providersSamlPreviewUserRetrieveWithRequestBuilder(id: id, forUser: forUser, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /providers/saml/{id}/preview_user/
     - Preview user data for provider
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this SAML Provider. 
     - parameter forUser: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PropertyMappingPreview> 
     */
    open class func providersSamlPreviewUserRetrieveWithRequestBuilder(id: Int, forUser: Int? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PropertyMappingPreview> {
        var localVariablePath = "/providers/saml/{id}/preview_user/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "for_user": (wrappedValue: forUser?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PropertyMappingPreview>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this SAML Provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SAMLProvider
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersSamlRetrieve(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> SAMLProvider {
        return try await providersSamlRetrieveWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /providers/saml/{id}/
     - SAMLProvider Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this SAML Provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SAMLProvider> 
     */
    open class func providersSamlRetrieveWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<SAMLProvider> {
        var localVariablePath = "/providers/saml/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SAMLProvider>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this SAML Provider. 
     - parameter sAMLProviderRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SAMLProvider
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersSamlUpdate(id: Int, sAMLProviderRequest: SAMLProviderRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> SAMLProvider {
        return try await providersSamlUpdateWithRequestBuilder(id: id, sAMLProviderRequest: sAMLProviderRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /providers/saml/{id}/
     - SAMLProvider Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this SAML Provider. 
     - parameter sAMLProviderRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SAMLProvider> 
     */
    open class func providersSamlUpdateWithRequestBuilder(id: Int, sAMLProviderRequest: SAMLProviderRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<SAMLProvider> {
        var localVariablePath = "/providers/saml/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sAMLProviderRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SAMLProvider>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this SAML Provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersSamlUsedByList(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await providersSamlUsedByListWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /providers/saml/{id}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this SAML Provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func providersSamlUsedByListWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/providers/saml/{id}/used_by/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter sCIMProviderRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SCIMProvider
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersScimCreate(sCIMProviderRequest: SCIMProviderRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> SCIMProvider {
        return try await providersScimCreateWithRequestBuilder(sCIMProviderRequest: sCIMProviderRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /providers/scim/
     - SCIMProvider Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter sCIMProviderRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SCIMProvider> 
     */
    open class func providersScimCreateWithRequestBuilder(sCIMProviderRequest: SCIMProviderRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<SCIMProvider> {
        let localVariablePath = "/providers/scim/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sCIMProviderRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SCIMProvider>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this SCIM Provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersScimDestroy(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await providersScimDestroyWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /providers/scim/{id}/
     - SCIMProvider Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this SCIM Provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func providersScimDestroyWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/providers/scim/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter sCIMProviderGroupRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SCIMProviderGroup
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersScimGroupsCreate(sCIMProviderGroupRequest: SCIMProviderGroupRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> SCIMProviderGroup {
        return try await providersScimGroupsCreateWithRequestBuilder(sCIMProviderGroupRequest: sCIMProviderGroupRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /providers/scim_groups/
     - SCIMProviderGroup Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter sCIMProviderGroupRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SCIMProviderGroup> 
     */
    open class func providersScimGroupsCreateWithRequestBuilder(sCIMProviderGroupRequest: SCIMProviderGroupRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<SCIMProviderGroup> {
        let localVariablePath = "/providers/scim_groups/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sCIMProviderGroupRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SCIMProviderGroup>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A UUID string identifying this scim provider group. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersScimGroupsDestroy(id: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await providersScimGroupsDestroyWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /providers/scim_groups/{id}/
     - SCIMProviderGroup Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A UUID string identifying this scim provider group. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func providersScimGroupsDestroyWithRequestBuilder(id: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/providers/scim_groups/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter groupGroupUuid: (query)  (optional)
     - parameter groupName: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter providerId: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedSCIMProviderGroupList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersScimGroupsList(groupGroupUuid: UUID? = nil, groupName: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, providerId: Int? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedSCIMProviderGroupList {
        return try await providersScimGroupsListWithRequestBuilder(groupGroupUuid: groupGroupUuid, groupName: groupName, ordering: ordering, page: page, pageSize: pageSize, providerId: providerId, search: search, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /providers/scim_groups/
     - SCIMProviderGroup Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter groupGroupUuid: (query)  (optional)
     - parameter groupName: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter providerId: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedSCIMProviderGroupList> 
     */
    open class func providersScimGroupsListWithRequestBuilder(groupGroupUuid: UUID? = nil, groupName: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, providerId: Int? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedSCIMProviderGroupList> {
        let localVariablePath = "/providers/scim_groups/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "group__group_uuid": (wrappedValue: groupGroupUuid?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "group__name": (wrappedValue: groupName?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "provider__id": (wrappedValue: providerId?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedSCIMProviderGroupList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A UUID string identifying this scim provider group. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SCIMProviderGroup
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersScimGroupsRetrieve(id: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> SCIMProviderGroup {
        return try await providersScimGroupsRetrieveWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /providers/scim_groups/{id}/
     - SCIMProviderGroup Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A UUID string identifying this scim provider group. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SCIMProviderGroup> 
     */
    open class func providersScimGroupsRetrieveWithRequestBuilder(id: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<SCIMProviderGroup> {
        var localVariablePath = "/providers/scim_groups/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SCIMProviderGroup>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A UUID string identifying this scim provider group. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersScimGroupsUsedByList(id: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await providersScimGroupsUsedByListWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /providers/scim_groups/{id}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A UUID string identifying this scim provider group. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func providersScimGroupsUsedByListWithRequestBuilder(id: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/providers/scim_groups/{id}/used_by/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter excludeUsersServiceAccount: (query)  (optional)
     - parameter filterGroup: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter url: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedSCIMProviderList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersScimList(excludeUsersServiceAccount: Bool? = nil, filterGroup: UUID? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, url: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedSCIMProviderList {
        return try await providersScimListWithRequestBuilder(excludeUsersServiceAccount: excludeUsersServiceAccount, filterGroup: filterGroup, name: name, ordering: ordering, page: page, pageSize: pageSize, search: search, url: url, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /providers/scim/
     - SCIMProvider Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter excludeUsersServiceAccount: (query)  (optional)
     - parameter filterGroup: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter url: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedSCIMProviderList> 
     */
    open class func providersScimListWithRequestBuilder(excludeUsersServiceAccount: Bool? = nil, filterGroup: UUID? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, url: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedSCIMProviderList> {
        let localVariablePath = "/providers/scim/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "exclude_users_service_account": (wrappedValue: excludeUsersServiceAccount?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "filter_group": (wrappedValue: filterGroup?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "url": (wrappedValue: url?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedSCIMProviderList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this SCIM Provider. 
     - parameter patchedSCIMProviderRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SCIMProvider
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersScimPartialUpdate(id: Int, patchedSCIMProviderRequest: PatchedSCIMProviderRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> SCIMProvider {
        return try await providersScimPartialUpdateWithRequestBuilder(id: id, patchedSCIMProviderRequest: patchedSCIMProviderRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /providers/scim/{id}/
     - SCIMProvider Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this SCIM Provider. 
     - parameter patchedSCIMProviderRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SCIMProvider> 
     */
    open class func providersScimPartialUpdateWithRequestBuilder(id: Int, patchedSCIMProviderRequest: PatchedSCIMProviderRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<SCIMProvider> {
        var localVariablePath = "/providers/scim/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedSCIMProviderRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SCIMProvider>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this SCIM Provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SCIMProvider
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersScimRetrieve(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> SCIMProvider {
        return try await providersScimRetrieveWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /providers/scim/{id}/
     - SCIMProvider Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this SCIM Provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SCIMProvider> 
     */
    open class func providersScimRetrieveWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<SCIMProvider> {
        var localVariablePath = "/providers/scim/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SCIMProvider>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this SCIM Provider. 
     - parameter syncObjectRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SyncObjectResult
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersScimSyncObjectCreate(id: Int, syncObjectRequest: SyncObjectRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> SyncObjectResult {
        return try await providersScimSyncObjectCreateWithRequestBuilder(id: id, syncObjectRequest: syncObjectRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /providers/scim/{id}/sync/object/
     - Sync/Re-sync a single user/group object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this SCIM Provider. 
     - parameter syncObjectRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SyncObjectResult> 
     */
    open class func providersScimSyncObjectCreateWithRequestBuilder(id: Int, syncObjectRequest: SyncObjectRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<SyncObjectResult> {
        var localVariablePath = "/providers/scim/{id}/sync/object/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: syncObjectRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SyncObjectResult>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this SCIM Provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SyncStatus
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersScimSyncStatusRetrieve(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> SyncStatus {
        return try await providersScimSyncStatusRetrieveWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /providers/scim/{id}/sync/status/
     - Get provider's sync status
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this SCIM Provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SyncStatus> 
     */
    open class func providersScimSyncStatusRetrieveWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<SyncStatus> {
        var localVariablePath = "/providers/scim/{id}/sync/status/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SyncStatus>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this SCIM Provider. 
     - parameter sCIMProviderRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SCIMProvider
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersScimUpdate(id: Int, sCIMProviderRequest: SCIMProviderRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> SCIMProvider {
        return try await providersScimUpdateWithRequestBuilder(id: id, sCIMProviderRequest: sCIMProviderRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /providers/scim/{id}/
     - SCIMProvider Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this SCIM Provider. 
     - parameter sCIMProviderRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SCIMProvider> 
     */
    open class func providersScimUpdateWithRequestBuilder(id: Int, sCIMProviderRequest: SCIMProviderRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<SCIMProvider> {
        var localVariablePath = "/providers/scim/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sCIMProviderRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SCIMProvider>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this SCIM Provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersScimUsedByList(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await providersScimUsedByListWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /providers/scim/{id}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this SCIM Provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func providersScimUsedByListWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/providers/scim/{id}/used_by/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter sCIMProviderUserRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SCIMProviderUser
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersScimUsersCreate(sCIMProviderUserRequest: SCIMProviderUserRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> SCIMProviderUser {
        return try await providersScimUsersCreateWithRequestBuilder(sCIMProviderUserRequest: sCIMProviderUserRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /providers/scim_users/
     - SCIMProviderUser Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter sCIMProviderUserRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SCIMProviderUser> 
     */
    open class func providersScimUsersCreateWithRequestBuilder(sCIMProviderUserRequest: SCIMProviderUserRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<SCIMProviderUser> {
        let localVariablePath = "/providers/scim_users/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sCIMProviderUserRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SCIMProviderUser>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A UUID string identifying this scim provider user. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersScimUsersDestroy(id: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await providersScimUsersDestroyWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /providers/scim_users/{id}/
     - SCIMProviderUser Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A UUID string identifying this scim provider user. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func providersScimUsersDestroyWithRequestBuilder(id: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/providers/scim_users/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter providerId: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter userId: (query)  (optional)
     - parameter userUsername: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedSCIMProviderUserList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersScimUsersList(ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, providerId: Int? = nil, search: String? = nil, userId: Int? = nil, userUsername: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedSCIMProviderUserList {
        return try await providersScimUsersListWithRequestBuilder(ordering: ordering, page: page, pageSize: pageSize, providerId: providerId, search: search, userId: userId, userUsername: userUsername, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /providers/scim_users/
     - SCIMProviderUser Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter providerId: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter userId: (query)  (optional)
     - parameter userUsername: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedSCIMProviderUserList> 
     */
    open class func providersScimUsersListWithRequestBuilder(ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, providerId: Int? = nil, search: String? = nil, userId: Int? = nil, userUsername: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedSCIMProviderUserList> {
        let localVariablePath = "/providers/scim_users/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "provider__id": (wrappedValue: providerId?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "user__id": (wrappedValue: userId?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "user__username": (wrappedValue: userUsername?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedSCIMProviderUserList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A UUID string identifying this scim provider user. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SCIMProviderUser
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersScimUsersRetrieve(id: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> SCIMProviderUser {
        return try await providersScimUsersRetrieveWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /providers/scim_users/{id}/
     - SCIMProviderUser Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A UUID string identifying this scim provider user. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SCIMProviderUser> 
     */
    open class func providersScimUsersRetrieveWithRequestBuilder(id: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<SCIMProviderUser> {
        var localVariablePath = "/providers/scim_users/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SCIMProviderUser>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A UUID string identifying this scim provider user. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersScimUsersUsedByList(id: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await providersScimUsersUsedByListWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /providers/scim_users/{id}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A UUID string identifying this scim provider user. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func providersScimUsersUsedByListWithRequestBuilder(id: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/providers/scim_users/{id}/used_by/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter sSFProviderRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SSFProvider
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersSsfCreate(sSFProviderRequest: SSFProviderRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> SSFProvider {
        return try await providersSsfCreateWithRequestBuilder(sSFProviderRequest: sSFProviderRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /providers/ssf/
     - SSFProvider Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter sSFProviderRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SSFProvider> 
     */
    open class func providersSsfCreateWithRequestBuilder(sSFProviderRequest: SSFProviderRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<SSFProvider> {
        let localVariablePath = "/providers/ssf/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sSFProviderRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SSFProvider>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Shared Signals Framework Provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersSsfDestroy(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await providersSsfDestroyWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /providers/ssf/{id}/
     - SSFProvider Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Shared Signals Framework Provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func providersSsfDestroyWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/providers/ssf/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter applicationIsnull: (query)  (optional)
     - parameter nameIexact: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedSSFProviderList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersSsfList(applicationIsnull: Bool? = nil, nameIexact: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedSSFProviderList {
        return try await providersSsfListWithRequestBuilder(applicationIsnull: applicationIsnull, nameIexact: nameIexact, ordering: ordering, page: page, pageSize: pageSize, search: search, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /providers/ssf/
     - SSFProvider Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter applicationIsnull: (query)  (optional)
     - parameter nameIexact: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedSSFProviderList> 
     */
    open class func providersSsfListWithRequestBuilder(applicationIsnull: Bool? = nil, nameIexact: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedSSFProviderList> {
        let localVariablePath = "/providers/ssf/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "application__isnull": (wrappedValue: applicationIsnull?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name__iexact": (wrappedValue: nameIexact?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedSSFProviderList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Shared Signals Framework Provider. 
     - parameter patchedSSFProviderRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SSFProvider
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersSsfPartialUpdate(id: Int, patchedSSFProviderRequest: PatchedSSFProviderRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> SSFProvider {
        return try await providersSsfPartialUpdateWithRequestBuilder(id: id, patchedSSFProviderRequest: patchedSSFProviderRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /providers/ssf/{id}/
     - SSFProvider Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Shared Signals Framework Provider. 
     - parameter patchedSSFProviderRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SSFProvider> 
     */
    open class func providersSsfPartialUpdateWithRequestBuilder(id: Int, patchedSSFProviderRequest: PatchedSSFProviderRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<SSFProvider> {
        var localVariablePath = "/providers/ssf/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedSSFProviderRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SSFProvider>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Shared Signals Framework Provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SSFProvider
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersSsfRetrieve(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> SSFProvider {
        return try await providersSsfRetrieveWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /providers/ssf/{id}/
     - SSFProvider Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Shared Signals Framework Provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SSFProvider> 
     */
    open class func providersSsfRetrieveWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<SSFProvider> {
        var localVariablePath = "/providers/ssf/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SSFProvider>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Shared Signals Framework Provider. 
     - parameter sSFProviderRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SSFProvider
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersSsfUpdate(id: Int, sSFProviderRequest: SSFProviderRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> SSFProvider {
        return try await providersSsfUpdateWithRequestBuilder(id: id, sSFProviderRequest: sSFProviderRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /providers/ssf/{id}/
     - SSFProvider Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Shared Signals Framework Provider. 
     - parameter sSFProviderRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SSFProvider> 
     */
    open class func providersSsfUpdateWithRequestBuilder(id: Int, sSFProviderRequest: SSFProviderRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<SSFProvider> {
        var localVariablePath = "/providers/ssf/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sSFProviderRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SSFProvider>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Shared Signals Framework Provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func providersSsfUsedByList(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await providersSsfUsedByListWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /providers/ssf/{id}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Shared Signals Framework Provider. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func providersSsfUsedByListWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/providers/ssf/{id}/used_by/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }
}
