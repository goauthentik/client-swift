//
// CoreAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class CoreAPI {

    /**

     - parameter applicationEntitlementRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ApplicationEntitlement
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func coreApplicationEntitlementsCreate(applicationEntitlementRequest: ApplicationEntitlementRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> ApplicationEntitlement {
        return try await coreApplicationEntitlementsCreateWithRequestBuilder(applicationEntitlementRequest: applicationEntitlementRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /core/application_entitlements/
     - ApplicationEntitlement Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter applicationEntitlementRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ApplicationEntitlement> 
     */
    open class func coreApplicationEntitlementsCreateWithRequestBuilder(applicationEntitlementRequest: ApplicationEntitlementRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<ApplicationEntitlement> {
        let localVariablePath = "/core/application_entitlements/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: applicationEntitlementRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ApplicationEntitlement>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pbmUuid: (path) A UUID string identifying this Application Entitlement. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func coreApplicationEntitlementsDestroy(pbmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await coreApplicationEntitlementsDestroyWithRequestBuilder(pbmUuid: pbmUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /core/application_entitlements/{pbm_uuid}/
     - ApplicationEntitlement Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pbmUuid: (path) A UUID string identifying this Application Entitlement. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func coreApplicationEntitlementsDestroyWithRequestBuilder(pbmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/core/application_entitlements/{pbm_uuid}/"
        let pbmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pbmUuid))"
        let pbmUuidPostEscape = pbmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pbm_uuid}", with: pbmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter app: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter pbmUuid: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedApplicationEntitlementList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func coreApplicationEntitlementsList(app: UUID? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, pbmUuid: UUID? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedApplicationEntitlementList {
        return try await coreApplicationEntitlementsListWithRequestBuilder(app: app, name: name, ordering: ordering, page: page, pageSize: pageSize, pbmUuid: pbmUuid, search: search, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /core/application_entitlements/
     - ApplicationEntitlement Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter app: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter pbmUuid: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedApplicationEntitlementList> 
     */
    open class func coreApplicationEntitlementsListWithRequestBuilder(app: UUID? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, pbmUuid: UUID? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedApplicationEntitlementList> {
        let localVariablePath = "/core/application_entitlements/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "app": (wrappedValue: app?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "pbm_uuid": (wrappedValue: pbmUuid?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedApplicationEntitlementList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pbmUuid: (path) A UUID string identifying this Application Entitlement. 
     - parameter patchedApplicationEntitlementRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ApplicationEntitlement
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func coreApplicationEntitlementsPartialUpdate(pbmUuid: UUID, patchedApplicationEntitlementRequest: PatchedApplicationEntitlementRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> ApplicationEntitlement {
        return try await coreApplicationEntitlementsPartialUpdateWithRequestBuilder(pbmUuid: pbmUuid, patchedApplicationEntitlementRequest: patchedApplicationEntitlementRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /core/application_entitlements/{pbm_uuid}/
     - ApplicationEntitlement Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pbmUuid: (path) A UUID string identifying this Application Entitlement. 
     - parameter patchedApplicationEntitlementRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ApplicationEntitlement> 
     */
    open class func coreApplicationEntitlementsPartialUpdateWithRequestBuilder(pbmUuid: UUID, patchedApplicationEntitlementRequest: PatchedApplicationEntitlementRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<ApplicationEntitlement> {
        var localVariablePath = "/core/application_entitlements/{pbm_uuid}/"
        let pbmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pbmUuid))"
        let pbmUuidPostEscape = pbmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pbm_uuid}", with: pbmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedApplicationEntitlementRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ApplicationEntitlement>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pbmUuid: (path) A UUID string identifying this Application Entitlement. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ApplicationEntitlement
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func coreApplicationEntitlementsRetrieve(pbmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> ApplicationEntitlement {
        return try await coreApplicationEntitlementsRetrieveWithRequestBuilder(pbmUuid: pbmUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /core/application_entitlements/{pbm_uuid}/
     - ApplicationEntitlement Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pbmUuid: (path) A UUID string identifying this Application Entitlement. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ApplicationEntitlement> 
     */
    open class func coreApplicationEntitlementsRetrieveWithRequestBuilder(pbmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<ApplicationEntitlement> {
        var localVariablePath = "/core/application_entitlements/{pbm_uuid}/"
        let pbmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pbmUuid))"
        let pbmUuidPostEscape = pbmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pbm_uuid}", with: pbmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ApplicationEntitlement>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pbmUuid: (path) A UUID string identifying this Application Entitlement. 
     - parameter applicationEntitlementRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ApplicationEntitlement
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func coreApplicationEntitlementsUpdate(pbmUuid: UUID, applicationEntitlementRequest: ApplicationEntitlementRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> ApplicationEntitlement {
        return try await coreApplicationEntitlementsUpdateWithRequestBuilder(pbmUuid: pbmUuid, applicationEntitlementRequest: applicationEntitlementRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /core/application_entitlements/{pbm_uuid}/
     - ApplicationEntitlement Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pbmUuid: (path) A UUID string identifying this Application Entitlement. 
     - parameter applicationEntitlementRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ApplicationEntitlement> 
     */
    open class func coreApplicationEntitlementsUpdateWithRequestBuilder(pbmUuid: UUID, applicationEntitlementRequest: ApplicationEntitlementRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<ApplicationEntitlement> {
        var localVariablePath = "/core/application_entitlements/{pbm_uuid}/"
        let pbmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pbmUuid))"
        let pbmUuidPostEscape = pbmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pbm_uuid}", with: pbmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: applicationEntitlementRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ApplicationEntitlement>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pbmUuid: (path) A UUID string identifying this Application Entitlement. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func coreApplicationEntitlementsUsedByList(pbmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await coreApplicationEntitlementsUsedByListWithRequestBuilder(pbmUuid: pbmUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /core/application_entitlements/{pbm_uuid}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pbmUuid: (path) A UUID string identifying this Application Entitlement. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func coreApplicationEntitlementsUsedByListWithRequestBuilder(pbmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/core/application_entitlements/{pbm_uuid}/used_by/"
        let pbmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pbmUuid))"
        let pbmUuidPostEscape = pbmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pbm_uuid}", with: pbmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter slug: (path)  
     - parameter forUser: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PolicyTestResult
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func coreApplicationsCheckAccessRetrieve(slug: String, forUser: Int? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PolicyTestResult {
        return try await coreApplicationsCheckAccessRetrieveWithRequestBuilder(slug: slug, forUser: forUser, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /core/applications/{slug}/check_access/
     - Check access to a single application by slug
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter slug: (path)  
     - parameter forUser: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PolicyTestResult> 
     */
    open class func coreApplicationsCheckAccessRetrieveWithRequestBuilder(slug: String, forUser: Int? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PolicyTestResult> {
        var localVariablePath = "/core/applications/{slug}/check_access/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "for_user": (wrappedValue: forUser?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PolicyTestResult>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter applicationRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Application
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func coreApplicationsCreate(applicationRequest: ApplicationRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> Application {
        return try await coreApplicationsCreateWithRequestBuilder(applicationRequest: applicationRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /core/applications/
     - Application Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter applicationRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Application> 
     */
    open class func coreApplicationsCreateWithRequestBuilder(applicationRequest: ApplicationRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Application> {
        let localVariablePath = "/core/applications/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: applicationRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Application>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter slug: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func coreApplicationsDestroy(slug: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await coreApplicationsDestroyWithRequestBuilder(slug: slug, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /core/applications/{slug}/
     - Application Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter slug: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func coreApplicationsDestroyWithRequestBuilder(slug: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/core/applications/{slug}/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter forUser: (query)  (optional)
     - parameter group: (query)  (optional)
     - parameter metaDescription: (query)  (optional)
     - parameter metaLaunchUrl: (query)  (optional)
     - parameter metaPublisher: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter onlyWithLaunchUrl: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter slug: (query)  (optional)
     - parameter superuserFullList: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedApplicationList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func coreApplicationsList(forUser: Int? = nil, group: String? = nil, metaDescription: String? = nil, metaLaunchUrl: String? = nil, metaPublisher: String? = nil, name: String? = nil, onlyWithLaunchUrl: Bool? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, slug: String? = nil, superuserFullList: Bool? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedApplicationList {
        return try await coreApplicationsListWithRequestBuilder(forUser: forUser, group: group, metaDescription: metaDescription, metaLaunchUrl: metaLaunchUrl, metaPublisher: metaPublisher, name: name, onlyWithLaunchUrl: onlyWithLaunchUrl, ordering: ordering, page: page, pageSize: pageSize, search: search, slug: slug, superuserFullList: superuserFullList, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /core/applications/
     - Custom list method that checks Policy based access instead of guardian
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter forUser: (query)  (optional)
     - parameter group: (query)  (optional)
     - parameter metaDescription: (query)  (optional)
     - parameter metaLaunchUrl: (query)  (optional)
     - parameter metaPublisher: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter onlyWithLaunchUrl: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter slug: (query)  (optional)
     - parameter superuserFullList: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedApplicationList> 
     */
    open class func coreApplicationsListWithRequestBuilder(forUser: Int? = nil, group: String? = nil, metaDescription: String? = nil, metaLaunchUrl: String? = nil, metaPublisher: String? = nil, name: String? = nil, onlyWithLaunchUrl: Bool? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, slug: String? = nil, superuserFullList: Bool? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedApplicationList> {
        let localVariablePath = "/core/applications/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "for_user": (wrappedValue: forUser?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "group": (wrappedValue: group?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "meta_description": (wrappedValue: metaDescription?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "meta_launch_url": (wrappedValue: metaLaunchUrl?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "meta_publisher": (wrappedValue: metaPublisher?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "only_with_launch_url": (wrappedValue: onlyWithLaunchUrl?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "slug": (wrappedValue: slug?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "superuser_full_list": (wrappedValue: superuserFullList?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedApplicationList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter slug: (path)  
     - parameter patchedApplicationRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Application
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func coreApplicationsPartialUpdate(slug: String, patchedApplicationRequest: PatchedApplicationRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> Application {
        return try await coreApplicationsPartialUpdateWithRequestBuilder(slug: slug, patchedApplicationRequest: patchedApplicationRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /core/applications/{slug}/
     - Application Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter slug: (path)  
     - parameter patchedApplicationRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Application> 
     */
    open class func coreApplicationsPartialUpdateWithRequestBuilder(slug: String, patchedApplicationRequest: PatchedApplicationRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Application> {
        var localVariablePath = "/core/applications/{slug}/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedApplicationRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Application>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter slug: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Application
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func coreApplicationsRetrieve(slug: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> Application {
        return try await coreApplicationsRetrieveWithRequestBuilder(slug: slug, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /core/applications/{slug}/
     - Application Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter slug: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Application> 
     */
    open class func coreApplicationsRetrieveWithRequestBuilder(slug: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Application> {
        var localVariablePath = "/core/applications/{slug}/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Application>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter slug: (path)  
     - parameter file: (form)  (optional)
     - parameter clear: (form)  (optional, default to false)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func coreApplicationsSetIconCreate(slug: String, file: URL? = nil, clear: Bool? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await coreApplicationsSetIconCreateWithRequestBuilder(slug: slug, file: file, clear: clear, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /core/applications/{slug}/set_icon/
     - Set application icon
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter slug: (path)  
     - parameter file: (form)  (optional)
     - parameter clear: (form)  (optional, default to false)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func coreApplicationsSetIconCreateWithRequestBuilder(slug: String, file: URL? = nil, clear: Bool? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/core/applications/{slug}/set_icon/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableFormParams: [String: (any Sendable)?] = [
            "file": file?.asParameter(codableHelper: apiConfiguration.codableHelper),
            "clear": clear?.asParameter(codableHelper: apiConfiguration.codableHelper),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "multipart/form-data",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter slug: (path)  
     - parameter filePathRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func coreApplicationsSetIconUrlCreate(slug: String, filePathRequest: FilePathRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await coreApplicationsSetIconUrlCreateWithRequestBuilder(slug: slug, filePathRequest: filePathRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /core/applications/{slug}/set_icon_url/
     - Set application icon (as URL)
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter slug: (path)  
     - parameter filePathRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func coreApplicationsSetIconUrlCreateWithRequestBuilder(slug: String, filePathRequest: FilePathRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/core/applications/{slug}/set_icon_url/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: filePathRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter slug: (path)  
     - parameter applicationRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Application
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func coreApplicationsUpdate(slug: String, applicationRequest: ApplicationRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> Application {
        return try await coreApplicationsUpdateWithRequestBuilder(slug: slug, applicationRequest: applicationRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /core/applications/{slug}/
     - Application Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter slug: (path)  
     - parameter applicationRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Application> 
     */
    open class func coreApplicationsUpdateWithRequestBuilder(slug: String, applicationRequest: ApplicationRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Application> {
        var localVariablePath = "/core/applications/{slug}/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: applicationRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Application>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter slug: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func coreApplicationsUsedByList(slug: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await coreApplicationsUsedByListWithRequestBuilder(slug: slug, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /core/applications/{slug}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter slug: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func coreApplicationsUsedByListWithRequestBuilder(slug: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/core/applications/{slug}/used_by/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter uuid: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func coreAuthenticatedSessionsDestroy(uuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await coreAuthenticatedSessionsDestroyWithRequestBuilder(uuid: uuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /core/authenticated_sessions/{uuid}/
     - AuthenticatedSession Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter uuid: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func coreAuthenticatedSessionsDestroyWithRequestBuilder(uuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/core/authenticated_sessions/{uuid}/"
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter sessionLastIp: (query)  (optional)
     - parameter sessionLastUserAgent: (query)  (optional)
     - parameter userUsername: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedAuthenticatedSessionList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func coreAuthenticatedSessionsList(ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, sessionLastIp: String? = nil, sessionLastUserAgent: String? = nil, userUsername: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedAuthenticatedSessionList {
        return try await coreAuthenticatedSessionsListWithRequestBuilder(ordering: ordering, page: page, pageSize: pageSize, search: search, sessionLastIp: sessionLastIp, sessionLastUserAgent: sessionLastUserAgent, userUsername: userUsername, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /core/authenticated_sessions/
     - AuthenticatedSession Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter sessionLastIp: (query)  (optional)
     - parameter sessionLastUserAgent: (query)  (optional)
     - parameter userUsername: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedAuthenticatedSessionList> 
     */
    open class func coreAuthenticatedSessionsListWithRequestBuilder(ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, sessionLastIp: String? = nil, sessionLastUserAgent: String? = nil, userUsername: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedAuthenticatedSessionList> {
        let localVariablePath = "/core/authenticated_sessions/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "session__last_ip": (wrappedValue: sessionLastIp?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "session__last_user_agent": (wrappedValue: sessionLastUserAgent?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "user__username": (wrappedValue: userUsername?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedAuthenticatedSessionList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter uuid: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AuthenticatedSession
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func coreAuthenticatedSessionsRetrieve(uuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> AuthenticatedSession {
        return try await coreAuthenticatedSessionsRetrieveWithRequestBuilder(uuid: uuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /core/authenticated_sessions/{uuid}/
     - AuthenticatedSession Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter uuid: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AuthenticatedSession> 
     */
    open class func coreAuthenticatedSessionsRetrieveWithRequestBuilder(uuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<AuthenticatedSession> {
        var localVariablePath = "/core/authenticated_sessions/{uuid}/"
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthenticatedSession>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter uuid: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func coreAuthenticatedSessionsUsedByList(uuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await coreAuthenticatedSessionsUsedByListWithRequestBuilder(uuid: uuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /core/authenticated_sessions/{uuid}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter uuid: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func coreAuthenticatedSessionsUsedByListWithRequestBuilder(uuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/core/authenticated_sessions/{uuid}/used_by/"
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter brandRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Brand
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func coreBrandsCreate(brandRequest: BrandRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> Brand {
        return try await coreBrandsCreateWithRequestBuilder(brandRequest: brandRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /core/brands/
     - Brand Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter brandRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Brand> 
     */
    open class func coreBrandsCreateWithRequestBuilder(brandRequest: BrandRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Brand> {
        let localVariablePath = "/core/brands/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: brandRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Brand>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter apiConfiguration: The configuration for the http request.
     - returns: CurrentBrand
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func coreBrandsCurrentRetrieve(apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> CurrentBrand {
        return try await coreBrandsCurrentRetrieveWithRequestBuilder(apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /core/brands/current/
     - Get current brand
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<CurrentBrand> 
     */
    open class func coreBrandsCurrentRetrieveWithRequestBuilder(apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<CurrentBrand> {
        let localVariablePath = "/core/brands/current/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CurrentBrand>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter brandUuid: (path) A UUID string identifying this Brand. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func coreBrandsDestroy(brandUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await coreBrandsDestroyWithRequestBuilder(brandUuid: brandUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /core/brands/{brand_uuid}/
     - Brand Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter brandUuid: (path) A UUID string identifying this Brand. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func coreBrandsDestroyWithRequestBuilder(brandUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/core/brands/{brand_uuid}/"
        let brandUuidPreEscape = "\(APIHelper.mapValueToPathItem(brandUuid))"
        let brandUuidPostEscape = brandUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{brand_uuid}", with: brandUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter brandUuid: (query)  (optional)
     - parameter brandingDefaultFlowBackground: (query)  (optional)
     - parameter brandingFavicon: (query)  (optional)
     - parameter brandingLogo: (query)  (optional)
     - parameter brandingTitle: (query)  (optional)
     - parameter clientCertificates: (query)  (optional)
     - parameter _default: (query)  (optional)
     - parameter domain: (query)  (optional)
     - parameter flowAuthentication: (query)  (optional)
     - parameter flowDeviceCode: (query)  (optional)
     - parameter flowInvalidation: (query)  (optional)
     - parameter flowRecovery: (query)  (optional)
     - parameter flowUnenrollment: (query)  (optional)
     - parameter flowUserSettings: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter webCertificate: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedBrandList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func coreBrandsList(brandUuid: UUID? = nil, brandingDefaultFlowBackground: String? = nil, brandingFavicon: String? = nil, brandingLogo: String? = nil, brandingTitle: String? = nil, clientCertificates: [UUID]? = nil, _default: Bool? = nil, domain: String? = nil, flowAuthentication: UUID? = nil, flowDeviceCode: UUID? = nil, flowInvalidation: UUID? = nil, flowRecovery: UUID? = nil, flowUnenrollment: UUID? = nil, flowUserSettings: UUID? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, webCertificate: UUID? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedBrandList {
        return try await coreBrandsListWithRequestBuilder(brandUuid: brandUuid, brandingDefaultFlowBackground: brandingDefaultFlowBackground, brandingFavicon: brandingFavicon, brandingLogo: brandingLogo, brandingTitle: brandingTitle, clientCertificates: clientCertificates, _default: _default, domain: domain, flowAuthentication: flowAuthentication, flowDeviceCode: flowDeviceCode, flowInvalidation: flowInvalidation, flowRecovery: flowRecovery, flowUnenrollment: flowUnenrollment, flowUserSettings: flowUserSettings, ordering: ordering, page: page, pageSize: pageSize, search: search, webCertificate: webCertificate, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /core/brands/
     - Brand Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter brandUuid: (query)  (optional)
     - parameter brandingDefaultFlowBackground: (query)  (optional)
     - parameter brandingFavicon: (query)  (optional)
     - parameter brandingLogo: (query)  (optional)
     - parameter brandingTitle: (query)  (optional)
     - parameter clientCertificates: (query)  (optional)
     - parameter _default: (query)  (optional)
     - parameter domain: (query)  (optional)
     - parameter flowAuthentication: (query)  (optional)
     - parameter flowDeviceCode: (query)  (optional)
     - parameter flowInvalidation: (query)  (optional)
     - parameter flowRecovery: (query)  (optional)
     - parameter flowUnenrollment: (query)  (optional)
     - parameter flowUserSettings: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter webCertificate: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedBrandList> 
     */
    open class func coreBrandsListWithRequestBuilder(brandUuid: UUID? = nil, brandingDefaultFlowBackground: String? = nil, brandingFavicon: String? = nil, brandingLogo: String? = nil, brandingTitle: String? = nil, clientCertificates: [UUID]? = nil, _default: Bool? = nil, domain: String? = nil, flowAuthentication: UUID? = nil, flowDeviceCode: UUID? = nil, flowInvalidation: UUID? = nil, flowRecovery: UUID? = nil, flowUnenrollment: UUID? = nil, flowUserSettings: UUID? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, webCertificate: UUID? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedBrandList> {
        let localVariablePath = "/core/brands/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "brand_uuid": (wrappedValue: brandUuid?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "branding_default_flow_background": (wrappedValue: brandingDefaultFlowBackground?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "branding_favicon": (wrappedValue: brandingFavicon?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "branding_logo": (wrappedValue: brandingLogo?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "branding_title": (wrappedValue: brandingTitle?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "client_certificates": (wrappedValue: clientCertificates?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "default": (wrappedValue: _default?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "domain": (wrappedValue: domain?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "flow_authentication": (wrappedValue: flowAuthentication?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "flow_device_code": (wrappedValue: flowDeviceCode?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "flow_invalidation": (wrappedValue: flowInvalidation?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "flow_recovery": (wrappedValue: flowRecovery?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "flow_unenrollment": (wrappedValue: flowUnenrollment?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "flow_user_settings": (wrappedValue: flowUserSettings?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "web_certificate": (wrappedValue: webCertificate?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedBrandList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter brandUuid: (path) A UUID string identifying this Brand. 
     - parameter patchedBrandRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Brand
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func coreBrandsPartialUpdate(brandUuid: UUID, patchedBrandRequest: PatchedBrandRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> Brand {
        return try await coreBrandsPartialUpdateWithRequestBuilder(brandUuid: brandUuid, patchedBrandRequest: patchedBrandRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /core/brands/{brand_uuid}/
     - Brand Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter brandUuid: (path) A UUID string identifying this Brand. 
     - parameter patchedBrandRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Brand> 
     */
    open class func coreBrandsPartialUpdateWithRequestBuilder(brandUuid: UUID, patchedBrandRequest: PatchedBrandRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Brand> {
        var localVariablePath = "/core/brands/{brand_uuid}/"
        let brandUuidPreEscape = "\(APIHelper.mapValueToPathItem(brandUuid))"
        let brandUuidPostEscape = brandUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{brand_uuid}", with: brandUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedBrandRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Brand>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter brandUuid: (path) A UUID string identifying this Brand. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Brand
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func coreBrandsRetrieve(brandUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> Brand {
        return try await coreBrandsRetrieveWithRequestBuilder(brandUuid: brandUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /core/brands/{brand_uuid}/
     - Brand Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter brandUuid: (path) A UUID string identifying this Brand. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Brand> 
     */
    open class func coreBrandsRetrieveWithRequestBuilder(brandUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Brand> {
        var localVariablePath = "/core/brands/{brand_uuid}/"
        let brandUuidPreEscape = "\(APIHelper.mapValueToPathItem(brandUuid))"
        let brandUuidPostEscape = brandUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{brand_uuid}", with: brandUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Brand>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter brandUuid: (path) A UUID string identifying this Brand. 
     - parameter brandRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Brand
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func coreBrandsUpdate(brandUuid: UUID, brandRequest: BrandRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> Brand {
        return try await coreBrandsUpdateWithRequestBuilder(brandUuid: brandUuid, brandRequest: brandRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /core/brands/{brand_uuid}/
     - Brand Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter brandUuid: (path) A UUID string identifying this Brand. 
     - parameter brandRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Brand> 
     */
    open class func coreBrandsUpdateWithRequestBuilder(brandUuid: UUID, brandRequest: BrandRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Brand> {
        var localVariablePath = "/core/brands/{brand_uuid}/"
        let brandUuidPreEscape = "\(APIHelper.mapValueToPathItem(brandUuid))"
        let brandUuidPostEscape = brandUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{brand_uuid}", with: brandUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: brandRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Brand>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter brandUuid: (path) A UUID string identifying this Brand. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func coreBrandsUsedByList(brandUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await coreBrandsUsedByListWithRequestBuilder(brandUuid: brandUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /core/brands/{brand_uuid}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter brandUuid: (path) A UUID string identifying this Brand. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func coreBrandsUsedByListWithRequestBuilder(brandUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/core/brands/{brand_uuid}/used_by/"
        let brandUuidPreEscape = "\(APIHelper.mapValueToPathItem(brandUuid))"
        let brandUuidPostEscape = brandUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{brand_uuid}", with: brandUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter groupUuid: (path) A UUID string identifying this Group. 
     - parameter userAccountRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func coreGroupsAddUserCreate(groupUuid: UUID, userAccountRequest: UserAccountRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await coreGroupsAddUserCreateWithRequestBuilder(groupUuid: groupUuid, userAccountRequest: userAccountRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /core/groups/{group_uuid}/add_user/
     - Add user to group
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter groupUuid: (path) A UUID string identifying this Group. 
     - parameter userAccountRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func coreGroupsAddUserCreateWithRequestBuilder(groupUuid: UUID, userAccountRequest: UserAccountRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/core/groups/{group_uuid}/add_user/"
        let groupUuidPreEscape = "\(APIHelper.mapValueToPathItem(groupUuid))"
        let groupUuidPostEscape = groupUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{group_uuid}", with: groupUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userAccountRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter groupRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Group
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func coreGroupsCreate(groupRequest: GroupRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> Group {
        return try await coreGroupsCreateWithRequestBuilder(groupRequest: groupRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /core/groups/
     - Group Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter groupRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Group> 
     */
    open class func coreGroupsCreateWithRequestBuilder(groupRequest: GroupRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Group> {
        let localVariablePath = "/core/groups/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: groupRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Group>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter groupUuid: (path) A UUID string identifying this Group. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func coreGroupsDestroy(groupUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await coreGroupsDestroyWithRequestBuilder(groupUuid: groupUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /core/groups/{group_uuid}/
     - Group Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter groupUuid: (path) A UUID string identifying this Group. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func coreGroupsDestroyWithRequestBuilder(groupUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/core/groups/{group_uuid}/"
        let groupUuidPreEscape = "\(APIHelper.mapValueToPathItem(groupUuid))"
        let groupUuidPostEscape = groupUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{group_uuid}", with: groupUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter attributes: (query) Attributes (optional)
     - parameter includeChildren: (query)  (optional, default to false)
     - parameter includeUsers: (query)  (optional, default to true)
     - parameter isSuperuser: (query)  (optional)
     - parameter membersByPk: (query)  (optional)
     - parameter membersByUsername: (query) Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedGroupList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func coreGroupsList(attributes: String? = nil, includeChildren: Bool? = nil, includeUsers: Bool? = nil, isSuperuser: Bool? = nil, membersByPk: [Int]? = nil, membersByUsername: [String]? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedGroupList {
        return try await coreGroupsListWithRequestBuilder(attributes: attributes, includeChildren: includeChildren, includeUsers: includeUsers, isSuperuser: isSuperuser, membersByPk: membersByPk, membersByUsername: membersByUsername, name: name, ordering: ordering, page: page, pageSize: pageSize, search: search, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /core/groups/
     - Group Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter attributes: (query) Attributes (optional)
     - parameter includeChildren: (query)  (optional, default to false)
     - parameter includeUsers: (query)  (optional, default to true)
     - parameter isSuperuser: (query)  (optional)
     - parameter membersByPk: (query)  (optional)
     - parameter membersByUsername: (query) Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedGroupList> 
     */
    open class func coreGroupsListWithRequestBuilder(attributes: String? = nil, includeChildren: Bool? = nil, includeUsers: Bool? = nil, isSuperuser: Bool? = nil, membersByPk: [Int]? = nil, membersByUsername: [String]? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedGroupList> {
        let localVariablePath = "/core/groups/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "attributes": (wrappedValue: attributes?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "include_children": (wrappedValue: includeChildren?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "include_users": (wrappedValue: includeUsers?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "is_superuser": (wrappedValue: isSuperuser?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "members_by_pk": (wrappedValue: membersByPk?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "members_by_username": (wrappedValue: membersByUsername?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedGroupList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter groupUuid: (path) A UUID string identifying this Group. 
     - parameter patchedGroupRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Group
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func coreGroupsPartialUpdate(groupUuid: UUID, patchedGroupRequest: PatchedGroupRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> Group {
        return try await coreGroupsPartialUpdateWithRequestBuilder(groupUuid: groupUuid, patchedGroupRequest: patchedGroupRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /core/groups/{group_uuid}/
     - Group Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter groupUuid: (path) A UUID string identifying this Group. 
     - parameter patchedGroupRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Group> 
     */
    open class func coreGroupsPartialUpdateWithRequestBuilder(groupUuid: UUID, patchedGroupRequest: PatchedGroupRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Group> {
        var localVariablePath = "/core/groups/{group_uuid}/"
        let groupUuidPreEscape = "\(APIHelper.mapValueToPathItem(groupUuid))"
        let groupUuidPostEscape = groupUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{group_uuid}", with: groupUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedGroupRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Group>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter groupUuid: (path) A UUID string identifying this Group. 
     - parameter userAccountRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func coreGroupsRemoveUserCreate(groupUuid: UUID, userAccountRequest: UserAccountRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await coreGroupsRemoveUserCreateWithRequestBuilder(groupUuid: groupUuid, userAccountRequest: userAccountRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /core/groups/{group_uuid}/remove_user/
     - Add user to group
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter groupUuid: (path) A UUID string identifying this Group. 
     - parameter userAccountRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func coreGroupsRemoveUserCreateWithRequestBuilder(groupUuid: UUID, userAccountRequest: UserAccountRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/core/groups/{group_uuid}/remove_user/"
        let groupUuidPreEscape = "\(APIHelper.mapValueToPathItem(groupUuid))"
        let groupUuidPostEscape = groupUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{group_uuid}", with: groupUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userAccountRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter groupUuid: (path) A UUID string identifying this Group. 
     - parameter includeChildren: (query)  (optional, default to false)
     - parameter includeUsers: (query)  (optional, default to true)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Group
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func coreGroupsRetrieve(groupUuid: UUID, includeChildren: Bool? = nil, includeUsers: Bool? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> Group {
        return try await coreGroupsRetrieveWithRequestBuilder(groupUuid: groupUuid, includeChildren: includeChildren, includeUsers: includeUsers, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /core/groups/{group_uuid}/
     - Group Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter groupUuid: (path) A UUID string identifying this Group. 
     - parameter includeChildren: (query)  (optional, default to false)
     - parameter includeUsers: (query)  (optional, default to true)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Group> 
     */
    open class func coreGroupsRetrieveWithRequestBuilder(groupUuid: UUID, includeChildren: Bool? = nil, includeUsers: Bool? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Group> {
        var localVariablePath = "/core/groups/{group_uuid}/"
        let groupUuidPreEscape = "\(APIHelper.mapValueToPathItem(groupUuid))"
        let groupUuidPostEscape = groupUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{group_uuid}", with: groupUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "include_children": (wrappedValue: includeChildren?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "include_users": (wrappedValue: includeUsers?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Group>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter groupUuid: (path) A UUID string identifying this Group. 
     - parameter groupRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Group
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func coreGroupsUpdate(groupUuid: UUID, groupRequest: GroupRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> Group {
        return try await coreGroupsUpdateWithRequestBuilder(groupUuid: groupUuid, groupRequest: groupRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /core/groups/{group_uuid}/
     - Group Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter groupUuid: (path) A UUID string identifying this Group. 
     - parameter groupRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Group> 
     */
    open class func coreGroupsUpdateWithRequestBuilder(groupUuid: UUID, groupRequest: GroupRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Group> {
        var localVariablePath = "/core/groups/{group_uuid}/"
        let groupUuidPreEscape = "\(APIHelper.mapValueToPathItem(groupUuid))"
        let groupUuidPostEscape = groupUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{group_uuid}", with: groupUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: groupRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Group>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter groupUuid: (path) A UUID string identifying this Group. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func coreGroupsUsedByList(groupUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await coreGroupsUsedByListWithRequestBuilder(groupUuid: groupUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /core/groups/{group_uuid}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter groupUuid: (path) A UUID string identifying this Group. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func coreGroupsUsedByListWithRequestBuilder(groupUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/core/groups/{group_uuid}/used_by/"
        let groupUuidPreEscape = "\(APIHelper.mapValueToPathItem(groupUuid))"
        let groupUuidPostEscape = groupUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{group_uuid}", with: groupUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter tokenRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Token
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func coreTokensCreate(tokenRequest: TokenRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> Token {
        return try await coreTokensCreateWithRequestBuilder(tokenRequest: tokenRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /core/tokens/
     - Token Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter tokenRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Token> 
     */
    open class func coreTokensCreateWithRequestBuilder(tokenRequest: TokenRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Token> {
        let localVariablePath = "/core/tokens/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: tokenRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Token>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter identifier: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func coreTokensDestroy(identifier: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await coreTokensDestroyWithRequestBuilder(identifier: identifier, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /core/tokens/{identifier}/
     - Token Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter identifier: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func coreTokensDestroyWithRequestBuilder(identifier: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/core/tokens/{identifier}/"
        let identifierPreEscape = "\(APIHelper.mapValueToPathItem(identifier))"
        let identifierPostEscape = identifierPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{identifier}", with: identifierPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter intent
     */
    public enum Intent_coreTokensList: String, Sendable, CaseIterable {
        case api = "api"
        case appPassword = "app_password"
        case recovery = "recovery"
        case verification = "verification"
    }

    /**

     - parameter description: (query)  (optional)
     - parameter expires: (query)  (optional)
     - parameter expiring: (query)  (optional)
     - parameter identifier: (query)  (optional)
     - parameter intent: (query)  (optional)
     - parameter managed: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter userUsername: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedTokenList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func coreTokensList(description: String? = nil, expires: Date? = nil, expiring: Bool? = nil, identifier: String? = nil, intent: Intent_coreTokensList? = nil, managed: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, userUsername: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedTokenList {
        return try await coreTokensListWithRequestBuilder(description: description, expires: expires, expiring: expiring, identifier: identifier, intent: intent, managed: managed, ordering: ordering, page: page, pageSize: pageSize, search: search, userUsername: userUsername, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /core/tokens/
     - Token Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter description: (query)  (optional)
     - parameter expires: (query)  (optional)
     - parameter expiring: (query)  (optional)
     - parameter identifier: (query)  (optional)
     - parameter intent: (query)  (optional)
     - parameter managed: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter userUsername: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedTokenList> 
     */
    open class func coreTokensListWithRequestBuilder(description: String? = nil, expires: Date? = nil, expiring: Bool? = nil, identifier: String? = nil, intent: Intent_coreTokensList? = nil, managed: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, userUsername: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedTokenList> {
        let localVariablePath = "/core/tokens/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "description": (wrappedValue: description?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "expires": (wrappedValue: expires?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "expiring": (wrappedValue: expiring?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "identifier": (wrappedValue: identifier?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "intent": (wrappedValue: intent?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "managed": (wrappedValue: managed?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "user__username": (wrappedValue: userUsername?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedTokenList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter identifier: (path)  
     - parameter patchedTokenRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Token
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func coreTokensPartialUpdate(identifier: String, patchedTokenRequest: PatchedTokenRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> Token {
        return try await coreTokensPartialUpdateWithRequestBuilder(identifier: identifier, patchedTokenRequest: patchedTokenRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /core/tokens/{identifier}/
     - Token Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter identifier: (path)  
     - parameter patchedTokenRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Token> 
     */
    open class func coreTokensPartialUpdateWithRequestBuilder(identifier: String, patchedTokenRequest: PatchedTokenRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Token> {
        var localVariablePath = "/core/tokens/{identifier}/"
        let identifierPreEscape = "\(APIHelper.mapValueToPathItem(identifier))"
        let identifierPostEscape = identifierPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{identifier}", with: identifierPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedTokenRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Token>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter identifier: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Token
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func coreTokensRetrieve(identifier: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> Token {
        return try await coreTokensRetrieveWithRequestBuilder(identifier: identifier, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /core/tokens/{identifier}/
     - Token Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter identifier: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Token> 
     */
    open class func coreTokensRetrieveWithRequestBuilder(identifier: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Token> {
        var localVariablePath = "/core/tokens/{identifier}/"
        let identifierPreEscape = "\(APIHelper.mapValueToPathItem(identifier))"
        let identifierPostEscape = identifierPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{identifier}", with: identifierPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Token>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter identifier: (path)  
     - parameter tokenSetKeyRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func coreTokensSetKeyCreate(identifier: String, tokenSetKeyRequest: TokenSetKeyRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await coreTokensSetKeyCreateWithRequestBuilder(identifier: identifier, tokenSetKeyRequest: tokenSetKeyRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /core/tokens/{identifier}/set_key/
     - Set token key. Action is logged as event. `authentik_core.set_token_key` permission is required.
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter identifier: (path)  
     - parameter tokenSetKeyRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func coreTokensSetKeyCreateWithRequestBuilder(identifier: String, tokenSetKeyRequest: TokenSetKeyRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/core/tokens/{identifier}/set_key/"
        let identifierPreEscape = "\(APIHelper.mapValueToPathItem(identifier))"
        let identifierPostEscape = identifierPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{identifier}", with: identifierPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: tokenSetKeyRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter identifier: (path)  
     - parameter tokenRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Token
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func coreTokensUpdate(identifier: String, tokenRequest: TokenRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> Token {
        return try await coreTokensUpdateWithRequestBuilder(identifier: identifier, tokenRequest: tokenRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /core/tokens/{identifier}/
     - Token Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter identifier: (path)  
     - parameter tokenRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Token> 
     */
    open class func coreTokensUpdateWithRequestBuilder(identifier: String, tokenRequest: TokenRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Token> {
        var localVariablePath = "/core/tokens/{identifier}/"
        let identifierPreEscape = "\(APIHelper.mapValueToPathItem(identifier))"
        let identifierPostEscape = identifierPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{identifier}", with: identifierPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: tokenRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Token>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter identifier: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func coreTokensUsedByList(identifier: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await coreTokensUsedByListWithRequestBuilder(identifier: identifier, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /core/tokens/{identifier}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter identifier: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func coreTokensUsedByListWithRequestBuilder(identifier: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/core/tokens/{identifier}/used_by/"
        let identifierPreEscape = "\(APIHelper.mapValueToPathItem(identifier))"
        let identifierPostEscape = identifierPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{identifier}", with: identifierPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter identifier: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: TokenView
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func coreTokensViewKeyRetrieve(identifier: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> TokenView {
        return try await coreTokensViewKeyRetrieveWithRequestBuilder(identifier: identifier, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /core/tokens/{identifier}/view_key/
     - Return token key and log access
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter identifier: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<TokenView> 
     */
    open class func coreTokensViewKeyRetrieveWithRequestBuilder(identifier: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<TokenView> {
        var localVariablePath = "/core/tokens/{identifier}/view_key/"
        let identifierPreEscape = "\(APIHelper.mapValueToPathItem(identifier))"
        let identifierPostEscape = identifierPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{identifier}", with: identifierPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TokenView>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter transactionApplicationRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: TransactionApplicationResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func coreTransactionalApplicationsUpdate(transactionApplicationRequest: TransactionApplicationRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> TransactionApplicationResponse {
        return try await coreTransactionalApplicationsUpdateWithRequestBuilder(transactionApplicationRequest: transactionApplicationRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /core/transactional/applications/
     - Convert data into a blueprint, validate it and apply it
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter transactionApplicationRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<TransactionApplicationResponse> 
     */
    open class func coreTransactionalApplicationsUpdateWithRequestBuilder(transactionApplicationRequest: TransactionApplicationRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<TransactionApplicationResponse> {
        let localVariablePath = "/core/transactional/applications/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: transactionApplicationRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransactionApplicationResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this User Consent. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func coreUserConsentDestroy(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await coreUserConsentDestroyWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /core/user_consent/{id}/
     - UserConsent Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this User Consent. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func coreUserConsentDestroyWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/core/user_consent/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter application: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter user: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedUserConsentList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func coreUserConsentList(application: UUID? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, user: Int? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedUserConsentList {
        return try await coreUserConsentListWithRequestBuilder(application: application, ordering: ordering, page: page, pageSize: pageSize, search: search, user: user, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /core/user_consent/
     - UserConsent Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter application: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter user: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedUserConsentList> 
     */
    open class func coreUserConsentListWithRequestBuilder(application: UUID? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, user: Int? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedUserConsentList> {
        let localVariablePath = "/core/user_consent/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "application": (wrappedValue: application?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "user": (wrappedValue: user?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedUserConsentList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this User Consent. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: UserConsent
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func coreUserConsentRetrieve(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> UserConsent {
        return try await coreUserConsentRetrieveWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /core/user_consent/{id}/
     - UserConsent Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this User Consent. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<UserConsent> 
     */
    open class func coreUserConsentRetrieveWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<UserConsent> {
        var localVariablePath = "/core/user_consent/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserConsent>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this User Consent. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func coreUserConsentUsedByList(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await coreUserConsentUsedByListWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /core/user_consent/{id}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this User Consent. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func coreUserConsentUsedByListWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/core/user_consent/{id}/used_by/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter userRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: User
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func coreUsersCreate(userRequest: UserRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> User {
        return try await coreUsersCreateWithRequestBuilder(userRequest: userRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /core/users/
     - User Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter userRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<User> 
     */
    open class func coreUsersCreateWithRequestBuilder(userRequest: UserRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<User> {
        let localVariablePath = "/core/users/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<User>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this User. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func coreUsersDestroy(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await coreUsersDestroyWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /core/users/{id}/
     - User Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this User. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func coreUsersDestroyWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/core/users/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this User. 
     - parameter impersonationRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func coreUsersImpersonateCreate(id: Int, impersonationRequest: ImpersonationRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await coreUsersImpersonateCreateWithRequestBuilder(id: id, impersonationRequest: impersonationRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /core/users/{id}/impersonate/
     - Impersonate a user
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this User. 
     - parameter impersonationRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func coreUsersImpersonateCreateWithRequestBuilder(id: Int, impersonationRequest: ImpersonationRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/core/users/{id}/impersonate/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: impersonationRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func coreUsersImpersonateEndRetrieve(apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await coreUsersImpersonateEndRetrieveWithRequestBuilder(apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /core/users/impersonate_end/
     - End Impersonation a user
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func coreUsersImpersonateEndRetrieveWithRequestBuilder(apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        let localVariablePath = "/core/users/impersonate_end/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_coreUsersList: String, Sendable, CaseIterable {
        case external = "external"
        case _internal = "internal"
        case internalServiceAccount = "internal_service_account"
        case serviceAccount = "service_account"
    }

    /**

     - parameter attributes: (query) Attributes (optional)
     - parameter dateJoined: (query)  (optional)
     - parameter dateJoinedGt: (query)  (optional)
     - parameter dateJoinedLt: (query)  (optional)
     - parameter email: (query)  (optional)
     - parameter groupsByName: (query)  (optional)
     - parameter groupsByPk: (query)  (optional)
     - parameter includeGroups: (query)  (optional, default to true)
     - parameter isActive: (query)  (optional)
     - parameter isSuperuser: (query)  (optional)
     - parameter lastUpdated: (query)  (optional)
     - parameter lastUpdatedGt: (query)  (optional)
     - parameter lastUpdatedLt: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter path: (query)  (optional)
     - parameter pathStartswith: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter type: (query)  (optional)
     - parameter username: (query)  (optional)
     - parameter uuid: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedUserList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func coreUsersList(attributes: String? = nil, dateJoined: Date? = nil, dateJoinedGt: Date? = nil, dateJoinedLt: Date? = nil, email: String? = nil, groupsByName: [String]? = nil, groupsByPk: [UUID]? = nil, includeGroups: Bool? = nil, isActive: Bool? = nil, isSuperuser: Bool? = nil, lastUpdated: Date? = nil, lastUpdatedGt: Date? = nil, lastUpdatedLt: Date? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, path: String? = nil, pathStartswith: String? = nil, search: String? = nil, type: [ModelType_coreUsersList]? = nil, username: String? = nil, uuid: UUID? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedUserList {
        return try await coreUsersListWithRequestBuilder(attributes: attributes, dateJoined: dateJoined, dateJoinedGt: dateJoinedGt, dateJoinedLt: dateJoinedLt, email: email, groupsByName: groupsByName, groupsByPk: groupsByPk, includeGroups: includeGroups, isActive: isActive, isSuperuser: isSuperuser, lastUpdated: lastUpdated, lastUpdatedGt: lastUpdatedGt, lastUpdatedLt: lastUpdatedLt, name: name, ordering: ordering, page: page, pageSize: pageSize, path: path, pathStartswith: pathStartswith, search: search, type: type, username: username, uuid: uuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /core/users/
     - User Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter attributes: (query) Attributes (optional)
     - parameter dateJoined: (query)  (optional)
     - parameter dateJoinedGt: (query)  (optional)
     - parameter dateJoinedLt: (query)  (optional)
     - parameter email: (query)  (optional)
     - parameter groupsByName: (query)  (optional)
     - parameter groupsByPk: (query)  (optional)
     - parameter includeGroups: (query)  (optional, default to true)
     - parameter isActive: (query)  (optional)
     - parameter isSuperuser: (query)  (optional)
     - parameter lastUpdated: (query)  (optional)
     - parameter lastUpdatedGt: (query)  (optional)
     - parameter lastUpdatedLt: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter path: (query)  (optional)
     - parameter pathStartswith: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter type: (query)  (optional)
     - parameter username: (query)  (optional)
     - parameter uuid: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedUserList> 
     */
    open class func coreUsersListWithRequestBuilder(attributes: String? = nil, dateJoined: Date? = nil, dateJoinedGt: Date? = nil, dateJoinedLt: Date? = nil, email: String? = nil, groupsByName: [String]? = nil, groupsByPk: [UUID]? = nil, includeGroups: Bool? = nil, isActive: Bool? = nil, isSuperuser: Bool? = nil, lastUpdated: Date? = nil, lastUpdatedGt: Date? = nil, lastUpdatedLt: Date? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, path: String? = nil, pathStartswith: String? = nil, search: String? = nil, type: [ModelType_coreUsersList]? = nil, username: String? = nil, uuid: UUID? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedUserList> {
        let localVariablePath = "/core/users/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "attributes": (wrappedValue: attributes?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "date_joined": (wrappedValue: dateJoined?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "date_joined__gt": (wrappedValue: dateJoinedGt?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "date_joined__lt": (wrappedValue: dateJoinedLt?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "email": (wrappedValue: email?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "groups_by_name": (wrappedValue: groupsByName?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "groups_by_pk": (wrappedValue: groupsByPk?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "include_groups": (wrappedValue: includeGroups?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "is_active": (wrappedValue: isActive?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "is_superuser": (wrappedValue: isSuperuser?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "last_updated": (wrappedValue: lastUpdated?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "last_updated__gt": (wrappedValue: lastUpdatedGt?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "last_updated__lt": (wrappedValue: lastUpdatedLt?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "path": (wrappedValue: path?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "path_startswith": (wrappedValue: pathStartswith?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "type": (wrappedValue: type?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "username": (wrappedValue: username?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "uuid": (wrappedValue: uuid?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedUserList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter apiConfiguration: The configuration for the http request.
     - returns: SessionUser
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func coreUsersMeRetrieve(apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> SessionUser {
        return try await coreUsersMeRetrieveWithRequestBuilder(apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /core/users/me/
     - Get information about current user
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SessionUser> 
     */
    open class func coreUsersMeRetrieveWithRequestBuilder(apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<SessionUser> {
        let localVariablePath = "/core/users/me/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SessionUser>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this User. 
     - parameter patchedUserRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: User
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func coreUsersPartialUpdate(id: Int, patchedUserRequest: PatchedUserRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> User {
        return try await coreUsersPartialUpdateWithRequestBuilder(id: id, patchedUserRequest: patchedUserRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /core/users/{id}/
     - User Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this User. 
     - parameter patchedUserRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<User> 
     */
    open class func coreUsersPartialUpdateWithRequestBuilder(id: Int, patchedUserRequest: PatchedUserRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<User> {
        var localVariablePath = "/core/users/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedUserRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<User>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter search: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: UserPath
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func coreUsersPathsRetrieve(search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> UserPath {
        return try await coreUsersPathsRetrieveWithRequestBuilder(search: search, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /core/users/paths/
     - Get all user paths
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter search: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<UserPath> 
     */
    open class func coreUsersPathsRetrieveWithRequestBuilder(search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<UserPath> {
        let localVariablePath = "/core/users/paths/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserPath>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this User. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Link
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func coreUsersRecoveryCreate(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> Link {
        return try await coreUsersRecoveryCreateWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /core/users/{id}/recovery/
     - Create a temporary link that a user can use to recover their accounts
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this User. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Link> 
     */
    open class func coreUsersRecoveryCreateWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Link> {
        var localVariablePath = "/core/users/{id}/recovery/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Link>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter emailStage: (query)  
     - parameter id: (path) A unique integer value identifying this User. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func coreUsersRecoveryEmailCreate(emailStage: String, id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await coreUsersRecoveryEmailCreateWithRequestBuilder(emailStage: emailStage, id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /core/users/{id}/recovery_email/
     - Create a temporary link that a user can use to recover their accounts
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter emailStage: (query)  
     - parameter id: (path) A unique integer value identifying this User. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func coreUsersRecoveryEmailCreateWithRequestBuilder(emailStage: String, id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/core/users/{id}/recovery_email/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "email_stage": (wrappedValue: emailStage.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this User. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: User
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func coreUsersRetrieve(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> User {
        return try await coreUsersRetrieveWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /core/users/{id}/
     - User Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this User. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<User> 
     */
    open class func coreUsersRetrieveWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<User> {
        var localVariablePath = "/core/users/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<User>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter userServiceAccountRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: UserServiceAccountResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func coreUsersServiceAccountCreate(userServiceAccountRequest: UserServiceAccountRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> UserServiceAccountResponse {
        return try await coreUsersServiceAccountCreateWithRequestBuilder(userServiceAccountRequest: userServiceAccountRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /core/users/service_account/
     - Create a new user account that is marked as a service account
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter userServiceAccountRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<UserServiceAccountResponse> 
     */
    open class func coreUsersServiceAccountCreateWithRequestBuilder(userServiceAccountRequest: UserServiceAccountRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<UserServiceAccountResponse> {
        let localVariablePath = "/core/users/service_account/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userServiceAccountRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserServiceAccountResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this User. 
     - parameter userPasswordSetRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func coreUsersSetPasswordCreate(id: Int, userPasswordSetRequest: UserPasswordSetRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await coreUsersSetPasswordCreateWithRequestBuilder(id: id, userPasswordSetRequest: userPasswordSetRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /core/users/{id}/set_password/
     - Set password for user
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this User. 
     - parameter userPasswordSetRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func coreUsersSetPasswordCreateWithRequestBuilder(id: Int, userPasswordSetRequest: UserPasswordSetRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/core/users/{id}/set_password/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userPasswordSetRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this User. 
     - parameter userRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: User
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func coreUsersUpdate(id: Int, userRequest: UserRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> User {
        return try await coreUsersUpdateWithRequestBuilder(id: id, userRequest: userRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /core/users/{id}/
     - User Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this User. 
     - parameter userRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<User> 
     */
    open class func coreUsersUpdateWithRequestBuilder(id: Int, userRequest: UserRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<User> {
        var localVariablePath = "/core/users/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<User>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this User. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func coreUsersUsedByList(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await coreUsersUsedByListWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /core/users/{id}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this User. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func coreUsersUsedByListWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/core/users/{id}/used_by/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }
}
