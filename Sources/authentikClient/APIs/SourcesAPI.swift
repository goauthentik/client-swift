//
// SourcesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class SourcesAPI {

    /**

     - parameter slug: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesAllDestroy(slug: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await sourcesAllDestroyWithRequestBuilder(slug: slug, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /sources/all/{slug}/
     - Prevent deletion of built-in sources
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter slug: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func sourcesAllDestroyWithRequestBuilder(slug: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/sources/all/{slug}/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter managed: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter pbmUuid: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter slug: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedSourceList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesAllList(managed: String? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, pbmUuid: UUID? = nil, search: String? = nil, slug: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedSourceList {
        return try await sourcesAllListWithRequestBuilder(managed: managed, name: name, ordering: ordering, page: page, pageSize: pageSize, pbmUuid: pbmUuid, search: search, slug: slug, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/all/
     - Source Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter managed: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter pbmUuid: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter slug: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedSourceList> 
     */
    open class func sourcesAllListWithRequestBuilder(managed: String? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, pbmUuid: UUID? = nil, search: String? = nil, slug: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedSourceList> {
        let localVariablePath = "/sources/all/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "managed": (wrappedValue: managed?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "pbm_uuid": (wrappedValue: pbmUuid?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "slug": (wrappedValue: slug?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedSourceList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter slug: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Source
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesAllRetrieve(slug: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> Source {
        return try await sourcesAllRetrieveWithRequestBuilder(slug: slug, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/all/{slug}/
     - Source Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter slug: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Source> 
     */
    open class func sourcesAllRetrieveWithRequestBuilder(slug: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Source> {
        var localVariablePath = "/sources/all/{slug}/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Source>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter slug: (path)  
     - parameter file: (form)  (optional)
     - parameter clear: (form)  (optional, default to false)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesAllSetIconCreate(slug: String, file: URL? = nil, clear: Bool? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await sourcesAllSetIconCreateWithRequestBuilder(slug: slug, file: file, clear: clear, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /sources/all/{slug}/set_icon/
     - Set source icon
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter slug: (path)  
     - parameter file: (form)  (optional)
     - parameter clear: (form)  (optional, default to false)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func sourcesAllSetIconCreateWithRequestBuilder(slug: String, file: URL? = nil, clear: Bool? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/sources/all/{slug}/set_icon/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableFormParams: [String: (any Sendable)?] = [
            "file": file?.asParameter(codableHelper: apiConfiguration.codableHelper),
            "clear": clear?.asParameter(codableHelper: apiConfiguration.codableHelper),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "multipart/form-data",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter slug: (path)  
     - parameter filePathRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesAllSetIconUrlCreate(slug: String, filePathRequest: FilePathRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await sourcesAllSetIconUrlCreateWithRequestBuilder(slug: slug, filePathRequest: filePathRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /sources/all/{slug}/set_icon_url/
     - Set source icon (as URL)
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter slug: (path)  
     - parameter filePathRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func sourcesAllSetIconUrlCreateWithRequestBuilder(slug: String, filePathRequest: FilePathRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/sources/all/{slug}/set_icon_url/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: filePathRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter apiConfiguration: The configuration for the http request.
     - returns: [TypeCreate]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesAllTypesList(apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [TypeCreate] {
        return try await sourcesAllTypesListWithRequestBuilder(apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/all/types/
     - Get all creatable types
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[TypeCreate]> 
     */
    open class func sourcesAllTypesListWithRequestBuilder(apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[TypeCreate]> {
        let localVariablePath = "/sources/all/types/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[TypeCreate]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter slug: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesAllUsedByList(slug: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await sourcesAllUsedByListWithRequestBuilder(slug: slug, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/all/{slug}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter slug: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func sourcesAllUsedByListWithRequestBuilder(slug: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/sources/all/{slug}/used_by/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UserSetting]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesAllUserSettingsList(apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UserSetting] {
        return try await sourcesAllUserSettingsListWithRequestBuilder(apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/all/user_settings/
     - Get all sources the user can configure
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UserSetting]> 
     */
    open class func sourcesAllUserSettingsListWithRequestBuilder(apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UserSetting]> {
        let localVariablePath = "/sources/all/user_settings/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UserSetting]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this group source connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesGroupConnectionsAllDestroy(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await sourcesGroupConnectionsAllDestroyWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /sources/group_connections/all/{id}/
     - Group-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this group source connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func sourcesGroupConnectionsAllDestroyWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/sources/group_connections/all/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter group: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter sourceSlug: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedGroupSourceConnectionList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesGroupConnectionsAllList(group: UUID? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, sourceSlug: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedGroupSourceConnectionList {
        return try await sourcesGroupConnectionsAllListWithRequestBuilder(group: group, ordering: ordering, page: page, pageSize: pageSize, search: search, sourceSlug: sourceSlug, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/group_connections/all/
     - Group-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter group: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter sourceSlug: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedGroupSourceConnectionList> 
     */
    open class func sourcesGroupConnectionsAllListWithRequestBuilder(group: UUID? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, sourceSlug: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedGroupSourceConnectionList> {
        let localVariablePath = "/sources/group_connections/all/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "group": (wrappedValue: group?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "source__slug": (wrappedValue: sourceSlug?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedGroupSourceConnectionList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this group source connection. 
     - parameter patchedGroupSourceConnectionRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GroupSourceConnection
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesGroupConnectionsAllPartialUpdate(id: Int, patchedGroupSourceConnectionRequest: PatchedGroupSourceConnectionRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> GroupSourceConnection {
        return try await sourcesGroupConnectionsAllPartialUpdateWithRequestBuilder(id: id, patchedGroupSourceConnectionRequest: patchedGroupSourceConnectionRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /sources/group_connections/all/{id}/
     - Group-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this group source connection. 
     - parameter patchedGroupSourceConnectionRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GroupSourceConnection> 
     */
    open class func sourcesGroupConnectionsAllPartialUpdateWithRequestBuilder(id: Int, patchedGroupSourceConnectionRequest: PatchedGroupSourceConnectionRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<GroupSourceConnection> {
        var localVariablePath = "/sources/group_connections/all/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedGroupSourceConnectionRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GroupSourceConnection>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this group source connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GroupSourceConnection
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesGroupConnectionsAllRetrieve(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> GroupSourceConnection {
        return try await sourcesGroupConnectionsAllRetrieveWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/group_connections/all/{id}/
     - Group-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this group source connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GroupSourceConnection> 
     */
    open class func sourcesGroupConnectionsAllRetrieveWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<GroupSourceConnection> {
        var localVariablePath = "/sources/group_connections/all/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GroupSourceConnection>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this group source connection. 
     - parameter groupSourceConnectionRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GroupSourceConnection
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesGroupConnectionsAllUpdate(id: Int, groupSourceConnectionRequest: GroupSourceConnectionRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> GroupSourceConnection {
        return try await sourcesGroupConnectionsAllUpdateWithRequestBuilder(id: id, groupSourceConnectionRequest: groupSourceConnectionRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /sources/group_connections/all/{id}/
     - Group-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this group source connection. 
     - parameter groupSourceConnectionRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GroupSourceConnection> 
     */
    open class func sourcesGroupConnectionsAllUpdateWithRequestBuilder(id: Int, groupSourceConnectionRequest: GroupSourceConnectionRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<GroupSourceConnection> {
        var localVariablePath = "/sources/group_connections/all/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: groupSourceConnectionRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GroupSourceConnection>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this group source connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesGroupConnectionsAllUsedByList(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await sourcesGroupConnectionsAllUsedByListWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/group_connections/all/{id}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this group source connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func sourcesGroupConnectionsAllUsedByListWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/sources/group_connections/all/{id}/used_by/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter groupKerberosSourceConnectionRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GroupKerberosSourceConnection
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesGroupConnectionsKerberosCreate(groupKerberosSourceConnectionRequest: GroupKerberosSourceConnectionRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> GroupKerberosSourceConnection {
        return try await sourcesGroupConnectionsKerberosCreateWithRequestBuilder(groupKerberosSourceConnectionRequest: groupKerberosSourceConnectionRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /sources/group_connections/kerberos/
     - Group-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter groupKerberosSourceConnectionRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GroupKerberosSourceConnection> 
     */
    open class func sourcesGroupConnectionsKerberosCreateWithRequestBuilder(groupKerberosSourceConnectionRequest: GroupKerberosSourceConnectionRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<GroupKerberosSourceConnection> {
        let localVariablePath = "/sources/group_connections/kerberos/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: groupKerberosSourceConnectionRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GroupKerberosSourceConnection>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Group Kerberos Source Connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesGroupConnectionsKerberosDestroy(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await sourcesGroupConnectionsKerberosDestroyWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /sources/group_connections/kerberos/{id}/
     - Group-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Group Kerberos Source Connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func sourcesGroupConnectionsKerberosDestroyWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/sources/group_connections/kerberos/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter group: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter sourceSlug: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedGroupKerberosSourceConnectionList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesGroupConnectionsKerberosList(group: UUID? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, sourceSlug: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedGroupKerberosSourceConnectionList {
        return try await sourcesGroupConnectionsKerberosListWithRequestBuilder(group: group, ordering: ordering, page: page, pageSize: pageSize, search: search, sourceSlug: sourceSlug, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/group_connections/kerberos/
     - Group-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter group: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter sourceSlug: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedGroupKerberosSourceConnectionList> 
     */
    open class func sourcesGroupConnectionsKerberosListWithRequestBuilder(group: UUID? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, sourceSlug: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedGroupKerberosSourceConnectionList> {
        let localVariablePath = "/sources/group_connections/kerberos/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "group": (wrappedValue: group?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "source__slug": (wrappedValue: sourceSlug?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedGroupKerberosSourceConnectionList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Group Kerberos Source Connection. 
     - parameter patchedGroupKerberosSourceConnectionRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GroupKerberosSourceConnection
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesGroupConnectionsKerberosPartialUpdate(id: Int, patchedGroupKerberosSourceConnectionRequest: PatchedGroupKerberosSourceConnectionRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> GroupKerberosSourceConnection {
        return try await sourcesGroupConnectionsKerberosPartialUpdateWithRequestBuilder(id: id, patchedGroupKerberosSourceConnectionRequest: patchedGroupKerberosSourceConnectionRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /sources/group_connections/kerberos/{id}/
     - Group-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Group Kerberos Source Connection. 
     - parameter patchedGroupKerberosSourceConnectionRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GroupKerberosSourceConnection> 
     */
    open class func sourcesGroupConnectionsKerberosPartialUpdateWithRequestBuilder(id: Int, patchedGroupKerberosSourceConnectionRequest: PatchedGroupKerberosSourceConnectionRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<GroupKerberosSourceConnection> {
        var localVariablePath = "/sources/group_connections/kerberos/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedGroupKerberosSourceConnectionRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GroupKerberosSourceConnection>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Group Kerberos Source Connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GroupKerberosSourceConnection
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesGroupConnectionsKerberosRetrieve(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> GroupKerberosSourceConnection {
        return try await sourcesGroupConnectionsKerberosRetrieveWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/group_connections/kerberos/{id}/
     - Group-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Group Kerberos Source Connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GroupKerberosSourceConnection> 
     */
    open class func sourcesGroupConnectionsKerberosRetrieveWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<GroupKerberosSourceConnection> {
        var localVariablePath = "/sources/group_connections/kerberos/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GroupKerberosSourceConnection>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Group Kerberos Source Connection. 
     - parameter groupKerberosSourceConnectionRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GroupKerberosSourceConnection
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesGroupConnectionsKerberosUpdate(id: Int, groupKerberosSourceConnectionRequest: GroupKerberosSourceConnectionRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> GroupKerberosSourceConnection {
        return try await sourcesGroupConnectionsKerberosUpdateWithRequestBuilder(id: id, groupKerberosSourceConnectionRequest: groupKerberosSourceConnectionRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /sources/group_connections/kerberos/{id}/
     - Group-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Group Kerberos Source Connection. 
     - parameter groupKerberosSourceConnectionRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GroupKerberosSourceConnection> 
     */
    open class func sourcesGroupConnectionsKerberosUpdateWithRequestBuilder(id: Int, groupKerberosSourceConnectionRequest: GroupKerberosSourceConnectionRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<GroupKerberosSourceConnection> {
        var localVariablePath = "/sources/group_connections/kerberos/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: groupKerberosSourceConnectionRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GroupKerberosSourceConnection>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Group Kerberos Source Connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesGroupConnectionsKerberosUsedByList(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await sourcesGroupConnectionsKerberosUsedByListWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/group_connections/kerberos/{id}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Group Kerberos Source Connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func sourcesGroupConnectionsKerberosUsedByListWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/sources/group_connections/kerberos/{id}/used_by/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter groupLDAPSourceConnectionRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GroupLDAPSourceConnection
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesGroupConnectionsLdapCreate(groupLDAPSourceConnectionRequest: GroupLDAPSourceConnectionRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> GroupLDAPSourceConnection {
        return try await sourcesGroupConnectionsLdapCreateWithRequestBuilder(groupLDAPSourceConnectionRequest: groupLDAPSourceConnectionRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /sources/group_connections/ldap/
     - Group-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter groupLDAPSourceConnectionRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GroupLDAPSourceConnection> 
     */
    open class func sourcesGroupConnectionsLdapCreateWithRequestBuilder(groupLDAPSourceConnectionRequest: GroupLDAPSourceConnectionRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<GroupLDAPSourceConnection> {
        let localVariablePath = "/sources/group_connections/ldap/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: groupLDAPSourceConnectionRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GroupLDAPSourceConnection>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Group LDAP Source Connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesGroupConnectionsLdapDestroy(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await sourcesGroupConnectionsLdapDestroyWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /sources/group_connections/ldap/{id}/
     - Group-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Group LDAP Source Connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func sourcesGroupConnectionsLdapDestroyWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/sources/group_connections/ldap/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter group: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter sourceSlug: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedGroupLDAPSourceConnectionList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesGroupConnectionsLdapList(group: UUID? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, sourceSlug: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedGroupLDAPSourceConnectionList {
        return try await sourcesGroupConnectionsLdapListWithRequestBuilder(group: group, ordering: ordering, page: page, pageSize: pageSize, search: search, sourceSlug: sourceSlug, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/group_connections/ldap/
     - Group-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter group: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter sourceSlug: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedGroupLDAPSourceConnectionList> 
     */
    open class func sourcesGroupConnectionsLdapListWithRequestBuilder(group: UUID? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, sourceSlug: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedGroupLDAPSourceConnectionList> {
        let localVariablePath = "/sources/group_connections/ldap/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "group": (wrappedValue: group?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "source__slug": (wrappedValue: sourceSlug?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedGroupLDAPSourceConnectionList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Group LDAP Source Connection. 
     - parameter patchedGroupLDAPSourceConnectionRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GroupLDAPSourceConnection
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesGroupConnectionsLdapPartialUpdate(id: Int, patchedGroupLDAPSourceConnectionRequest: PatchedGroupLDAPSourceConnectionRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> GroupLDAPSourceConnection {
        return try await sourcesGroupConnectionsLdapPartialUpdateWithRequestBuilder(id: id, patchedGroupLDAPSourceConnectionRequest: patchedGroupLDAPSourceConnectionRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /sources/group_connections/ldap/{id}/
     - Group-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Group LDAP Source Connection. 
     - parameter patchedGroupLDAPSourceConnectionRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GroupLDAPSourceConnection> 
     */
    open class func sourcesGroupConnectionsLdapPartialUpdateWithRequestBuilder(id: Int, patchedGroupLDAPSourceConnectionRequest: PatchedGroupLDAPSourceConnectionRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<GroupLDAPSourceConnection> {
        var localVariablePath = "/sources/group_connections/ldap/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedGroupLDAPSourceConnectionRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GroupLDAPSourceConnection>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Group LDAP Source Connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GroupLDAPSourceConnection
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesGroupConnectionsLdapRetrieve(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> GroupLDAPSourceConnection {
        return try await sourcesGroupConnectionsLdapRetrieveWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/group_connections/ldap/{id}/
     - Group-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Group LDAP Source Connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GroupLDAPSourceConnection> 
     */
    open class func sourcesGroupConnectionsLdapRetrieveWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<GroupLDAPSourceConnection> {
        var localVariablePath = "/sources/group_connections/ldap/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GroupLDAPSourceConnection>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Group LDAP Source Connection. 
     - parameter groupLDAPSourceConnectionRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GroupLDAPSourceConnection
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesGroupConnectionsLdapUpdate(id: Int, groupLDAPSourceConnectionRequest: GroupLDAPSourceConnectionRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> GroupLDAPSourceConnection {
        return try await sourcesGroupConnectionsLdapUpdateWithRequestBuilder(id: id, groupLDAPSourceConnectionRequest: groupLDAPSourceConnectionRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /sources/group_connections/ldap/{id}/
     - Group-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Group LDAP Source Connection. 
     - parameter groupLDAPSourceConnectionRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GroupLDAPSourceConnection> 
     */
    open class func sourcesGroupConnectionsLdapUpdateWithRequestBuilder(id: Int, groupLDAPSourceConnectionRequest: GroupLDAPSourceConnectionRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<GroupLDAPSourceConnection> {
        var localVariablePath = "/sources/group_connections/ldap/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: groupLDAPSourceConnectionRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GroupLDAPSourceConnection>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Group LDAP Source Connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesGroupConnectionsLdapUsedByList(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await sourcesGroupConnectionsLdapUsedByListWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/group_connections/ldap/{id}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Group LDAP Source Connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func sourcesGroupConnectionsLdapUsedByListWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/sources/group_connections/ldap/{id}/used_by/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter groupOAuthSourceConnectionRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GroupOAuthSourceConnection
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesGroupConnectionsOauthCreate(groupOAuthSourceConnectionRequest: GroupOAuthSourceConnectionRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> GroupOAuthSourceConnection {
        return try await sourcesGroupConnectionsOauthCreateWithRequestBuilder(groupOAuthSourceConnectionRequest: groupOAuthSourceConnectionRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /sources/group_connections/oauth/
     - Group-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter groupOAuthSourceConnectionRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GroupOAuthSourceConnection> 
     */
    open class func sourcesGroupConnectionsOauthCreateWithRequestBuilder(groupOAuthSourceConnectionRequest: GroupOAuthSourceConnectionRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<GroupOAuthSourceConnection> {
        let localVariablePath = "/sources/group_connections/oauth/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: groupOAuthSourceConnectionRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GroupOAuthSourceConnection>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Group OAuth Source Connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesGroupConnectionsOauthDestroy(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await sourcesGroupConnectionsOauthDestroyWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /sources/group_connections/oauth/{id}/
     - Group-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Group OAuth Source Connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func sourcesGroupConnectionsOauthDestroyWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/sources/group_connections/oauth/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter group: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter sourceSlug: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedGroupOAuthSourceConnectionList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesGroupConnectionsOauthList(group: UUID? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, sourceSlug: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedGroupOAuthSourceConnectionList {
        return try await sourcesGroupConnectionsOauthListWithRequestBuilder(group: group, ordering: ordering, page: page, pageSize: pageSize, search: search, sourceSlug: sourceSlug, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/group_connections/oauth/
     - Group-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter group: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter sourceSlug: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedGroupOAuthSourceConnectionList> 
     */
    open class func sourcesGroupConnectionsOauthListWithRequestBuilder(group: UUID? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, sourceSlug: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedGroupOAuthSourceConnectionList> {
        let localVariablePath = "/sources/group_connections/oauth/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "group": (wrappedValue: group?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "source__slug": (wrappedValue: sourceSlug?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedGroupOAuthSourceConnectionList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Group OAuth Source Connection. 
     - parameter patchedGroupOAuthSourceConnectionRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GroupOAuthSourceConnection
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesGroupConnectionsOauthPartialUpdate(id: Int, patchedGroupOAuthSourceConnectionRequest: PatchedGroupOAuthSourceConnectionRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> GroupOAuthSourceConnection {
        return try await sourcesGroupConnectionsOauthPartialUpdateWithRequestBuilder(id: id, patchedGroupOAuthSourceConnectionRequest: patchedGroupOAuthSourceConnectionRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /sources/group_connections/oauth/{id}/
     - Group-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Group OAuth Source Connection. 
     - parameter patchedGroupOAuthSourceConnectionRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GroupOAuthSourceConnection> 
     */
    open class func sourcesGroupConnectionsOauthPartialUpdateWithRequestBuilder(id: Int, patchedGroupOAuthSourceConnectionRequest: PatchedGroupOAuthSourceConnectionRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<GroupOAuthSourceConnection> {
        var localVariablePath = "/sources/group_connections/oauth/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedGroupOAuthSourceConnectionRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GroupOAuthSourceConnection>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Group OAuth Source Connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GroupOAuthSourceConnection
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesGroupConnectionsOauthRetrieve(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> GroupOAuthSourceConnection {
        return try await sourcesGroupConnectionsOauthRetrieveWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/group_connections/oauth/{id}/
     - Group-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Group OAuth Source Connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GroupOAuthSourceConnection> 
     */
    open class func sourcesGroupConnectionsOauthRetrieveWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<GroupOAuthSourceConnection> {
        var localVariablePath = "/sources/group_connections/oauth/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GroupOAuthSourceConnection>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Group OAuth Source Connection. 
     - parameter groupOAuthSourceConnectionRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GroupOAuthSourceConnection
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesGroupConnectionsOauthUpdate(id: Int, groupOAuthSourceConnectionRequest: GroupOAuthSourceConnectionRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> GroupOAuthSourceConnection {
        return try await sourcesGroupConnectionsOauthUpdateWithRequestBuilder(id: id, groupOAuthSourceConnectionRequest: groupOAuthSourceConnectionRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /sources/group_connections/oauth/{id}/
     - Group-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Group OAuth Source Connection. 
     - parameter groupOAuthSourceConnectionRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GroupOAuthSourceConnection> 
     */
    open class func sourcesGroupConnectionsOauthUpdateWithRequestBuilder(id: Int, groupOAuthSourceConnectionRequest: GroupOAuthSourceConnectionRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<GroupOAuthSourceConnection> {
        var localVariablePath = "/sources/group_connections/oauth/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: groupOAuthSourceConnectionRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GroupOAuthSourceConnection>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Group OAuth Source Connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesGroupConnectionsOauthUsedByList(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await sourcesGroupConnectionsOauthUsedByListWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/group_connections/oauth/{id}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Group OAuth Source Connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func sourcesGroupConnectionsOauthUsedByListWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/sources/group_connections/oauth/{id}/used_by/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter groupPlexSourceConnectionRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GroupPlexSourceConnection
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesGroupConnectionsPlexCreate(groupPlexSourceConnectionRequest: GroupPlexSourceConnectionRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> GroupPlexSourceConnection {
        return try await sourcesGroupConnectionsPlexCreateWithRequestBuilder(groupPlexSourceConnectionRequest: groupPlexSourceConnectionRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /sources/group_connections/plex/
     - Group-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter groupPlexSourceConnectionRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GroupPlexSourceConnection> 
     */
    open class func sourcesGroupConnectionsPlexCreateWithRequestBuilder(groupPlexSourceConnectionRequest: GroupPlexSourceConnectionRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<GroupPlexSourceConnection> {
        let localVariablePath = "/sources/group_connections/plex/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: groupPlexSourceConnectionRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GroupPlexSourceConnection>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Group Plex Source Connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesGroupConnectionsPlexDestroy(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await sourcesGroupConnectionsPlexDestroyWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /sources/group_connections/plex/{id}/
     - Group-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Group Plex Source Connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func sourcesGroupConnectionsPlexDestroyWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/sources/group_connections/plex/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter group: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter sourceSlug: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedGroupPlexSourceConnectionList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesGroupConnectionsPlexList(group: UUID? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, sourceSlug: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedGroupPlexSourceConnectionList {
        return try await sourcesGroupConnectionsPlexListWithRequestBuilder(group: group, ordering: ordering, page: page, pageSize: pageSize, search: search, sourceSlug: sourceSlug, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/group_connections/plex/
     - Group-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter group: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter sourceSlug: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedGroupPlexSourceConnectionList> 
     */
    open class func sourcesGroupConnectionsPlexListWithRequestBuilder(group: UUID? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, sourceSlug: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedGroupPlexSourceConnectionList> {
        let localVariablePath = "/sources/group_connections/plex/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "group": (wrappedValue: group?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "source__slug": (wrappedValue: sourceSlug?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedGroupPlexSourceConnectionList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Group Plex Source Connection. 
     - parameter patchedGroupPlexSourceConnectionRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GroupPlexSourceConnection
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesGroupConnectionsPlexPartialUpdate(id: Int, patchedGroupPlexSourceConnectionRequest: PatchedGroupPlexSourceConnectionRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> GroupPlexSourceConnection {
        return try await sourcesGroupConnectionsPlexPartialUpdateWithRequestBuilder(id: id, patchedGroupPlexSourceConnectionRequest: patchedGroupPlexSourceConnectionRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /sources/group_connections/plex/{id}/
     - Group-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Group Plex Source Connection. 
     - parameter patchedGroupPlexSourceConnectionRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GroupPlexSourceConnection> 
     */
    open class func sourcesGroupConnectionsPlexPartialUpdateWithRequestBuilder(id: Int, patchedGroupPlexSourceConnectionRequest: PatchedGroupPlexSourceConnectionRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<GroupPlexSourceConnection> {
        var localVariablePath = "/sources/group_connections/plex/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedGroupPlexSourceConnectionRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GroupPlexSourceConnection>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Group Plex Source Connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GroupPlexSourceConnection
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesGroupConnectionsPlexRetrieve(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> GroupPlexSourceConnection {
        return try await sourcesGroupConnectionsPlexRetrieveWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/group_connections/plex/{id}/
     - Group-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Group Plex Source Connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GroupPlexSourceConnection> 
     */
    open class func sourcesGroupConnectionsPlexRetrieveWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<GroupPlexSourceConnection> {
        var localVariablePath = "/sources/group_connections/plex/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GroupPlexSourceConnection>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Group Plex Source Connection. 
     - parameter groupPlexSourceConnectionRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GroupPlexSourceConnection
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesGroupConnectionsPlexUpdate(id: Int, groupPlexSourceConnectionRequest: GroupPlexSourceConnectionRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> GroupPlexSourceConnection {
        return try await sourcesGroupConnectionsPlexUpdateWithRequestBuilder(id: id, groupPlexSourceConnectionRequest: groupPlexSourceConnectionRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /sources/group_connections/plex/{id}/
     - Group-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Group Plex Source Connection. 
     - parameter groupPlexSourceConnectionRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GroupPlexSourceConnection> 
     */
    open class func sourcesGroupConnectionsPlexUpdateWithRequestBuilder(id: Int, groupPlexSourceConnectionRequest: GroupPlexSourceConnectionRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<GroupPlexSourceConnection> {
        var localVariablePath = "/sources/group_connections/plex/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: groupPlexSourceConnectionRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GroupPlexSourceConnection>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Group Plex Source Connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesGroupConnectionsPlexUsedByList(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await sourcesGroupConnectionsPlexUsedByListWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/group_connections/plex/{id}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Group Plex Source Connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func sourcesGroupConnectionsPlexUsedByListWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/sources/group_connections/plex/{id}/used_by/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter groupSAMLSourceConnectionRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GroupSAMLSourceConnection
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesGroupConnectionsSamlCreate(groupSAMLSourceConnectionRequest: GroupSAMLSourceConnectionRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> GroupSAMLSourceConnection {
        return try await sourcesGroupConnectionsSamlCreateWithRequestBuilder(groupSAMLSourceConnectionRequest: groupSAMLSourceConnectionRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /sources/group_connections/saml/
     - Group-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter groupSAMLSourceConnectionRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GroupSAMLSourceConnection> 
     */
    open class func sourcesGroupConnectionsSamlCreateWithRequestBuilder(groupSAMLSourceConnectionRequest: GroupSAMLSourceConnectionRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<GroupSAMLSourceConnection> {
        let localVariablePath = "/sources/group_connections/saml/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: groupSAMLSourceConnectionRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GroupSAMLSourceConnection>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Group SAML Source Connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesGroupConnectionsSamlDestroy(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await sourcesGroupConnectionsSamlDestroyWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /sources/group_connections/saml/{id}/
     - Group-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Group SAML Source Connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func sourcesGroupConnectionsSamlDestroyWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/sources/group_connections/saml/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter group: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter sourceSlug: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedGroupSAMLSourceConnectionList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesGroupConnectionsSamlList(group: UUID? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, sourceSlug: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedGroupSAMLSourceConnectionList {
        return try await sourcesGroupConnectionsSamlListWithRequestBuilder(group: group, ordering: ordering, page: page, pageSize: pageSize, search: search, sourceSlug: sourceSlug, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/group_connections/saml/
     - Group-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter group: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter sourceSlug: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedGroupSAMLSourceConnectionList> 
     */
    open class func sourcesGroupConnectionsSamlListWithRequestBuilder(group: UUID? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, sourceSlug: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedGroupSAMLSourceConnectionList> {
        let localVariablePath = "/sources/group_connections/saml/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "group": (wrappedValue: group?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "source__slug": (wrappedValue: sourceSlug?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedGroupSAMLSourceConnectionList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Group SAML Source Connection. 
     - parameter patchedGroupSAMLSourceConnectionRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GroupSAMLSourceConnection
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesGroupConnectionsSamlPartialUpdate(id: Int, patchedGroupSAMLSourceConnectionRequest: PatchedGroupSAMLSourceConnectionRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> GroupSAMLSourceConnection {
        return try await sourcesGroupConnectionsSamlPartialUpdateWithRequestBuilder(id: id, patchedGroupSAMLSourceConnectionRequest: patchedGroupSAMLSourceConnectionRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /sources/group_connections/saml/{id}/
     - Group-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Group SAML Source Connection. 
     - parameter patchedGroupSAMLSourceConnectionRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GroupSAMLSourceConnection> 
     */
    open class func sourcesGroupConnectionsSamlPartialUpdateWithRequestBuilder(id: Int, patchedGroupSAMLSourceConnectionRequest: PatchedGroupSAMLSourceConnectionRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<GroupSAMLSourceConnection> {
        var localVariablePath = "/sources/group_connections/saml/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedGroupSAMLSourceConnectionRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GroupSAMLSourceConnection>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Group SAML Source Connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GroupSAMLSourceConnection
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesGroupConnectionsSamlRetrieve(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> GroupSAMLSourceConnection {
        return try await sourcesGroupConnectionsSamlRetrieveWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/group_connections/saml/{id}/
     - Group-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Group SAML Source Connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GroupSAMLSourceConnection> 
     */
    open class func sourcesGroupConnectionsSamlRetrieveWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<GroupSAMLSourceConnection> {
        var localVariablePath = "/sources/group_connections/saml/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GroupSAMLSourceConnection>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Group SAML Source Connection. 
     - parameter groupSAMLSourceConnectionRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GroupSAMLSourceConnection
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesGroupConnectionsSamlUpdate(id: Int, groupSAMLSourceConnectionRequest: GroupSAMLSourceConnectionRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> GroupSAMLSourceConnection {
        return try await sourcesGroupConnectionsSamlUpdateWithRequestBuilder(id: id, groupSAMLSourceConnectionRequest: groupSAMLSourceConnectionRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /sources/group_connections/saml/{id}/
     - Group-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Group SAML Source Connection. 
     - parameter groupSAMLSourceConnectionRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GroupSAMLSourceConnection> 
     */
    open class func sourcesGroupConnectionsSamlUpdateWithRequestBuilder(id: Int, groupSAMLSourceConnectionRequest: GroupSAMLSourceConnectionRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<GroupSAMLSourceConnection> {
        var localVariablePath = "/sources/group_connections/saml/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: groupSAMLSourceConnectionRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GroupSAMLSourceConnection>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Group SAML Source Connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesGroupConnectionsSamlUsedByList(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await sourcesGroupConnectionsSamlUsedByListWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/group_connections/saml/{id}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Group SAML Source Connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func sourcesGroupConnectionsSamlUsedByListWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/sources/group_connections/saml/{id}/used_by/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter kerberosSourceRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: KerberosSource
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesKerberosCreate(kerberosSourceRequest: KerberosSourceRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> KerberosSource {
        return try await sourcesKerberosCreateWithRequestBuilder(kerberosSourceRequest: kerberosSourceRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /sources/kerberos/
     - Kerberos Source Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter kerberosSourceRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<KerberosSource> 
     */
    open class func sourcesKerberosCreateWithRequestBuilder(kerberosSourceRequest: KerberosSourceRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<KerberosSource> {
        let localVariablePath = "/sources/kerberos/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: kerberosSourceRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<KerberosSource>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter slug: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesKerberosDestroy(slug: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await sourcesKerberosDestroyWithRequestBuilder(slug: slug, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /sources/kerberos/{slug}/
     - Kerberos Source Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter slug: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func sourcesKerberosDestroyWithRequestBuilder(slug: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/sources/kerberos/{slug}/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter kadminType
     */
    public enum KadminType_sourcesKerberosList: String, Sendable, CaseIterable {
        case heimdal = "Heimdal"
        case mit = "MIT"
        case other = "other"
    }

    /**

     - parameter enabled: (query)  (optional)
     - parameter kadminType: (query) KAdmin server type   (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter passwordLoginUpdateInternalPassword: (query)  (optional)
     - parameter pbmUuid: (query)  (optional)
     - parameter realm: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter slug: (query)  (optional)
     - parameter spnegoServerName: (query)  (optional)
     - parameter syncPrincipal: (query)  (optional)
     - parameter syncUsers: (query)  (optional)
     - parameter syncUsersPassword: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedKerberosSourceList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesKerberosList(enabled: Bool? = nil, kadminType: KadminType_sourcesKerberosList? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, passwordLoginUpdateInternalPassword: Bool? = nil, pbmUuid: UUID? = nil, realm: String? = nil, search: String? = nil, slug: String? = nil, spnegoServerName: String? = nil, syncPrincipal: String? = nil, syncUsers: Bool? = nil, syncUsersPassword: Bool? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedKerberosSourceList {
        return try await sourcesKerberosListWithRequestBuilder(enabled: enabled, kadminType: kadminType, name: name, ordering: ordering, page: page, pageSize: pageSize, passwordLoginUpdateInternalPassword: passwordLoginUpdateInternalPassword, pbmUuid: pbmUuid, realm: realm, search: search, slug: slug, spnegoServerName: spnegoServerName, syncPrincipal: syncPrincipal, syncUsers: syncUsers, syncUsersPassword: syncUsersPassword, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/kerberos/
     - Kerberos Source Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter enabled: (query)  (optional)
     - parameter kadminType: (query) KAdmin server type   (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter passwordLoginUpdateInternalPassword: (query)  (optional)
     - parameter pbmUuid: (query)  (optional)
     - parameter realm: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter slug: (query)  (optional)
     - parameter spnegoServerName: (query)  (optional)
     - parameter syncPrincipal: (query)  (optional)
     - parameter syncUsers: (query)  (optional)
     - parameter syncUsersPassword: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedKerberosSourceList> 
     */
    open class func sourcesKerberosListWithRequestBuilder(enabled: Bool? = nil, kadminType: KadminType_sourcesKerberosList? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, passwordLoginUpdateInternalPassword: Bool? = nil, pbmUuid: UUID? = nil, realm: String? = nil, search: String? = nil, slug: String? = nil, spnegoServerName: String? = nil, syncPrincipal: String? = nil, syncUsers: Bool? = nil, syncUsersPassword: Bool? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedKerberosSourceList> {
        let localVariablePath = "/sources/kerberos/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "enabled": (wrappedValue: enabled?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "kadmin_type": (wrappedValue: kadminType?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "password_login_update_internal_password": (wrappedValue: passwordLoginUpdateInternalPassword?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "pbm_uuid": (wrappedValue: pbmUuid?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "realm": (wrappedValue: realm?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "slug": (wrappedValue: slug?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "spnego_server_name": (wrappedValue: spnegoServerName?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "sync_principal": (wrappedValue: syncPrincipal?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "sync_users": (wrappedValue: syncUsers?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "sync_users_password": (wrappedValue: syncUsersPassword?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedKerberosSourceList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter slug: (path)  
     - parameter patchedKerberosSourceRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: KerberosSource
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesKerberosPartialUpdate(slug: String, patchedKerberosSourceRequest: PatchedKerberosSourceRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> KerberosSource {
        return try await sourcesKerberosPartialUpdateWithRequestBuilder(slug: slug, patchedKerberosSourceRequest: patchedKerberosSourceRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /sources/kerberos/{slug}/
     - Kerberos Source Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter slug: (path)  
     - parameter patchedKerberosSourceRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<KerberosSource> 
     */
    open class func sourcesKerberosPartialUpdateWithRequestBuilder(slug: String, patchedKerberosSourceRequest: PatchedKerberosSourceRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<KerberosSource> {
        var localVariablePath = "/sources/kerberos/{slug}/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedKerberosSourceRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<KerberosSource>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter slug: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: KerberosSource
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesKerberosRetrieve(slug: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> KerberosSource {
        return try await sourcesKerberosRetrieveWithRequestBuilder(slug: slug, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/kerberos/{slug}/
     - Kerberos Source Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter slug: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<KerberosSource> 
     */
    open class func sourcesKerberosRetrieveWithRequestBuilder(slug: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<KerberosSource> {
        var localVariablePath = "/sources/kerberos/{slug}/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<KerberosSource>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter slug: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SyncStatus
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesKerberosSyncStatusRetrieve(slug: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> SyncStatus {
        return try await sourcesKerberosSyncStatusRetrieveWithRequestBuilder(slug: slug, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/kerberos/{slug}/sync/status/
     - Get provider's sync status
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter slug: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SyncStatus> 
     */
    open class func sourcesKerberosSyncStatusRetrieveWithRequestBuilder(slug: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<SyncStatus> {
        var localVariablePath = "/sources/kerberos/{slug}/sync/status/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SyncStatus>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter slug: (path)  
     - parameter kerberosSourceRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: KerberosSource
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesKerberosUpdate(slug: String, kerberosSourceRequest: KerberosSourceRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> KerberosSource {
        return try await sourcesKerberosUpdateWithRequestBuilder(slug: slug, kerberosSourceRequest: kerberosSourceRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /sources/kerberos/{slug}/
     - Kerberos Source Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter slug: (path)  
     - parameter kerberosSourceRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<KerberosSource> 
     */
    open class func sourcesKerberosUpdateWithRequestBuilder(slug: String, kerberosSourceRequest: KerberosSourceRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<KerberosSource> {
        var localVariablePath = "/sources/kerberos/{slug}/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: kerberosSourceRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<KerberosSource>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter slug: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesKerberosUsedByList(slug: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await sourcesKerberosUsedByListWithRequestBuilder(slug: slug, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/kerberos/{slug}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter slug: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func sourcesKerberosUsedByListWithRequestBuilder(slug: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/sources/kerberos/{slug}/used_by/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter lDAPSourceRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: LDAPSource
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesLdapCreate(lDAPSourceRequest: LDAPSourceRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> LDAPSource {
        return try await sourcesLdapCreateWithRequestBuilder(lDAPSourceRequest: lDAPSourceRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /sources/ldap/
     - LDAP Source Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter lDAPSourceRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<LDAPSource> 
     */
    open class func sourcesLdapCreateWithRequestBuilder(lDAPSourceRequest: LDAPSourceRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<LDAPSource> {
        let localVariablePath = "/sources/ldap/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: lDAPSourceRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LDAPSource>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter slug: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: LDAPDebug
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesLdapDebugRetrieve(slug: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> LDAPDebug {
        return try await sourcesLdapDebugRetrieveWithRequestBuilder(slug: slug, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/ldap/{slug}/debug/
     - Get raw LDAP data to debug
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter slug: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<LDAPDebug> 
     */
    open class func sourcesLdapDebugRetrieveWithRequestBuilder(slug: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<LDAPDebug> {
        var localVariablePath = "/sources/ldap/{slug}/debug/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LDAPDebug>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter slug: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesLdapDestroy(slug: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await sourcesLdapDestroyWithRequestBuilder(slug: slug, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /sources/ldap/{slug}/
     - LDAP Source Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter slug: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func sourcesLdapDestroyWithRequestBuilder(slug: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/sources/ldap/{slug}/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter additionalGroupDn: (query)  (optional)
     - parameter additionalUserDn: (query)  (optional)
     - parameter baseDn: (query)  (optional)
     - parameter bindCn: (query)  (optional)
     - parameter clientCertificate: (query)  (optional)
     - parameter deleteNotFoundObjects: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter groupMembershipField: (query)  (optional)
     - parameter groupObjectFilter: (query)  (optional)
     - parameter groupPropertyMappings: (query)  (optional)
     - parameter lookupGroupsFromUser: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter objectUniquenessField: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter passwordLoginUpdateInternalPassword: (query)  (optional)
     - parameter pbmUuid: (query)  (optional)
     - parameter peerCertificate: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter serverUri: (query)  (optional)
     - parameter slug: (query)  (optional)
     - parameter sni: (query)  (optional)
     - parameter startTls: (query)  (optional)
     - parameter syncGroups: (query)  (optional)
     - parameter syncParentGroup: (query)  (optional)
     - parameter syncUsers: (query)  (optional)
     - parameter syncUsersPassword: (query)  (optional)
     - parameter userMembershipAttribute: (query)  (optional)
     - parameter userObjectFilter: (query)  (optional)
     - parameter userPropertyMappings: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedLDAPSourceList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesLdapList(additionalGroupDn: String? = nil, additionalUserDn: String? = nil, baseDn: String? = nil, bindCn: String? = nil, clientCertificate: UUID? = nil, deleteNotFoundObjects: Bool? = nil, enabled: Bool? = nil, groupMembershipField: String? = nil, groupObjectFilter: String? = nil, groupPropertyMappings: [UUID]? = nil, lookupGroupsFromUser: Bool? = nil, name: String? = nil, objectUniquenessField: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, passwordLoginUpdateInternalPassword: Bool? = nil, pbmUuid: UUID? = nil, peerCertificate: UUID? = nil, search: String? = nil, serverUri: String? = nil, slug: String? = nil, sni: Bool? = nil, startTls: Bool? = nil, syncGroups: Bool? = nil, syncParentGroup: UUID? = nil, syncUsers: Bool? = nil, syncUsersPassword: Bool? = nil, userMembershipAttribute: String? = nil, userObjectFilter: String? = nil, userPropertyMappings: [UUID]? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedLDAPSourceList {
        return try await sourcesLdapListWithRequestBuilder(additionalGroupDn: additionalGroupDn, additionalUserDn: additionalUserDn, baseDn: baseDn, bindCn: bindCn, clientCertificate: clientCertificate, deleteNotFoundObjects: deleteNotFoundObjects, enabled: enabled, groupMembershipField: groupMembershipField, groupObjectFilter: groupObjectFilter, groupPropertyMappings: groupPropertyMappings, lookupGroupsFromUser: lookupGroupsFromUser, name: name, objectUniquenessField: objectUniquenessField, ordering: ordering, page: page, pageSize: pageSize, passwordLoginUpdateInternalPassword: passwordLoginUpdateInternalPassword, pbmUuid: pbmUuid, peerCertificate: peerCertificate, search: search, serverUri: serverUri, slug: slug, sni: sni, startTls: startTls, syncGroups: syncGroups, syncParentGroup: syncParentGroup, syncUsers: syncUsers, syncUsersPassword: syncUsersPassword, userMembershipAttribute: userMembershipAttribute, userObjectFilter: userObjectFilter, userPropertyMappings: userPropertyMappings, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/ldap/
     - LDAP Source Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter additionalGroupDn: (query)  (optional)
     - parameter additionalUserDn: (query)  (optional)
     - parameter baseDn: (query)  (optional)
     - parameter bindCn: (query)  (optional)
     - parameter clientCertificate: (query)  (optional)
     - parameter deleteNotFoundObjects: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter groupMembershipField: (query)  (optional)
     - parameter groupObjectFilter: (query)  (optional)
     - parameter groupPropertyMappings: (query)  (optional)
     - parameter lookupGroupsFromUser: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter objectUniquenessField: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter passwordLoginUpdateInternalPassword: (query)  (optional)
     - parameter pbmUuid: (query)  (optional)
     - parameter peerCertificate: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter serverUri: (query)  (optional)
     - parameter slug: (query)  (optional)
     - parameter sni: (query)  (optional)
     - parameter startTls: (query)  (optional)
     - parameter syncGroups: (query)  (optional)
     - parameter syncParentGroup: (query)  (optional)
     - parameter syncUsers: (query)  (optional)
     - parameter syncUsersPassword: (query)  (optional)
     - parameter userMembershipAttribute: (query)  (optional)
     - parameter userObjectFilter: (query)  (optional)
     - parameter userPropertyMappings: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedLDAPSourceList> 
     */
    open class func sourcesLdapListWithRequestBuilder(additionalGroupDn: String? = nil, additionalUserDn: String? = nil, baseDn: String? = nil, bindCn: String? = nil, clientCertificate: UUID? = nil, deleteNotFoundObjects: Bool? = nil, enabled: Bool? = nil, groupMembershipField: String? = nil, groupObjectFilter: String? = nil, groupPropertyMappings: [UUID]? = nil, lookupGroupsFromUser: Bool? = nil, name: String? = nil, objectUniquenessField: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, passwordLoginUpdateInternalPassword: Bool? = nil, pbmUuid: UUID? = nil, peerCertificate: UUID? = nil, search: String? = nil, serverUri: String? = nil, slug: String? = nil, sni: Bool? = nil, startTls: Bool? = nil, syncGroups: Bool? = nil, syncParentGroup: UUID? = nil, syncUsers: Bool? = nil, syncUsersPassword: Bool? = nil, userMembershipAttribute: String? = nil, userObjectFilter: String? = nil, userPropertyMappings: [UUID]? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedLDAPSourceList> {
        let localVariablePath = "/sources/ldap/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "additional_group_dn": (wrappedValue: additionalGroupDn?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "additional_user_dn": (wrappedValue: additionalUserDn?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "base_dn": (wrappedValue: baseDn?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "bind_cn": (wrappedValue: bindCn?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "client_certificate": (wrappedValue: clientCertificate?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "delete_not_found_objects": (wrappedValue: deleteNotFoundObjects?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "enabled": (wrappedValue: enabled?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "group_membership_field": (wrappedValue: groupMembershipField?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "group_object_filter": (wrappedValue: groupObjectFilter?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "group_property_mappings": (wrappedValue: groupPropertyMappings?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "lookup_groups_from_user": (wrappedValue: lookupGroupsFromUser?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "object_uniqueness_field": (wrappedValue: objectUniquenessField?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "password_login_update_internal_password": (wrappedValue: passwordLoginUpdateInternalPassword?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "pbm_uuid": (wrappedValue: pbmUuid?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "peer_certificate": (wrappedValue: peerCertificate?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "server_uri": (wrappedValue: serverUri?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "slug": (wrappedValue: slug?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "sni": (wrappedValue: sni?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "start_tls": (wrappedValue: startTls?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "sync_groups": (wrappedValue: syncGroups?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "sync_parent_group": (wrappedValue: syncParentGroup?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "sync_users": (wrappedValue: syncUsers?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "sync_users_password": (wrappedValue: syncUsersPassword?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "user_membership_attribute": (wrappedValue: userMembershipAttribute?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "user_object_filter": (wrappedValue: userObjectFilter?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "user_property_mappings": (wrappedValue: userPropertyMappings?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedLDAPSourceList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter slug: (path)  
     - parameter patchedLDAPSourceRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: LDAPSource
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesLdapPartialUpdate(slug: String, patchedLDAPSourceRequest: PatchedLDAPSourceRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> LDAPSource {
        return try await sourcesLdapPartialUpdateWithRequestBuilder(slug: slug, patchedLDAPSourceRequest: patchedLDAPSourceRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /sources/ldap/{slug}/
     - LDAP Source Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter slug: (path)  
     - parameter patchedLDAPSourceRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<LDAPSource> 
     */
    open class func sourcesLdapPartialUpdateWithRequestBuilder(slug: String, patchedLDAPSourceRequest: PatchedLDAPSourceRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<LDAPSource> {
        var localVariablePath = "/sources/ldap/{slug}/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedLDAPSourceRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LDAPSource>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter slug: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: LDAPSource
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesLdapRetrieve(slug: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> LDAPSource {
        return try await sourcesLdapRetrieveWithRequestBuilder(slug: slug, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/ldap/{slug}/
     - LDAP Source Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter slug: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<LDAPSource> 
     */
    open class func sourcesLdapRetrieveWithRequestBuilder(slug: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<LDAPSource> {
        var localVariablePath = "/sources/ldap/{slug}/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LDAPSource>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter slug: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SyncStatus
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesLdapSyncStatusRetrieve(slug: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> SyncStatus {
        return try await sourcesLdapSyncStatusRetrieveWithRequestBuilder(slug: slug, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/ldap/{slug}/sync/status/
     - Get provider's sync status
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter slug: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SyncStatus> 
     */
    open class func sourcesLdapSyncStatusRetrieveWithRequestBuilder(slug: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<SyncStatus> {
        var localVariablePath = "/sources/ldap/{slug}/sync/status/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SyncStatus>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter slug: (path)  
     - parameter lDAPSourceRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: LDAPSource
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesLdapUpdate(slug: String, lDAPSourceRequest: LDAPSourceRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> LDAPSource {
        return try await sourcesLdapUpdateWithRequestBuilder(slug: slug, lDAPSourceRequest: lDAPSourceRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /sources/ldap/{slug}/
     - LDAP Source Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter slug: (path)  
     - parameter lDAPSourceRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<LDAPSource> 
     */
    open class func sourcesLdapUpdateWithRequestBuilder(slug: String, lDAPSourceRequest: LDAPSourceRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<LDAPSource> {
        var localVariablePath = "/sources/ldap/{slug}/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: lDAPSourceRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LDAPSource>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter slug: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesLdapUsedByList(slug: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await sourcesLdapUsedByListWithRequestBuilder(slug: slug, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/ldap/{slug}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter slug: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func sourcesLdapUsedByListWithRequestBuilder(slug: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/sources/ldap/{slug}/used_by/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter oAuthSourceRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: OAuthSource
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesOauthCreate(oAuthSourceRequest: OAuthSourceRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> OAuthSource {
        return try await sourcesOauthCreateWithRequestBuilder(oAuthSourceRequest: oAuthSourceRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /sources/oauth/
     - Source Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter oAuthSourceRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<OAuthSource> 
     */
    open class func sourcesOauthCreateWithRequestBuilder(oAuthSourceRequest: OAuthSourceRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<OAuthSource> {
        let localVariablePath = "/sources/oauth/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: oAuthSourceRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OAuthSource>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter slug: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesOauthDestroy(slug: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await sourcesOauthDestroyWithRequestBuilder(slug: slug, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /sources/oauth/{slug}/
     - Source Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter slug: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func sourcesOauthDestroyWithRequestBuilder(slug: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/sources/oauth/{slug}/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter groupMatchingMode
     */
    public enum GroupMatchingMode_sourcesOauthList: String, Sendable, CaseIterable {
        case identifier = "identifier"
        case nameDeny = "name_deny"
        case nameLink = "name_link"
    }

    /**
     * enum for parameter policyEngineMode
     */
    public enum PolicyEngineMode_sourcesOauthList: String, Sendable, CaseIterable {
        case all = "all"
        case any = "any"
    }

    /**
     * enum for parameter userMatchingMode
     */
    public enum UserMatchingMode_sourcesOauthList: String, Sendable, CaseIterable {
        case emailDeny = "email_deny"
        case emailLink = "email_link"
        case identifier = "identifier"
        case usernameDeny = "username_deny"
        case usernameLink = "username_link"
    }

    /**

     - parameter accessTokenUrl: (query)  (optional)
     - parameter additionalScopes: (query)  (optional)
     - parameter authenticationFlow: (query)  (optional)
     - parameter authorizationUrl: (query)  (optional)
     - parameter consumerKey: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter enrollmentFlow: (query)  (optional)
     - parameter groupMatchingMode: (query) How the source determines if an existing group should be used or a new group created.   (optional)
     - parameter hasJwks: (query) Only return sources with JWKS data (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter pbmUuid: (query)  (optional)
     - parameter policyEngineMode: (query)  (optional)
     - parameter profileUrl: (query)  (optional)
     - parameter providerType: (query)  (optional)
     - parameter requestTokenUrl: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter slug: (query)  (optional)
     - parameter userMatchingMode: (query) How the source determines if an existing user should be authenticated or a new user enrolled.   (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedOAuthSourceList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesOauthList(accessTokenUrl: String? = nil, additionalScopes: String? = nil, authenticationFlow: UUID? = nil, authorizationUrl: String? = nil, consumerKey: String? = nil, enabled: Bool? = nil, enrollmentFlow: UUID? = nil, groupMatchingMode: GroupMatchingMode_sourcesOauthList? = nil, hasJwks: Bool? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, pbmUuid: UUID? = nil, policyEngineMode: PolicyEngineMode_sourcesOauthList? = nil, profileUrl: String? = nil, providerType: String? = nil, requestTokenUrl: String? = nil, search: String? = nil, slug: String? = nil, userMatchingMode: UserMatchingMode_sourcesOauthList? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedOAuthSourceList {
        return try await sourcesOauthListWithRequestBuilder(accessTokenUrl: accessTokenUrl, additionalScopes: additionalScopes, authenticationFlow: authenticationFlow, authorizationUrl: authorizationUrl, consumerKey: consumerKey, enabled: enabled, enrollmentFlow: enrollmentFlow, groupMatchingMode: groupMatchingMode, hasJwks: hasJwks, name: name, ordering: ordering, page: page, pageSize: pageSize, pbmUuid: pbmUuid, policyEngineMode: policyEngineMode, profileUrl: profileUrl, providerType: providerType, requestTokenUrl: requestTokenUrl, search: search, slug: slug, userMatchingMode: userMatchingMode, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/oauth/
     - Source Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter accessTokenUrl: (query)  (optional)
     - parameter additionalScopes: (query)  (optional)
     - parameter authenticationFlow: (query)  (optional)
     - parameter authorizationUrl: (query)  (optional)
     - parameter consumerKey: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter enrollmentFlow: (query)  (optional)
     - parameter groupMatchingMode: (query) How the source determines if an existing group should be used or a new group created.   (optional)
     - parameter hasJwks: (query) Only return sources with JWKS data (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter pbmUuid: (query)  (optional)
     - parameter policyEngineMode: (query)  (optional)
     - parameter profileUrl: (query)  (optional)
     - parameter providerType: (query)  (optional)
     - parameter requestTokenUrl: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter slug: (query)  (optional)
     - parameter userMatchingMode: (query) How the source determines if an existing user should be authenticated or a new user enrolled.   (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedOAuthSourceList> 
     */
    open class func sourcesOauthListWithRequestBuilder(accessTokenUrl: String? = nil, additionalScopes: String? = nil, authenticationFlow: UUID? = nil, authorizationUrl: String? = nil, consumerKey: String? = nil, enabled: Bool? = nil, enrollmentFlow: UUID? = nil, groupMatchingMode: GroupMatchingMode_sourcesOauthList? = nil, hasJwks: Bool? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, pbmUuid: UUID? = nil, policyEngineMode: PolicyEngineMode_sourcesOauthList? = nil, profileUrl: String? = nil, providerType: String? = nil, requestTokenUrl: String? = nil, search: String? = nil, slug: String? = nil, userMatchingMode: UserMatchingMode_sourcesOauthList? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedOAuthSourceList> {
        let localVariablePath = "/sources/oauth/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token_url": (wrappedValue: accessTokenUrl?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "additional_scopes": (wrappedValue: additionalScopes?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "authentication_flow": (wrappedValue: authenticationFlow?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "authorization_url": (wrappedValue: authorizationUrl?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "consumer_key": (wrappedValue: consumerKey?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "enabled": (wrappedValue: enabled?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "enrollment_flow": (wrappedValue: enrollmentFlow?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "group_matching_mode": (wrappedValue: groupMatchingMode?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "has_jwks": (wrappedValue: hasJwks?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "pbm_uuid": (wrappedValue: pbmUuid?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "policy_engine_mode": (wrappedValue: policyEngineMode?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "profile_url": (wrappedValue: profileUrl?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "provider_type": (wrappedValue: providerType?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "request_token_url": (wrappedValue: requestTokenUrl?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "slug": (wrappedValue: slug?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "user_matching_mode": (wrappedValue: userMatchingMode?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedOAuthSourceList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter slug: (path)  
     - parameter patchedOAuthSourceRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: OAuthSource
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesOauthPartialUpdate(slug: String, patchedOAuthSourceRequest: PatchedOAuthSourceRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> OAuthSource {
        return try await sourcesOauthPartialUpdateWithRequestBuilder(slug: slug, patchedOAuthSourceRequest: patchedOAuthSourceRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /sources/oauth/{slug}/
     - Source Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter slug: (path)  
     - parameter patchedOAuthSourceRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<OAuthSource> 
     */
    open class func sourcesOauthPartialUpdateWithRequestBuilder(slug: String, patchedOAuthSourceRequest: PatchedOAuthSourceRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<OAuthSource> {
        var localVariablePath = "/sources/oauth/{slug}/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedOAuthSourceRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OAuthSource>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter slug: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: OAuthSource
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesOauthRetrieve(slug: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> OAuthSource {
        return try await sourcesOauthRetrieveWithRequestBuilder(slug: slug, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/oauth/{slug}/
     - Source Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter slug: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<OAuthSource> 
     */
    open class func sourcesOauthRetrieveWithRequestBuilder(slug: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<OAuthSource> {
        var localVariablePath = "/sources/oauth/{slug}/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OAuthSource>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter name: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [SourceType]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesOauthSourceTypesList(name: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [SourceType] {
        return try await sourcesOauthSourceTypesListWithRequestBuilder(name: name, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/oauth/source_types/
     - Get all creatable source types. If ?name is set, only returns the type for <name>. If <name> isn't found, returns the default type.
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter name: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[SourceType]> 
     */
    open class func sourcesOauthSourceTypesListWithRequestBuilder(name: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[SourceType]> {
        let localVariablePath = "/sources/oauth/source_types/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[SourceType]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter slug: (path)  
     - parameter oAuthSourceRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: OAuthSource
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesOauthUpdate(slug: String, oAuthSourceRequest: OAuthSourceRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> OAuthSource {
        return try await sourcesOauthUpdateWithRequestBuilder(slug: slug, oAuthSourceRequest: oAuthSourceRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /sources/oauth/{slug}/
     - Source Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter slug: (path)  
     - parameter oAuthSourceRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<OAuthSource> 
     */
    open class func sourcesOauthUpdateWithRequestBuilder(slug: String, oAuthSourceRequest: OAuthSourceRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<OAuthSource> {
        var localVariablePath = "/sources/oauth/{slug}/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: oAuthSourceRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OAuthSource>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter slug: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesOauthUsedByList(slug: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await sourcesOauthUsedByListWithRequestBuilder(slug: slug, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/oauth/{slug}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter slug: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func sourcesOauthUsedByListWithRequestBuilder(slug: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/sources/oauth/{slug}/used_by/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter plexSourceRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PlexSource
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesPlexCreate(plexSourceRequest: PlexSourceRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PlexSource {
        return try await sourcesPlexCreateWithRequestBuilder(plexSourceRequest: plexSourceRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /sources/plex/
     - Plex source Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter plexSourceRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PlexSource> 
     */
    open class func sourcesPlexCreateWithRequestBuilder(plexSourceRequest: PlexSourceRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PlexSource> {
        let localVariablePath = "/sources/plex/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: plexSourceRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PlexSource>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter slug: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesPlexDestroy(slug: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await sourcesPlexDestroyWithRequestBuilder(slug: slug, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /sources/plex/{slug}/
     - Plex source Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter slug: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func sourcesPlexDestroyWithRequestBuilder(slug: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/sources/plex/{slug}/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter groupMatchingMode
     */
    public enum GroupMatchingMode_sourcesPlexList: String, Sendable, CaseIterable {
        case identifier = "identifier"
        case nameDeny = "name_deny"
        case nameLink = "name_link"
    }

    /**
     * enum for parameter policyEngineMode
     */
    public enum PolicyEngineMode_sourcesPlexList: String, Sendable, CaseIterable {
        case all = "all"
        case any = "any"
    }

    /**
     * enum for parameter userMatchingMode
     */
    public enum UserMatchingMode_sourcesPlexList: String, Sendable, CaseIterable {
        case emailDeny = "email_deny"
        case emailLink = "email_link"
        case identifier = "identifier"
        case usernameDeny = "username_deny"
        case usernameLink = "username_link"
    }

    /**

     - parameter allowFriends: (query)  (optional)
     - parameter authenticationFlow: (query)  (optional)
     - parameter clientId: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter enrollmentFlow: (query)  (optional)
     - parameter groupMatchingMode: (query) How the source determines if an existing group should be used or a new group created.   (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter pbmUuid: (query)  (optional)
     - parameter policyEngineMode: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter slug: (query)  (optional)
     - parameter userMatchingMode: (query) How the source determines if an existing user should be authenticated or a new user enrolled.   (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedPlexSourceList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesPlexList(allowFriends: Bool? = nil, authenticationFlow: UUID? = nil, clientId: String? = nil, enabled: Bool? = nil, enrollmentFlow: UUID? = nil, groupMatchingMode: GroupMatchingMode_sourcesPlexList? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, pbmUuid: UUID? = nil, policyEngineMode: PolicyEngineMode_sourcesPlexList? = nil, search: String? = nil, slug: String? = nil, userMatchingMode: UserMatchingMode_sourcesPlexList? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedPlexSourceList {
        return try await sourcesPlexListWithRequestBuilder(allowFriends: allowFriends, authenticationFlow: authenticationFlow, clientId: clientId, enabled: enabled, enrollmentFlow: enrollmentFlow, groupMatchingMode: groupMatchingMode, name: name, ordering: ordering, page: page, pageSize: pageSize, pbmUuid: pbmUuid, policyEngineMode: policyEngineMode, search: search, slug: slug, userMatchingMode: userMatchingMode, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/plex/
     - Plex source Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter allowFriends: (query)  (optional)
     - parameter authenticationFlow: (query)  (optional)
     - parameter clientId: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter enrollmentFlow: (query)  (optional)
     - parameter groupMatchingMode: (query) How the source determines if an existing group should be used or a new group created.   (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter pbmUuid: (query)  (optional)
     - parameter policyEngineMode: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter slug: (query)  (optional)
     - parameter userMatchingMode: (query) How the source determines if an existing user should be authenticated or a new user enrolled.   (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedPlexSourceList> 
     */
    open class func sourcesPlexListWithRequestBuilder(allowFriends: Bool? = nil, authenticationFlow: UUID? = nil, clientId: String? = nil, enabled: Bool? = nil, enrollmentFlow: UUID? = nil, groupMatchingMode: GroupMatchingMode_sourcesPlexList? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, pbmUuid: UUID? = nil, policyEngineMode: PolicyEngineMode_sourcesPlexList? = nil, search: String? = nil, slug: String? = nil, userMatchingMode: UserMatchingMode_sourcesPlexList? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedPlexSourceList> {
        let localVariablePath = "/sources/plex/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "allow_friends": (wrappedValue: allowFriends?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "authentication_flow": (wrappedValue: authenticationFlow?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "client_id": (wrappedValue: clientId?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "enabled": (wrappedValue: enabled?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "enrollment_flow": (wrappedValue: enrollmentFlow?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "group_matching_mode": (wrappedValue: groupMatchingMode?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "pbm_uuid": (wrappedValue: pbmUuid?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "policy_engine_mode": (wrappedValue: policyEngineMode?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "slug": (wrappedValue: slug?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "user_matching_mode": (wrappedValue: userMatchingMode?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedPlexSourceList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter slug: (path)  
     - parameter patchedPlexSourceRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PlexSource
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesPlexPartialUpdate(slug: String, patchedPlexSourceRequest: PatchedPlexSourceRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PlexSource {
        return try await sourcesPlexPartialUpdateWithRequestBuilder(slug: slug, patchedPlexSourceRequest: patchedPlexSourceRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /sources/plex/{slug}/
     - Plex source Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter slug: (path)  
     - parameter patchedPlexSourceRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PlexSource> 
     */
    open class func sourcesPlexPartialUpdateWithRequestBuilder(slug: String, patchedPlexSourceRequest: PatchedPlexSourceRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PlexSource> {
        var localVariablePath = "/sources/plex/{slug}/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedPlexSourceRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PlexSource>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter plexTokenRedeemRequest: (body)  
     - parameter slug: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesPlexRedeemTokenAuthenticatedCreate(plexTokenRedeemRequest: PlexTokenRedeemRequest, slug: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await sourcesPlexRedeemTokenAuthenticatedCreateWithRequestBuilder(plexTokenRedeemRequest: plexTokenRedeemRequest, slug: slug, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /sources/plex/redeem_token_authenticated/
     - Redeem a plex token for an authenticated user, creating a connection
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter plexTokenRedeemRequest: (body)  
     - parameter slug: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func sourcesPlexRedeemTokenAuthenticatedCreateWithRequestBuilder(plexTokenRedeemRequest: PlexTokenRedeemRequest, slug: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        let localVariablePath = "/sources/plex/redeem_token_authenticated/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: plexTokenRedeemRequest, codableHelper: apiConfiguration.codableHelper)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "slug": (wrappedValue: slug?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter plexTokenRedeemRequest: (body)  
     - parameter slug: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RedirectChallenge
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesPlexRedeemTokenCreate(plexTokenRedeemRequest: PlexTokenRedeemRequest, slug: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> RedirectChallenge {
        return try await sourcesPlexRedeemTokenCreateWithRequestBuilder(plexTokenRedeemRequest: plexTokenRedeemRequest, slug: slug, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /sources/plex/redeem_token/
     - Redeem a plex token, check it's access to resources against what's allowed for the source, and redirect to an authentication/enrollment flow.
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter plexTokenRedeemRequest: (body)  
     - parameter slug: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<RedirectChallenge> 
     */
    open class func sourcesPlexRedeemTokenCreateWithRequestBuilder(plexTokenRedeemRequest: PlexTokenRedeemRequest, slug: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<RedirectChallenge> {
        let localVariablePath = "/sources/plex/redeem_token/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: plexTokenRedeemRequest, codableHelper: apiConfiguration.codableHelper)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "slug": (wrappedValue: slug?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RedirectChallenge>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter slug: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PlexSource
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesPlexRetrieve(slug: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PlexSource {
        return try await sourcesPlexRetrieveWithRequestBuilder(slug: slug, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/plex/{slug}/
     - Plex source Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter slug: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PlexSource> 
     */
    open class func sourcesPlexRetrieveWithRequestBuilder(slug: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PlexSource> {
        var localVariablePath = "/sources/plex/{slug}/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PlexSource>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter slug: (path)  
     - parameter plexSourceRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PlexSource
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesPlexUpdate(slug: String, plexSourceRequest: PlexSourceRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PlexSource {
        return try await sourcesPlexUpdateWithRequestBuilder(slug: slug, plexSourceRequest: plexSourceRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /sources/plex/{slug}/
     - Plex source Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter slug: (path)  
     - parameter plexSourceRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PlexSource> 
     */
    open class func sourcesPlexUpdateWithRequestBuilder(slug: String, plexSourceRequest: PlexSourceRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PlexSource> {
        var localVariablePath = "/sources/plex/{slug}/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: plexSourceRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PlexSource>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter slug: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesPlexUsedByList(slug: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await sourcesPlexUsedByListWithRequestBuilder(slug: slug, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/plex/{slug}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter slug: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func sourcesPlexUsedByListWithRequestBuilder(slug: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/sources/plex/{slug}/used_by/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter sAMLSourceRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SAMLSource
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesSamlCreate(sAMLSourceRequest: SAMLSourceRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> SAMLSource {
        return try await sourcesSamlCreateWithRequestBuilder(sAMLSourceRequest: sAMLSourceRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /sources/saml/
     - SAMLSource Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter sAMLSourceRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SAMLSource> 
     */
    open class func sourcesSamlCreateWithRequestBuilder(sAMLSourceRequest: SAMLSourceRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<SAMLSource> {
        let localVariablePath = "/sources/saml/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sAMLSourceRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SAMLSource>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter slug: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesSamlDestroy(slug: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await sourcesSamlDestroyWithRequestBuilder(slug: slug, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /sources/saml/{slug}/
     - SAMLSource Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter slug: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func sourcesSamlDestroyWithRequestBuilder(slug: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/sources/saml/{slug}/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter bindingType
     */
    public enum BindingType_sourcesSamlList: String, Sendable, CaseIterable {
        case post = "POST"
        case postAuto = "POST_AUTO"
        case redirect = "REDIRECT"
    }

    /**
     * enum for parameter digestAlgorithm
     */
    public enum DigestAlgorithm_sourcesSamlList: String, Sendable, CaseIterable {
        case httpSlashSlashWwwPeriodW3PeriodOrgSlash2000Slash09SlashXmldsigHashSha1 = "http://www.w3.org/2000/09/xmldsig#sha1"
        case httpSlashSlashWwwPeriodW3PeriodOrgSlash2001Slash04SlashXmldsigMoreHashSha384 = "http://www.w3.org/2001/04/xmldsig-more#sha384"
        case httpSlashSlashWwwPeriodW3PeriodOrgSlash2001Slash04SlashXmlencHashSha256 = "http://www.w3.org/2001/04/xmlenc#sha256"
        case httpSlashSlashWwwPeriodW3PeriodOrgSlash2001Slash04SlashXmlencHashSha512 = "http://www.w3.org/2001/04/xmlenc#sha512"
    }

    /**
     * enum for parameter nameIdPolicy
     */
    public enum NameIdPolicy_sourcesSamlList: String, Sendable, CaseIterable {
        case urnOasisNamesTcSaml1Period1NameidFormatX509subjectname = "urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName"
        case urnOasisNamesTcSaml1Period1NameidFormatEmailaddress = "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress"
        case urnOasisNamesTcSaml1Period1NameidFormatUnspecified = "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified"
        case urnOasisNamesTcSaml2Period0NameidFormatWindowsdomainqualifiedname = "urn:oasis:names:tc:SAML:2.0:nameid-format:WindowsDomainQualifiedName"
        case urnOasisNamesTcSaml2Period0NameidFormatPersistent = "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent"
        case urnOasisNamesTcSaml2Period0NameidFormatTransient = "urn:oasis:names:tc:SAML:2.0:nameid-format:transient"
    }

    /**
     * enum for parameter policyEngineMode
     */
    public enum PolicyEngineMode_sourcesSamlList: String, Sendable, CaseIterable {
        case all = "all"
        case any = "any"
    }

    /**
     * enum for parameter signatureAlgorithm
     */
    public enum SignatureAlgorithm_sourcesSamlList: String, Sendable, CaseIterable {
        case httpSlashSlashWwwPeriodW3PeriodOrgSlash2000Slash09SlashXmldsigHashDsaSha1 = "http://www.w3.org/2000/09/xmldsig#dsa-sha1"
        case httpSlashSlashWwwPeriodW3PeriodOrgSlash2000Slash09SlashXmldsigHashRsaSha1 = "http://www.w3.org/2000/09/xmldsig#rsa-sha1"
        case httpSlashSlashWwwPeriodW3PeriodOrgSlash2001Slash04SlashXmldsigMoreHashEcdsaSha1 = "http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha1"
        case httpSlashSlashWwwPeriodW3PeriodOrgSlash2001Slash04SlashXmldsigMoreHashEcdsaSha256 = "http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha256"
        case httpSlashSlashWwwPeriodW3PeriodOrgSlash2001Slash04SlashXmldsigMoreHashEcdsaSha384 = "http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha384"
        case httpSlashSlashWwwPeriodW3PeriodOrgSlash2001Slash04SlashXmldsigMoreHashEcdsaSha512 = "http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha512"
        case httpSlashSlashWwwPeriodW3PeriodOrgSlash2001Slash04SlashXmldsigMoreHashRsaSha256 = "http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"
        case httpSlashSlashWwwPeriodW3PeriodOrgSlash2001Slash04SlashXmldsigMoreHashRsaSha384 = "http://www.w3.org/2001/04/xmldsig-more#rsa-sha384"
        case httpSlashSlashWwwPeriodW3PeriodOrgSlash2001Slash04SlashXmldsigMoreHashRsaSha512 = "http://www.w3.org/2001/04/xmldsig-more#rsa-sha512"
    }

    /**
     * enum for parameter userMatchingMode
     */
    public enum UserMatchingMode_sourcesSamlList: String, Sendable, CaseIterable {
        case emailDeny = "email_deny"
        case emailLink = "email_link"
        case identifier = "identifier"
        case usernameDeny = "username_deny"
        case usernameLink = "username_link"
    }

    /**

     - parameter allowIdpInitiated: (query)  (optional)
     - parameter authenticationFlow: (query)  (optional)
     - parameter bindingType: (query)  (optional)
     - parameter digestAlgorithm: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter enrollmentFlow: (query)  (optional)
     - parameter issuer: (query)  (optional)
     - parameter managed: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter nameIdPolicy: (query) NameID Policy sent to the IdP. Can be unset, in which case no Policy is sent.   (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter pbmUuid: (query)  (optional)
     - parameter policyEngineMode: (query)  (optional)
     - parameter preAuthenticationFlow: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter signatureAlgorithm: (query)  (optional)
     - parameter signedAssertion: (query)  (optional)
     - parameter signedResponse: (query)  (optional)
     - parameter signingKp: (query)  (optional)
     - parameter sloUrl: (query)  (optional)
     - parameter slug: (query)  (optional)
     - parameter ssoUrl: (query)  (optional)
     - parameter temporaryUserDeleteAfter: (query)  (optional)
     - parameter userMatchingMode: (query) How the source determines if an existing user should be authenticated or a new user enrolled.   (optional)
     - parameter verificationKp: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedSAMLSourceList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesSamlList(allowIdpInitiated: Bool? = nil, authenticationFlow: UUID? = nil, bindingType: BindingType_sourcesSamlList? = nil, digestAlgorithm: DigestAlgorithm_sourcesSamlList? = nil, enabled: Bool? = nil, enrollmentFlow: UUID? = nil, issuer: String? = nil, managed: String? = nil, name: String? = nil, nameIdPolicy: NameIdPolicy_sourcesSamlList? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, pbmUuid: UUID? = nil, policyEngineMode: PolicyEngineMode_sourcesSamlList? = nil, preAuthenticationFlow: UUID? = nil, search: String? = nil, signatureAlgorithm: SignatureAlgorithm_sourcesSamlList? = nil, signedAssertion: Bool? = nil, signedResponse: Bool? = nil, signingKp: UUID? = nil, sloUrl: String? = nil, slug: String? = nil, ssoUrl: String? = nil, temporaryUserDeleteAfter: String? = nil, userMatchingMode: UserMatchingMode_sourcesSamlList? = nil, verificationKp: UUID? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedSAMLSourceList {
        return try await sourcesSamlListWithRequestBuilder(allowIdpInitiated: allowIdpInitiated, authenticationFlow: authenticationFlow, bindingType: bindingType, digestAlgorithm: digestAlgorithm, enabled: enabled, enrollmentFlow: enrollmentFlow, issuer: issuer, managed: managed, name: name, nameIdPolicy: nameIdPolicy, ordering: ordering, page: page, pageSize: pageSize, pbmUuid: pbmUuid, policyEngineMode: policyEngineMode, preAuthenticationFlow: preAuthenticationFlow, search: search, signatureAlgorithm: signatureAlgorithm, signedAssertion: signedAssertion, signedResponse: signedResponse, signingKp: signingKp, sloUrl: sloUrl, slug: slug, ssoUrl: ssoUrl, temporaryUserDeleteAfter: temporaryUserDeleteAfter, userMatchingMode: userMatchingMode, verificationKp: verificationKp, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/saml/
     - SAMLSource Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter allowIdpInitiated: (query)  (optional)
     - parameter authenticationFlow: (query)  (optional)
     - parameter bindingType: (query)  (optional)
     - parameter digestAlgorithm: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter enrollmentFlow: (query)  (optional)
     - parameter issuer: (query)  (optional)
     - parameter managed: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter nameIdPolicy: (query) NameID Policy sent to the IdP. Can be unset, in which case no Policy is sent.   (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter pbmUuid: (query)  (optional)
     - parameter policyEngineMode: (query)  (optional)
     - parameter preAuthenticationFlow: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter signatureAlgorithm: (query)  (optional)
     - parameter signedAssertion: (query)  (optional)
     - parameter signedResponse: (query)  (optional)
     - parameter signingKp: (query)  (optional)
     - parameter sloUrl: (query)  (optional)
     - parameter slug: (query)  (optional)
     - parameter ssoUrl: (query)  (optional)
     - parameter temporaryUserDeleteAfter: (query)  (optional)
     - parameter userMatchingMode: (query) How the source determines if an existing user should be authenticated or a new user enrolled.   (optional)
     - parameter verificationKp: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedSAMLSourceList> 
     */
    open class func sourcesSamlListWithRequestBuilder(allowIdpInitiated: Bool? = nil, authenticationFlow: UUID? = nil, bindingType: BindingType_sourcesSamlList? = nil, digestAlgorithm: DigestAlgorithm_sourcesSamlList? = nil, enabled: Bool? = nil, enrollmentFlow: UUID? = nil, issuer: String? = nil, managed: String? = nil, name: String? = nil, nameIdPolicy: NameIdPolicy_sourcesSamlList? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, pbmUuid: UUID? = nil, policyEngineMode: PolicyEngineMode_sourcesSamlList? = nil, preAuthenticationFlow: UUID? = nil, search: String? = nil, signatureAlgorithm: SignatureAlgorithm_sourcesSamlList? = nil, signedAssertion: Bool? = nil, signedResponse: Bool? = nil, signingKp: UUID? = nil, sloUrl: String? = nil, slug: String? = nil, ssoUrl: String? = nil, temporaryUserDeleteAfter: String? = nil, userMatchingMode: UserMatchingMode_sourcesSamlList? = nil, verificationKp: UUID? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedSAMLSourceList> {
        let localVariablePath = "/sources/saml/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "allow_idp_initiated": (wrappedValue: allowIdpInitiated?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "authentication_flow": (wrappedValue: authenticationFlow?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "binding_type": (wrappedValue: bindingType?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "digest_algorithm": (wrappedValue: digestAlgorithm?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "enabled": (wrappedValue: enabled?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "enrollment_flow": (wrappedValue: enrollmentFlow?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "issuer": (wrappedValue: issuer?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "managed": (wrappedValue: managed?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name_id_policy": (wrappedValue: nameIdPolicy?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "pbm_uuid": (wrappedValue: pbmUuid?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "policy_engine_mode": (wrappedValue: policyEngineMode?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "pre_authentication_flow": (wrappedValue: preAuthenticationFlow?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "signature_algorithm": (wrappedValue: signatureAlgorithm?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "signed_assertion": (wrappedValue: signedAssertion?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "signed_response": (wrappedValue: signedResponse?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "signing_kp": (wrappedValue: signingKp?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "slo_url": (wrappedValue: sloUrl?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "slug": (wrappedValue: slug?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "sso_url": (wrappedValue: ssoUrl?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "temporary_user_delete_after": (wrappedValue: temporaryUserDeleteAfter?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "user_matching_mode": (wrappedValue: userMatchingMode?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "verification_kp": (wrappedValue: verificationKp?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedSAMLSourceList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter slug: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SAMLMetadata
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesSamlMetadataRetrieve(slug: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> SAMLMetadata {
        return try await sourcesSamlMetadataRetrieveWithRequestBuilder(slug: slug, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/saml/{slug}/metadata/
     - Return metadata as XML string
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter slug: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SAMLMetadata> 
     */
    open class func sourcesSamlMetadataRetrieveWithRequestBuilder(slug: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<SAMLMetadata> {
        var localVariablePath = "/sources/saml/{slug}/metadata/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SAMLMetadata>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter slug: (path)  
     - parameter patchedSAMLSourceRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SAMLSource
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesSamlPartialUpdate(slug: String, patchedSAMLSourceRequest: PatchedSAMLSourceRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> SAMLSource {
        return try await sourcesSamlPartialUpdateWithRequestBuilder(slug: slug, patchedSAMLSourceRequest: patchedSAMLSourceRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /sources/saml/{slug}/
     - SAMLSource Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter slug: (path)  
     - parameter patchedSAMLSourceRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SAMLSource> 
     */
    open class func sourcesSamlPartialUpdateWithRequestBuilder(slug: String, patchedSAMLSourceRequest: PatchedSAMLSourceRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<SAMLSource> {
        var localVariablePath = "/sources/saml/{slug}/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedSAMLSourceRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SAMLSource>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter slug: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SAMLSource
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesSamlRetrieve(slug: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> SAMLSource {
        return try await sourcesSamlRetrieveWithRequestBuilder(slug: slug, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/saml/{slug}/
     - SAMLSource Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter slug: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SAMLSource> 
     */
    open class func sourcesSamlRetrieveWithRequestBuilder(slug: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<SAMLSource> {
        var localVariablePath = "/sources/saml/{slug}/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SAMLSource>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter slug: (path)  
     - parameter sAMLSourceRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SAMLSource
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesSamlUpdate(slug: String, sAMLSourceRequest: SAMLSourceRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> SAMLSource {
        return try await sourcesSamlUpdateWithRequestBuilder(slug: slug, sAMLSourceRequest: sAMLSourceRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /sources/saml/{slug}/
     - SAMLSource Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter slug: (path)  
     - parameter sAMLSourceRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SAMLSource> 
     */
    open class func sourcesSamlUpdateWithRequestBuilder(slug: String, sAMLSourceRequest: SAMLSourceRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<SAMLSource> {
        var localVariablePath = "/sources/saml/{slug}/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sAMLSourceRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SAMLSource>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter slug: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesSamlUsedByList(slug: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await sourcesSamlUsedByListWithRequestBuilder(slug: slug, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/saml/{slug}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter slug: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func sourcesSamlUsedByListWithRequestBuilder(slug: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/sources/saml/{slug}/used_by/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter sCIMSourceRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SCIMSource
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesScimCreate(sCIMSourceRequest: SCIMSourceRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> SCIMSource {
        return try await sourcesScimCreateWithRequestBuilder(sCIMSourceRequest: sCIMSourceRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /sources/scim/
     - SCIMSource Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter sCIMSourceRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SCIMSource> 
     */
    open class func sourcesScimCreateWithRequestBuilder(sCIMSourceRequest: SCIMSourceRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<SCIMSource> {
        let localVariablePath = "/sources/scim/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sCIMSourceRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SCIMSource>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter slug: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesScimDestroy(slug: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await sourcesScimDestroyWithRequestBuilder(slug: slug, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /sources/scim/{slug}/
     - SCIMSource Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter slug: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func sourcesScimDestroyWithRequestBuilder(slug: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/sources/scim/{slug}/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter sCIMSourceGroupRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SCIMSourceGroup
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesScimGroupsCreate(sCIMSourceGroupRequest: SCIMSourceGroupRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> SCIMSourceGroup {
        return try await sourcesScimGroupsCreateWithRequestBuilder(sCIMSourceGroupRequest: sCIMSourceGroupRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /sources/scim_groups/
     - SCIMSourceGroup Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter sCIMSourceGroupRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SCIMSourceGroup> 
     */
    open class func sourcesScimGroupsCreateWithRequestBuilder(sCIMSourceGroupRequest: SCIMSourceGroupRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<SCIMSourceGroup> {
        let localVariablePath = "/sources/scim_groups/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sCIMSourceGroupRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SCIMSourceGroup>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique value identifying this scim source group. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesScimGroupsDestroy(id: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await sourcesScimGroupsDestroyWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /sources/scim_groups/{id}/
     - SCIMSourceGroup Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique value identifying this scim source group. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func sourcesScimGroupsDestroyWithRequestBuilder(id: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/sources/scim_groups/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter groupGroupUuid: (query)  (optional)
     - parameter groupName: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter sourceSlug: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedSCIMSourceGroupList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesScimGroupsList(groupGroupUuid: UUID? = nil, groupName: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, sourceSlug: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedSCIMSourceGroupList {
        return try await sourcesScimGroupsListWithRequestBuilder(groupGroupUuid: groupGroupUuid, groupName: groupName, ordering: ordering, page: page, pageSize: pageSize, search: search, sourceSlug: sourceSlug, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/scim_groups/
     - SCIMSourceGroup Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter groupGroupUuid: (query)  (optional)
     - parameter groupName: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter sourceSlug: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedSCIMSourceGroupList> 
     */
    open class func sourcesScimGroupsListWithRequestBuilder(groupGroupUuid: UUID? = nil, groupName: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, sourceSlug: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedSCIMSourceGroupList> {
        let localVariablePath = "/sources/scim_groups/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "group__group_uuid": (wrappedValue: groupGroupUuid?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "group__name": (wrappedValue: groupName?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "source__slug": (wrappedValue: sourceSlug?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedSCIMSourceGroupList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique value identifying this scim source group. 
     - parameter patchedSCIMSourceGroupRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SCIMSourceGroup
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesScimGroupsPartialUpdate(id: String, patchedSCIMSourceGroupRequest: PatchedSCIMSourceGroupRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> SCIMSourceGroup {
        return try await sourcesScimGroupsPartialUpdateWithRequestBuilder(id: id, patchedSCIMSourceGroupRequest: patchedSCIMSourceGroupRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /sources/scim_groups/{id}/
     - SCIMSourceGroup Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique value identifying this scim source group. 
     - parameter patchedSCIMSourceGroupRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SCIMSourceGroup> 
     */
    open class func sourcesScimGroupsPartialUpdateWithRequestBuilder(id: String, patchedSCIMSourceGroupRequest: PatchedSCIMSourceGroupRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<SCIMSourceGroup> {
        var localVariablePath = "/sources/scim_groups/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedSCIMSourceGroupRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SCIMSourceGroup>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique value identifying this scim source group. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SCIMSourceGroup
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesScimGroupsRetrieve(id: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> SCIMSourceGroup {
        return try await sourcesScimGroupsRetrieveWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/scim_groups/{id}/
     - SCIMSourceGroup Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique value identifying this scim source group. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SCIMSourceGroup> 
     */
    open class func sourcesScimGroupsRetrieveWithRequestBuilder(id: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<SCIMSourceGroup> {
        var localVariablePath = "/sources/scim_groups/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SCIMSourceGroup>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique value identifying this scim source group. 
     - parameter sCIMSourceGroupRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SCIMSourceGroup
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesScimGroupsUpdate(id: String, sCIMSourceGroupRequest: SCIMSourceGroupRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> SCIMSourceGroup {
        return try await sourcesScimGroupsUpdateWithRequestBuilder(id: id, sCIMSourceGroupRequest: sCIMSourceGroupRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /sources/scim_groups/{id}/
     - SCIMSourceGroup Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique value identifying this scim source group. 
     - parameter sCIMSourceGroupRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SCIMSourceGroup> 
     */
    open class func sourcesScimGroupsUpdateWithRequestBuilder(id: String, sCIMSourceGroupRequest: SCIMSourceGroupRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<SCIMSourceGroup> {
        var localVariablePath = "/sources/scim_groups/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sCIMSourceGroupRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SCIMSourceGroup>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique value identifying this scim source group. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesScimGroupsUsedByList(id: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await sourcesScimGroupsUsedByListWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/scim_groups/{id}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique value identifying this scim source group. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func sourcesScimGroupsUsedByListWithRequestBuilder(id: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/sources/scim_groups/{id}/used_by/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter pbmUuid: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter slug: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedSCIMSourceList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesScimList(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, pbmUuid: UUID? = nil, search: String? = nil, slug: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedSCIMSourceList {
        return try await sourcesScimListWithRequestBuilder(name: name, ordering: ordering, page: page, pageSize: pageSize, pbmUuid: pbmUuid, search: search, slug: slug, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/scim/
     - SCIMSource Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter pbmUuid: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter slug: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedSCIMSourceList> 
     */
    open class func sourcesScimListWithRequestBuilder(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, pbmUuid: UUID? = nil, search: String? = nil, slug: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedSCIMSourceList> {
        let localVariablePath = "/sources/scim/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "pbm_uuid": (wrappedValue: pbmUuid?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "slug": (wrappedValue: slug?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedSCIMSourceList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter slug: (path)  
     - parameter patchedSCIMSourceRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SCIMSource
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesScimPartialUpdate(slug: String, patchedSCIMSourceRequest: PatchedSCIMSourceRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> SCIMSource {
        return try await sourcesScimPartialUpdateWithRequestBuilder(slug: slug, patchedSCIMSourceRequest: patchedSCIMSourceRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /sources/scim/{slug}/
     - SCIMSource Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter slug: (path)  
     - parameter patchedSCIMSourceRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SCIMSource> 
     */
    open class func sourcesScimPartialUpdateWithRequestBuilder(slug: String, patchedSCIMSourceRequest: PatchedSCIMSourceRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<SCIMSource> {
        var localVariablePath = "/sources/scim/{slug}/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedSCIMSourceRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SCIMSource>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter slug: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SCIMSource
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesScimRetrieve(slug: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> SCIMSource {
        return try await sourcesScimRetrieveWithRequestBuilder(slug: slug, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/scim/{slug}/
     - SCIMSource Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter slug: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SCIMSource> 
     */
    open class func sourcesScimRetrieveWithRequestBuilder(slug: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<SCIMSource> {
        var localVariablePath = "/sources/scim/{slug}/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SCIMSource>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter slug: (path)  
     - parameter sCIMSourceRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SCIMSource
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesScimUpdate(slug: String, sCIMSourceRequest: SCIMSourceRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> SCIMSource {
        return try await sourcesScimUpdateWithRequestBuilder(slug: slug, sCIMSourceRequest: sCIMSourceRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /sources/scim/{slug}/
     - SCIMSource Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter slug: (path)  
     - parameter sCIMSourceRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SCIMSource> 
     */
    open class func sourcesScimUpdateWithRequestBuilder(slug: String, sCIMSourceRequest: SCIMSourceRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<SCIMSource> {
        var localVariablePath = "/sources/scim/{slug}/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sCIMSourceRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SCIMSource>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter slug: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesScimUsedByList(slug: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await sourcesScimUsedByListWithRequestBuilder(slug: slug, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/scim/{slug}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter slug: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func sourcesScimUsedByListWithRequestBuilder(slug: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/sources/scim/{slug}/used_by/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter sCIMSourceUserRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SCIMSourceUser
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesScimUsersCreate(sCIMSourceUserRequest: SCIMSourceUserRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> SCIMSourceUser {
        return try await sourcesScimUsersCreateWithRequestBuilder(sCIMSourceUserRequest: sCIMSourceUserRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /sources/scim_users/
     - SCIMSourceUser Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter sCIMSourceUserRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SCIMSourceUser> 
     */
    open class func sourcesScimUsersCreateWithRequestBuilder(sCIMSourceUserRequest: SCIMSourceUserRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<SCIMSourceUser> {
        let localVariablePath = "/sources/scim_users/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sCIMSourceUserRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SCIMSourceUser>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique value identifying this scim source user. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesScimUsersDestroy(id: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await sourcesScimUsersDestroyWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /sources/scim_users/{id}/
     - SCIMSourceUser Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique value identifying this scim source user. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func sourcesScimUsersDestroyWithRequestBuilder(id: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/sources/scim_users/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter sourceSlug: (query)  (optional)
     - parameter userId: (query)  (optional)
     - parameter userUsername: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedSCIMSourceUserList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesScimUsersList(ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, sourceSlug: String? = nil, userId: Int? = nil, userUsername: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedSCIMSourceUserList {
        return try await sourcesScimUsersListWithRequestBuilder(ordering: ordering, page: page, pageSize: pageSize, search: search, sourceSlug: sourceSlug, userId: userId, userUsername: userUsername, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/scim_users/
     - SCIMSourceUser Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter sourceSlug: (query)  (optional)
     - parameter userId: (query)  (optional)
     - parameter userUsername: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedSCIMSourceUserList> 
     */
    open class func sourcesScimUsersListWithRequestBuilder(ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, sourceSlug: String? = nil, userId: Int? = nil, userUsername: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedSCIMSourceUserList> {
        let localVariablePath = "/sources/scim_users/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "source__slug": (wrappedValue: sourceSlug?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "user__id": (wrappedValue: userId?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "user__username": (wrappedValue: userUsername?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedSCIMSourceUserList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique value identifying this scim source user. 
     - parameter patchedSCIMSourceUserRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SCIMSourceUser
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesScimUsersPartialUpdate(id: String, patchedSCIMSourceUserRequest: PatchedSCIMSourceUserRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> SCIMSourceUser {
        return try await sourcesScimUsersPartialUpdateWithRequestBuilder(id: id, patchedSCIMSourceUserRequest: patchedSCIMSourceUserRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /sources/scim_users/{id}/
     - SCIMSourceUser Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique value identifying this scim source user. 
     - parameter patchedSCIMSourceUserRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SCIMSourceUser> 
     */
    open class func sourcesScimUsersPartialUpdateWithRequestBuilder(id: String, patchedSCIMSourceUserRequest: PatchedSCIMSourceUserRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<SCIMSourceUser> {
        var localVariablePath = "/sources/scim_users/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedSCIMSourceUserRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SCIMSourceUser>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique value identifying this scim source user. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SCIMSourceUser
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesScimUsersRetrieve(id: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> SCIMSourceUser {
        return try await sourcesScimUsersRetrieveWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/scim_users/{id}/
     - SCIMSourceUser Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique value identifying this scim source user. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SCIMSourceUser> 
     */
    open class func sourcesScimUsersRetrieveWithRequestBuilder(id: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<SCIMSourceUser> {
        var localVariablePath = "/sources/scim_users/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SCIMSourceUser>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique value identifying this scim source user. 
     - parameter sCIMSourceUserRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SCIMSourceUser
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesScimUsersUpdate(id: String, sCIMSourceUserRequest: SCIMSourceUserRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> SCIMSourceUser {
        return try await sourcesScimUsersUpdateWithRequestBuilder(id: id, sCIMSourceUserRequest: sCIMSourceUserRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /sources/scim_users/{id}/
     - SCIMSourceUser Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique value identifying this scim source user. 
     - parameter sCIMSourceUserRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SCIMSourceUser> 
     */
    open class func sourcesScimUsersUpdateWithRequestBuilder(id: String, sCIMSourceUserRequest: SCIMSourceUserRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<SCIMSourceUser> {
        var localVariablePath = "/sources/scim_users/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sCIMSourceUserRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SCIMSourceUser>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique value identifying this scim source user. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesScimUsersUsedByList(id: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await sourcesScimUsersUsedByListWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/scim_users/{id}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique value identifying this scim source user. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func sourcesScimUsersUsedByListWithRequestBuilder(id: String, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/sources/scim_users/{id}/used_by/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this user source connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesUserConnectionsAllDestroy(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await sourcesUserConnectionsAllDestroyWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /sources/user_connections/all/{id}/
     - User-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this user source connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func sourcesUserConnectionsAllDestroyWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/sources/user_connections/all/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter sourceSlug: (query)  (optional)
     - parameter user: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedUserSourceConnectionList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesUserConnectionsAllList(ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, sourceSlug: String? = nil, user: Int? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedUserSourceConnectionList {
        return try await sourcesUserConnectionsAllListWithRequestBuilder(ordering: ordering, page: page, pageSize: pageSize, search: search, sourceSlug: sourceSlug, user: user, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/user_connections/all/
     - User-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter sourceSlug: (query)  (optional)
     - parameter user: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedUserSourceConnectionList> 
     */
    open class func sourcesUserConnectionsAllListWithRequestBuilder(ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, sourceSlug: String? = nil, user: Int? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedUserSourceConnectionList> {
        let localVariablePath = "/sources/user_connections/all/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "source__slug": (wrappedValue: sourceSlug?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "user": (wrappedValue: user?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedUserSourceConnectionList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this user source connection. 
     - parameter patchedUserSourceConnectionRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: UserSourceConnection
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesUserConnectionsAllPartialUpdate(id: Int, patchedUserSourceConnectionRequest: PatchedUserSourceConnectionRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> UserSourceConnection {
        return try await sourcesUserConnectionsAllPartialUpdateWithRequestBuilder(id: id, patchedUserSourceConnectionRequest: patchedUserSourceConnectionRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /sources/user_connections/all/{id}/
     - User-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this user source connection. 
     - parameter patchedUserSourceConnectionRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<UserSourceConnection> 
     */
    open class func sourcesUserConnectionsAllPartialUpdateWithRequestBuilder(id: Int, patchedUserSourceConnectionRequest: PatchedUserSourceConnectionRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<UserSourceConnection> {
        var localVariablePath = "/sources/user_connections/all/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedUserSourceConnectionRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserSourceConnection>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this user source connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: UserSourceConnection
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesUserConnectionsAllRetrieve(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> UserSourceConnection {
        return try await sourcesUserConnectionsAllRetrieveWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/user_connections/all/{id}/
     - User-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this user source connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<UserSourceConnection> 
     */
    open class func sourcesUserConnectionsAllRetrieveWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<UserSourceConnection> {
        var localVariablePath = "/sources/user_connections/all/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserSourceConnection>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this user source connection. 
     - parameter userSourceConnectionRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: UserSourceConnection
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesUserConnectionsAllUpdate(id: Int, userSourceConnectionRequest: UserSourceConnectionRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> UserSourceConnection {
        return try await sourcesUserConnectionsAllUpdateWithRequestBuilder(id: id, userSourceConnectionRequest: userSourceConnectionRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /sources/user_connections/all/{id}/
     - User-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this user source connection. 
     - parameter userSourceConnectionRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<UserSourceConnection> 
     */
    open class func sourcesUserConnectionsAllUpdateWithRequestBuilder(id: Int, userSourceConnectionRequest: UserSourceConnectionRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<UserSourceConnection> {
        var localVariablePath = "/sources/user_connections/all/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userSourceConnectionRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserSourceConnection>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this user source connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesUserConnectionsAllUsedByList(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await sourcesUserConnectionsAllUsedByListWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/user_connections/all/{id}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this user source connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func sourcesUserConnectionsAllUsedByListWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/sources/user_connections/all/{id}/used_by/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter userKerberosSourceConnectionRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: UserKerberosSourceConnection
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesUserConnectionsKerberosCreate(userKerberosSourceConnectionRequest: UserKerberosSourceConnectionRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> UserKerberosSourceConnection {
        return try await sourcesUserConnectionsKerberosCreateWithRequestBuilder(userKerberosSourceConnectionRequest: userKerberosSourceConnectionRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /sources/user_connections/kerberos/
     - User-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter userKerberosSourceConnectionRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<UserKerberosSourceConnection> 
     */
    open class func sourcesUserConnectionsKerberosCreateWithRequestBuilder(userKerberosSourceConnectionRequest: UserKerberosSourceConnectionRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<UserKerberosSourceConnection> {
        let localVariablePath = "/sources/user_connections/kerberos/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userKerberosSourceConnectionRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserKerberosSourceConnection>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this User Kerberos Source Connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesUserConnectionsKerberosDestroy(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await sourcesUserConnectionsKerberosDestroyWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /sources/user_connections/kerberos/{id}/
     - User-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this User Kerberos Source Connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func sourcesUserConnectionsKerberosDestroyWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/sources/user_connections/kerberos/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter sourceSlug: (query)  (optional)
     - parameter user: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedUserKerberosSourceConnectionList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesUserConnectionsKerberosList(ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, sourceSlug: String? = nil, user: Int? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedUserKerberosSourceConnectionList {
        return try await sourcesUserConnectionsKerberosListWithRequestBuilder(ordering: ordering, page: page, pageSize: pageSize, search: search, sourceSlug: sourceSlug, user: user, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/user_connections/kerberos/
     - User-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter sourceSlug: (query)  (optional)
     - parameter user: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedUserKerberosSourceConnectionList> 
     */
    open class func sourcesUserConnectionsKerberosListWithRequestBuilder(ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, sourceSlug: String? = nil, user: Int? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedUserKerberosSourceConnectionList> {
        let localVariablePath = "/sources/user_connections/kerberos/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "source__slug": (wrappedValue: sourceSlug?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "user": (wrappedValue: user?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedUserKerberosSourceConnectionList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this User Kerberos Source Connection. 
     - parameter patchedUserKerberosSourceConnectionRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: UserKerberosSourceConnection
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesUserConnectionsKerberosPartialUpdate(id: Int, patchedUserKerberosSourceConnectionRequest: PatchedUserKerberosSourceConnectionRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> UserKerberosSourceConnection {
        return try await sourcesUserConnectionsKerberosPartialUpdateWithRequestBuilder(id: id, patchedUserKerberosSourceConnectionRequest: patchedUserKerberosSourceConnectionRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /sources/user_connections/kerberos/{id}/
     - User-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this User Kerberos Source Connection. 
     - parameter patchedUserKerberosSourceConnectionRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<UserKerberosSourceConnection> 
     */
    open class func sourcesUserConnectionsKerberosPartialUpdateWithRequestBuilder(id: Int, patchedUserKerberosSourceConnectionRequest: PatchedUserKerberosSourceConnectionRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<UserKerberosSourceConnection> {
        var localVariablePath = "/sources/user_connections/kerberos/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedUserKerberosSourceConnectionRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserKerberosSourceConnection>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this User Kerberos Source Connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: UserKerberosSourceConnection
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesUserConnectionsKerberosRetrieve(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> UserKerberosSourceConnection {
        return try await sourcesUserConnectionsKerberosRetrieveWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/user_connections/kerberos/{id}/
     - User-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this User Kerberos Source Connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<UserKerberosSourceConnection> 
     */
    open class func sourcesUserConnectionsKerberosRetrieveWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<UserKerberosSourceConnection> {
        var localVariablePath = "/sources/user_connections/kerberos/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserKerberosSourceConnection>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this User Kerberos Source Connection. 
     - parameter userKerberosSourceConnectionRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: UserKerberosSourceConnection
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesUserConnectionsKerberosUpdate(id: Int, userKerberosSourceConnectionRequest: UserKerberosSourceConnectionRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> UserKerberosSourceConnection {
        return try await sourcesUserConnectionsKerberosUpdateWithRequestBuilder(id: id, userKerberosSourceConnectionRequest: userKerberosSourceConnectionRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /sources/user_connections/kerberos/{id}/
     - User-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this User Kerberos Source Connection. 
     - parameter userKerberosSourceConnectionRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<UserKerberosSourceConnection> 
     */
    open class func sourcesUserConnectionsKerberosUpdateWithRequestBuilder(id: Int, userKerberosSourceConnectionRequest: UserKerberosSourceConnectionRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<UserKerberosSourceConnection> {
        var localVariablePath = "/sources/user_connections/kerberos/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userKerberosSourceConnectionRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserKerberosSourceConnection>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this User Kerberos Source Connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesUserConnectionsKerberosUsedByList(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await sourcesUserConnectionsKerberosUsedByListWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/user_connections/kerberos/{id}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this User Kerberos Source Connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func sourcesUserConnectionsKerberosUsedByListWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/sources/user_connections/kerberos/{id}/used_by/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter userLDAPSourceConnectionRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: UserLDAPSourceConnection
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesUserConnectionsLdapCreate(userLDAPSourceConnectionRequest: UserLDAPSourceConnectionRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> UserLDAPSourceConnection {
        return try await sourcesUserConnectionsLdapCreateWithRequestBuilder(userLDAPSourceConnectionRequest: userLDAPSourceConnectionRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /sources/user_connections/ldap/
     - User-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter userLDAPSourceConnectionRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<UserLDAPSourceConnection> 
     */
    open class func sourcesUserConnectionsLdapCreateWithRequestBuilder(userLDAPSourceConnectionRequest: UserLDAPSourceConnectionRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<UserLDAPSourceConnection> {
        let localVariablePath = "/sources/user_connections/ldap/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userLDAPSourceConnectionRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserLDAPSourceConnection>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this User LDAP Source Connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesUserConnectionsLdapDestroy(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await sourcesUserConnectionsLdapDestroyWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /sources/user_connections/ldap/{id}/
     - User-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this User LDAP Source Connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func sourcesUserConnectionsLdapDestroyWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/sources/user_connections/ldap/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter sourceSlug: (query)  (optional)
     - parameter user: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedUserLDAPSourceConnectionList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesUserConnectionsLdapList(ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, sourceSlug: String? = nil, user: Int? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedUserLDAPSourceConnectionList {
        return try await sourcesUserConnectionsLdapListWithRequestBuilder(ordering: ordering, page: page, pageSize: pageSize, search: search, sourceSlug: sourceSlug, user: user, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/user_connections/ldap/
     - User-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter sourceSlug: (query)  (optional)
     - parameter user: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedUserLDAPSourceConnectionList> 
     */
    open class func sourcesUserConnectionsLdapListWithRequestBuilder(ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, sourceSlug: String? = nil, user: Int? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedUserLDAPSourceConnectionList> {
        let localVariablePath = "/sources/user_connections/ldap/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "source__slug": (wrappedValue: sourceSlug?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "user": (wrappedValue: user?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedUserLDAPSourceConnectionList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this User LDAP Source Connection. 
     - parameter patchedUserLDAPSourceConnectionRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: UserLDAPSourceConnection
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesUserConnectionsLdapPartialUpdate(id: Int, patchedUserLDAPSourceConnectionRequest: PatchedUserLDAPSourceConnectionRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> UserLDAPSourceConnection {
        return try await sourcesUserConnectionsLdapPartialUpdateWithRequestBuilder(id: id, patchedUserLDAPSourceConnectionRequest: patchedUserLDAPSourceConnectionRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /sources/user_connections/ldap/{id}/
     - User-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this User LDAP Source Connection. 
     - parameter patchedUserLDAPSourceConnectionRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<UserLDAPSourceConnection> 
     */
    open class func sourcesUserConnectionsLdapPartialUpdateWithRequestBuilder(id: Int, patchedUserLDAPSourceConnectionRequest: PatchedUserLDAPSourceConnectionRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<UserLDAPSourceConnection> {
        var localVariablePath = "/sources/user_connections/ldap/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedUserLDAPSourceConnectionRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserLDAPSourceConnection>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this User LDAP Source Connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: UserLDAPSourceConnection
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesUserConnectionsLdapRetrieve(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> UserLDAPSourceConnection {
        return try await sourcesUserConnectionsLdapRetrieveWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/user_connections/ldap/{id}/
     - User-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this User LDAP Source Connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<UserLDAPSourceConnection> 
     */
    open class func sourcesUserConnectionsLdapRetrieveWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<UserLDAPSourceConnection> {
        var localVariablePath = "/sources/user_connections/ldap/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserLDAPSourceConnection>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this User LDAP Source Connection. 
     - parameter userLDAPSourceConnectionRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: UserLDAPSourceConnection
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesUserConnectionsLdapUpdate(id: Int, userLDAPSourceConnectionRequest: UserLDAPSourceConnectionRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> UserLDAPSourceConnection {
        return try await sourcesUserConnectionsLdapUpdateWithRequestBuilder(id: id, userLDAPSourceConnectionRequest: userLDAPSourceConnectionRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /sources/user_connections/ldap/{id}/
     - User-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this User LDAP Source Connection. 
     - parameter userLDAPSourceConnectionRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<UserLDAPSourceConnection> 
     */
    open class func sourcesUserConnectionsLdapUpdateWithRequestBuilder(id: Int, userLDAPSourceConnectionRequest: UserLDAPSourceConnectionRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<UserLDAPSourceConnection> {
        var localVariablePath = "/sources/user_connections/ldap/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userLDAPSourceConnectionRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserLDAPSourceConnection>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this User LDAP Source Connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesUserConnectionsLdapUsedByList(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await sourcesUserConnectionsLdapUsedByListWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/user_connections/ldap/{id}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this User LDAP Source Connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func sourcesUserConnectionsLdapUsedByListWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/sources/user_connections/ldap/{id}/used_by/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter userOAuthSourceConnectionRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: UserOAuthSourceConnection
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesUserConnectionsOauthCreate(userOAuthSourceConnectionRequest: UserOAuthSourceConnectionRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> UserOAuthSourceConnection {
        return try await sourcesUserConnectionsOauthCreateWithRequestBuilder(userOAuthSourceConnectionRequest: userOAuthSourceConnectionRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /sources/user_connections/oauth/
     - User-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter userOAuthSourceConnectionRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<UserOAuthSourceConnection> 
     */
    open class func sourcesUserConnectionsOauthCreateWithRequestBuilder(userOAuthSourceConnectionRequest: UserOAuthSourceConnectionRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<UserOAuthSourceConnection> {
        let localVariablePath = "/sources/user_connections/oauth/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userOAuthSourceConnectionRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserOAuthSourceConnection>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this User OAuth Source Connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesUserConnectionsOauthDestroy(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await sourcesUserConnectionsOauthDestroyWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /sources/user_connections/oauth/{id}/
     - User-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this User OAuth Source Connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func sourcesUserConnectionsOauthDestroyWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/sources/user_connections/oauth/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter sourceSlug: (query)  (optional)
     - parameter user: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedUserOAuthSourceConnectionList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesUserConnectionsOauthList(ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, sourceSlug: String? = nil, user: Int? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedUserOAuthSourceConnectionList {
        return try await sourcesUserConnectionsOauthListWithRequestBuilder(ordering: ordering, page: page, pageSize: pageSize, search: search, sourceSlug: sourceSlug, user: user, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/user_connections/oauth/
     - User-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter sourceSlug: (query)  (optional)
     - parameter user: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedUserOAuthSourceConnectionList> 
     */
    open class func sourcesUserConnectionsOauthListWithRequestBuilder(ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, sourceSlug: String? = nil, user: Int? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedUserOAuthSourceConnectionList> {
        let localVariablePath = "/sources/user_connections/oauth/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "source__slug": (wrappedValue: sourceSlug?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "user": (wrappedValue: user?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedUserOAuthSourceConnectionList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this User OAuth Source Connection. 
     - parameter patchedUserOAuthSourceConnectionRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: UserOAuthSourceConnection
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesUserConnectionsOauthPartialUpdate(id: Int, patchedUserOAuthSourceConnectionRequest: PatchedUserOAuthSourceConnectionRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> UserOAuthSourceConnection {
        return try await sourcesUserConnectionsOauthPartialUpdateWithRequestBuilder(id: id, patchedUserOAuthSourceConnectionRequest: patchedUserOAuthSourceConnectionRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /sources/user_connections/oauth/{id}/
     - User-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this User OAuth Source Connection. 
     - parameter patchedUserOAuthSourceConnectionRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<UserOAuthSourceConnection> 
     */
    open class func sourcesUserConnectionsOauthPartialUpdateWithRequestBuilder(id: Int, patchedUserOAuthSourceConnectionRequest: PatchedUserOAuthSourceConnectionRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<UserOAuthSourceConnection> {
        var localVariablePath = "/sources/user_connections/oauth/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedUserOAuthSourceConnectionRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserOAuthSourceConnection>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this User OAuth Source Connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: UserOAuthSourceConnection
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesUserConnectionsOauthRetrieve(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> UserOAuthSourceConnection {
        return try await sourcesUserConnectionsOauthRetrieveWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/user_connections/oauth/{id}/
     - User-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this User OAuth Source Connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<UserOAuthSourceConnection> 
     */
    open class func sourcesUserConnectionsOauthRetrieveWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<UserOAuthSourceConnection> {
        var localVariablePath = "/sources/user_connections/oauth/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserOAuthSourceConnection>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this User OAuth Source Connection. 
     - parameter userOAuthSourceConnectionRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: UserOAuthSourceConnection
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesUserConnectionsOauthUpdate(id: Int, userOAuthSourceConnectionRequest: UserOAuthSourceConnectionRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> UserOAuthSourceConnection {
        return try await sourcesUserConnectionsOauthUpdateWithRequestBuilder(id: id, userOAuthSourceConnectionRequest: userOAuthSourceConnectionRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /sources/user_connections/oauth/{id}/
     - User-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this User OAuth Source Connection. 
     - parameter userOAuthSourceConnectionRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<UserOAuthSourceConnection> 
     */
    open class func sourcesUserConnectionsOauthUpdateWithRequestBuilder(id: Int, userOAuthSourceConnectionRequest: UserOAuthSourceConnectionRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<UserOAuthSourceConnection> {
        var localVariablePath = "/sources/user_connections/oauth/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userOAuthSourceConnectionRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserOAuthSourceConnection>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this User OAuth Source Connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesUserConnectionsOauthUsedByList(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await sourcesUserConnectionsOauthUsedByListWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/user_connections/oauth/{id}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this User OAuth Source Connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func sourcesUserConnectionsOauthUsedByListWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/sources/user_connections/oauth/{id}/used_by/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter userPlexSourceConnectionRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: UserPlexSourceConnection
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesUserConnectionsPlexCreate(userPlexSourceConnectionRequest: UserPlexSourceConnectionRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> UserPlexSourceConnection {
        return try await sourcesUserConnectionsPlexCreateWithRequestBuilder(userPlexSourceConnectionRequest: userPlexSourceConnectionRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /sources/user_connections/plex/
     - User-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter userPlexSourceConnectionRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<UserPlexSourceConnection> 
     */
    open class func sourcesUserConnectionsPlexCreateWithRequestBuilder(userPlexSourceConnectionRequest: UserPlexSourceConnectionRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<UserPlexSourceConnection> {
        let localVariablePath = "/sources/user_connections/plex/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userPlexSourceConnectionRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserPlexSourceConnection>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this User Plex Source Connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesUserConnectionsPlexDestroy(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await sourcesUserConnectionsPlexDestroyWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /sources/user_connections/plex/{id}/
     - User-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this User Plex Source Connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func sourcesUserConnectionsPlexDestroyWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/sources/user_connections/plex/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter sourceSlug: (query)  (optional)
     - parameter user: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedUserPlexSourceConnectionList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesUserConnectionsPlexList(ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, sourceSlug: String? = nil, user: Int? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedUserPlexSourceConnectionList {
        return try await sourcesUserConnectionsPlexListWithRequestBuilder(ordering: ordering, page: page, pageSize: pageSize, search: search, sourceSlug: sourceSlug, user: user, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/user_connections/plex/
     - User-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter sourceSlug: (query)  (optional)
     - parameter user: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedUserPlexSourceConnectionList> 
     */
    open class func sourcesUserConnectionsPlexListWithRequestBuilder(ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, sourceSlug: String? = nil, user: Int? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedUserPlexSourceConnectionList> {
        let localVariablePath = "/sources/user_connections/plex/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "source__slug": (wrappedValue: sourceSlug?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "user": (wrappedValue: user?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedUserPlexSourceConnectionList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this User Plex Source Connection. 
     - parameter patchedUserPlexSourceConnectionRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: UserPlexSourceConnection
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesUserConnectionsPlexPartialUpdate(id: Int, patchedUserPlexSourceConnectionRequest: PatchedUserPlexSourceConnectionRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> UserPlexSourceConnection {
        return try await sourcesUserConnectionsPlexPartialUpdateWithRequestBuilder(id: id, patchedUserPlexSourceConnectionRequest: patchedUserPlexSourceConnectionRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /sources/user_connections/plex/{id}/
     - User-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this User Plex Source Connection. 
     - parameter patchedUserPlexSourceConnectionRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<UserPlexSourceConnection> 
     */
    open class func sourcesUserConnectionsPlexPartialUpdateWithRequestBuilder(id: Int, patchedUserPlexSourceConnectionRequest: PatchedUserPlexSourceConnectionRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<UserPlexSourceConnection> {
        var localVariablePath = "/sources/user_connections/plex/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedUserPlexSourceConnectionRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserPlexSourceConnection>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this User Plex Source Connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: UserPlexSourceConnection
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesUserConnectionsPlexRetrieve(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> UserPlexSourceConnection {
        return try await sourcesUserConnectionsPlexRetrieveWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/user_connections/plex/{id}/
     - User-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this User Plex Source Connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<UserPlexSourceConnection> 
     */
    open class func sourcesUserConnectionsPlexRetrieveWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<UserPlexSourceConnection> {
        var localVariablePath = "/sources/user_connections/plex/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserPlexSourceConnection>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this User Plex Source Connection. 
     - parameter userPlexSourceConnectionRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: UserPlexSourceConnection
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesUserConnectionsPlexUpdate(id: Int, userPlexSourceConnectionRequest: UserPlexSourceConnectionRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> UserPlexSourceConnection {
        return try await sourcesUserConnectionsPlexUpdateWithRequestBuilder(id: id, userPlexSourceConnectionRequest: userPlexSourceConnectionRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /sources/user_connections/plex/{id}/
     - User-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this User Plex Source Connection. 
     - parameter userPlexSourceConnectionRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<UserPlexSourceConnection> 
     */
    open class func sourcesUserConnectionsPlexUpdateWithRequestBuilder(id: Int, userPlexSourceConnectionRequest: UserPlexSourceConnectionRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<UserPlexSourceConnection> {
        var localVariablePath = "/sources/user_connections/plex/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userPlexSourceConnectionRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserPlexSourceConnection>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this User Plex Source Connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesUserConnectionsPlexUsedByList(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await sourcesUserConnectionsPlexUsedByListWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/user_connections/plex/{id}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this User Plex Source Connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func sourcesUserConnectionsPlexUsedByListWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/sources/user_connections/plex/{id}/used_by/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter userSAMLSourceConnectionRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: UserSAMLSourceConnection
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesUserConnectionsSamlCreate(userSAMLSourceConnectionRequest: UserSAMLSourceConnectionRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> UserSAMLSourceConnection {
        return try await sourcesUserConnectionsSamlCreateWithRequestBuilder(userSAMLSourceConnectionRequest: userSAMLSourceConnectionRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /sources/user_connections/saml/
     - User-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter userSAMLSourceConnectionRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<UserSAMLSourceConnection> 
     */
    open class func sourcesUserConnectionsSamlCreateWithRequestBuilder(userSAMLSourceConnectionRequest: UserSAMLSourceConnectionRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<UserSAMLSourceConnection> {
        let localVariablePath = "/sources/user_connections/saml/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userSAMLSourceConnectionRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserSAMLSourceConnection>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this User SAML Source Connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesUserConnectionsSamlDestroy(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await sourcesUserConnectionsSamlDestroyWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /sources/user_connections/saml/{id}/
     - User-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this User SAML Source Connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func sourcesUserConnectionsSamlDestroyWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/sources/user_connections/saml/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter sourceSlug: (query)  (optional)
     - parameter user: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedUserSAMLSourceConnectionList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesUserConnectionsSamlList(ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, sourceSlug: String? = nil, user: Int? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedUserSAMLSourceConnectionList {
        return try await sourcesUserConnectionsSamlListWithRequestBuilder(ordering: ordering, page: page, pageSize: pageSize, search: search, sourceSlug: sourceSlug, user: user, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/user_connections/saml/
     - User-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter sourceSlug: (query)  (optional)
     - parameter user: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedUserSAMLSourceConnectionList> 
     */
    open class func sourcesUserConnectionsSamlListWithRequestBuilder(ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, sourceSlug: String? = nil, user: Int? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedUserSAMLSourceConnectionList> {
        let localVariablePath = "/sources/user_connections/saml/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "source__slug": (wrappedValue: sourceSlug?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "user": (wrappedValue: user?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedUserSAMLSourceConnectionList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this User SAML Source Connection. 
     - parameter patchedUserSAMLSourceConnectionRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: UserSAMLSourceConnection
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesUserConnectionsSamlPartialUpdate(id: Int, patchedUserSAMLSourceConnectionRequest: PatchedUserSAMLSourceConnectionRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> UserSAMLSourceConnection {
        return try await sourcesUserConnectionsSamlPartialUpdateWithRequestBuilder(id: id, patchedUserSAMLSourceConnectionRequest: patchedUserSAMLSourceConnectionRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /sources/user_connections/saml/{id}/
     - User-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this User SAML Source Connection. 
     - parameter patchedUserSAMLSourceConnectionRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<UserSAMLSourceConnection> 
     */
    open class func sourcesUserConnectionsSamlPartialUpdateWithRequestBuilder(id: Int, patchedUserSAMLSourceConnectionRequest: PatchedUserSAMLSourceConnectionRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<UserSAMLSourceConnection> {
        var localVariablePath = "/sources/user_connections/saml/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedUserSAMLSourceConnectionRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserSAMLSourceConnection>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this User SAML Source Connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: UserSAMLSourceConnection
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesUserConnectionsSamlRetrieve(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> UserSAMLSourceConnection {
        return try await sourcesUserConnectionsSamlRetrieveWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/user_connections/saml/{id}/
     - User-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this User SAML Source Connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<UserSAMLSourceConnection> 
     */
    open class func sourcesUserConnectionsSamlRetrieveWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<UserSAMLSourceConnection> {
        var localVariablePath = "/sources/user_connections/saml/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserSAMLSourceConnection>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this User SAML Source Connection. 
     - parameter userSAMLSourceConnectionRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: UserSAMLSourceConnection
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesUserConnectionsSamlUpdate(id: Int, userSAMLSourceConnectionRequest: UserSAMLSourceConnectionRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> UserSAMLSourceConnection {
        return try await sourcesUserConnectionsSamlUpdateWithRequestBuilder(id: id, userSAMLSourceConnectionRequest: userSAMLSourceConnectionRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /sources/user_connections/saml/{id}/
     - User-source connection Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this User SAML Source Connection. 
     - parameter userSAMLSourceConnectionRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<UserSAMLSourceConnection> 
     */
    open class func sourcesUserConnectionsSamlUpdateWithRequestBuilder(id: Int, userSAMLSourceConnectionRequest: UserSAMLSourceConnectionRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<UserSAMLSourceConnection> {
        var localVariablePath = "/sources/user_connections/saml/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userSAMLSourceConnectionRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserSAMLSourceConnection>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) A unique integer value identifying this User SAML Source Connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sourcesUserConnectionsSamlUsedByList(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await sourcesUserConnectionsSamlUsedByListWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /sources/user_connections/saml/{id}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter id: (path) A unique integer value identifying this User SAML Source Connection. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func sourcesUserConnectionsSamlUsedByListWithRequestBuilder(id: Int, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/sources/user_connections/saml/{id}/used_by/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }
}
