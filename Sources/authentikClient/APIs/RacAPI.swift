//
// RacAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class RacAPI {

    /**

     - parameter connectionTokenUuid: (path) A UUID string identifying this RAC Connection token. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func racConnectionTokensDestroy(connectionTokenUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await racConnectionTokensDestroyWithRequestBuilder(connectionTokenUuid: connectionTokenUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /rac/connection_tokens/{connection_token_uuid}/
     - ConnectionToken Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter connectionTokenUuid: (path) A UUID string identifying this RAC Connection token. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func racConnectionTokensDestroyWithRequestBuilder(connectionTokenUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/rac/connection_tokens/{connection_token_uuid}/"
        let connectionTokenUuidPreEscape = "\(APIHelper.mapValueToPathItem(connectionTokenUuid))"
        let connectionTokenUuidPostEscape = connectionTokenUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{connection_token_uuid}", with: connectionTokenUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter endpoint: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter provider: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter sessionUser: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedConnectionTokenList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func racConnectionTokensList(endpoint: UUID? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, provider: Int? = nil, search: String? = nil, sessionUser: Int? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedConnectionTokenList {
        return try await racConnectionTokensListWithRequestBuilder(endpoint: endpoint, ordering: ordering, page: page, pageSize: pageSize, provider: provider, search: search, sessionUser: sessionUser, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /rac/connection_tokens/
     - ConnectionToken Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter endpoint: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter provider: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter sessionUser: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedConnectionTokenList> 
     */
    open class func racConnectionTokensListWithRequestBuilder(endpoint: UUID? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, provider: Int? = nil, search: String? = nil, sessionUser: Int? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedConnectionTokenList> {
        let localVariablePath = "/rac/connection_tokens/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "endpoint": (wrappedValue: endpoint?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "provider": (wrappedValue: provider?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "session__user": (wrappedValue: sessionUser?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedConnectionTokenList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter connectionTokenUuid: (path) A UUID string identifying this RAC Connection token. 
     - parameter patchedConnectionTokenRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ConnectionToken
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func racConnectionTokensPartialUpdate(connectionTokenUuid: UUID, patchedConnectionTokenRequest: PatchedConnectionTokenRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> ConnectionToken {
        return try await racConnectionTokensPartialUpdateWithRequestBuilder(connectionTokenUuid: connectionTokenUuid, patchedConnectionTokenRequest: patchedConnectionTokenRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /rac/connection_tokens/{connection_token_uuid}/
     - ConnectionToken Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter connectionTokenUuid: (path) A UUID string identifying this RAC Connection token. 
     - parameter patchedConnectionTokenRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ConnectionToken> 
     */
    open class func racConnectionTokensPartialUpdateWithRequestBuilder(connectionTokenUuid: UUID, patchedConnectionTokenRequest: PatchedConnectionTokenRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<ConnectionToken> {
        var localVariablePath = "/rac/connection_tokens/{connection_token_uuid}/"
        let connectionTokenUuidPreEscape = "\(APIHelper.mapValueToPathItem(connectionTokenUuid))"
        let connectionTokenUuidPostEscape = connectionTokenUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{connection_token_uuid}", with: connectionTokenUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedConnectionTokenRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ConnectionToken>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter connectionTokenUuid: (path) A UUID string identifying this RAC Connection token. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ConnectionToken
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func racConnectionTokensRetrieve(connectionTokenUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> ConnectionToken {
        return try await racConnectionTokensRetrieveWithRequestBuilder(connectionTokenUuid: connectionTokenUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /rac/connection_tokens/{connection_token_uuid}/
     - ConnectionToken Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter connectionTokenUuid: (path) A UUID string identifying this RAC Connection token. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ConnectionToken> 
     */
    open class func racConnectionTokensRetrieveWithRequestBuilder(connectionTokenUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<ConnectionToken> {
        var localVariablePath = "/rac/connection_tokens/{connection_token_uuid}/"
        let connectionTokenUuidPreEscape = "\(APIHelper.mapValueToPathItem(connectionTokenUuid))"
        let connectionTokenUuidPostEscape = connectionTokenUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{connection_token_uuid}", with: connectionTokenUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ConnectionToken>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter connectionTokenUuid: (path) A UUID string identifying this RAC Connection token. 
     - parameter connectionTokenRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ConnectionToken
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func racConnectionTokensUpdate(connectionTokenUuid: UUID, connectionTokenRequest: ConnectionTokenRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> ConnectionToken {
        return try await racConnectionTokensUpdateWithRequestBuilder(connectionTokenUuid: connectionTokenUuid, connectionTokenRequest: connectionTokenRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /rac/connection_tokens/{connection_token_uuid}/
     - ConnectionToken Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter connectionTokenUuid: (path) A UUID string identifying this RAC Connection token. 
     - parameter connectionTokenRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ConnectionToken> 
     */
    open class func racConnectionTokensUpdateWithRequestBuilder(connectionTokenUuid: UUID, connectionTokenRequest: ConnectionTokenRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<ConnectionToken> {
        var localVariablePath = "/rac/connection_tokens/{connection_token_uuid}/"
        let connectionTokenUuidPreEscape = "\(APIHelper.mapValueToPathItem(connectionTokenUuid))"
        let connectionTokenUuidPostEscape = connectionTokenUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{connection_token_uuid}", with: connectionTokenUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: connectionTokenRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ConnectionToken>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter connectionTokenUuid: (path) A UUID string identifying this RAC Connection token. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func racConnectionTokensUsedByList(connectionTokenUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await racConnectionTokensUsedByListWithRequestBuilder(connectionTokenUuid: connectionTokenUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /rac/connection_tokens/{connection_token_uuid}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter connectionTokenUuid: (path) A UUID string identifying this RAC Connection token. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func racConnectionTokensUsedByListWithRequestBuilder(connectionTokenUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/rac/connection_tokens/{connection_token_uuid}/used_by/"
        let connectionTokenUuidPreEscape = "\(APIHelper.mapValueToPathItem(connectionTokenUuid))"
        let connectionTokenUuidPostEscape = connectionTokenUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{connection_token_uuid}", with: connectionTokenUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter endpointRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Endpoint
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func racEndpointsCreate(endpointRequest: EndpointRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> Endpoint {
        return try await racEndpointsCreateWithRequestBuilder(endpointRequest: endpointRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /rac/endpoints/
     - Endpoint Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter endpointRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Endpoint> 
     */
    open class func racEndpointsCreateWithRequestBuilder(endpointRequest: EndpointRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Endpoint> {
        let localVariablePath = "/rac/endpoints/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: endpointRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Endpoint>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pbmUuid: (path) A UUID string identifying this RAC Endpoint. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func racEndpointsDestroy(pbmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await racEndpointsDestroyWithRequestBuilder(pbmUuid: pbmUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /rac/endpoints/{pbm_uuid}/
     - Endpoint Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pbmUuid: (path) A UUID string identifying this RAC Endpoint. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func racEndpointsDestroyWithRequestBuilder(pbmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/rac/endpoints/{pbm_uuid}/"
        let pbmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pbmUuid))"
        let pbmUuidPostEscape = pbmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pbm_uuid}", with: pbmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter provider: (query)  (optional)
     - parameter search: (query)  (optional)
     - parameter superuserFullList: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedEndpointList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func racEndpointsList(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, provider: Int? = nil, search: String? = nil, superuserFullList: Bool? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedEndpointList {
        return try await racEndpointsListWithRequestBuilder(name: name, ordering: ordering, page: page, pageSize: pageSize, provider: provider, search: search, superuserFullList: superuserFullList, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /rac/endpoints/
     - List accessible endpoints
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter provider: (query)  (optional)
     - parameter search: (query)  (optional)
     - parameter superuserFullList: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedEndpointList> 
     */
    open class func racEndpointsListWithRequestBuilder(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, provider: Int? = nil, search: String? = nil, superuserFullList: Bool? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedEndpointList> {
        let localVariablePath = "/rac/endpoints/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "provider": (wrappedValue: provider?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "superuser_full_list": (wrappedValue: superuserFullList?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedEndpointList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pbmUuid: (path) A UUID string identifying this RAC Endpoint. 
     - parameter patchedEndpointRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Endpoint
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func racEndpointsPartialUpdate(pbmUuid: UUID, patchedEndpointRequest: PatchedEndpointRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> Endpoint {
        return try await racEndpointsPartialUpdateWithRequestBuilder(pbmUuid: pbmUuid, patchedEndpointRequest: patchedEndpointRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /rac/endpoints/{pbm_uuid}/
     - Endpoint Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pbmUuid: (path) A UUID string identifying this RAC Endpoint. 
     - parameter patchedEndpointRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Endpoint> 
     */
    open class func racEndpointsPartialUpdateWithRequestBuilder(pbmUuid: UUID, patchedEndpointRequest: PatchedEndpointRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Endpoint> {
        var localVariablePath = "/rac/endpoints/{pbm_uuid}/"
        let pbmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pbmUuid))"
        let pbmUuidPostEscape = pbmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pbm_uuid}", with: pbmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedEndpointRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Endpoint>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pbmUuid: (path) A UUID string identifying this RAC Endpoint. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Endpoint
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func racEndpointsRetrieve(pbmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> Endpoint {
        return try await racEndpointsRetrieveWithRequestBuilder(pbmUuid: pbmUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /rac/endpoints/{pbm_uuid}/
     - Endpoint Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pbmUuid: (path) A UUID string identifying this RAC Endpoint. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Endpoint> 
     */
    open class func racEndpointsRetrieveWithRequestBuilder(pbmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Endpoint> {
        var localVariablePath = "/rac/endpoints/{pbm_uuid}/"
        let pbmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pbmUuid))"
        let pbmUuidPostEscape = pbmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pbm_uuid}", with: pbmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Endpoint>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pbmUuid: (path) A UUID string identifying this RAC Endpoint. 
     - parameter endpointRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Endpoint
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func racEndpointsUpdate(pbmUuid: UUID, endpointRequest: EndpointRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> Endpoint {
        return try await racEndpointsUpdateWithRequestBuilder(pbmUuid: pbmUuid, endpointRequest: endpointRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /rac/endpoints/{pbm_uuid}/
     - Endpoint Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pbmUuid: (path) A UUID string identifying this RAC Endpoint. 
     - parameter endpointRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Endpoint> 
     */
    open class func racEndpointsUpdateWithRequestBuilder(pbmUuid: UUID, endpointRequest: EndpointRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Endpoint> {
        var localVariablePath = "/rac/endpoints/{pbm_uuid}/"
        let pbmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pbmUuid))"
        let pbmUuidPostEscape = pbmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pbm_uuid}", with: pbmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: endpointRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Endpoint>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pbmUuid: (path) A UUID string identifying this RAC Endpoint. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func racEndpointsUsedByList(pbmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await racEndpointsUsedByListWithRequestBuilder(pbmUuid: pbmUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /rac/endpoints/{pbm_uuid}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pbmUuid: (path) A UUID string identifying this RAC Endpoint. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func racEndpointsUsedByListWithRequestBuilder(pbmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/rac/endpoints/{pbm_uuid}/used_by/"
        let pbmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pbmUuid))"
        let pbmUuidPostEscape = pbmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pbm_uuid}", with: pbmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }
}
