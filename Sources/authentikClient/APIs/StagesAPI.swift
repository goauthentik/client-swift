//
// StagesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class StagesAPI {

    /**

     - parameter stageUuid: (path) A UUID string identifying this stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesAllDestroy(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await stagesAllDestroyWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /stages/all/{stage_uuid}/
     - Stage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func stagesAllDestroyWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/stages/all/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedStageList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesAllList(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedStageList {
        return try await stagesAllListWithRequestBuilder(name: name, ordering: ordering, page: page, pageSize: pageSize, search: search, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/all/
     - Stage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedStageList> 
     */
    open class func stagesAllListWithRequestBuilder(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedStageList> {
        let localVariablePath = "/stages/all/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedStageList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Stage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesAllRetrieve(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> Stage {
        return try await stagesAllRetrieveWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/all/{stage_uuid}/
     - Stage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Stage> 
     */
    open class func stagesAllRetrieveWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Stage> {
        var localVariablePath = "/stages/all/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Stage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter apiConfiguration: The configuration for the http request.
     - returns: [TypeCreate]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesAllTypesList(apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [TypeCreate] {
        return try await stagesAllTypesListWithRequestBuilder(apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/all/types/
     - Get all creatable types
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[TypeCreate]> 
     */
    open class func stagesAllTypesListWithRequestBuilder(apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[TypeCreate]> {
        let localVariablePath = "/stages/all/types/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[TypeCreate]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesAllUsedByList(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await stagesAllUsedByListWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/all/{stage_uuid}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func stagesAllUsedByListWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/stages/all/{stage_uuid}/used_by/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UserSetting]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesAllUserSettingsList(apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UserSetting] {
        return try await stagesAllUserSettingsListWithRequestBuilder(apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/all/user_settings/
     - Get all stages the user can configure
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UserSetting]> 
     */
    open class func stagesAllUserSettingsListWithRequestBuilder(apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UserSetting]> {
        let localVariablePath = "/stages/all/user_settings/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UserSetting]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter authenticatorDuoStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AuthenticatorDuoStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesAuthenticatorDuoCreate(authenticatorDuoStageRequest: AuthenticatorDuoStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> AuthenticatorDuoStage {
        return try await stagesAuthenticatorDuoCreateWithRequestBuilder(authenticatorDuoStageRequest: authenticatorDuoStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /stages/authenticator/duo/
     - AuthenticatorDuoStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter authenticatorDuoStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AuthenticatorDuoStage> 
     */
    open class func stagesAuthenticatorDuoCreateWithRequestBuilder(authenticatorDuoStageRequest: AuthenticatorDuoStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<AuthenticatorDuoStage> {
        let localVariablePath = "/stages/authenticator/duo/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: authenticatorDuoStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthenticatorDuoStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Duo Authenticator Setup Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesAuthenticatorDuoDestroy(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await stagesAuthenticatorDuoDestroyWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /stages/authenticator/duo/{stage_uuid}/
     - AuthenticatorDuoStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Duo Authenticator Setup Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func stagesAuthenticatorDuoDestroyWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/stages/authenticator/duo/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Duo Authenticator Setup Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: DuoDeviceEnrollmentStatus
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesAuthenticatorDuoEnrollmentStatusCreate(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> DuoDeviceEnrollmentStatus {
        return try await stagesAuthenticatorDuoEnrollmentStatusCreateWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /stages/authenticator/duo/{stage_uuid}/enrollment_status/
     - Check enrollment status of user details in current session
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Duo Authenticator Setup Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<DuoDeviceEnrollmentStatus> 
     */
    open class func stagesAuthenticatorDuoEnrollmentStatusCreateWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<DuoDeviceEnrollmentStatus> {
        var localVariablePath = "/stages/authenticator/duo/{stage_uuid}/enrollment_status/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DuoDeviceEnrollmentStatus>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Duo Authenticator Setup Stage. 
     - parameter authenticatorDuoStageManualDeviceImportRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesAuthenticatorDuoImportDeviceManualCreate(stageUuid: UUID, authenticatorDuoStageManualDeviceImportRequest: AuthenticatorDuoStageManualDeviceImportRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await stagesAuthenticatorDuoImportDeviceManualCreateWithRequestBuilder(stageUuid: stageUuid, authenticatorDuoStageManualDeviceImportRequest: authenticatorDuoStageManualDeviceImportRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /stages/authenticator/duo/{stage_uuid}/import_device_manual/
     - Import duo devices into authentik
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Duo Authenticator Setup Stage. 
     - parameter authenticatorDuoStageManualDeviceImportRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func stagesAuthenticatorDuoImportDeviceManualCreateWithRequestBuilder(stageUuid: UUID, authenticatorDuoStageManualDeviceImportRequest: AuthenticatorDuoStageManualDeviceImportRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/stages/authenticator/duo/{stage_uuid}/import_device_manual/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: authenticatorDuoStageManualDeviceImportRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Duo Authenticator Setup Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AuthenticatorDuoStageDeviceImportResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesAuthenticatorDuoImportDevicesAutomaticCreate(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> AuthenticatorDuoStageDeviceImportResponse {
        return try await stagesAuthenticatorDuoImportDevicesAutomaticCreateWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /stages/authenticator/duo/{stage_uuid}/import_devices_automatic/
     - Import duo devices into authentik
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Duo Authenticator Setup Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AuthenticatorDuoStageDeviceImportResponse> 
     */
    open class func stagesAuthenticatorDuoImportDevicesAutomaticCreateWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<AuthenticatorDuoStageDeviceImportResponse> {
        var localVariablePath = "/stages/authenticator/duo/{stage_uuid}/import_devices_automatic/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthenticatorDuoStageDeviceImportResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter apiHostname: (query)  (optional)
     - parameter clientId: (query)  (optional)
     - parameter configureFlow: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedAuthenticatorDuoStageList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesAuthenticatorDuoList(apiHostname: String? = nil, clientId: String? = nil, configureFlow: UUID? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedAuthenticatorDuoStageList {
        return try await stagesAuthenticatorDuoListWithRequestBuilder(apiHostname: apiHostname, clientId: clientId, configureFlow: configureFlow, name: name, ordering: ordering, page: page, pageSize: pageSize, search: search, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/authenticator/duo/
     - AuthenticatorDuoStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter apiHostname: (query)  (optional)
     - parameter clientId: (query)  (optional)
     - parameter configureFlow: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedAuthenticatorDuoStageList> 
     */
    open class func stagesAuthenticatorDuoListWithRequestBuilder(apiHostname: String? = nil, clientId: String? = nil, configureFlow: UUID? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedAuthenticatorDuoStageList> {
        let localVariablePath = "/stages/authenticator/duo/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "api_hostname": (wrappedValue: apiHostname?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "client_id": (wrappedValue: clientId?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "configure_flow": (wrappedValue: configureFlow?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedAuthenticatorDuoStageList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Duo Authenticator Setup Stage. 
     - parameter patchedAuthenticatorDuoStageRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AuthenticatorDuoStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesAuthenticatorDuoPartialUpdate(stageUuid: UUID, patchedAuthenticatorDuoStageRequest: PatchedAuthenticatorDuoStageRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> AuthenticatorDuoStage {
        return try await stagesAuthenticatorDuoPartialUpdateWithRequestBuilder(stageUuid: stageUuid, patchedAuthenticatorDuoStageRequest: patchedAuthenticatorDuoStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /stages/authenticator/duo/{stage_uuid}/
     - AuthenticatorDuoStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Duo Authenticator Setup Stage. 
     - parameter patchedAuthenticatorDuoStageRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AuthenticatorDuoStage> 
     */
    open class func stagesAuthenticatorDuoPartialUpdateWithRequestBuilder(stageUuid: UUID, patchedAuthenticatorDuoStageRequest: PatchedAuthenticatorDuoStageRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<AuthenticatorDuoStage> {
        var localVariablePath = "/stages/authenticator/duo/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedAuthenticatorDuoStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthenticatorDuoStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Duo Authenticator Setup Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AuthenticatorDuoStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesAuthenticatorDuoRetrieve(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> AuthenticatorDuoStage {
        return try await stagesAuthenticatorDuoRetrieveWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/authenticator/duo/{stage_uuid}/
     - AuthenticatorDuoStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Duo Authenticator Setup Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AuthenticatorDuoStage> 
     */
    open class func stagesAuthenticatorDuoRetrieveWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<AuthenticatorDuoStage> {
        var localVariablePath = "/stages/authenticator/duo/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthenticatorDuoStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Duo Authenticator Setup Stage. 
     - parameter authenticatorDuoStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AuthenticatorDuoStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesAuthenticatorDuoUpdate(stageUuid: UUID, authenticatorDuoStageRequest: AuthenticatorDuoStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> AuthenticatorDuoStage {
        return try await stagesAuthenticatorDuoUpdateWithRequestBuilder(stageUuid: stageUuid, authenticatorDuoStageRequest: authenticatorDuoStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /stages/authenticator/duo/{stage_uuid}/
     - AuthenticatorDuoStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Duo Authenticator Setup Stage. 
     - parameter authenticatorDuoStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AuthenticatorDuoStage> 
     */
    open class func stagesAuthenticatorDuoUpdateWithRequestBuilder(stageUuid: UUID, authenticatorDuoStageRequest: AuthenticatorDuoStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<AuthenticatorDuoStage> {
        var localVariablePath = "/stages/authenticator/duo/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: authenticatorDuoStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthenticatorDuoStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Duo Authenticator Setup Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesAuthenticatorDuoUsedByList(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await stagesAuthenticatorDuoUsedByListWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/authenticator/duo/{stage_uuid}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Duo Authenticator Setup Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func stagesAuthenticatorDuoUsedByListWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/stages/authenticator/duo/{stage_uuid}/used_by/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter authenticatorEmailStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AuthenticatorEmailStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesAuthenticatorEmailCreate(authenticatorEmailStageRequest: AuthenticatorEmailStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> AuthenticatorEmailStage {
        return try await stagesAuthenticatorEmailCreateWithRequestBuilder(authenticatorEmailStageRequest: authenticatorEmailStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /stages/authenticator/email/
     - AuthenticatorEmailStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter authenticatorEmailStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AuthenticatorEmailStage> 
     */
    open class func stagesAuthenticatorEmailCreateWithRequestBuilder(authenticatorEmailStageRequest: AuthenticatorEmailStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<AuthenticatorEmailStage> {
        let localVariablePath = "/stages/authenticator/email/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: authenticatorEmailStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthenticatorEmailStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Email Authenticator Setup Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesAuthenticatorEmailDestroy(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await stagesAuthenticatorEmailDestroyWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /stages/authenticator/email/{stage_uuid}/
     - AuthenticatorEmailStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Email Authenticator Setup Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func stagesAuthenticatorEmailDestroyWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/stages/authenticator/email/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter configureFlow: (query)  (optional)
     - parameter friendlyName: (query)  (optional)
     - parameter fromAddress: (query)  (optional)
     - parameter host: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter password: (query)  (optional)
     - parameter port: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter stageUuid: (query)  (optional)
     - parameter subject: (query)  (optional)
     - parameter template: (query)  (optional)
     - parameter timeout: (query)  (optional)
     - parameter tokenExpiry: (query)  (optional)
     - parameter useGlobalSettings: (query)  (optional)
     - parameter useSsl: (query)  (optional)
     - parameter useTls: (query)  (optional)
     - parameter username: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedAuthenticatorEmailStageList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesAuthenticatorEmailList(configureFlow: UUID? = nil, friendlyName: String? = nil, fromAddress: String? = nil, host: String? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, password: String? = nil, port: Int? = nil, search: String? = nil, stageUuid: UUID? = nil, subject: String? = nil, template: String? = nil, timeout: Int? = nil, tokenExpiry: String? = nil, useGlobalSettings: Bool? = nil, useSsl: Bool? = nil, useTls: Bool? = nil, username: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedAuthenticatorEmailStageList {
        return try await stagesAuthenticatorEmailListWithRequestBuilder(configureFlow: configureFlow, friendlyName: friendlyName, fromAddress: fromAddress, host: host, name: name, ordering: ordering, page: page, pageSize: pageSize, password: password, port: port, search: search, stageUuid: stageUuid, subject: subject, template: template, timeout: timeout, tokenExpiry: tokenExpiry, useGlobalSettings: useGlobalSettings, useSsl: useSsl, useTls: useTls, username: username, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/authenticator/email/
     - AuthenticatorEmailStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter configureFlow: (query)  (optional)
     - parameter friendlyName: (query)  (optional)
     - parameter fromAddress: (query)  (optional)
     - parameter host: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter password: (query)  (optional)
     - parameter port: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter stageUuid: (query)  (optional)
     - parameter subject: (query)  (optional)
     - parameter template: (query)  (optional)
     - parameter timeout: (query)  (optional)
     - parameter tokenExpiry: (query)  (optional)
     - parameter useGlobalSettings: (query)  (optional)
     - parameter useSsl: (query)  (optional)
     - parameter useTls: (query)  (optional)
     - parameter username: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedAuthenticatorEmailStageList> 
     */
    open class func stagesAuthenticatorEmailListWithRequestBuilder(configureFlow: UUID? = nil, friendlyName: String? = nil, fromAddress: String? = nil, host: String? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, password: String? = nil, port: Int? = nil, search: String? = nil, stageUuid: UUID? = nil, subject: String? = nil, template: String? = nil, timeout: Int? = nil, tokenExpiry: String? = nil, useGlobalSettings: Bool? = nil, useSsl: Bool? = nil, useTls: Bool? = nil, username: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedAuthenticatorEmailStageList> {
        let localVariablePath = "/stages/authenticator/email/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "configure_flow": (wrappedValue: configureFlow?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "friendly_name": (wrappedValue: friendlyName?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "from_address": (wrappedValue: fromAddress?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "host": (wrappedValue: host?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "password": (wrappedValue: password?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "port": (wrappedValue: port?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "stage_uuid": (wrappedValue: stageUuid?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "subject": (wrappedValue: subject?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "template": (wrappedValue: template?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "timeout": (wrappedValue: timeout?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "token_expiry": (wrappedValue: tokenExpiry?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "use_global_settings": (wrappedValue: useGlobalSettings?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "use_ssl": (wrappedValue: useSsl?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "use_tls": (wrappedValue: useTls?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "username": (wrappedValue: username?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedAuthenticatorEmailStageList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Email Authenticator Setup Stage. 
     - parameter patchedAuthenticatorEmailStageRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AuthenticatorEmailStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesAuthenticatorEmailPartialUpdate(stageUuid: UUID, patchedAuthenticatorEmailStageRequest: PatchedAuthenticatorEmailStageRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> AuthenticatorEmailStage {
        return try await stagesAuthenticatorEmailPartialUpdateWithRequestBuilder(stageUuid: stageUuid, patchedAuthenticatorEmailStageRequest: patchedAuthenticatorEmailStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /stages/authenticator/email/{stage_uuid}/
     - AuthenticatorEmailStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Email Authenticator Setup Stage. 
     - parameter patchedAuthenticatorEmailStageRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AuthenticatorEmailStage> 
     */
    open class func stagesAuthenticatorEmailPartialUpdateWithRequestBuilder(stageUuid: UUID, patchedAuthenticatorEmailStageRequest: PatchedAuthenticatorEmailStageRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<AuthenticatorEmailStage> {
        var localVariablePath = "/stages/authenticator/email/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedAuthenticatorEmailStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthenticatorEmailStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Email Authenticator Setup Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AuthenticatorEmailStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesAuthenticatorEmailRetrieve(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> AuthenticatorEmailStage {
        return try await stagesAuthenticatorEmailRetrieveWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/authenticator/email/{stage_uuid}/
     - AuthenticatorEmailStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Email Authenticator Setup Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AuthenticatorEmailStage> 
     */
    open class func stagesAuthenticatorEmailRetrieveWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<AuthenticatorEmailStage> {
        var localVariablePath = "/stages/authenticator/email/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthenticatorEmailStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Email Authenticator Setup Stage. 
     - parameter authenticatorEmailStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AuthenticatorEmailStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesAuthenticatorEmailUpdate(stageUuid: UUID, authenticatorEmailStageRequest: AuthenticatorEmailStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> AuthenticatorEmailStage {
        return try await stagesAuthenticatorEmailUpdateWithRequestBuilder(stageUuid: stageUuid, authenticatorEmailStageRequest: authenticatorEmailStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /stages/authenticator/email/{stage_uuid}/
     - AuthenticatorEmailStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Email Authenticator Setup Stage. 
     - parameter authenticatorEmailStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AuthenticatorEmailStage> 
     */
    open class func stagesAuthenticatorEmailUpdateWithRequestBuilder(stageUuid: UUID, authenticatorEmailStageRequest: AuthenticatorEmailStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<AuthenticatorEmailStage> {
        var localVariablePath = "/stages/authenticator/email/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: authenticatorEmailStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthenticatorEmailStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Email Authenticator Setup Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesAuthenticatorEmailUsedByList(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await stagesAuthenticatorEmailUsedByListWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/authenticator/email/{stage_uuid}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Email Authenticator Setup Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func stagesAuthenticatorEmailUsedByListWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/stages/authenticator/email/{stage_uuid}/used_by/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter authenticatorEndpointGDTCStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AuthenticatorEndpointGDTCStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesAuthenticatorEndpointGdtcCreate(authenticatorEndpointGDTCStageRequest: AuthenticatorEndpointGDTCStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> AuthenticatorEndpointGDTCStage {
        return try await stagesAuthenticatorEndpointGdtcCreateWithRequestBuilder(authenticatorEndpointGDTCStageRequest: authenticatorEndpointGDTCStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /stages/authenticator/endpoint_gdtc/
     - AuthenticatorEndpointGDTCStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter authenticatorEndpointGDTCStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AuthenticatorEndpointGDTCStage> 
     */
    open class func stagesAuthenticatorEndpointGdtcCreateWithRequestBuilder(authenticatorEndpointGDTCStageRequest: AuthenticatorEndpointGDTCStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<AuthenticatorEndpointGDTCStage> {
        let localVariablePath = "/stages/authenticator/endpoint_gdtc/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: authenticatorEndpointGDTCStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthenticatorEndpointGDTCStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Endpoint Authenticator Google Device Trust Connector Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesAuthenticatorEndpointGdtcDestroy(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await stagesAuthenticatorEndpointGdtcDestroyWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /stages/authenticator/endpoint_gdtc/{stage_uuid}/
     - AuthenticatorEndpointGDTCStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Endpoint Authenticator Google Device Trust Connector Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func stagesAuthenticatorEndpointGdtcDestroyWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/stages/authenticator/endpoint_gdtc/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter configureFlow: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedAuthenticatorEndpointGDTCStageList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesAuthenticatorEndpointGdtcList(configureFlow: UUID? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedAuthenticatorEndpointGDTCStageList {
        return try await stagesAuthenticatorEndpointGdtcListWithRequestBuilder(configureFlow: configureFlow, name: name, ordering: ordering, page: page, pageSize: pageSize, search: search, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/authenticator/endpoint_gdtc/
     - AuthenticatorEndpointGDTCStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter configureFlow: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedAuthenticatorEndpointGDTCStageList> 
     */
    open class func stagesAuthenticatorEndpointGdtcListWithRequestBuilder(configureFlow: UUID? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedAuthenticatorEndpointGDTCStageList> {
        let localVariablePath = "/stages/authenticator/endpoint_gdtc/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "configure_flow": (wrappedValue: configureFlow?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedAuthenticatorEndpointGDTCStageList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Endpoint Authenticator Google Device Trust Connector Stage. 
     - parameter patchedAuthenticatorEndpointGDTCStageRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AuthenticatorEndpointGDTCStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesAuthenticatorEndpointGdtcPartialUpdate(stageUuid: UUID, patchedAuthenticatorEndpointGDTCStageRequest: PatchedAuthenticatorEndpointGDTCStageRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> AuthenticatorEndpointGDTCStage {
        return try await stagesAuthenticatorEndpointGdtcPartialUpdateWithRequestBuilder(stageUuid: stageUuid, patchedAuthenticatorEndpointGDTCStageRequest: patchedAuthenticatorEndpointGDTCStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /stages/authenticator/endpoint_gdtc/{stage_uuid}/
     - AuthenticatorEndpointGDTCStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Endpoint Authenticator Google Device Trust Connector Stage. 
     - parameter patchedAuthenticatorEndpointGDTCStageRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AuthenticatorEndpointGDTCStage> 
     */
    open class func stagesAuthenticatorEndpointGdtcPartialUpdateWithRequestBuilder(stageUuid: UUID, patchedAuthenticatorEndpointGDTCStageRequest: PatchedAuthenticatorEndpointGDTCStageRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<AuthenticatorEndpointGDTCStage> {
        var localVariablePath = "/stages/authenticator/endpoint_gdtc/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedAuthenticatorEndpointGDTCStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthenticatorEndpointGDTCStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Endpoint Authenticator Google Device Trust Connector Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AuthenticatorEndpointGDTCStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesAuthenticatorEndpointGdtcRetrieve(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> AuthenticatorEndpointGDTCStage {
        return try await stagesAuthenticatorEndpointGdtcRetrieveWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/authenticator/endpoint_gdtc/{stage_uuid}/
     - AuthenticatorEndpointGDTCStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Endpoint Authenticator Google Device Trust Connector Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AuthenticatorEndpointGDTCStage> 
     */
    open class func stagesAuthenticatorEndpointGdtcRetrieveWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<AuthenticatorEndpointGDTCStage> {
        var localVariablePath = "/stages/authenticator/endpoint_gdtc/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthenticatorEndpointGDTCStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Endpoint Authenticator Google Device Trust Connector Stage. 
     - parameter authenticatorEndpointGDTCStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AuthenticatorEndpointGDTCStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesAuthenticatorEndpointGdtcUpdate(stageUuid: UUID, authenticatorEndpointGDTCStageRequest: AuthenticatorEndpointGDTCStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> AuthenticatorEndpointGDTCStage {
        return try await stagesAuthenticatorEndpointGdtcUpdateWithRequestBuilder(stageUuid: stageUuid, authenticatorEndpointGDTCStageRequest: authenticatorEndpointGDTCStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /stages/authenticator/endpoint_gdtc/{stage_uuid}/
     - AuthenticatorEndpointGDTCStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Endpoint Authenticator Google Device Trust Connector Stage. 
     - parameter authenticatorEndpointGDTCStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AuthenticatorEndpointGDTCStage> 
     */
    open class func stagesAuthenticatorEndpointGdtcUpdateWithRequestBuilder(stageUuid: UUID, authenticatorEndpointGDTCStageRequest: AuthenticatorEndpointGDTCStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<AuthenticatorEndpointGDTCStage> {
        var localVariablePath = "/stages/authenticator/endpoint_gdtc/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: authenticatorEndpointGDTCStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthenticatorEndpointGDTCStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Endpoint Authenticator Google Device Trust Connector Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesAuthenticatorEndpointGdtcUsedByList(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await stagesAuthenticatorEndpointGdtcUsedByListWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/authenticator/endpoint_gdtc/{stage_uuid}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Endpoint Authenticator Google Device Trust Connector Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func stagesAuthenticatorEndpointGdtcUsedByListWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/stages/authenticator/endpoint_gdtc/{stage_uuid}/used_by/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter authenticatorSMSStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AuthenticatorSMSStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesAuthenticatorSmsCreate(authenticatorSMSStageRequest: AuthenticatorSMSStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> AuthenticatorSMSStage {
        return try await stagesAuthenticatorSmsCreateWithRequestBuilder(authenticatorSMSStageRequest: authenticatorSMSStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /stages/authenticator/sms/
     - AuthenticatorSMSStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter authenticatorSMSStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AuthenticatorSMSStage> 
     */
    open class func stagesAuthenticatorSmsCreateWithRequestBuilder(authenticatorSMSStageRequest: AuthenticatorSMSStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<AuthenticatorSMSStage> {
        let localVariablePath = "/stages/authenticator/sms/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: authenticatorSMSStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthenticatorSMSStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this SMS Authenticator Setup Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesAuthenticatorSmsDestroy(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await stagesAuthenticatorSmsDestroyWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /stages/authenticator/sms/{stage_uuid}/
     - AuthenticatorSMSStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this SMS Authenticator Setup Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func stagesAuthenticatorSmsDestroyWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/stages/authenticator/sms/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter authType
     */
    public enum AuthType_stagesAuthenticatorSmsList: String, Sendable, CaseIterable {
        case basic = "basic"
        case bearer = "bearer"
    }

    /**
     * enum for parameter provider
     */
    public enum Provider_stagesAuthenticatorSmsList: String, Sendable, CaseIterable {
        case generic = "generic"
        case twilio = "twilio"
    }

    /**

     - parameter accountSid: (query)  (optional)
     - parameter auth: (query)  (optional)
     - parameter authPassword: (query)  (optional)
     - parameter authType: (query)  (optional)
     - parameter configureFlow: (query)  (optional)
     - parameter friendlyName: (query)  (optional)
     - parameter fromNumber: (query)  (optional)
     - parameter mapping: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter provider: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter stageUuid: (query)  (optional)
     - parameter verifyOnly: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedAuthenticatorSMSStageList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesAuthenticatorSmsList(accountSid: String? = nil, auth: String? = nil, authPassword: String? = nil, authType: AuthType_stagesAuthenticatorSmsList? = nil, configureFlow: UUID? = nil, friendlyName: String? = nil, fromNumber: String? = nil, mapping: UUID? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, provider: Provider_stagesAuthenticatorSmsList? = nil, search: String? = nil, stageUuid: UUID? = nil, verifyOnly: Bool? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedAuthenticatorSMSStageList {
        return try await stagesAuthenticatorSmsListWithRequestBuilder(accountSid: accountSid, auth: auth, authPassword: authPassword, authType: authType, configureFlow: configureFlow, friendlyName: friendlyName, fromNumber: fromNumber, mapping: mapping, name: name, ordering: ordering, page: page, pageSize: pageSize, provider: provider, search: search, stageUuid: stageUuid, verifyOnly: verifyOnly, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/authenticator/sms/
     - AuthenticatorSMSStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter accountSid: (query)  (optional)
     - parameter auth: (query)  (optional)
     - parameter authPassword: (query)  (optional)
     - parameter authType: (query)  (optional)
     - parameter configureFlow: (query)  (optional)
     - parameter friendlyName: (query)  (optional)
     - parameter fromNumber: (query)  (optional)
     - parameter mapping: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter provider: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter stageUuid: (query)  (optional)
     - parameter verifyOnly: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedAuthenticatorSMSStageList> 
     */
    open class func stagesAuthenticatorSmsListWithRequestBuilder(accountSid: String? = nil, auth: String? = nil, authPassword: String? = nil, authType: AuthType_stagesAuthenticatorSmsList? = nil, configureFlow: UUID? = nil, friendlyName: String? = nil, fromNumber: String? = nil, mapping: UUID? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, provider: Provider_stagesAuthenticatorSmsList? = nil, search: String? = nil, stageUuid: UUID? = nil, verifyOnly: Bool? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedAuthenticatorSMSStageList> {
        let localVariablePath = "/stages/authenticator/sms/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "account_sid": (wrappedValue: accountSid?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "auth": (wrappedValue: auth?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "auth_password": (wrappedValue: authPassword?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "auth_type": (wrappedValue: authType?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "configure_flow": (wrappedValue: configureFlow?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "friendly_name": (wrappedValue: friendlyName?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "from_number": (wrappedValue: fromNumber?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "mapping": (wrappedValue: mapping?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "provider": (wrappedValue: provider?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "stage_uuid": (wrappedValue: stageUuid?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "verify_only": (wrappedValue: verifyOnly?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedAuthenticatorSMSStageList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this SMS Authenticator Setup Stage. 
     - parameter patchedAuthenticatorSMSStageRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AuthenticatorSMSStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesAuthenticatorSmsPartialUpdate(stageUuid: UUID, patchedAuthenticatorSMSStageRequest: PatchedAuthenticatorSMSStageRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> AuthenticatorSMSStage {
        return try await stagesAuthenticatorSmsPartialUpdateWithRequestBuilder(stageUuid: stageUuid, patchedAuthenticatorSMSStageRequest: patchedAuthenticatorSMSStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /stages/authenticator/sms/{stage_uuid}/
     - AuthenticatorSMSStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this SMS Authenticator Setup Stage. 
     - parameter patchedAuthenticatorSMSStageRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AuthenticatorSMSStage> 
     */
    open class func stagesAuthenticatorSmsPartialUpdateWithRequestBuilder(stageUuid: UUID, patchedAuthenticatorSMSStageRequest: PatchedAuthenticatorSMSStageRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<AuthenticatorSMSStage> {
        var localVariablePath = "/stages/authenticator/sms/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedAuthenticatorSMSStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthenticatorSMSStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this SMS Authenticator Setup Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AuthenticatorSMSStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesAuthenticatorSmsRetrieve(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> AuthenticatorSMSStage {
        return try await stagesAuthenticatorSmsRetrieveWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/authenticator/sms/{stage_uuid}/
     - AuthenticatorSMSStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this SMS Authenticator Setup Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AuthenticatorSMSStage> 
     */
    open class func stagesAuthenticatorSmsRetrieveWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<AuthenticatorSMSStage> {
        var localVariablePath = "/stages/authenticator/sms/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthenticatorSMSStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this SMS Authenticator Setup Stage. 
     - parameter authenticatorSMSStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AuthenticatorSMSStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesAuthenticatorSmsUpdate(stageUuid: UUID, authenticatorSMSStageRequest: AuthenticatorSMSStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> AuthenticatorSMSStage {
        return try await stagesAuthenticatorSmsUpdateWithRequestBuilder(stageUuid: stageUuid, authenticatorSMSStageRequest: authenticatorSMSStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /stages/authenticator/sms/{stage_uuid}/
     - AuthenticatorSMSStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this SMS Authenticator Setup Stage. 
     - parameter authenticatorSMSStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AuthenticatorSMSStage> 
     */
    open class func stagesAuthenticatorSmsUpdateWithRequestBuilder(stageUuid: UUID, authenticatorSMSStageRequest: AuthenticatorSMSStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<AuthenticatorSMSStage> {
        var localVariablePath = "/stages/authenticator/sms/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: authenticatorSMSStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthenticatorSMSStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this SMS Authenticator Setup Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesAuthenticatorSmsUsedByList(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await stagesAuthenticatorSmsUsedByListWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/authenticator/sms/{stage_uuid}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this SMS Authenticator Setup Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func stagesAuthenticatorSmsUsedByListWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/stages/authenticator/sms/{stage_uuid}/used_by/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter authenticatorStaticStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AuthenticatorStaticStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesAuthenticatorStaticCreate(authenticatorStaticStageRequest: AuthenticatorStaticStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> AuthenticatorStaticStage {
        return try await stagesAuthenticatorStaticCreateWithRequestBuilder(authenticatorStaticStageRequest: authenticatorStaticStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /stages/authenticator/static/
     - AuthenticatorStaticStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter authenticatorStaticStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AuthenticatorStaticStage> 
     */
    open class func stagesAuthenticatorStaticCreateWithRequestBuilder(authenticatorStaticStageRequest: AuthenticatorStaticStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<AuthenticatorStaticStage> {
        let localVariablePath = "/stages/authenticator/static/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: authenticatorStaticStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthenticatorStaticStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Static Authenticator Setup Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesAuthenticatorStaticDestroy(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await stagesAuthenticatorStaticDestroyWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /stages/authenticator/static/{stage_uuid}/
     - AuthenticatorStaticStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Static Authenticator Setup Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func stagesAuthenticatorStaticDestroyWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/stages/authenticator/static/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter configureFlow: (query)  (optional)
     - parameter friendlyName: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter stageUuid: (query)  (optional)
     - parameter tokenCount: (query)  (optional)
     - parameter tokenLength: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedAuthenticatorStaticStageList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesAuthenticatorStaticList(configureFlow: UUID? = nil, friendlyName: String? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, stageUuid: UUID? = nil, tokenCount: Int? = nil, tokenLength: Int? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedAuthenticatorStaticStageList {
        return try await stagesAuthenticatorStaticListWithRequestBuilder(configureFlow: configureFlow, friendlyName: friendlyName, name: name, ordering: ordering, page: page, pageSize: pageSize, search: search, stageUuid: stageUuid, tokenCount: tokenCount, tokenLength: tokenLength, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/authenticator/static/
     - AuthenticatorStaticStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter configureFlow: (query)  (optional)
     - parameter friendlyName: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter stageUuid: (query)  (optional)
     - parameter tokenCount: (query)  (optional)
     - parameter tokenLength: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedAuthenticatorStaticStageList> 
     */
    open class func stagesAuthenticatorStaticListWithRequestBuilder(configureFlow: UUID? = nil, friendlyName: String? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, stageUuid: UUID? = nil, tokenCount: Int? = nil, tokenLength: Int? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedAuthenticatorStaticStageList> {
        let localVariablePath = "/stages/authenticator/static/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "configure_flow": (wrappedValue: configureFlow?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "friendly_name": (wrappedValue: friendlyName?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "stage_uuid": (wrappedValue: stageUuid?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "token_count": (wrappedValue: tokenCount?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "token_length": (wrappedValue: tokenLength?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedAuthenticatorStaticStageList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Static Authenticator Setup Stage. 
     - parameter patchedAuthenticatorStaticStageRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AuthenticatorStaticStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesAuthenticatorStaticPartialUpdate(stageUuid: UUID, patchedAuthenticatorStaticStageRequest: PatchedAuthenticatorStaticStageRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> AuthenticatorStaticStage {
        return try await stagesAuthenticatorStaticPartialUpdateWithRequestBuilder(stageUuid: stageUuid, patchedAuthenticatorStaticStageRequest: patchedAuthenticatorStaticStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /stages/authenticator/static/{stage_uuid}/
     - AuthenticatorStaticStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Static Authenticator Setup Stage. 
     - parameter patchedAuthenticatorStaticStageRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AuthenticatorStaticStage> 
     */
    open class func stagesAuthenticatorStaticPartialUpdateWithRequestBuilder(stageUuid: UUID, patchedAuthenticatorStaticStageRequest: PatchedAuthenticatorStaticStageRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<AuthenticatorStaticStage> {
        var localVariablePath = "/stages/authenticator/static/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedAuthenticatorStaticStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthenticatorStaticStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Static Authenticator Setup Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AuthenticatorStaticStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesAuthenticatorStaticRetrieve(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> AuthenticatorStaticStage {
        return try await stagesAuthenticatorStaticRetrieveWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/authenticator/static/{stage_uuid}/
     - AuthenticatorStaticStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Static Authenticator Setup Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AuthenticatorStaticStage> 
     */
    open class func stagesAuthenticatorStaticRetrieveWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<AuthenticatorStaticStage> {
        var localVariablePath = "/stages/authenticator/static/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthenticatorStaticStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Static Authenticator Setup Stage. 
     - parameter authenticatorStaticStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AuthenticatorStaticStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesAuthenticatorStaticUpdate(stageUuid: UUID, authenticatorStaticStageRequest: AuthenticatorStaticStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> AuthenticatorStaticStage {
        return try await stagesAuthenticatorStaticUpdateWithRequestBuilder(stageUuid: stageUuid, authenticatorStaticStageRequest: authenticatorStaticStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /stages/authenticator/static/{stage_uuid}/
     - AuthenticatorStaticStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Static Authenticator Setup Stage. 
     - parameter authenticatorStaticStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AuthenticatorStaticStage> 
     */
    open class func stagesAuthenticatorStaticUpdateWithRequestBuilder(stageUuid: UUID, authenticatorStaticStageRequest: AuthenticatorStaticStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<AuthenticatorStaticStage> {
        var localVariablePath = "/stages/authenticator/static/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: authenticatorStaticStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthenticatorStaticStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Static Authenticator Setup Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesAuthenticatorStaticUsedByList(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await stagesAuthenticatorStaticUsedByListWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/authenticator/static/{stage_uuid}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Static Authenticator Setup Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func stagesAuthenticatorStaticUsedByListWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/stages/authenticator/static/{stage_uuid}/used_by/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter authenticatorTOTPStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AuthenticatorTOTPStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesAuthenticatorTotpCreate(authenticatorTOTPStageRequest: AuthenticatorTOTPStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> AuthenticatorTOTPStage {
        return try await stagesAuthenticatorTotpCreateWithRequestBuilder(authenticatorTOTPStageRequest: authenticatorTOTPStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /stages/authenticator/totp/
     - AuthenticatorTOTPStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter authenticatorTOTPStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AuthenticatorTOTPStage> 
     */
    open class func stagesAuthenticatorTotpCreateWithRequestBuilder(authenticatorTOTPStageRequest: AuthenticatorTOTPStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<AuthenticatorTOTPStage> {
        let localVariablePath = "/stages/authenticator/totp/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: authenticatorTOTPStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthenticatorTOTPStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this TOTP Authenticator Setup Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesAuthenticatorTotpDestroy(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await stagesAuthenticatorTotpDestroyWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /stages/authenticator/totp/{stage_uuid}/
     - AuthenticatorTOTPStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this TOTP Authenticator Setup Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func stagesAuthenticatorTotpDestroyWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/stages/authenticator/totp/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter digits
     */
    public enum Digits_stagesAuthenticatorTotpList: String, Sendable, CaseIterable {
        case _6 = "6"
        case _8 = "8"
    }

    /**

     - parameter configureFlow: (query)  (optional)
     - parameter digits: (query)  (optional)
     - parameter friendlyName: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter stageUuid: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedAuthenticatorTOTPStageList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesAuthenticatorTotpList(configureFlow: UUID? = nil, digits: Digits_stagesAuthenticatorTotpList? = nil, friendlyName: String? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, stageUuid: UUID? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedAuthenticatorTOTPStageList {
        return try await stagesAuthenticatorTotpListWithRequestBuilder(configureFlow: configureFlow, digits: digits, friendlyName: friendlyName, name: name, ordering: ordering, page: page, pageSize: pageSize, search: search, stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/authenticator/totp/
     - AuthenticatorTOTPStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter configureFlow: (query)  (optional)
     - parameter digits: (query)  (optional)
     - parameter friendlyName: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter stageUuid: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedAuthenticatorTOTPStageList> 
     */
    open class func stagesAuthenticatorTotpListWithRequestBuilder(configureFlow: UUID? = nil, digits: Digits_stagesAuthenticatorTotpList? = nil, friendlyName: String? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, stageUuid: UUID? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedAuthenticatorTOTPStageList> {
        let localVariablePath = "/stages/authenticator/totp/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "configure_flow": (wrappedValue: configureFlow?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "digits": (wrappedValue: digits?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "friendly_name": (wrappedValue: friendlyName?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "stage_uuid": (wrappedValue: stageUuid?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedAuthenticatorTOTPStageList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this TOTP Authenticator Setup Stage. 
     - parameter patchedAuthenticatorTOTPStageRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AuthenticatorTOTPStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesAuthenticatorTotpPartialUpdate(stageUuid: UUID, patchedAuthenticatorTOTPStageRequest: PatchedAuthenticatorTOTPStageRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> AuthenticatorTOTPStage {
        return try await stagesAuthenticatorTotpPartialUpdateWithRequestBuilder(stageUuid: stageUuid, patchedAuthenticatorTOTPStageRequest: patchedAuthenticatorTOTPStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /stages/authenticator/totp/{stage_uuid}/
     - AuthenticatorTOTPStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this TOTP Authenticator Setup Stage. 
     - parameter patchedAuthenticatorTOTPStageRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AuthenticatorTOTPStage> 
     */
    open class func stagesAuthenticatorTotpPartialUpdateWithRequestBuilder(stageUuid: UUID, patchedAuthenticatorTOTPStageRequest: PatchedAuthenticatorTOTPStageRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<AuthenticatorTOTPStage> {
        var localVariablePath = "/stages/authenticator/totp/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedAuthenticatorTOTPStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthenticatorTOTPStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this TOTP Authenticator Setup Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AuthenticatorTOTPStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesAuthenticatorTotpRetrieve(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> AuthenticatorTOTPStage {
        return try await stagesAuthenticatorTotpRetrieveWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/authenticator/totp/{stage_uuid}/
     - AuthenticatorTOTPStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this TOTP Authenticator Setup Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AuthenticatorTOTPStage> 
     */
    open class func stagesAuthenticatorTotpRetrieveWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<AuthenticatorTOTPStage> {
        var localVariablePath = "/stages/authenticator/totp/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthenticatorTOTPStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this TOTP Authenticator Setup Stage. 
     - parameter authenticatorTOTPStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AuthenticatorTOTPStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesAuthenticatorTotpUpdate(stageUuid: UUID, authenticatorTOTPStageRequest: AuthenticatorTOTPStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> AuthenticatorTOTPStage {
        return try await stagesAuthenticatorTotpUpdateWithRequestBuilder(stageUuid: stageUuid, authenticatorTOTPStageRequest: authenticatorTOTPStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /stages/authenticator/totp/{stage_uuid}/
     - AuthenticatorTOTPStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this TOTP Authenticator Setup Stage. 
     - parameter authenticatorTOTPStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AuthenticatorTOTPStage> 
     */
    open class func stagesAuthenticatorTotpUpdateWithRequestBuilder(stageUuid: UUID, authenticatorTOTPStageRequest: AuthenticatorTOTPStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<AuthenticatorTOTPStage> {
        var localVariablePath = "/stages/authenticator/totp/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: authenticatorTOTPStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthenticatorTOTPStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this TOTP Authenticator Setup Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesAuthenticatorTotpUsedByList(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await stagesAuthenticatorTotpUsedByListWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/authenticator/totp/{stage_uuid}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this TOTP Authenticator Setup Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func stagesAuthenticatorTotpUsedByListWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/stages/authenticator/totp/{stage_uuid}/used_by/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter authenticatorValidateStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AuthenticatorValidateStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesAuthenticatorValidateCreate(authenticatorValidateStageRequest: AuthenticatorValidateStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> AuthenticatorValidateStage {
        return try await stagesAuthenticatorValidateCreateWithRequestBuilder(authenticatorValidateStageRequest: authenticatorValidateStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /stages/authenticator/validate/
     - AuthenticatorValidateStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter authenticatorValidateStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AuthenticatorValidateStage> 
     */
    open class func stagesAuthenticatorValidateCreateWithRequestBuilder(authenticatorValidateStageRequest: AuthenticatorValidateStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<AuthenticatorValidateStage> {
        let localVariablePath = "/stages/authenticator/validate/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: authenticatorValidateStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthenticatorValidateStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Authenticator Validation Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesAuthenticatorValidateDestroy(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await stagesAuthenticatorValidateDestroyWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /stages/authenticator/validate/{stage_uuid}/
     - AuthenticatorValidateStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Authenticator Validation Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func stagesAuthenticatorValidateDestroyWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/stages/authenticator/validate/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter notConfiguredAction
     */
    public enum NotConfiguredAction_stagesAuthenticatorValidateList: String, Sendable, CaseIterable {
        case configure = "configure"
        case deny = "deny"
        case skip = "skip"
    }

    /**

     - parameter configurationStages: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter notConfiguredAction: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedAuthenticatorValidateStageList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesAuthenticatorValidateList(configurationStages: [UUID]? = nil, name: String? = nil, notConfiguredAction: NotConfiguredAction_stagesAuthenticatorValidateList? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedAuthenticatorValidateStageList {
        return try await stagesAuthenticatorValidateListWithRequestBuilder(configurationStages: configurationStages, name: name, notConfiguredAction: notConfiguredAction, ordering: ordering, page: page, pageSize: pageSize, search: search, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/authenticator/validate/
     - AuthenticatorValidateStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter configurationStages: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter notConfiguredAction: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedAuthenticatorValidateStageList> 
     */
    open class func stagesAuthenticatorValidateListWithRequestBuilder(configurationStages: [UUID]? = nil, name: String? = nil, notConfiguredAction: NotConfiguredAction_stagesAuthenticatorValidateList? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedAuthenticatorValidateStageList> {
        let localVariablePath = "/stages/authenticator/validate/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "configuration_stages": (wrappedValue: configurationStages?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "not_configured_action": (wrappedValue: notConfiguredAction?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedAuthenticatorValidateStageList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Authenticator Validation Stage. 
     - parameter patchedAuthenticatorValidateStageRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AuthenticatorValidateStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesAuthenticatorValidatePartialUpdate(stageUuid: UUID, patchedAuthenticatorValidateStageRequest: PatchedAuthenticatorValidateStageRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> AuthenticatorValidateStage {
        return try await stagesAuthenticatorValidatePartialUpdateWithRequestBuilder(stageUuid: stageUuid, patchedAuthenticatorValidateStageRequest: patchedAuthenticatorValidateStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /stages/authenticator/validate/{stage_uuid}/
     - AuthenticatorValidateStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Authenticator Validation Stage. 
     - parameter patchedAuthenticatorValidateStageRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AuthenticatorValidateStage> 
     */
    open class func stagesAuthenticatorValidatePartialUpdateWithRequestBuilder(stageUuid: UUID, patchedAuthenticatorValidateStageRequest: PatchedAuthenticatorValidateStageRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<AuthenticatorValidateStage> {
        var localVariablePath = "/stages/authenticator/validate/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedAuthenticatorValidateStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthenticatorValidateStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Authenticator Validation Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AuthenticatorValidateStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesAuthenticatorValidateRetrieve(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> AuthenticatorValidateStage {
        return try await stagesAuthenticatorValidateRetrieveWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/authenticator/validate/{stage_uuid}/
     - AuthenticatorValidateStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Authenticator Validation Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AuthenticatorValidateStage> 
     */
    open class func stagesAuthenticatorValidateRetrieveWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<AuthenticatorValidateStage> {
        var localVariablePath = "/stages/authenticator/validate/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthenticatorValidateStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Authenticator Validation Stage. 
     - parameter authenticatorValidateStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AuthenticatorValidateStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesAuthenticatorValidateUpdate(stageUuid: UUID, authenticatorValidateStageRequest: AuthenticatorValidateStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> AuthenticatorValidateStage {
        return try await stagesAuthenticatorValidateUpdateWithRequestBuilder(stageUuid: stageUuid, authenticatorValidateStageRequest: authenticatorValidateStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /stages/authenticator/validate/{stage_uuid}/
     - AuthenticatorValidateStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Authenticator Validation Stage. 
     - parameter authenticatorValidateStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AuthenticatorValidateStage> 
     */
    open class func stagesAuthenticatorValidateUpdateWithRequestBuilder(stageUuid: UUID, authenticatorValidateStageRequest: AuthenticatorValidateStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<AuthenticatorValidateStage> {
        var localVariablePath = "/stages/authenticator/validate/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: authenticatorValidateStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthenticatorValidateStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Authenticator Validation Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesAuthenticatorValidateUsedByList(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await stagesAuthenticatorValidateUsedByListWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/authenticator/validate/{stage_uuid}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Authenticator Validation Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func stagesAuthenticatorValidateUsedByListWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/stages/authenticator/validate/{stage_uuid}/used_by/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter authenticatorWebAuthnStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AuthenticatorWebAuthnStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesAuthenticatorWebauthnCreate(authenticatorWebAuthnStageRequest: AuthenticatorWebAuthnStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> AuthenticatorWebAuthnStage {
        return try await stagesAuthenticatorWebauthnCreateWithRequestBuilder(authenticatorWebAuthnStageRequest: authenticatorWebAuthnStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /stages/authenticator/webauthn/
     - AuthenticatorWebAuthnStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter authenticatorWebAuthnStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AuthenticatorWebAuthnStage> 
     */
    open class func stagesAuthenticatorWebauthnCreateWithRequestBuilder(authenticatorWebAuthnStageRequest: AuthenticatorWebAuthnStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<AuthenticatorWebAuthnStage> {
        let localVariablePath = "/stages/authenticator/webauthn/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: authenticatorWebAuthnStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthenticatorWebAuthnStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this WebAuthn Authenticator Setup Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesAuthenticatorWebauthnDestroy(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await stagesAuthenticatorWebauthnDestroyWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /stages/authenticator/webauthn/{stage_uuid}/
     - AuthenticatorWebAuthnStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this WebAuthn Authenticator Setup Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func stagesAuthenticatorWebauthnDestroyWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/stages/authenticator/webauthn/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter aaguid: (query)  (optional)
     - parameter description: (query)  (optional)
     - parameter icon: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedWebAuthnDeviceTypeList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesAuthenticatorWebauthnDeviceTypesList(aaguid: UUID? = nil, description: String? = nil, icon: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedWebAuthnDeviceTypeList {
        return try await stagesAuthenticatorWebauthnDeviceTypesListWithRequestBuilder(aaguid: aaguid, description: description, icon: icon, ordering: ordering, page: page, pageSize: pageSize, search: search, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/authenticator/webauthn_device_types/
     - WebAuthnDeviceType Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter aaguid: (query)  (optional)
     - parameter description: (query)  (optional)
     - parameter icon: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedWebAuthnDeviceTypeList> 
     */
    open class func stagesAuthenticatorWebauthnDeviceTypesListWithRequestBuilder(aaguid: UUID? = nil, description: String? = nil, icon: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedWebAuthnDeviceTypeList> {
        let localVariablePath = "/stages/authenticator/webauthn_device_types/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "aaguid": (wrappedValue: aaguid?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "description": (wrappedValue: description?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "icon": (wrappedValue: icon?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedWebAuthnDeviceTypeList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter aaguid: (path) A UUID string identifying this WebAuthn Device type. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: WebAuthnDeviceType
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesAuthenticatorWebauthnDeviceTypesRetrieve(aaguid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> WebAuthnDeviceType {
        return try await stagesAuthenticatorWebauthnDeviceTypesRetrieveWithRequestBuilder(aaguid: aaguid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/authenticator/webauthn_device_types/{aaguid}/
     - WebAuthnDeviceType Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter aaguid: (path) A UUID string identifying this WebAuthn Device type. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<WebAuthnDeviceType> 
     */
    open class func stagesAuthenticatorWebauthnDeviceTypesRetrieveWithRequestBuilder(aaguid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<WebAuthnDeviceType> {
        var localVariablePath = "/stages/authenticator/webauthn_device_types/{aaguid}/"
        let aaguidPreEscape = "\(APIHelper.mapValueToPathItem(aaguid))"
        let aaguidPostEscape = aaguidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{aaguid}", with: aaguidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WebAuthnDeviceType>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter authenticatorAttachment
     */
    public enum AuthenticatorAttachment_stagesAuthenticatorWebauthnList: String, Sendable, CaseIterable {
        case crossPlatform = "cross-platform"
        case platform = "platform"
    }

    /**
     * enum for parameter residentKeyRequirement
     */
    public enum ResidentKeyRequirement_stagesAuthenticatorWebauthnList: String, Sendable, CaseIterable {
        case discouraged = "discouraged"
        case preferred = "preferred"
        case _required = "required"
    }

    /**
     * enum for parameter userVerification
     */
    public enum UserVerification_stagesAuthenticatorWebauthnList: String, Sendable, CaseIterable {
        case discouraged = "discouraged"
        case preferred = "preferred"
        case _required = "required"
    }

    /**

     - parameter authenticatorAttachment: (query)  (optional)
     - parameter configureFlow: (query)  (optional)
     - parameter deviceTypeRestrictions: (query)  (optional)
     - parameter friendlyName: (query)  (optional)
     - parameter maxAttempts: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter residentKeyRequirement: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter stageUuid: (query)  (optional)
     - parameter userVerification: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedAuthenticatorWebAuthnStageList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesAuthenticatorWebauthnList(authenticatorAttachment: AuthenticatorAttachment_stagesAuthenticatorWebauthnList? = nil, configureFlow: UUID? = nil, deviceTypeRestrictions: [UUID]? = nil, friendlyName: String? = nil, maxAttempts: Int? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, residentKeyRequirement: ResidentKeyRequirement_stagesAuthenticatorWebauthnList? = nil, search: String? = nil, stageUuid: UUID? = nil, userVerification: UserVerification_stagesAuthenticatorWebauthnList? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedAuthenticatorWebAuthnStageList {
        return try await stagesAuthenticatorWebauthnListWithRequestBuilder(authenticatorAttachment: authenticatorAttachment, configureFlow: configureFlow, deviceTypeRestrictions: deviceTypeRestrictions, friendlyName: friendlyName, maxAttempts: maxAttempts, name: name, ordering: ordering, page: page, pageSize: pageSize, residentKeyRequirement: residentKeyRequirement, search: search, stageUuid: stageUuid, userVerification: userVerification, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/authenticator/webauthn/
     - AuthenticatorWebAuthnStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter authenticatorAttachment: (query)  (optional)
     - parameter configureFlow: (query)  (optional)
     - parameter deviceTypeRestrictions: (query)  (optional)
     - parameter friendlyName: (query)  (optional)
     - parameter maxAttempts: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter residentKeyRequirement: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter stageUuid: (query)  (optional)
     - parameter userVerification: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedAuthenticatorWebAuthnStageList> 
     */
    open class func stagesAuthenticatorWebauthnListWithRequestBuilder(authenticatorAttachment: AuthenticatorAttachment_stagesAuthenticatorWebauthnList? = nil, configureFlow: UUID? = nil, deviceTypeRestrictions: [UUID]? = nil, friendlyName: String? = nil, maxAttempts: Int? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, residentKeyRequirement: ResidentKeyRequirement_stagesAuthenticatorWebauthnList? = nil, search: String? = nil, stageUuid: UUID? = nil, userVerification: UserVerification_stagesAuthenticatorWebauthnList? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedAuthenticatorWebAuthnStageList> {
        let localVariablePath = "/stages/authenticator/webauthn/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "authenticator_attachment": (wrappedValue: authenticatorAttachment?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "configure_flow": (wrappedValue: configureFlow?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "device_type_restrictions": (wrappedValue: deviceTypeRestrictions?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "friendly_name": (wrappedValue: friendlyName?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "max_attempts": (wrappedValue: maxAttempts?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "resident_key_requirement": (wrappedValue: residentKeyRequirement?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "stage_uuid": (wrappedValue: stageUuid?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "user_verification": (wrappedValue: userVerification?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedAuthenticatorWebAuthnStageList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this WebAuthn Authenticator Setup Stage. 
     - parameter patchedAuthenticatorWebAuthnStageRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AuthenticatorWebAuthnStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesAuthenticatorWebauthnPartialUpdate(stageUuid: UUID, patchedAuthenticatorWebAuthnStageRequest: PatchedAuthenticatorWebAuthnStageRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> AuthenticatorWebAuthnStage {
        return try await stagesAuthenticatorWebauthnPartialUpdateWithRequestBuilder(stageUuid: stageUuid, patchedAuthenticatorWebAuthnStageRequest: patchedAuthenticatorWebAuthnStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /stages/authenticator/webauthn/{stage_uuid}/
     - AuthenticatorWebAuthnStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this WebAuthn Authenticator Setup Stage. 
     - parameter patchedAuthenticatorWebAuthnStageRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AuthenticatorWebAuthnStage> 
     */
    open class func stagesAuthenticatorWebauthnPartialUpdateWithRequestBuilder(stageUuid: UUID, patchedAuthenticatorWebAuthnStageRequest: PatchedAuthenticatorWebAuthnStageRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<AuthenticatorWebAuthnStage> {
        var localVariablePath = "/stages/authenticator/webauthn/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedAuthenticatorWebAuthnStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthenticatorWebAuthnStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this WebAuthn Authenticator Setup Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AuthenticatorWebAuthnStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesAuthenticatorWebauthnRetrieve(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> AuthenticatorWebAuthnStage {
        return try await stagesAuthenticatorWebauthnRetrieveWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/authenticator/webauthn/{stage_uuid}/
     - AuthenticatorWebAuthnStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this WebAuthn Authenticator Setup Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AuthenticatorWebAuthnStage> 
     */
    open class func stagesAuthenticatorWebauthnRetrieveWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<AuthenticatorWebAuthnStage> {
        var localVariablePath = "/stages/authenticator/webauthn/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthenticatorWebAuthnStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this WebAuthn Authenticator Setup Stage. 
     - parameter authenticatorWebAuthnStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AuthenticatorWebAuthnStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesAuthenticatorWebauthnUpdate(stageUuid: UUID, authenticatorWebAuthnStageRequest: AuthenticatorWebAuthnStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> AuthenticatorWebAuthnStage {
        return try await stagesAuthenticatorWebauthnUpdateWithRequestBuilder(stageUuid: stageUuid, authenticatorWebAuthnStageRequest: authenticatorWebAuthnStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /stages/authenticator/webauthn/{stage_uuid}/
     - AuthenticatorWebAuthnStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this WebAuthn Authenticator Setup Stage. 
     - parameter authenticatorWebAuthnStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AuthenticatorWebAuthnStage> 
     */
    open class func stagesAuthenticatorWebauthnUpdateWithRequestBuilder(stageUuid: UUID, authenticatorWebAuthnStageRequest: AuthenticatorWebAuthnStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<AuthenticatorWebAuthnStage> {
        var localVariablePath = "/stages/authenticator/webauthn/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: authenticatorWebAuthnStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthenticatorWebAuthnStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this WebAuthn Authenticator Setup Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesAuthenticatorWebauthnUsedByList(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await stagesAuthenticatorWebauthnUsedByListWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/authenticator/webauthn/{stage_uuid}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this WebAuthn Authenticator Setup Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func stagesAuthenticatorWebauthnUsedByListWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/stages/authenticator/webauthn/{stage_uuid}/used_by/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter captchaStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: CaptchaStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesCaptchaCreate(captchaStageRequest: CaptchaStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> CaptchaStage {
        return try await stagesCaptchaCreateWithRequestBuilder(captchaStageRequest: captchaStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /stages/captcha/
     - CaptchaStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter captchaStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<CaptchaStage> 
     */
    open class func stagesCaptchaCreateWithRequestBuilder(captchaStageRequest: CaptchaStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<CaptchaStage> {
        let localVariablePath = "/stages/captcha/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: captchaStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CaptchaStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Captcha Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesCaptchaDestroy(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await stagesCaptchaDestroyWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /stages/captcha/{stage_uuid}/
     - CaptchaStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Captcha Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func stagesCaptchaDestroyWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/stages/captcha/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter publicKey: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedCaptchaStageList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesCaptchaList(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, publicKey: String? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedCaptchaStageList {
        return try await stagesCaptchaListWithRequestBuilder(name: name, ordering: ordering, page: page, pageSize: pageSize, publicKey: publicKey, search: search, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/captcha/
     - CaptchaStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter publicKey: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedCaptchaStageList> 
     */
    open class func stagesCaptchaListWithRequestBuilder(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, publicKey: String? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedCaptchaStageList> {
        let localVariablePath = "/stages/captcha/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "public_key": (wrappedValue: publicKey?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedCaptchaStageList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Captcha Stage. 
     - parameter patchedCaptchaStageRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: CaptchaStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesCaptchaPartialUpdate(stageUuid: UUID, patchedCaptchaStageRequest: PatchedCaptchaStageRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> CaptchaStage {
        return try await stagesCaptchaPartialUpdateWithRequestBuilder(stageUuid: stageUuid, patchedCaptchaStageRequest: patchedCaptchaStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /stages/captcha/{stage_uuid}/
     - CaptchaStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Captcha Stage. 
     - parameter patchedCaptchaStageRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<CaptchaStage> 
     */
    open class func stagesCaptchaPartialUpdateWithRequestBuilder(stageUuid: UUID, patchedCaptchaStageRequest: PatchedCaptchaStageRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<CaptchaStage> {
        var localVariablePath = "/stages/captcha/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedCaptchaStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CaptchaStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Captcha Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: CaptchaStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesCaptchaRetrieve(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> CaptchaStage {
        return try await stagesCaptchaRetrieveWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/captcha/{stage_uuid}/
     - CaptchaStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Captcha Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<CaptchaStage> 
     */
    open class func stagesCaptchaRetrieveWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<CaptchaStage> {
        var localVariablePath = "/stages/captcha/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CaptchaStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Captcha Stage. 
     - parameter captchaStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: CaptchaStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesCaptchaUpdate(stageUuid: UUID, captchaStageRequest: CaptchaStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> CaptchaStage {
        return try await stagesCaptchaUpdateWithRequestBuilder(stageUuid: stageUuid, captchaStageRequest: captchaStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /stages/captcha/{stage_uuid}/
     - CaptchaStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Captcha Stage. 
     - parameter captchaStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<CaptchaStage> 
     */
    open class func stagesCaptchaUpdateWithRequestBuilder(stageUuid: UUID, captchaStageRequest: CaptchaStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<CaptchaStage> {
        var localVariablePath = "/stages/captcha/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: captchaStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CaptchaStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Captcha Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesCaptchaUsedByList(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await stagesCaptchaUsedByListWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/captcha/{stage_uuid}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Captcha Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func stagesCaptchaUsedByListWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/stages/captcha/{stage_uuid}/used_by/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter consentStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ConsentStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesConsentCreate(consentStageRequest: ConsentStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> ConsentStage {
        return try await stagesConsentCreateWithRequestBuilder(consentStageRequest: consentStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /stages/consent/
     - ConsentStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter consentStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ConsentStage> 
     */
    open class func stagesConsentCreateWithRequestBuilder(consentStageRequest: ConsentStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<ConsentStage> {
        let localVariablePath = "/stages/consent/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: consentStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ConsentStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Consent Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesConsentDestroy(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await stagesConsentDestroyWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /stages/consent/{stage_uuid}/
     - ConsentStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Consent Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func stagesConsentDestroyWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/stages/consent/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter mode
     */
    public enum Mode_stagesConsentList: String, Sendable, CaseIterable {
        case alwaysRequire = "always_require"
        case expiring = "expiring"
        case permanent = "permanent"
    }

    /**

     - parameter consentExpireIn: (query)  (optional)
     - parameter mode: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter stageUuid: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedConsentStageList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesConsentList(consentExpireIn: String? = nil, mode: Mode_stagesConsentList? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, stageUuid: UUID? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedConsentStageList {
        return try await stagesConsentListWithRequestBuilder(consentExpireIn: consentExpireIn, mode: mode, name: name, ordering: ordering, page: page, pageSize: pageSize, search: search, stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/consent/
     - ConsentStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter consentExpireIn: (query)  (optional)
     - parameter mode: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter stageUuid: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedConsentStageList> 
     */
    open class func stagesConsentListWithRequestBuilder(consentExpireIn: String? = nil, mode: Mode_stagesConsentList? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, stageUuid: UUID? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedConsentStageList> {
        let localVariablePath = "/stages/consent/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "consent_expire_in": (wrappedValue: consentExpireIn?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "mode": (wrappedValue: mode?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "stage_uuid": (wrappedValue: stageUuid?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedConsentStageList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Consent Stage. 
     - parameter patchedConsentStageRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ConsentStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesConsentPartialUpdate(stageUuid: UUID, patchedConsentStageRequest: PatchedConsentStageRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> ConsentStage {
        return try await stagesConsentPartialUpdateWithRequestBuilder(stageUuid: stageUuid, patchedConsentStageRequest: patchedConsentStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /stages/consent/{stage_uuid}/
     - ConsentStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Consent Stage. 
     - parameter patchedConsentStageRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ConsentStage> 
     */
    open class func stagesConsentPartialUpdateWithRequestBuilder(stageUuid: UUID, patchedConsentStageRequest: PatchedConsentStageRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<ConsentStage> {
        var localVariablePath = "/stages/consent/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedConsentStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ConsentStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Consent Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ConsentStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesConsentRetrieve(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> ConsentStage {
        return try await stagesConsentRetrieveWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/consent/{stage_uuid}/
     - ConsentStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Consent Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ConsentStage> 
     */
    open class func stagesConsentRetrieveWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<ConsentStage> {
        var localVariablePath = "/stages/consent/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ConsentStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Consent Stage. 
     - parameter consentStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ConsentStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesConsentUpdate(stageUuid: UUID, consentStageRequest: ConsentStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> ConsentStage {
        return try await stagesConsentUpdateWithRequestBuilder(stageUuid: stageUuid, consentStageRequest: consentStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /stages/consent/{stage_uuid}/
     - ConsentStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Consent Stage. 
     - parameter consentStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ConsentStage> 
     */
    open class func stagesConsentUpdateWithRequestBuilder(stageUuid: UUID, consentStageRequest: ConsentStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<ConsentStage> {
        var localVariablePath = "/stages/consent/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: consentStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ConsentStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Consent Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesConsentUsedByList(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await stagesConsentUsedByListWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/consent/{stage_uuid}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Consent Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func stagesConsentUsedByListWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/stages/consent/{stage_uuid}/used_by/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter denyStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: DenyStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesDenyCreate(denyStageRequest: DenyStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> DenyStage {
        return try await stagesDenyCreateWithRequestBuilder(denyStageRequest: denyStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /stages/deny/
     - DenyStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter denyStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<DenyStage> 
     */
    open class func stagesDenyCreateWithRequestBuilder(denyStageRequest: DenyStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<DenyStage> {
        let localVariablePath = "/stages/deny/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: denyStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DenyStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Deny Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesDenyDestroy(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await stagesDenyDestroyWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /stages/deny/{stage_uuid}/
     - DenyStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Deny Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func stagesDenyDestroyWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/stages/deny/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter denyMessage: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter stageUuid: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedDenyStageList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesDenyList(denyMessage: String? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, stageUuid: UUID? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedDenyStageList {
        return try await stagesDenyListWithRequestBuilder(denyMessage: denyMessage, name: name, ordering: ordering, page: page, pageSize: pageSize, search: search, stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/deny/
     - DenyStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter denyMessage: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter stageUuid: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedDenyStageList> 
     */
    open class func stagesDenyListWithRequestBuilder(denyMessage: String? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, stageUuid: UUID? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedDenyStageList> {
        let localVariablePath = "/stages/deny/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "deny_message": (wrappedValue: denyMessage?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "stage_uuid": (wrappedValue: stageUuid?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedDenyStageList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Deny Stage. 
     - parameter patchedDenyStageRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: DenyStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesDenyPartialUpdate(stageUuid: UUID, patchedDenyStageRequest: PatchedDenyStageRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> DenyStage {
        return try await stagesDenyPartialUpdateWithRequestBuilder(stageUuid: stageUuid, patchedDenyStageRequest: patchedDenyStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /stages/deny/{stage_uuid}/
     - DenyStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Deny Stage. 
     - parameter patchedDenyStageRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<DenyStage> 
     */
    open class func stagesDenyPartialUpdateWithRequestBuilder(stageUuid: UUID, patchedDenyStageRequest: PatchedDenyStageRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<DenyStage> {
        var localVariablePath = "/stages/deny/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedDenyStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DenyStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Deny Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: DenyStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesDenyRetrieve(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> DenyStage {
        return try await stagesDenyRetrieveWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/deny/{stage_uuid}/
     - DenyStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Deny Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<DenyStage> 
     */
    open class func stagesDenyRetrieveWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<DenyStage> {
        var localVariablePath = "/stages/deny/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DenyStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Deny Stage. 
     - parameter denyStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: DenyStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesDenyUpdate(stageUuid: UUID, denyStageRequest: DenyStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> DenyStage {
        return try await stagesDenyUpdateWithRequestBuilder(stageUuid: stageUuid, denyStageRequest: denyStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /stages/deny/{stage_uuid}/
     - DenyStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Deny Stage. 
     - parameter denyStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<DenyStage> 
     */
    open class func stagesDenyUpdateWithRequestBuilder(stageUuid: UUID, denyStageRequest: DenyStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<DenyStage> {
        var localVariablePath = "/stages/deny/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: denyStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DenyStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Deny Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesDenyUsedByList(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await stagesDenyUsedByListWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/deny/{stage_uuid}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Deny Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func stagesDenyUsedByListWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/stages/deny/{stage_uuid}/used_by/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter dummyStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: DummyStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesDummyCreate(dummyStageRequest: DummyStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> DummyStage {
        return try await stagesDummyCreateWithRequestBuilder(dummyStageRequest: dummyStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /stages/dummy/
     - DummyStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter dummyStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<DummyStage> 
     */
    open class func stagesDummyCreateWithRequestBuilder(dummyStageRequest: DummyStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<DummyStage> {
        let localVariablePath = "/stages/dummy/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: dummyStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DummyStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Dummy Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesDummyDestroy(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await stagesDummyDestroyWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /stages/dummy/{stage_uuid}/
     - DummyStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Dummy Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func stagesDummyDestroyWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/stages/dummy/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter stageUuid: (query)  (optional)
     - parameter throwError: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedDummyStageList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesDummyList(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, stageUuid: UUID? = nil, throwError: Bool? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedDummyStageList {
        return try await stagesDummyListWithRequestBuilder(name: name, ordering: ordering, page: page, pageSize: pageSize, search: search, stageUuid: stageUuid, throwError: throwError, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/dummy/
     - DummyStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter stageUuid: (query)  (optional)
     - parameter throwError: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedDummyStageList> 
     */
    open class func stagesDummyListWithRequestBuilder(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, stageUuid: UUID? = nil, throwError: Bool? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedDummyStageList> {
        let localVariablePath = "/stages/dummy/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "stage_uuid": (wrappedValue: stageUuid?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "throw_error": (wrappedValue: throwError?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedDummyStageList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Dummy Stage. 
     - parameter patchedDummyStageRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: DummyStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesDummyPartialUpdate(stageUuid: UUID, patchedDummyStageRequest: PatchedDummyStageRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> DummyStage {
        return try await stagesDummyPartialUpdateWithRequestBuilder(stageUuid: stageUuid, patchedDummyStageRequest: patchedDummyStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /stages/dummy/{stage_uuid}/
     - DummyStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Dummy Stage. 
     - parameter patchedDummyStageRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<DummyStage> 
     */
    open class func stagesDummyPartialUpdateWithRequestBuilder(stageUuid: UUID, patchedDummyStageRequest: PatchedDummyStageRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<DummyStage> {
        var localVariablePath = "/stages/dummy/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedDummyStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DummyStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Dummy Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: DummyStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesDummyRetrieve(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> DummyStage {
        return try await stagesDummyRetrieveWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/dummy/{stage_uuid}/
     - DummyStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Dummy Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<DummyStage> 
     */
    open class func stagesDummyRetrieveWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<DummyStage> {
        var localVariablePath = "/stages/dummy/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DummyStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Dummy Stage. 
     - parameter dummyStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: DummyStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesDummyUpdate(stageUuid: UUID, dummyStageRequest: DummyStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> DummyStage {
        return try await stagesDummyUpdateWithRequestBuilder(stageUuid: stageUuid, dummyStageRequest: dummyStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /stages/dummy/{stage_uuid}/
     - DummyStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Dummy Stage. 
     - parameter dummyStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<DummyStage> 
     */
    open class func stagesDummyUpdateWithRequestBuilder(stageUuid: UUID, dummyStageRequest: DummyStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<DummyStage> {
        var localVariablePath = "/stages/dummy/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: dummyStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DummyStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Dummy Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesDummyUsedByList(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await stagesDummyUsedByListWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/dummy/{stage_uuid}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Dummy Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func stagesDummyUsedByListWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/stages/dummy/{stage_uuid}/used_by/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter emailStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: EmailStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesEmailCreate(emailStageRequest: EmailStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> EmailStage {
        return try await stagesEmailCreateWithRequestBuilder(emailStageRequest: emailStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /stages/email/
     - EmailStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter emailStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<EmailStage> 
     */
    open class func stagesEmailCreateWithRequestBuilder(emailStageRequest: EmailStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<EmailStage> {
        let localVariablePath = "/stages/email/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: emailStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EmailStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Email Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesEmailDestroy(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await stagesEmailDestroyWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /stages/email/{stage_uuid}/
     - EmailStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Email Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func stagesEmailDestroyWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/stages/email/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter activateUserOnSuccess: (query)  (optional)
     - parameter fromAddress: (query)  (optional)
     - parameter host: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter port: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter subject: (query)  (optional)
     - parameter template: (query)  (optional)
     - parameter timeout: (query)  (optional)
     - parameter tokenExpiry: (query)  (optional)
     - parameter useGlobalSettings: (query)  (optional)
     - parameter useSsl: (query)  (optional)
     - parameter useTls: (query)  (optional)
     - parameter username: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedEmailStageList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesEmailList(activateUserOnSuccess: Bool? = nil, fromAddress: String? = nil, host: String? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, port: Int? = nil, search: String? = nil, subject: String? = nil, template: String? = nil, timeout: Int? = nil, tokenExpiry: String? = nil, useGlobalSettings: Bool? = nil, useSsl: Bool? = nil, useTls: Bool? = nil, username: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedEmailStageList {
        return try await stagesEmailListWithRequestBuilder(activateUserOnSuccess: activateUserOnSuccess, fromAddress: fromAddress, host: host, name: name, ordering: ordering, page: page, pageSize: pageSize, port: port, search: search, subject: subject, template: template, timeout: timeout, tokenExpiry: tokenExpiry, useGlobalSettings: useGlobalSettings, useSsl: useSsl, useTls: useTls, username: username, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/email/
     - EmailStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter activateUserOnSuccess: (query)  (optional)
     - parameter fromAddress: (query)  (optional)
     - parameter host: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter port: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter subject: (query)  (optional)
     - parameter template: (query)  (optional)
     - parameter timeout: (query)  (optional)
     - parameter tokenExpiry: (query)  (optional)
     - parameter useGlobalSettings: (query)  (optional)
     - parameter useSsl: (query)  (optional)
     - parameter useTls: (query)  (optional)
     - parameter username: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedEmailStageList> 
     */
    open class func stagesEmailListWithRequestBuilder(activateUserOnSuccess: Bool? = nil, fromAddress: String? = nil, host: String? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, port: Int? = nil, search: String? = nil, subject: String? = nil, template: String? = nil, timeout: Int? = nil, tokenExpiry: String? = nil, useGlobalSettings: Bool? = nil, useSsl: Bool? = nil, useTls: Bool? = nil, username: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedEmailStageList> {
        let localVariablePath = "/stages/email/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "activate_user_on_success": (wrappedValue: activateUserOnSuccess?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "from_address": (wrappedValue: fromAddress?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "host": (wrappedValue: host?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "port": (wrappedValue: port?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "subject": (wrappedValue: subject?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "template": (wrappedValue: template?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "timeout": (wrappedValue: timeout?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "token_expiry": (wrappedValue: tokenExpiry?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "use_global_settings": (wrappedValue: useGlobalSettings?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "use_ssl": (wrappedValue: useSsl?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "use_tls": (wrappedValue: useTls?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "username": (wrappedValue: username?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedEmailStageList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Email Stage. 
     - parameter patchedEmailStageRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: EmailStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesEmailPartialUpdate(stageUuid: UUID, patchedEmailStageRequest: PatchedEmailStageRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> EmailStage {
        return try await stagesEmailPartialUpdateWithRequestBuilder(stageUuid: stageUuid, patchedEmailStageRequest: patchedEmailStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /stages/email/{stage_uuid}/
     - EmailStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Email Stage. 
     - parameter patchedEmailStageRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<EmailStage> 
     */
    open class func stagesEmailPartialUpdateWithRequestBuilder(stageUuid: UUID, patchedEmailStageRequest: PatchedEmailStageRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<EmailStage> {
        var localVariablePath = "/stages/email/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedEmailStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EmailStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Email Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: EmailStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesEmailRetrieve(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> EmailStage {
        return try await stagesEmailRetrieveWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/email/{stage_uuid}/
     - EmailStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Email Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<EmailStage> 
     */
    open class func stagesEmailRetrieveWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<EmailStage> {
        var localVariablePath = "/stages/email/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EmailStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter apiConfiguration: The configuration for the http request.
     - returns: [TypeCreate]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesEmailTemplatesList(apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [TypeCreate] {
        return try await stagesEmailTemplatesListWithRequestBuilder(apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/email/templates/
     - Get all available templates, including custom templates
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[TypeCreate]> 
     */
    open class func stagesEmailTemplatesListWithRequestBuilder(apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[TypeCreate]> {
        let localVariablePath = "/stages/email/templates/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[TypeCreate]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Email Stage. 
     - parameter emailStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: EmailStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesEmailUpdate(stageUuid: UUID, emailStageRequest: EmailStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> EmailStage {
        return try await stagesEmailUpdateWithRequestBuilder(stageUuid: stageUuid, emailStageRequest: emailStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /stages/email/{stage_uuid}/
     - EmailStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Email Stage. 
     - parameter emailStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<EmailStage> 
     */
    open class func stagesEmailUpdateWithRequestBuilder(stageUuid: UUID, emailStageRequest: EmailStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<EmailStage> {
        var localVariablePath = "/stages/email/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: emailStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EmailStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Email Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesEmailUsedByList(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await stagesEmailUsedByListWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/email/{stage_uuid}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Email Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func stagesEmailUsedByListWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/stages/email/{stage_uuid}/used_by/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter identificationStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: IdentificationStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesIdentificationCreate(identificationStageRequest: IdentificationStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> IdentificationStage {
        return try await stagesIdentificationCreateWithRequestBuilder(identificationStageRequest: identificationStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /stages/identification/
     - IdentificationStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter identificationStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<IdentificationStage> 
     */
    open class func stagesIdentificationCreateWithRequestBuilder(identificationStageRequest: IdentificationStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<IdentificationStage> {
        let localVariablePath = "/stages/identification/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: identificationStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<IdentificationStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Identification Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesIdentificationDestroy(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await stagesIdentificationDestroyWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /stages/identification/{stage_uuid}/
     - IdentificationStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Identification Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func stagesIdentificationDestroyWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/stages/identification/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter captchaStage: (query)  (optional)
     - parameter caseInsensitiveMatching: (query)  (optional)
     - parameter enrollmentFlow: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter passwordStage: (query)  (optional)
     - parameter passwordlessFlow: (query)  (optional)
     - parameter recoveryFlow: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter showMatchedUser: (query)  (optional)
     - parameter showSourceLabels: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedIdentificationStageList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesIdentificationList(captchaStage: UUID? = nil, caseInsensitiveMatching: Bool? = nil, enrollmentFlow: UUID? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, passwordStage: UUID? = nil, passwordlessFlow: UUID? = nil, recoveryFlow: UUID? = nil, search: String? = nil, showMatchedUser: Bool? = nil, showSourceLabels: Bool? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedIdentificationStageList {
        return try await stagesIdentificationListWithRequestBuilder(captchaStage: captchaStage, caseInsensitiveMatching: caseInsensitiveMatching, enrollmentFlow: enrollmentFlow, name: name, ordering: ordering, page: page, pageSize: pageSize, passwordStage: passwordStage, passwordlessFlow: passwordlessFlow, recoveryFlow: recoveryFlow, search: search, showMatchedUser: showMatchedUser, showSourceLabels: showSourceLabels, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/identification/
     - IdentificationStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter captchaStage: (query)  (optional)
     - parameter caseInsensitiveMatching: (query)  (optional)
     - parameter enrollmentFlow: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter passwordStage: (query)  (optional)
     - parameter passwordlessFlow: (query)  (optional)
     - parameter recoveryFlow: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter showMatchedUser: (query)  (optional)
     - parameter showSourceLabels: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedIdentificationStageList> 
     */
    open class func stagesIdentificationListWithRequestBuilder(captchaStage: UUID? = nil, caseInsensitiveMatching: Bool? = nil, enrollmentFlow: UUID? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, passwordStage: UUID? = nil, passwordlessFlow: UUID? = nil, recoveryFlow: UUID? = nil, search: String? = nil, showMatchedUser: Bool? = nil, showSourceLabels: Bool? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedIdentificationStageList> {
        let localVariablePath = "/stages/identification/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "captcha_stage": (wrappedValue: captchaStage?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "case_insensitive_matching": (wrappedValue: caseInsensitiveMatching?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "enrollment_flow": (wrappedValue: enrollmentFlow?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "password_stage": (wrappedValue: passwordStage?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "passwordless_flow": (wrappedValue: passwordlessFlow?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "recovery_flow": (wrappedValue: recoveryFlow?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "show_matched_user": (wrappedValue: showMatchedUser?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "show_source_labels": (wrappedValue: showSourceLabels?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedIdentificationStageList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Identification Stage. 
     - parameter patchedIdentificationStageRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: IdentificationStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesIdentificationPartialUpdate(stageUuid: UUID, patchedIdentificationStageRequest: PatchedIdentificationStageRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> IdentificationStage {
        return try await stagesIdentificationPartialUpdateWithRequestBuilder(stageUuid: stageUuid, patchedIdentificationStageRequest: patchedIdentificationStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /stages/identification/{stage_uuid}/
     - IdentificationStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Identification Stage. 
     - parameter patchedIdentificationStageRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<IdentificationStage> 
     */
    open class func stagesIdentificationPartialUpdateWithRequestBuilder(stageUuid: UUID, patchedIdentificationStageRequest: PatchedIdentificationStageRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<IdentificationStage> {
        var localVariablePath = "/stages/identification/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedIdentificationStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<IdentificationStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Identification Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: IdentificationStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesIdentificationRetrieve(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> IdentificationStage {
        return try await stagesIdentificationRetrieveWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/identification/{stage_uuid}/
     - IdentificationStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Identification Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<IdentificationStage> 
     */
    open class func stagesIdentificationRetrieveWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<IdentificationStage> {
        var localVariablePath = "/stages/identification/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<IdentificationStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Identification Stage. 
     - parameter identificationStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: IdentificationStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesIdentificationUpdate(stageUuid: UUID, identificationStageRequest: IdentificationStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> IdentificationStage {
        return try await stagesIdentificationUpdateWithRequestBuilder(stageUuid: stageUuid, identificationStageRequest: identificationStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /stages/identification/{stage_uuid}/
     - IdentificationStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Identification Stage. 
     - parameter identificationStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<IdentificationStage> 
     */
    open class func stagesIdentificationUpdateWithRequestBuilder(stageUuid: UUID, identificationStageRequest: IdentificationStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<IdentificationStage> {
        var localVariablePath = "/stages/identification/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: identificationStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<IdentificationStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Identification Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesIdentificationUsedByList(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await stagesIdentificationUsedByListWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/identification/{stage_uuid}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Identification Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func stagesIdentificationUsedByListWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/stages/identification/{stage_uuid}/used_by/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter invitationRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Invitation
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesInvitationInvitationsCreate(invitationRequest: InvitationRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> Invitation {
        return try await stagesInvitationInvitationsCreateWithRequestBuilder(invitationRequest: invitationRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /stages/invitation/invitations/
     - Invitation Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter invitationRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Invitation> 
     */
    open class func stagesInvitationInvitationsCreateWithRequestBuilder(invitationRequest: InvitationRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Invitation> {
        let localVariablePath = "/stages/invitation/invitations/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: invitationRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Invitation>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter inviteUuid: (path) A UUID string identifying this Invitation. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesInvitationInvitationsDestroy(inviteUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await stagesInvitationInvitationsDestroyWithRequestBuilder(inviteUuid: inviteUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /stages/invitation/invitations/{invite_uuid}/
     - Invitation Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter inviteUuid: (path) A UUID string identifying this Invitation. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func stagesInvitationInvitationsDestroyWithRequestBuilder(inviteUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/stages/invitation/invitations/{invite_uuid}/"
        let inviteUuidPreEscape = "\(APIHelper.mapValueToPathItem(inviteUuid))"
        let inviteUuidPostEscape = inviteUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{invite_uuid}", with: inviteUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter createdByUsername: (query)  (optional)
     - parameter expires: (query)  (optional)
     - parameter flowSlug: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedInvitationList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesInvitationInvitationsList(createdByUsername: String? = nil, expires: Date? = nil, flowSlug: String? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedInvitationList {
        return try await stagesInvitationInvitationsListWithRequestBuilder(createdByUsername: createdByUsername, expires: expires, flowSlug: flowSlug, name: name, ordering: ordering, page: page, pageSize: pageSize, search: search, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/invitation/invitations/
     - Invitation Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter createdByUsername: (query)  (optional)
     - parameter expires: (query)  (optional)
     - parameter flowSlug: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedInvitationList> 
     */
    open class func stagesInvitationInvitationsListWithRequestBuilder(createdByUsername: String? = nil, expires: Date? = nil, flowSlug: String? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedInvitationList> {
        let localVariablePath = "/stages/invitation/invitations/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "created_by__username": (wrappedValue: createdByUsername?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "expires": (wrappedValue: expires?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "flow__slug": (wrappedValue: flowSlug?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedInvitationList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter inviteUuid: (path) A UUID string identifying this Invitation. 
     - parameter patchedInvitationRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Invitation
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesInvitationInvitationsPartialUpdate(inviteUuid: UUID, patchedInvitationRequest: PatchedInvitationRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> Invitation {
        return try await stagesInvitationInvitationsPartialUpdateWithRequestBuilder(inviteUuid: inviteUuid, patchedInvitationRequest: patchedInvitationRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /stages/invitation/invitations/{invite_uuid}/
     - Invitation Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter inviteUuid: (path) A UUID string identifying this Invitation. 
     - parameter patchedInvitationRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Invitation> 
     */
    open class func stagesInvitationInvitationsPartialUpdateWithRequestBuilder(inviteUuid: UUID, patchedInvitationRequest: PatchedInvitationRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Invitation> {
        var localVariablePath = "/stages/invitation/invitations/{invite_uuid}/"
        let inviteUuidPreEscape = "\(APIHelper.mapValueToPathItem(inviteUuid))"
        let inviteUuidPostEscape = inviteUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{invite_uuid}", with: inviteUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedInvitationRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Invitation>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter inviteUuid: (path) A UUID string identifying this Invitation. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Invitation
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesInvitationInvitationsRetrieve(inviteUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> Invitation {
        return try await stagesInvitationInvitationsRetrieveWithRequestBuilder(inviteUuid: inviteUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/invitation/invitations/{invite_uuid}/
     - Invitation Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter inviteUuid: (path) A UUID string identifying this Invitation. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Invitation> 
     */
    open class func stagesInvitationInvitationsRetrieveWithRequestBuilder(inviteUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Invitation> {
        var localVariablePath = "/stages/invitation/invitations/{invite_uuid}/"
        let inviteUuidPreEscape = "\(APIHelper.mapValueToPathItem(inviteUuid))"
        let inviteUuidPostEscape = inviteUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{invite_uuid}", with: inviteUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Invitation>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter inviteUuid: (path) A UUID string identifying this Invitation. 
     - parameter invitationRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Invitation
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesInvitationInvitationsUpdate(inviteUuid: UUID, invitationRequest: InvitationRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> Invitation {
        return try await stagesInvitationInvitationsUpdateWithRequestBuilder(inviteUuid: inviteUuid, invitationRequest: invitationRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /stages/invitation/invitations/{invite_uuid}/
     - Invitation Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter inviteUuid: (path) A UUID string identifying this Invitation. 
     - parameter invitationRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Invitation> 
     */
    open class func stagesInvitationInvitationsUpdateWithRequestBuilder(inviteUuid: UUID, invitationRequest: InvitationRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Invitation> {
        var localVariablePath = "/stages/invitation/invitations/{invite_uuid}/"
        let inviteUuidPreEscape = "\(APIHelper.mapValueToPathItem(inviteUuid))"
        let inviteUuidPostEscape = inviteUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{invite_uuid}", with: inviteUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: invitationRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Invitation>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter inviteUuid: (path) A UUID string identifying this Invitation. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesInvitationInvitationsUsedByList(inviteUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await stagesInvitationInvitationsUsedByListWithRequestBuilder(inviteUuid: inviteUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/invitation/invitations/{invite_uuid}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter inviteUuid: (path) A UUID string identifying this Invitation. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func stagesInvitationInvitationsUsedByListWithRequestBuilder(inviteUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/stages/invitation/invitations/{invite_uuid}/used_by/"
        let inviteUuidPreEscape = "\(APIHelper.mapValueToPathItem(inviteUuid))"
        let inviteUuidPostEscape = inviteUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{invite_uuid}", with: inviteUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter invitationStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: InvitationStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesInvitationStagesCreate(invitationStageRequest: InvitationStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> InvitationStage {
        return try await stagesInvitationStagesCreateWithRequestBuilder(invitationStageRequest: invitationStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /stages/invitation/stages/
     - InvitationStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter invitationStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<InvitationStage> 
     */
    open class func stagesInvitationStagesCreateWithRequestBuilder(invitationStageRequest: InvitationStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<InvitationStage> {
        let localVariablePath = "/stages/invitation/stages/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: invitationStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InvitationStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Invitation Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesInvitationStagesDestroy(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await stagesInvitationStagesDestroyWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /stages/invitation/stages/{stage_uuid}/
     - InvitationStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Invitation Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func stagesInvitationStagesDestroyWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/stages/invitation/stages/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter continueFlowWithoutInvitation: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter noFlows: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter stageUuid: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedInvitationStageList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesInvitationStagesList(continueFlowWithoutInvitation: Bool? = nil, name: String? = nil, noFlows: Bool? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, stageUuid: UUID? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedInvitationStageList {
        return try await stagesInvitationStagesListWithRequestBuilder(continueFlowWithoutInvitation: continueFlowWithoutInvitation, name: name, noFlows: noFlows, ordering: ordering, page: page, pageSize: pageSize, search: search, stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/invitation/stages/
     - InvitationStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter continueFlowWithoutInvitation: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter noFlows: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter stageUuid: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedInvitationStageList> 
     */
    open class func stagesInvitationStagesListWithRequestBuilder(continueFlowWithoutInvitation: Bool? = nil, name: String? = nil, noFlows: Bool? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, stageUuid: UUID? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedInvitationStageList> {
        let localVariablePath = "/stages/invitation/stages/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "continue_flow_without_invitation": (wrappedValue: continueFlowWithoutInvitation?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "no_flows": (wrappedValue: noFlows?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "stage_uuid": (wrappedValue: stageUuid?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedInvitationStageList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Invitation Stage. 
     - parameter patchedInvitationStageRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: InvitationStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesInvitationStagesPartialUpdate(stageUuid: UUID, patchedInvitationStageRequest: PatchedInvitationStageRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> InvitationStage {
        return try await stagesInvitationStagesPartialUpdateWithRequestBuilder(stageUuid: stageUuid, patchedInvitationStageRequest: patchedInvitationStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /stages/invitation/stages/{stage_uuid}/
     - InvitationStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Invitation Stage. 
     - parameter patchedInvitationStageRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<InvitationStage> 
     */
    open class func stagesInvitationStagesPartialUpdateWithRequestBuilder(stageUuid: UUID, patchedInvitationStageRequest: PatchedInvitationStageRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<InvitationStage> {
        var localVariablePath = "/stages/invitation/stages/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedInvitationStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InvitationStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Invitation Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: InvitationStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesInvitationStagesRetrieve(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> InvitationStage {
        return try await stagesInvitationStagesRetrieveWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/invitation/stages/{stage_uuid}/
     - InvitationStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Invitation Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<InvitationStage> 
     */
    open class func stagesInvitationStagesRetrieveWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<InvitationStage> {
        var localVariablePath = "/stages/invitation/stages/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InvitationStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Invitation Stage. 
     - parameter invitationStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: InvitationStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesInvitationStagesUpdate(stageUuid: UUID, invitationStageRequest: InvitationStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> InvitationStage {
        return try await stagesInvitationStagesUpdateWithRequestBuilder(stageUuid: stageUuid, invitationStageRequest: invitationStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /stages/invitation/stages/{stage_uuid}/
     - InvitationStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Invitation Stage. 
     - parameter invitationStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<InvitationStage> 
     */
    open class func stagesInvitationStagesUpdateWithRequestBuilder(stageUuid: UUID, invitationStageRequest: InvitationStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<InvitationStage> {
        var localVariablePath = "/stages/invitation/stages/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: invitationStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InvitationStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Invitation Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesInvitationStagesUsedByList(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await stagesInvitationStagesUsedByListWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/invitation/stages/{stage_uuid}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Invitation Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func stagesInvitationStagesUsedByListWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/stages/invitation/stages/{stage_uuid}/used_by/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter mutualTLSStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: MutualTLSStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesMtlsCreate(mutualTLSStageRequest: MutualTLSStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> MutualTLSStage {
        return try await stagesMtlsCreateWithRequestBuilder(mutualTLSStageRequest: mutualTLSStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /stages/mtls/
     - MutualTLSStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter mutualTLSStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<MutualTLSStage> 
     */
    open class func stagesMtlsCreateWithRequestBuilder(mutualTLSStageRequest: MutualTLSStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<MutualTLSStage> {
        let localVariablePath = "/stages/mtls/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: mutualTLSStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MutualTLSStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Mutual TLS Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesMtlsDestroy(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await stagesMtlsDestroyWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /stages/mtls/{stage_uuid}/
     - MutualTLSStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Mutual TLS Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func stagesMtlsDestroyWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/stages/mtls/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter certAttribute
     */
    public enum CertAttribute_stagesMtlsList: String, Sendable, CaseIterable {
        case commonName = "common_name"
        case email = "email"
        case subject = "subject"
    }

    /**
     * enum for parameter mode
     */
    public enum Mode_stagesMtlsList: String, Sendable, CaseIterable {
        case _optional = "optional"
        case _required = "required"
    }

    /**
     * enum for parameter userAttribute
     */
    public enum UserAttribute_stagesMtlsList: String, Sendable, CaseIterable {
        case email = "email"
        case username = "username"
    }

    /**

     - parameter certAttribute: (query)  (optional)
     - parameter certificateAuthorities: (query)  (optional)
     - parameter mode: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter stageUuid: (query)  (optional)
     - parameter userAttribute: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedMutualTLSStageList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesMtlsList(certAttribute: CertAttribute_stagesMtlsList? = nil, certificateAuthorities: [UUID]? = nil, mode: Mode_stagesMtlsList? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, stageUuid: UUID? = nil, userAttribute: UserAttribute_stagesMtlsList? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedMutualTLSStageList {
        return try await stagesMtlsListWithRequestBuilder(certAttribute: certAttribute, certificateAuthorities: certificateAuthorities, mode: mode, name: name, ordering: ordering, page: page, pageSize: pageSize, search: search, stageUuid: stageUuid, userAttribute: userAttribute, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/mtls/
     - MutualTLSStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter certAttribute: (query)  (optional)
     - parameter certificateAuthorities: (query)  (optional)
     - parameter mode: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter stageUuid: (query)  (optional)
     - parameter userAttribute: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedMutualTLSStageList> 
     */
    open class func stagesMtlsListWithRequestBuilder(certAttribute: CertAttribute_stagesMtlsList? = nil, certificateAuthorities: [UUID]? = nil, mode: Mode_stagesMtlsList? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, stageUuid: UUID? = nil, userAttribute: UserAttribute_stagesMtlsList? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedMutualTLSStageList> {
        let localVariablePath = "/stages/mtls/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "cert_attribute": (wrappedValue: certAttribute?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "certificate_authorities": (wrappedValue: certificateAuthorities?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "mode": (wrappedValue: mode?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "stage_uuid": (wrappedValue: stageUuid?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "user_attribute": (wrappedValue: userAttribute?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedMutualTLSStageList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Mutual TLS Stage. 
     - parameter patchedMutualTLSStageRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: MutualTLSStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesMtlsPartialUpdate(stageUuid: UUID, patchedMutualTLSStageRequest: PatchedMutualTLSStageRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> MutualTLSStage {
        return try await stagesMtlsPartialUpdateWithRequestBuilder(stageUuid: stageUuid, patchedMutualTLSStageRequest: patchedMutualTLSStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /stages/mtls/{stage_uuid}/
     - MutualTLSStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Mutual TLS Stage. 
     - parameter patchedMutualTLSStageRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<MutualTLSStage> 
     */
    open class func stagesMtlsPartialUpdateWithRequestBuilder(stageUuid: UUID, patchedMutualTLSStageRequest: PatchedMutualTLSStageRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<MutualTLSStage> {
        var localVariablePath = "/stages/mtls/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedMutualTLSStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MutualTLSStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Mutual TLS Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: MutualTLSStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesMtlsRetrieve(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> MutualTLSStage {
        return try await stagesMtlsRetrieveWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/mtls/{stage_uuid}/
     - MutualTLSStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Mutual TLS Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<MutualTLSStage> 
     */
    open class func stagesMtlsRetrieveWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<MutualTLSStage> {
        var localVariablePath = "/stages/mtls/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MutualTLSStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Mutual TLS Stage. 
     - parameter mutualTLSStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: MutualTLSStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesMtlsUpdate(stageUuid: UUID, mutualTLSStageRequest: MutualTLSStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> MutualTLSStage {
        return try await stagesMtlsUpdateWithRequestBuilder(stageUuid: stageUuid, mutualTLSStageRequest: mutualTLSStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /stages/mtls/{stage_uuid}/
     - MutualTLSStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Mutual TLS Stage. 
     - parameter mutualTLSStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<MutualTLSStage> 
     */
    open class func stagesMtlsUpdateWithRequestBuilder(stageUuid: UUID, mutualTLSStageRequest: MutualTLSStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<MutualTLSStage> {
        var localVariablePath = "/stages/mtls/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: mutualTLSStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MutualTLSStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Mutual TLS Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesMtlsUsedByList(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await stagesMtlsUsedByListWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/mtls/{stage_uuid}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Mutual TLS Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func stagesMtlsUsedByListWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/stages/mtls/{stage_uuid}/used_by/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter passwordStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PasswordStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesPasswordCreate(passwordStageRequest: PasswordStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PasswordStage {
        return try await stagesPasswordCreateWithRequestBuilder(passwordStageRequest: passwordStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /stages/password/
     - PasswordStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter passwordStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PasswordStage> 
     */
    open class func stagesPasswordCreateWithRequestBuilder(passwordStageRequest: PasswordStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PasswordStage> {
        let localVariablePath = "/stages/password/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: passwordStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PasswordStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Password Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesPasswordDestroy(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await stagesPasswordDestroyWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /stages/password/{stage_uuid}/
     - PasswordStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Password Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func stagesPasswordDestroyWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/stages/password/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter allowShowPassword: (query)  (optional)
     - parameter configureFlow: (query)  (optional)
     - parameter failedAttemptsBeforeCancel: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedPasswordStageList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesPasswordList(allowShowPassword: Bool? = nil, configureFlow: UUID? = nil, failedAttemptsBeforeCancel: Int? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedPasswordStageList {
        return try await stagesPasswordListWithRequestBuilder(allowShowPassword: allowShowPassword, configureFlow: configureFlow, failedAttemptsBeforeCancel: failedAttemptsBeforeCancel, name: name, ordering: ordering, page: page, pageSize: pageSize, search: search, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/password/
     - PasswordStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter allowShowPassword: (query)  (optional)
     - parameter configureFlow: (query)  (optional)
     - parameter failedAttemptsBeforeCancel: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedPasswordStageList> 
     */
    open class func stagesPasswordListWithRequestBuilder(allowShowPassword: Bool? = nil, configureFlow: UUID? = nil, failedAttemptsBeforeCancel: Int? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedPasswordStageList> {
        let localVariablePath = "/stages/password/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "allow_show_password": (wrappedValue: allowShowPassword?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "configure_flow": (wrappedValue: configureFlow?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "failed_attempts_before_cancel": (wrappedValue: failedAttemptsBeforeCancel?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedPasswordStageList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Password Stage. 
     - parameter patchedPasswordStageRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PasswordStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesPasswordPartialUpdate(stageUuid: UUID, patchedPasswordStageRequest: PatchedPasswordStageRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PasswordStage {
        return try await stagesPasswordPartialUpdateWithRequestBuilder(stageUuid: stageUuid, patchedPasswordStageRequest: patchedPasswordStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /stages/password/{stage_uuid}/
     - PasswordStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Password Stage. 
     - parameter patchedPasswordStageRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PasswordStage> 
     */
    open class func stagesPasswordPartialUpdateWithRequestBuilder(stageUuid: UUID, patchedPasswordStageRequest: PatchedPasswordStageRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PasswordStage> {
        var localVariablePath = "/stages/password/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedPasswordStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PasswordStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Password Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PasswordStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesPasswordRetrieve(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PasswordStage {
        return try await stagesPasswordRetrieveWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/password/{stage_uuid}/
     - PasswordStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Password Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PasswordStage> 
     */
    open class func stagesPasswordRetrieveWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PasswordStage> {
        var localVariablePath = "/stages/password/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PasswordStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Password Stage. 
     - parameter passwordStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PasswordStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesPasswordUpdate(stageUuid: UUID, passwordStageRequest: PasswordStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PasswordStage {
        return try await stagesPasswordUpdateWithRequestBuilder(stageUuid: stageUuid, passwordStageRequest: passwordStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /stages/password/{stage_uuid}/
     - PasswordStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Password Stage. 
     - parameter passwordStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PasswordStage> 
     */
    open class func stagesPasswordUpdateWithRequestBuilder(stageUuid: UUID, passwordStageRequest: PasswordStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PasswordStage> {
        var localVariablePath = "/stages/password/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: passwordStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PasswordStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Password Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesPasswordUsedByList(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await stagesPasswordUsedByListWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/password/{stage_uuid}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Password Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func stagesPasswordUsedByListWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/stages/password/{stage_uuid}/used_by/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter promptRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Prompt
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesPromptPromptsCreate(promptRequest: PromptRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> Prompt {
        return try await stagesPromptPromptsCreateWithRequestBuilder(promptRequest: promptRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /stages/prompt/prompts/
     - Prompt Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter promptRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Prompt> 
     */
    open class func stagesPromptPromptsCreateWithRequestBuilder(promptRequest: PromptRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Prompt> {
        let localVariablePath = "/stages/prompt/prompts/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: promptRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Prompt>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter promptUuid: (path) A UUID string identifying this Prompt. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesPromptPromptsDestroy(promptUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await stagesPromptPromptsDestroyWithRequestBuilder(promptUuid: promptUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /stages/prompt/prompts/{prompt_uuid}/
     - Prompt Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter promptUuid: (path) A UUID string identifying this Prompt. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func stagesPromptPromptsDestroyWithRequestBuilder(promptUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/stages/prompt/prompts/{prompt_uuid}/"
        let promptUuidPreEscape = "\(APIHelper.mapValueToPathItem(promptUuid))"
        let promptUuidPostEscape = promptUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{prompt_uuid}", with: promptUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_stagesPromptPromptsList: String, Sendable, CaseIterable {
        case akLocale = "ak-locale"
        case checkbox = "checkbox"
        case date = "date"
        case dateTime = "date-time"
        case dropdown = "dropdown"
        case email = "email"
        case file = "file"
        case hidden = "hidden"
        case number = "number"
        case password = "password"
        case radioButtonGroup = "radio-button-group"
        case separator = "separator"
        case _static = "static"
        case text = "text"
        case textArea = "text_area"
        case textAreaReadOnly = "text_area_read_only"
        case textReadOnly = "text_read_only"
        case username = "username"
    }

    /**

     - parameter fieldKey: (query)  (optional)
     - parameter label: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter placeholder: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter type: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedPromptList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesPromptPromptsList(fieldKey: String? = nil, label: String? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, placeholder: String? = nil, search: String? = nil, type: ModelType_stagesPromptPromptsList? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedPromptList {
        return try await stagesPromptPromptsListWithRequestBuilder(fieldKey: fieldKey, label: label, name: name, ordering: ordering, page: page, pageSize: pageSize, placeholder: placeholder, search: search, type: type, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/prompt/prompts/
     - Prompt Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter fieldKey: (query)  (optional)
     - parameter label: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter placeholder: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter type: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedPromptList> 
     */
    open class func stagesPromptPromptsListWithRequestBuilder(fieldKey: String? = nil, label: String? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, placeholder: String? = nil, search: String? = nil, type: ModelType_stagesPromptPromptsList? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedPromptList> {
        let localVariablePath = "/stages/prompt/prompts/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "field_key": (wrappedValue: fieldKey?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "label": (wrappedValue: label?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "placeholder": (wrappedValue: placeholder?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "type": (wrappedValue: type?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedPromptList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter promptUuid: (path) A UUID string identifying this Prompt. 
     - parameter patchedPromptRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Prompt
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesPromptPromptsPartialUpdate(promptUuid: UUID, patchedPromptRequest: PatchedPromptRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> Prompt {
        return try await stagesPromptPromptsPartialUpdateWithRequestBuilder(promptUuid: promptUuid, patchedPromptRequest: patchedPromptRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /stages/prompt/prompts/{prompt_uuid}/
     - Prompt Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter promptUuid: (path) A UUID string identifying this Prompt. 
     - parameter patchedPromptRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Prompt> 
     */
    open class func stagesPromptPromptsPartialUpdateWithRequestBuilder(promptUuid: UUID, patchedPromptRequest: PatchedPromptRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Prompt> {
        var localVariablePath = "/stages/prompt/prompts/{prompt_uuid}/"
        let promptUuidPreEscape = "\(APIHelper.mapValueToPathItem(promptUuid))"
        let promptUuidPostEscape = promptUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{prompt_uuid}", with: promptUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedPromptRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Prompt>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter promptRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PromptChallenge
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesPromptPromptsPreviewCreate(promptRequest: PromptRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PromptChallenge {
        return try await stagesPromptPromptsPreviewCreateWithRequestBuilder(promptRequest: promptRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /stages/prompt/prompts/preview/
     - Preview a prompt as a challenge, just like a flow would receive
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter promptRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PromptChallenge> 
     */
    open class func stagesPromptPromptsPreviewCreateWithRequestBuilder(promptRequest: PromptRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PromptChallenge> {
        let localVariablePath = "/stages/prompt/prompts/preview/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: promptRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PromptChallenge>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter promptUuid: (path) A UUID string identifying this Prompt. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Prompt
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesPromptPromptsRetrieve(promptUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> Prompt {
        return try await stagesPromptPromptsRetrieveWithRequestBuilder(promptUuid: promptUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/prompt/prompts/{prompt_uuid}/
     - Prompt Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter promptUuid: (path) A UUID string identifying this Prompt. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Prompt> 
     */
    open class func stagesPromptPromptsRetrieveWithRequestBuilder(promptUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Prompt> {
        var localVariablePath = "/stages/prompt/prompts/{prompt_uuid}/"
        let promptUuidPreEscape = "\(APIHelper.mapValueToPathItem(promptUuid))"
        let promptUuidPostEscape = promptUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{prompt_uuid}", with: promptUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Prompt>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter promptUuid: (path) A UUID string identifying this Prompt. 
     - parameter promptRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Prompt
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesPromptPromptsUpdate(promptUuid: UUID, promptRequest: PromptRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> Prompt {
        return try await stagesPromptPromptsUpdateWithRequestBuilder(promptUuid: promptUuid, promptRequest: promptRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /stages/prompt/prompts/{prompt_uuid}/
     - Prompt Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter promptUuid: (path) A UUID string identifying this Prompt. 
     - parameter promptRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Prompt> 
     */
    open class func stagesPromptPromptsUpdateWithRequestBuilder(promptUuid: UUID, promptRequest: PromptRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Prompt> {
        var localVariablePath = "/stages/prompt/prompts/{prompt_uuid}/"
        let promptUuidPreEscape = "\(APIHelper.mapValueToPathItem(promptUuid))"
        let promptUuidPostEscape = promptUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{prompt_uuid}", with: promptUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: promptRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Prompt>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter promptUuid: (path) A UUID string identifying this Prompt. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesPromptPromptsUsedByList(promptUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await stagesPromptPromptsUsedByListWithRequestBuilder(promptUuid: promptUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/prompt/prompts/{prompt_uuid}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter promptUuid: (path) A UUID string identifying this Prompt. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func stagesPromptPromptsUsedByListWithRequestBuilder(promptUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/stages/prompt/prompts/{prompt_uuid}/used_by/"
        let promptUuidPreEscape = "\(APIHelper.mapValueToPathItem(promptUuid))"
        let promptUuidPostEscape = promptUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{prompt_uuid}", with: promptUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter promptStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PromptStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesPromptStagesCreate(promptStageRequest: PromptStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PromptStage {
        return try await stagesPromptStagesCreateWithRequestBuilder(promptStageRequest: promptStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /stages/prompt/stages/
     - PromptStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter promptStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PromptStage> 
     */
    open class func stagesPromptStagesCreateWithRequestBuilder(promptStageRequest: PromptStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PromptStage> {
        let localVariablePath = "/stages/prompt/stages/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: promptStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PromptStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Prompt Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesPromptStagesDestroy(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await stagesPromptStagesDestroyWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /stages/prompt/stages/{stage_uuid}/
     - PromptStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Prompt Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func stagesPromptStagesDestroyWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/stages/prompt/stages/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter fields: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter stageUuid: (query)  (optional)
     - parameter validationPolicies: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedPromptStageList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesPromptStagesList(fields: [UUID]? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, stageUuid: UUID? = nil, validationPolicies: [UUID]? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedPromptStageList {
        return try await stagesPromptStagesListWithRequestBuilder(fields: fields, name: name, ordering: ordering, page: page, pageSize: pageSize, search: search, stageUuid: stageUuid, validationPolicies: validationPolicies, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/prompt/stages/
     - PromptStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter fields: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter stageUuid: (query)  (optional)
     - parameter validationPolicies: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedPromptStageList> 
     */
    open class func stagesPromptStagesListWithRequestBuilder(fields: [UUID]? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, stageUuid: UUID? = nil, validationPolicies: [UUID]? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedPromptStageList> {
        let localVariablePath = "/stages/prompt/stages/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields": (wrappedValue: fields?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "stage_uuid": (wrappedValue: stageUuid?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "validation_policies": (wrappedValue: validationPolicies?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedPromptStageList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Prompt Stage. 
     - parameter patchedPromptStageRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PromptStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesPromptStagesPartialUpdate(stageUuid: UUID, patchedPromptStageRequest: PatchedPromptStageRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PromptStage {
        return try await stagesPromptStagesPartialUpdateWithRequestBuilder(stageUuid: stageUuid, patchedPromptStageRequest: patchedPromptStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /stages/prompt/stages/{stage_uuid}/
     - PromptStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Prompt Stage. 
     - parameter patchedPromptStageRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PromptStage> 
     */
    open class func stagesPromptStagesPartialUpdateWithRequestBuilder(stageUuid: UUID, patchedPromptStageRequest: PatchedPromptStageRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PromptStage> {
        var localVariablePath = "/stages/prompt/stages/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedPromptStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PromptStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Prompt Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PromptStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesPromptStagesRetrieve(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PromptStage {
        return try await stagesPromptStagesRetrieveWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/prompt/stages/{stage_uuid}/
     - PromptStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Prompt Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PromptStage> 
     */
    open class func stagesPromptStagesRetrieveWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PromptStage> {
        var localVariablePath = "/stages/prompt/stages/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PromptStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Prompt Stage. 
     - parameter promptStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PromptStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesPromptStagesUpdate(stageUuid: UUID, promptStageRequest: PromptStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PromptStage {
        return try await stagesPromptStagesUpdateWithRequestBuilder(stageUuid: stageUuid, promptStageRequest: promptStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /stages/prompt/stages/{stage_uuid}/
     - PromptStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Prompt Stage. 
     - parameter promptStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PromptStage> 
     */
    open class func stagesPromptStagesUpdateWithRequestBuilder(stageUuid: UUID, promptStageRequest: PromptStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PromptStage> {
        var localVariablePath = "/stages/prompt/stages/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: promptStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PromptStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Prompt Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesPromptStagesUsedByList(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await stagesPromptStagesUsedByListWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/prompt/stages/{stage_uuid}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Prompt Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func stagesPromptStagesUsedByListWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/stages/prompt/stages/{stage_uuid}/used_by/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter redirectStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RedirectStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesRedirectCreate(redirectStageRequest: RedirectStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> RedirectStage {
        return try await stagesRedirectCreateWithRequestBuilder(redirectStageRequest: redirectStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /stages/redirect/
     - RedirectStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter redirectStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<RedirectStage> 
     */
    open class func stagesRedirectCreateWithRequestBuilder(redirectStageRequest: RedirectStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<RedirectStage> {
        let localVariablePath = "/stages/redirect/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: redirectStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RedirectStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Redirect Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesRedirectDestroy(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await stagesRedirectDestroyWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /stages/redirect/{stage_uuid}/
     - RedirectStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Redirect Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func stagesRedirectDestroyWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/stages/redirect/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedRedirectStageList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesRedirectList(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedRedirectStageList {
        return try await stagesRedirectListWithRequestBuilder(name: name, ordering: ordering, page: page, pageSize: pageSize, search: search, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/redirect/
     - RedirectStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedRedirectStageList> 
     */
    open class func stagesRedirectListWithRequestBuilder(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedRedirectStageList> {
        let localVariablePath = "/stages/redirect/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedRedirectStageList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Redirect Stage. 
     - parameter patchedRedirectStageRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RedirectStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesRedirectPartialUpdate(stageUuid: UUID, patchedRedirectStageRequest: PatchedRedirectStageRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> RedirectStage {
        return try await stagesRedirectPartialUpdateWithRequestBuilder(stageUuid: stageUuid, patchedRedirectStageRequest: patchedRedirectStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /stages/redirect/{stage_uuid}/
     - RedirectStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Redirect Stage. 
     - parameter patchedRedirectStageRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<RedirectStage> 
     */
    open class func stagesRedirectPartialUpdateWithRequestBuilder(stageUuid: UUID, patchedRedirectStageRequest: PatchedRedirectStageRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<RedirectStage> {
        var localVariablePath = "/stages/redirect/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedRedirectStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RedirectStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Redirect Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RedirectStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesRedirectRetrieve(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> RedirectStage {
        return try await stagesRedirectRetrieveWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/redirect/{stage_uuid}/
     - RedirectStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Redirect Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<RedirectStage> 
     */
    open class func stagesRedirectRetrieveWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<RedirectStage> {
        var localVariablePath = "/stages/redirect/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RedirectStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Redirect Stage. 
     - parameter redirectStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RedirectStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesRedirectUpdate(stageUuid: UUID, redirectStageRequest: RedirectStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> RedirectStage {
        return try await stagesRedirectUpdateWithRequestBuilder(stageUuid: stageUuid, redirectStageRequest: redirectStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /stages/redirect/{stage_uuid}/
     - RedirectStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Redirect Stage. 
     - parameter redirectStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<RedirectStage> 
     */
    open class func stagesRedirectUpdateWithRequestBuilder(stageUuid: UUID, redirectStageRequest: RedirectStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<RedirectStage> {
        var localVariablePath = "/stages/redirect/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: redirectStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RedirectStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Redirect Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesRedirectUsedByList(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await stagesRedirectUsedByListWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/redirect/{stage_uuid}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Redirect Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func stagesRedirectUsedByListWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/stages/redirect/{stage_uuid}/used_by/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter sourceStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SourceStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesSourceCreate(sourceStageRequest: SourceStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> SourceStage {
        return try await stagesSourceCreateWithRequestBuilder(sourceStageRequest: sourceStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /stages/source/
     - SourceStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter sourceStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SourceStage> 
     */
    open class func stagesSourceCreateWithRequestBuilder(sourceStageRequest: SourceStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<SourceStage> {
        let localVariablePath = "/stages/source/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sourceStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SourceStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Source Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesSourceDestroy(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await stagesSourceDestroyWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /stages/source/{stage_uuid}/
     - SourceStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Source Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func stagesSourceDestroyWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/stages/source/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter resumeTimeout: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter source: (query)  (optional)
     - parameter stageUuid: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedSourceStageList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesSourceList(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, resumeTimeout: String? = nil, search: String? = nil, source: UUID? = nil, stageUuid: UUID? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedSourceStageList {
        return try await stagesSourceListWithRequestBuilder(name: name, ordering: ordering, page: page, pageSize: pageSize, resumeTimeout: resumeTimeout, search: search, source: source, stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/source/
     - SourceStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter resumeTimeout: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter source: (query)  (optional)
     - parameter stageUuid: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedSourceStageList> 
     */
    open class func stagesSourceListWithRequestBuilder(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, resumeTimeout: String? = nil, search: String? = nil, source: UUID? = nil, stageUuid: UUID? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedSourceStageList> {
        let localVariablePath = "/stages/source/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "resume_timeout": (wrappedValue: resumeTimeout?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "source": (wrappedValue: source?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "stage_uuid": (wrappedValue: stageUuid?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedSourceStageList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Source Stage. 
     - parameter patchedSourceStageRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SourceStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesSourcePartialUpdate(stageUuid: UUID, patchedSourceStageRequest: PatchedSourceStageRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> SourceStage {
        return try await stagesSourcePartialUpdateWithRequestBuilder(stageUuid: stageUuid, patchedSourceStageRequest: patchedSourceStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /stages/source/{stage_uuid}/
     - SourceStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Source Stage. 
     - parameter patchedSourceStageRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SourceStage> 
     */
    open class func stagesSourcePartialUpdateWithRequestBuilder(stageUuid: UUID, patchedSourceStageRequest: PatchedSourceStageRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<SourceStage> {
        var localVariablePath = "/stages/source/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedSourceStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SourceStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Source Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SourceStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesSourceRetrieve(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> SourceStage {
        return try await stagesSourceRetrieveWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/source/{stage_uuid}/
     - SourceStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Source Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SourceStage> 
     */
    open class func stagesSourceRetrieveWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<SourceStage> {
        var localVariablePath = "/stages/source/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SourceStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Source Stage. 
     - parameter sourceStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SourceStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesSourceUpdate(stageUuid: UUID, sourceStageRequest: SourceStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> SourceStage {
        return try await stagesSourceUpdateWithRequestBuilder(stageUuid: stageUuid, sourceStageRequest: sourceStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /stages/source/{stage_uuid}/
     - SourceStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Source Stage. 
     - parameter sourceStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SourceStage> 
     */
    open class func stagesSourceUpdateWithRequestBuilder(stageUuid: UUID, sourceStageRequest: SourceStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<SourceStage> {
        var localVariablePath = "/stages/source/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sourceStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SourceStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Source Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesSourceUsedByList(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await stagesSourceUsedByListWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/source/{stage_uuid}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Source Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func stagesSourceUsedByListWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/stages/source/{stage_uuid}/used_by/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter userDeleteStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: UserDeleteStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesUserDeleteCreate(userDeleteStageRequest: UserDeleteStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> UserDeleteStage {
        return try await stagesUserDeleteCreateWithRequestBuilder(userDeleteStageRequest: userDeleteStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /stages/user_delete/
     - UserDeleteStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter userDeleteStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<UserDeleteStage> 
     */
    open class func stagesUserDeleteCreateWithRequestBuilder(userDeleteStageRequest: UserDeleteStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<UserDeleteStage> {
        let localVariablePath = "/stages/user_delete/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userDeleteStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserDeleteStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this User Delete Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesUserDeleteDestroy(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await stagesUserDeleteDestroyWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /stages/user_delete/{stage_uuid}/
     - UserDeleteStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this User Delete Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func stagesUserDeleteDestroyWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/stages/user_delete/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter stageUuid: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedUserDeleteStageList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesUserDeleteList(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, stageUuid: UUID? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedUserDeleteStageList {
        return try await stagesUserDeleteListWithRequestBuilder(name: name, ordering: ordering, page: page, pageSize: pageSize, search: search, stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/user_delete/
     - UserDeleteStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter stageUuid: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedUserDeleteStageList> 
     */
    open class func stagesUserDeleteListWithRequestBuilder(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, stageUuid: UUID? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedUserDeleteStageList> {
        let localVariablePath = "/stages/user_delete/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "stage_uuid": (wrappedValue: stageUuid?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedUserDeleteStageList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this User Delete Stage. 
     - parameter patchedUserDeleteStageRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: UserDeleteStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesUserDeletePartialUpdate(stageUuid: UUID, patchedUserDeleteStageRequest: PatchedUserDeleteStageRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> UserDeleteStage {
        return try await stagesUserDeletePartialUpdateWithRequestBuilder(stageUuid: stageUuid, patchedUserDeleteStageRequest: patchedUserDeleteStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /stages/user_delete/{stage_uuid}/
     - UserDeleteStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this User Delete Stage. 
     - parameter patchedUserDeleteStageRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<UserDeleteStage> 
     */
    open class func stagesUserDeletePartialUpdateWithRequestBuilder(stageUuid: UUID, patchedUserDeleteStageRequest: PatchedUserDeleteStageRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<UserDeleteStage> {
        var localVariablePath = "/stages/user_delete/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedUserDeleteStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserDeleteStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this User Delete Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: UserDeleteStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesUserDeleteRetrieve(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> UserDeleteStage {
        return try await stagesUserDeleteRetrieveWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/user_delete/{stage_uuid}/
     - UserDeleteStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this User Delete Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<UserDeleteStage> 
     */
    open class func stagesUserDeleteRetrieveWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<UserDeleteStage> {
        var localVariablePath = "/stages/user_delete/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserDeleteStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this User Delete Stage. 
     - parameter userDeleteStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: UserDeleteStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesUserDeleteUpdate(stageUuid: UUID, userDeleteStageRequest: UserDeleteStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> UserDeleteStage {
        return try await stagesUserDeleteUpdateWithRequestBuilder(stageUuid: stageUuid, userDeleteStageRequest: userDeleteStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /stages/user_delete/{stage_uuid}/
     - UserDeleteStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this User Delete Stage. 
     - parameter userDeleteStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<UserDeleteStage> 
     */
    open class func stagesUserDeleteUpdateWithRequestBuilder(stageUuid: UUID, userDeleteStageRequest: UserDeleteStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<UserDeleteStage> {
        var localVariablePath = "/stages/user_delete/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userDeleteStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserDeleteStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this User Delete Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesUserDeleteUsedByList(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await stagesUserDeleteUsedByListWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/user_delete/{stage_uuid}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this User Delete Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func stagesUserDeleteUsedByListWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/stages/user_delete/{stage_uuid}/used_by/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter userLoginStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: UserLoginStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesUserLoginCreate(userLoginStageRequest: UserLoginStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> UserLoginStage {
        return try await stagesUserLoginCreateWithRequestBuilder(userLoginStageRequest: userLoginStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /stages/user_login/
     - UserLoginStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter userLoginStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<UserLoginStage> 
     */
    open class func stagesUserLoginCreateWithRequestBuilder(userLoginStageRequest: UserLoginStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<UserLoginStage> {
        let localVariablePath = "/stages/user_login/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userLoginStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserLoginStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this User Login Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesUserLoginDestroy(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await stagesUserLoginDestroyWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /stages/user_login/{stage_uuid}/
     - UserLoginStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this User Login Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func stagesUserLoginDestroyWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/stages/user_login/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter geoipBinding
     */
    public enum GeoipBinding_stagesUserLoginList: String, Sendable, CaseIterable {
        case bindContinent = "bind_continent"
        case bindContinentCountry = "bind_continent_country"
        case bindContinentCountryCity = "bind_continent_country_city"
        case noBinding = "no_binding"
    }

    /**
     * enum for parameter networkBinding
     */
    public enum NetworkBinding_stagesUserLoginList: String, Sendable, CaseIterable {
        case bindAsn = "bind_asn"
        case bindAsnNetwork = "bind_asn_network"
        case bindAsnNetworkIp = "bind_asn_network_ip"
        case noBinding = "no_binding"
    }

    /**

     - parameter geoipBinding: (query) Bind sessions created by this stage to the configured GeoIP location   (optional)
     - parameter name: (query)  (optional)
     - parameter networkBinding: (query) Bind sessions created by this stage to the configured network   (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter rememberMeOffset: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter sessionDuration: (query)  (optional)
     - parameter stageUuid: (query)  (optional)
     - parameter terminateOtherSessions: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedUserLoginStageList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesUserLoginList(geoipBinding: GeoipBinding_stagesUserLoginList? = nil, name: String? = nil, networkBinding: NetworkBinding_stagesUserLoginList? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, rememberMeOffset: String? = nil, search: String? = nil, sessionDuration: String? = nil, stageUuid: UUID? = nil, terminateOtherSessions: Bool? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedUserLoginStageList {
        return try await stagesUserLoginListWithRequestBuilder(geoipBinding: geoipBinding, name: name, networkBinding: networkBinding, ordering: ordering, page: page, pageSize: pageSize, rememberMeOffset: rememberMeOffset, search: search, sessionDuration: sessionDuration, stageUuid: stageUuid, terminateOtherSessions: terminateOtherSessions, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/user_login/
     - UserLoginStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter geoipBinding: (query) Bind sessions created by this stage to the configured GeoIP location   (optional)
     - parameter name: (query)  (optional)
     - parameter networkBinding: (query) Bind sessions created by this stage to the configured network   (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter rememberMeOffset: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter sessionDuration: (query)  (optional)
     - parameter stageUuid: (query)  (optional)
     - parameter terminateOtherSessions: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedUserLoginStageList> 
     */
    open class func stagesUserLoginListWithRequestBuilder(geoipBinding: GeoipBinding_stagesUserLoginList? = nil, name: String? = nil, networkBinding: NetworkBinding_stagesUserLoginList? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, rememberMeOffset: String? = nil, search: String? = nil, sessionDuration: String? = nil, stageUuid: UUID? = nil, terminateOtherSessions: Bool? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedUserLoginStageList> {
        let localVariablePath = "/stages/user_login/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "geoip_binding": (wrappedValue: geoipBinding?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "network_binding": (wrappedValue: networkBinding?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "remember_me_offset": (wrappedValue: rememberMeOffset?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "session_duration": (wrappedValue: sessionDuration?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "stage_uuid": (wrappedValue: stageUuid?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "terminate_other_sessions": (wrappedValue: terminateOtherSessions?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedUserLoginStageList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this User Login Stage. 
     - parameter patchedUserLoginStageRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: UserLoginStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesUserLoginPartialUpdate(stageUuid: UUID, patchedUserLoginStageRequest: PatchedUserLoginStageRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> UserLoginStage {
        return try await stagesUserLoginPartialUpdateWithRequestBuilder(stageUuid: stageUuid, patchedUserLoginStageRequest: patchedUserLoginStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /stages/user_login/{stage_uuid}/
     - UserLoginStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this User Login Stage. 
     - parameter patchedUserLoginStageRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<UserLoginStage> 
     */
    open class func stagesUserLoginPartialUpdateWithRequestBuilder(stageUuid: UUID, patchedUserLoginStageRequest: PatchedUserLoginStageRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<UserLoginStage> {
        var localVariablePath = "/stages/user_login/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedUserLoginStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserLoginStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this User Login Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: UserLoginStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesUserLoginRetrieve(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> UserLoginStage {
        return try await stagesUserLoginRetrieveWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/user_login/{stage_uuid}/
     - UserLoginStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this User Login Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<UserLoginStage> 
     */
    open class func stagesUserLoginRetrieveWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<UserLoginStage> {
        var localVariablePath = "/stages/user_login/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserLoginStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this User Login Stage. 
     - parameter userLoginStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: UserLoginStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesUserLoginUpdate(stageUuid: UUID, userLoginStageRequest: UserLoginStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> UserLoginStage {
        return try await stagesUserLoginUpdateWithRequestBuilder(stageUuid: stageUuid, userLoginStageRequest: userLoginStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /stages/user_login/{stage_uuid}/
     - UserLoginStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this User Login Stage. 
     - parameter userLoginStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<UserLoginStage> 
     */
    open class func stagesUserLoginUpdateWithRequestBuilder(stageUuid: UUID, userLoginStageRequest: UserLoginStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<UserLoginStage> {
        var localVariablePath = "/stages/user_login/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userLoginStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserLoginStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this User Login Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesUserLoginUsedByList(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await stagesUserLoginUsedByListWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/user_login/{stage_uuid}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this User Login Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func stagesUserLoginUsedByListWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/stages/user_login/{stage_uuid}/used_by/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter userLogoutStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: UserLogoutStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesUserLogoutCreate(userLogoutStageRequest: UserLogoutStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> UserLogoutStage {
        return try await stagesUserLogoutCreateWithRequestBuilder(userLogoutStageRequest: userLogoutStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /stages/user_logout/
     - UserLogoutStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter userLogoutStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<UserLogoutStage> 
     */
    open class func stagesUserLogoutCreateWithRequestBuilder(userLogoutStageRequest: UserLogoutStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<UserLogoutStage> {
        let localVariablePath = "/stages/user_logout/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userLogoutStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserLogoutStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this User Logout Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesUserLogoutDestroy(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await stagesUserLogoutDestroyWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /stages/user_logout/{stage_uuid}/
     - UserLogoutStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this User Logout Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func stagesUserLogoutDestroyWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/stages/user_logout/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter stageUuid: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedUserLogoutStageList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesUserLogoutList(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, stageUuid: UUID? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedUserLogoutStageList {
        return try await stagesUserLogoutListWithRequestBuilder(name: name, ordering: ordering, page: page, pageSize: pageSize, search: search, stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/user_logout/
     - UserLogoutStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter stageUuid: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedUserLogoutStageList> 
     */
    open class func stagesUserLogoutListWithRequestBuilder(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, stageUuid: UUID? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedUserLogoutStageList> {
        let localVariablePath = "/stages/user_logout/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "stage_uuid": (wrappedValue: stageUuid?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedUserLogoutStageList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this User Logout Stage. 
     - parameter patchedUserLogoutStageRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: UserLogoutStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesUserLogoutPartialUpdate(stageUuid: UUID, patchedUserLogoutStageRequest: PatchedUserLogoutStageRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> UserLogoutStage {
        return try await stagesUserLogoutPartialUpdateWithRequestBuilder(stageUuid: stageUuid, patchedUserLogoutStageRequest: patchedUserLogoutStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /stages/user_logout/{stage_uuid}/
     - UserLogoutStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this User Logout Stage. 
     - parameter patchedUserLogoutStageRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<UserLogoutStage> 
     */
    open class func stagesUserLogoutPartialUpdateWithRequestBuilder(stageUuid: UUID, patchedUserLogoutStageRequest: PatchedUserLogoutStageRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<UserLogoutStage> {
        var localVariablePath = "/stages/user_logout/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedUserLogoutStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserLogoutStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this User Logout Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: UserLogoutStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesUserLogoutRetrieve(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> UserLogoutStage {
        return try await stagesUserLogoutRetrieveWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/user_logout/{stage_uuid}/
     - UserLogoutStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this User Logout Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<UserLogoutStage> 
     */
    open class func stagesUserLogoutRetrieveWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<UserLogoutStage> {
        var localVariablePath = "/stages/user_logout/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserLogoutStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this User Logout Stage. 
     - parameter userLogoutStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: UserLogoutStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesUserLogoutUpdate(stageUuid: UUID, userLogoutStageRequest: UserLogoutStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> UserLogoutStage {
        return try await stagesUserLogoutUpdateWithRequestBuilder(stageUuid: stageUuid, userLogoutStageRequest: userLogoutStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /stages/user_logout/{stage_uuid}/
     - UserLogoutStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this User Logout Stage. 
     - parameter userLogoutStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<UserLogoutStage> 
     */
    open class func stagesUserLogoutUpdateWithRequestBuilder(stageUuid: UUID, userLogoutStageRequest: UserLogoutStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<UserLogoutStage> {
        var localVariablePath = "/stages/user_logout/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userLogoutStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserLogoutStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this User Logout Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesUserLogoutUsedByList(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await stagesUserLogoutUsedByListWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/user_logout/{stage_uuid}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this User Logout Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func stagesUserLogoutUsedByListWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/stages/user_logout/{stage_uuid}/used_by/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter userWriteStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: UserWriteStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesUserWriteCreate(userWriteStageRequest: UserWriteStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> UserWriteStage {
        return try await stagesUserWriteCreateWithRequestBuilder(userWriteStageRequest: userWriteStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /stages/user_write/
     - UserWriteStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter userWriteStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<UserWriteStage> 
     */
    open class func stagesUserWriteCreateWithRequestBuilder(userWriteStageRequest: UserWriteStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<UserWriteStage> {
        let localVariablePath = "/stages/user_write/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userWriteStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserWriteStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this User Write Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesUserWriteDestroy(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await stagesUserWriteDestroyWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /stages/user_write/{stage_uuid}/
     - UserWriteStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this User Write Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func stagesUserWriteDestroyWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/stages/user_write/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter userCreationMode
     */
    public enum UserCreationMode_stagesUserWriteList: String, Sendable, CaseIterable {
        case alwaysCreate = "always_create"
        case createWhenRequired = "create_when_required"
        case neverCreate = "never_create"
    }

    /**
     * enum for parameter userType
     */
    public enum UserType_stagesUserWriteList: String, Sendable, CaseIterable {
        case external = "external"
        case _internal = "internal"
        case internalServiceAccount = "internal_service_account"
        case serviceAccount = "service_account"
    }

    /**

     - parameter createUsersAsInactive: (query)  (optional)
     - parameter createUsersGroup: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter stageUuid: (query)  (optional)
     - parameter userCreationMode: (query)  (optional)
     - parameter userPathTemplate: (query)  (optional)
     - parameter userType: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedUserWriteStageList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesUserWriteList(createUsersAsInactive: Bool? = nil, createUsersGroup: UUID? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, stageUuid: UUID? = nil, userCreationMode: UserCreationMode_stagesUserWriteList? = nil, userPathTemplate: String? = nil, userType: UserType_stagesUserWriteList? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedUserWriteStageList {
        return try await stagesUserWriteListWithRequestBuilder(createUsersAsInactive: createUsersAsInactive, createUsersGroup: createUsersGroup, name: name, ordering: ordering, page: page, pageSize: pageSize, search: search, stageUuid: stageUuid, userCreationMode: userCreationMode, userPathTemplate: userPathTemplate, userType: userType, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/user_write/
     - UserWriteStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter createUsersAsInactive: (query)  (optional)
     - parameter createUsersGroup: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter stageUuid: (query)  (optional)
     - parameter userCreationMode: (query)  (optional)
     - parameter userPathTemplate: (query)  (optional)
     - parameter userType: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedUserWriteStageList> 
     */
    open class func stagesUserWriteListWithRequestBuilder(createUsersAsInactive: Bool? = nil, createUsersGroup: UUID? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, stageUuid: UUID? = nil, userCreationMode: UserCreationMode_stagesUserWriteList? = nil, userPathTemplate: String? = nil, userType: UserType_stagesUserWriteList? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedUserWriteStageList> {
        let localVariablePath = "/stages/user_write/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "create_users_as_inactive": (wrappedValue: createUsersAsInactive?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "create_users_group": (wrappedValue: createUsersGroup?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "stage_uuid": (wrappedValue: stageUuid?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "user_creation_mode": (wrappedValue: userCreationMode?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "user_path_template": (wrappedValue: userPathTemplate?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "user_type": (wrappedValue: userType?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedUserWriteStageList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this User Write Stage. 
     - parameter patchedUserWriteStageRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: UserWriteStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesUserWritePartialUpdate(stageUuid: UUID, patchedUserWriteStageRequest: PatchedUserWriteStageRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> UserWriteStage {
        return try await stagesUserWritePartialUpdateWithRequestBuilder(stageUuid: stageUuid, patchedUserWriteStageRequest: patchedUserWriteStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /stages/user_write/{stage_uuid}/
     - UserWriteStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this User Write Stage. 
     - parameter patchedUserWriteStageRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<UserWriteStage> 
     */
    open class func stagesUserWritePartialUpdateWithRequestBuilder(stageUuid: UUID, patchedUserWriteStageRequest: PatchedUserWriteStageRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<UserWriteStage> {
        var localVariablePath = "/stages/user_write/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedUserWriteStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserWriteStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this User Write Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: UserWriteStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesUserWriteRetrieve(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> UserWriteStage {
        return try await stagesUserWriteRetrieveWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/user_write/{stage_uuid}/
     - UserWriteStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this User Write Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<UserWriteStage> 
     */
    open class func stagesUserWriteRetrieveWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<UserWriteStage> {
        var localVariablePath = "/stages/user_write/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserWriteStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this User Write Stage. 
     - parameter userWriteStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: UserWriteStage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesUserWriteUpdate(stageUuid: UUID, userWriteStageRequest: UserWriteStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> UserWriteStage {
        return try await stagesUserWriteUpdateWithRequestBuilder(stageUuid: stageUuid, userWriteStageRequest: userWriteStageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /stages/user_write/{stage_uuid}/
     - UserWriteStage Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this User Write Stage. 
     - parameter userWriteStageRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<UserWriteStage> 
     */
    open class func stagesUserWriteUpdateWithRequestBuilder(stageUuid: UUID, userWriteStageRequest: UserWriteStageRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<UserWriteStage> {
        var localVariablePath = "/stages/user_write/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userWriteStageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserWriteStage>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this User Write Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stagesUserWriteUsedByList(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await stagesUserWriteUsedByListWithRequestBuilder(stageUuid: stageUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /stages/user_write/{stage_uuid}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this User Write Stage. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func stagesUserWriteUsedByListWithRequestBuilder(stageUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/stages/user_write/{stage_uuid}/used_by/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }
}
