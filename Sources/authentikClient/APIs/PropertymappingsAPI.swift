//
// PropertymappingsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class PropertymappingsAPI {

    /**

     - parameter pmUuid: (path) A UUID string identifying this Property Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsAllDestroy(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await propertymappingsAllDestroyWithRequestBuilder(pmUuid: pmUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /propertymappings/all/{pm_uuid}/
     - PropertyMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this Property Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func propertymappingsAllDestroyWithRequestBuilder(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/propertymappings/all/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter managed: (query)  (optional)
     - parameter managedIsnull: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedPropertyMappingList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsAllList(managed: [String]? = nil, managedIsnull: Bool? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedPropertyMappingList {
        return try await propertymappingsAllListWithRequestBuilder(managed: managed, managedIsnull: managedIsnull, name: name, ordering: ordering, page: page, pageSize: pageSize, search: search, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /propertymappings/all/
     - PropertyMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter managed: (query)  (optional)
     - parameter managedIsnull: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedPropertyMappingList> 
     */
    open class func propertymappingsAllListWithRequestBuilder(managed: [String]? = nil, managedIsnull: Bool? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedPropertyMappingList> {
        let localVariablePath = "/propertymappings/all/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "managed": (wrappedValue: managed?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "managed__isnull": (wrappedValue: managedIsnull?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedPropertyMappingList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this Property Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PropertyMapping
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsAllRetrieve(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PropertyMapping {
        return try await propertymappingsAllRetrieveWithRequestBuilder(pmUuid: pmUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /propertymappings/all/{pm_uuid}/
     - PropertyMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this Property Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PropertyMapping> 
     */
    open class func propertymappingsAllRetrieveWithRequestBuilder(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PropertyMapping> {
        var localVariablePath = "/propertymappings/all/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PropertyMapping>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this Property Mapping. 
     - parameter formatResult: (query)  (optional)
     - parameter propertyMappingTestRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PropertyMappingTestResult
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsAllTestCreate(pmUuid: UUID, formatResult: Bool? = nil, propertyMappingTestRequest: PropertyMappingTestRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PropertyMappingTestResult {
        return try await propertymappingsAllTestCreateWithRequestBuilder(pmUuid: pmUuid, formatResult: formatResult, propertyMappingTestRequest: propertyMappingTestRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /propertymappings/all/{pm_uuid}/test/
     - Test Property Mapping
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this Property Mapping. 
     - parameter formatResult: (query)  (optional)
     - parameter propertyMappingTestRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PropertyMappingTestResult> 
     */
    open class func propertymappingsAllTestCreateWithRequestBuilder(pmUuid: UUID, formatResult: Bool? = nil, propertyMappingTestRequest: PropertyMappingTestRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PropertyMappingTestResult> {
        var localVariablePath = "/propertymappings/all/{pm_uuid}/test/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: propertyMappingTestRequest, codableHelper: apiConfiguration.codableHelper)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "format_result": (wrappedValue: formatResult?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PropertyMappingTestResult>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter apiConfiguration: The configuration for the http request.
     - returns: [TypeCreate]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsAllTypesList(apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [TypeCreate] {
        return try await propertymappingsAllTypesListWithRequestBuilder(apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /propertymappings/all/types/
     - Get all creatable types
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[TypeCreate]> 
     */
    open class func propertymappingsAllTypesListWithRequestBuilder(apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[TypeCreate]> {
        let localVariablePath = "/propertymappings/all/types/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[TypeCreate]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this Property Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsAllUsedByList(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await propertymappingsAllUsedByListWithRequestBuilder(pmUuid: pmUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /propertymappings/all/{pm_uuid}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this Property Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func propertymappingsAllUsedByListWithRequestBuilder(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/propertymappings/all/{pm_uuid}/used_by/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter notificationWebhookMappingRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: NotificationWebhookMapping
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsNotificationCreate(notificationWebhookMappingRequest: NotificationWebhookMappingRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> NotificationWebhookMapping {
        return try await propertymappingsNotificationCreateWithRequestBuilder(notificationWebhookMappingRequest: notificationWebhookMappingRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /propertymappings/notification/
     - NotificationWebhookMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter notificationWebhookMappingRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<NotificationWebhookMapping> 
     */
    open class func propertymappingsNotificationCreateWithRequestBuilder(notificationWebhookMappingRequest: NotificationWebhookMappingRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<NotificationWebhookMapping> {
        let localVariablePath = "/propertymappings/notification/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: notificationWebhookMappingRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NotificationWebhookMapping>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this Webhook Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsNotificationDestroy(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await propertymappingsNotificationDestroyWithRequestBuilder(pmUuid: pmUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /propertymappings/notification/{pm_uuid}/
     - NotificationWebhookMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this Webhook Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func propertymappingsNotificationDestroyWithRequestBuilder(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/propertymappings/notification/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedNotificationWebhookMappingList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsNotificationList(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedNotificationWebhookMappingList {
        return try await propertymappingsNotificationListWithRequestBuilder(name: name, ordering: ordering, page: page, pageSize: pageSize, search: search, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /propertymappings/notification/
     - NotificationWebhookMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedNotificationWebhookMappingList> 
     */
    open class func propertymappingsNotificationListWithRequestBuilder(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedNotificationWebhookMappingList> {
        let localVariablePath = "/propertymappings/notification/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedNotificationWebhookMappingList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this Webhook Mapping. 
     - parameter patchedNotificationWebhookMappingRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: NotificationWebhookMapping
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsNotificationPartialUpdate(pmUuid: UUID, patchedNotificationWebhookMappingRequest: PatchedNotificationWebhookMappingRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> NotificationWebhookMapping {
        return try await propertymappingsNotificationPartialUpdateWithRequestBuilder(pmUuid: pmUuid, patchedNotificationWebhookMappingRequest: patchedNotificationWebhookMappingRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /propertymappings/notification/{pm_uuid}/
     - NotificationWebhookMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this Webhook Mapping. 
     - parameter patchedNotificationWebhookMappingRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<NotificationWebhookMapping> 
     */
    open class func propertymappingsNotificationPartialUpdateWithRequestBuilder(pmUuid: UUID, patchedNotificationWebhookMappingRequest: PatchedNotificationWebhookMappingRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<NotificationWebhookMapping> {
        var localVariablePath = "/propertymappings/notification/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedNotificationWebhookMappingRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NotificationWebhookMapping>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this Webhook Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: NotificationWebhookMapping
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsNotificationRetrieve(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> NotificationWebhookMapping {
        return try await propertymappingsNotificationRetrieveWithRequestBuilder(pmUuid: pmUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /propertymappings/notification/{pm_uuid}/
     - NotificationWebhookMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this Webhook Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<NotificationWebhookMapping> 
     */
    open class func propertymappingsNotificationRetrieveWithRequestBuilder(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<NotificationWebhookMapping> {
        var localVariablePath = "/propertymappings/notification/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NotificationWebhookMapping>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this Webhook Mapping. 
     - parameter notificationWebhookMappingRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: NotificationWebhookMapping
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsNotificationUpdate(pmUuid: UUID, notificationWebhookMappingRequest: NotificationWebhookMappingRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> NotificationWebhookMapping {
        return try await propertymappingsNotificationUpdateWithRequestBuilder(pmUuid: pmUuid, notificationWebhookMappingRequest: notificationWebhookMappingRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /propertymappings/notification/{pm_uuid}/
     - NotificationWebhookMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this Webhook Mapping. 
     - parameter notificationWebhookMappingRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<NotificationWebhookMapping> 
     */
    open class func propertymappingsNotificationUpdateWithRequestBuilder(pmUuid: UUID, notificationWebhookMappingRequest: NotificationWebhookMappingRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<NotificationWebhookMapping> {
        var localVariablePath = "/propertymappings/notification/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: notificationWebhookMappingRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NotificationWebhookMapping>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this Webhook Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsNotificationUsedByList(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await propertymappingsNotificationUsedByListWithRequestBuilder(pmUuid: pmUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /propertymappings/notification/{pm_uuid}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this Webhook Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func propertymappingsNotificationUsedByListWithRequestBuilder(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/propertymappings/notification/{pm_uuid}/used_by/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter googleWorkspaceProviderMappingRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GoogleWorkspaceProviderMapping
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsProviderGoogleWorkspaceCreate(googleWorkspaceProviderMappingRequest: GoogleWorkspaceProviderMappingRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> GoogleWorkspaceProviderMapping {
        return try await propertymappingsProviderGoogleWorkspaceCreateWithRequestBuilder(googleWorkspaceProviderMappingRequest: googleWorkspaceProviderMappingRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /propertymappings/provider/google_workspace/
     - GoogleWorkspaceProviderMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter googleWorkspaceProviderMappingRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GoogleWorkspaceProviderMapping> 
     */
    open class func propertymappingsProviderGoogleWorkspaceCreateWithRequestBuilder(googleWorkspaceProviderMappingRequest: GoogleWorkspaceProviderMappingRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<GoogleWorkspaceProviderMapping> {
        let localVariablePath = "/propertymappings/provider/google_workspace/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: googleWorkspaceProviderMappingRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GoogleWorkspaceProviderMapping>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this Google Workspace Provider Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsProviderGoogleWorkspaceDestroy(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await propertymappingsProviderGoogleWorkspaceDestroyWithRequestBuilder(pmUuid: pmUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /propertymappings/provider/google_workspace/{pm_uuid}/
     - GoogleWorkspaceProviderMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this Google Workspace Provider Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func propertymappingsProviderGoogleWorkspaceDestroyWithRequestBuilder(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/propertymappings/provider/google_workspace/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter expression: (query)  (optional)
     - parameter managed: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter pmUuid: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedGoogleWorkspaceProviderMappingList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsProviderGoogleWorkspaceList(expression: String? = nil, managed: [String]? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, pmUuid: UUID? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedGoogleWorkspaceProviderMappingList {
        return try await propertymappingsProviderGoogleWorkspaceListWithRequestBuilder(expression: expression, managed: managed, name: name, ordering: ordering, page: page, pageSize: pageSize, pmUuid: pmUuid, search: search, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /propertymappings/provider/google_workspace/
     - GoogleWorkspaceProviderMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter expression: (query)  (optional)
     - parameter managed: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter pmUuid: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedGoogleWorkspaceProviderMappingList> 
     */
    open class func propertymappingsProviderGoogleWorkspaceListWithRequestBuilder(expression: String? = nil, managed: [String]? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, pmUuid: UUID? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedGoogleWorkspaceProviderMappingList> {
        let localVariablePath = "/propertymappings/provider/google_workspace/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "expression": (wrappedValue: expression?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "managed": (wrappedValue: managed?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "pm_uuid": (wrappedValue: pmUuid?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedGoogleWorkspaceProviderMappingList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this Google Workspace Provider Mapping. 
     - parameter patchedGoogleWorkspaceProviderMappingRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GoogleWorkspaceProviderMapping
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsProviderGoogleWorkspacePartialUpdate(pmUuid: UUID, patchedGoogleWorkspaceProviderMappingRequest: PatchedGoogleWorkspaceProviderMappingRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> GoogleWorkspaceProviderMapping {
        return try await propertymappingsProviderGoogleWorkspacePartialUpdateWithRequestBuilder(pmUuid: pmUuid, patchedGoogleWorkspaceProviderMappingRequest: patchedGoogleWorkspaceProviderMappingRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /propertymappings/provider/google_workspace/{pm_uuid}/
     - GoogleWorkspaceProviderMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this Google Workspace Provider Mapping. 
     - parameter patchedGoogleWorkspaceProviderMappingRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GoogleWorkspaceProviderMapping> 
     */
    open class func propertymappingsProviderGoogleWorkspacePartialUpdateWithRequestBuilder(pmUuid: UUID, patchedGoogleWorkspaceProviderMappingRequest: PatchedGoogleWorkspaceProviderMappingRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<GoogleWorkspaceProviderMapping> {
        var localVariablePath = "/propertymappings/provider/google_workspace/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedGoogleWorkspaceProviderMappingRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GoogleWorkspaceProviderMapping>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this Google Workspace Provider Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GoogleWorkspaceProviderMapping
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsProviderGoogleWorkspaceRetrieve(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> GoogleWorkspaceProviderMapping {
        return try await propertymappingsProviderGoogleWorkspaceRetrieveWithRequestBuilder(pmUuid: pmUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /propertymappings/provider/google_workspace/{pm_uuid}/
     - GoogleWorkspaceProviderMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this Google Workspace Provider Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GoogleWorkspaceProviderMapping> 
     */
    open class func propertymappingsProviderGoogleWorkspaceRetrieveWithRequestBuilder(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<GoogleWorkspaceProviderMapping> {
        var localVariablePath = "/propertymappings/provider/google_workspace/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GoogleWorkspaceProviderMapping>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this Google Workspace Provider Mapping. 
     - parameter googleWorkspaceProviderMappingRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GoogleWorkspaceProviderMapping
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsProviderGoogleWorkspaceUpdate(pmUuid: UUID, googleWorkspaceProviderMappingRequest: GoogleWorkspaceProviderMappingRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> GoogleWorkspaceProviderMapping {
        return try await propertymappingsProviderGoogleWorkspaceUpdateWithRequestBuilder(pmUuid: pmUuid, googleWorkspaceProviderMappingRequest: googleWorkspaceProviderMappingRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /propertymappings/provider/google_workspace/{pm_uuid}/
     - GoogleWorkspaceProviderMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this Google Workspace Provider Mapping. 
     - parameter googleWorkspaceProviderMappingRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GoogleWorkspaceProviderMapping> 
     */
    open class func propertymappingsProviderGoogleWorkspaceUpdateWithRequestBuilder(pmUuid: UUID, googleWorkspaceProviderMappingRequest: GoogleWorkspaceProviderMappingRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<GoogleWorkspaceProviderMapping> {
        var localVariablePath = "/propertymappings/provider/google_workspace/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: googleWorkspaceProviderMappingRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GoogleWorkspaceProviderMapping>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this Google Workspace Provider Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsProviderGoogleWorkspaceUsedByList(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await propertymappingsProviderGoogleWorkspaceUsedByListWithRequestBuilder(pmUuid: pmUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /propertymappings/provider/google_workspace/{pm_uuid}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this Google Workspace Provider Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func propertymappingsProviderGoogleWorkspaceUsedByListWithRequestBuilder(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/propertymappings/provider/google_workspace/{pm_uuid}/used_by/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter microsoftEntraProviderMappingRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: MicrosoftEntraProviderMapping
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsProviderMicrosoftEntraCreate(microsoftEntraProviderMappingRequest: MicrosoftEntraProviderMappingRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> MicrosoftEntraProviderMapping {
        return try await propertymappingsProviderMicrosoftEntraCreateWithRequestBuilder(microsoftEntraProviderMappingRequest: microsoftEntraProviderMappingRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /propertymappings/provider/microsoft_entra/
     - MicrosoftEntraProviderMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter microsoftEntraProviderMappingRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<MicrosoftEntraProviderMapping> 
     */
    open class func propertymappingsProviderMicrosoftEntraCreateWithRequestBuilder(microsoftEntraProviderMappingRequest: MicrosoftEntraProviderMappingRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<MicrosoftEntraProviderMapping> {
        let localVariablePath = "/propertymappings/provider/microsoft_entra/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: microsoftEntraProviderMappingRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MicrosoftEntraProviderMapping>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this Microsoft Entra Provider Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsProviderMicrosoftEntraDestroy(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await propertymappingsProviderMicrosoftEntraDestroyWithRequestBuilder(pmUuid: pmUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /propertymappings/provider/microsoft_entra/{pm_uuid}/
     - MicrosoftEntraProviderMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this Microsoft Entra Provider Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func propertymappingsProviderMicrosoftEntraDestroyWithRequestBuilder(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/propertymappings/provider/microsoft_entra/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter expression: (query)  (optional)
     - parameter managed: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter pmUuid: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedMicrosoftEntraProviderMappingList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsProviderMicrosoftEntraList(expression: String? = nil, managed: [String]? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, pmUuid: UUID? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedMicrosoftEntraProviderMappingList {
        return try await propertymappingsProviderMicrosoftEntraListWithRequestBuilder(expression: expression, managed: managed, name: name, ordering: ordering, page: page, pageSize: pageSize, pmUuid: pmUuid, search: search, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /propertymappings/provider/microsoft_entra/
     - MicrosoftEntraProviderMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter expression: (query)  (optional)
     - parameter managed: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter pmUuid: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedMicrosoftEntraProviderMappingList> 
     */
    open class func propertymappingsProviderMicrosoftEntraListWithRequestBuilder(expression: String? = nil, managed: [String]? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, pmUuid: UUID? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedMicrosoftEntraProviderMappingList> {
        let localVariablePath = "/propertymappings/provider/microsoft_entra/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "expression": (wrappedValue: expression?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "managed": (wrappedValue: managed?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "pm_uuid": (wrappedValue: pmUuid?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedMicrosoftEntraProviderMappingList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this Microsoft Entra Provider Mapping. 
     - parameter patchedMicrosoftEntraProviderMappingRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: MicrosoftEntraProviderMapping
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsProviderMicrosoftEntraPartialUpdate(pmUuid: UUID, patchedMicrosoftEntraProviderMappingRequest: PatchedMicrosoftEntraProviderMappingRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> MicrosoftEntraProviderMapping {
        return try await propertymappingsProviderMicrosoftEntraPartialUpdateWithRequestBuilder(pmUuid: pmUuid, patchedMicrosoftEntraProviderMappingRequest: patchedMicrosoftEntraProviderMappingRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /propertymappings/provider/microsoft_entra/{pm_uuid}/
     - MicrosoftEntraProviderMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this Microsoft Entra Provider Mapping. 
     - parameter patchedMicrosoftEntraProviderMappingRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<MicrosoftEntraProviderMapping> 
     */
    open class func propertymappingsProviderMicrosoftEntraPartialUpdateWithRequestBuilder(pmUuid: UUID, patchedMicrosoftEntraProviderMappingRequest: PatchedMicrosoftEntraProviderMappingRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<MicrosoftEntraProviderMapping> {
        var localVariablePath = "/propertymappings/provider/microsoft_entra/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedMicrosoftEntraProviderMappingRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MicrosoftEntraProviderMapping>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this Microsoft Entra Provider Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: MicrosoftEntraProviderMapping
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsProviderMicrosoftEntraRetrieve(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> MicrosoftEntraProviderMapping {
        return try await propertymappingsProviderMicrosoftEntraRetrieveWithRequestBuilder(pmUuid: pmUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /propertymappings/provider/microsoft_entra/{pm_uuid}/
     - MicrosoftEntraProviderMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this Microsoft Entra Provider Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<MicrosoftEntraProviderMapping> 
     */
    open class func propertymappingsProviderMicrosoftEntraRetrieveWithRequestBuilder(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<MicrosoftEntraProviderMapping> {
        var localVariablePath = "/propertymappings/provider/microsoft_entra/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MicrosoftEntraProviderMapping>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this Microsoft Entra Provider Mapping. 
     - parameter microsoftEntraProviderMappingRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: MicrosoftEntraProviderMapping
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsProviderMicrosoftEntraUpdate(pmUuid: UUID, microsoftEntraProviderMappingRequest: MicrosoftEntraProviderMappingRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> MicrosoftEntraProviderMapping {
        return try await propertymappingsProviderMicrosoftEntraUpdateWithRequestBuilder(pmUuid: pmUuid, microsoftEntraProviderMappingRequest: microsoftEntraProviderMappingRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /propertymappings/provider/microsoft_entra/{pm_uuid}/
     - MicrosoftEntraProviderMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this Microsoft Entra Provider Mapping. 
     - parameter microsoftEntraProviderMappingRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<MicrosoftEntraProviderMapping> 
     */
    open class func propertymappingsProviderMicrosoftEntraUpdateWithRequestBuilder(pmUuid: UUID, microsoftEntraProviderMappingRequest: MicrosoftEntraProviderMappingRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<MicrosoftEntraProviderMapping> {
        var localVariablePath = "/propertymappings/provider/microsoft_entra/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: microsoftEntraProviderMappingRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MicrosoftEntraProviderMapping>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this Microsoft Entra Provider Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsProviderMicrosoftEntraUsedByList(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await propertymappingsProviderMicrosoftEntraUsedByListWithRequestBuilder(pmUuid: pmUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /propertymappings/provider/microsoft_entra/{pm_uuid}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this Microsoft Entra Provider Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func propertymappingsProviderMicrosoftEntraUsedByListWithRequestBuilder(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/propertymappings/provider/microsoft_entra/{pm_uuid}/used_by/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter rACPropertyMappingRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RACPropertyMapping
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsProviderRacCreate(rACPropertyMappingRequest: RACPropertyMappingRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> RACPropertyMapping {
        return try await propertymappingsProviderRacCreateWithRequestBuilder(rACPropertyMappingRequest: rACPropertyMappingRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /propertymappings/provider/rac/
     - RACPropertyMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter rACPropertyMappingRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<RACPropertyMapping> 
     */
    open class func propertymappingsProviderRacCreateWithRequestBuilder(rACPropertyMappingRequest: RACPropertyMappingRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<RACPropertyMapping> {
        let localVariablePath = "/propertymappings/provider/rac/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: rACPropertyMappingRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RACPropertyMapping>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this RAC Provider Property Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsProviderRacDestroy(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await propertymappingsProviderRacDestroyWithRequestBuilder(pmUuid: pmUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /propertymappings/provider/rac/{pm_uuid}/
     - RACPropertyMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this RAC Provider Property Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func propertymappingsProviderRacDestroyWithRequestBuilder(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/propertymappings/provider/rac/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter managed: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedRACPropertyMappingList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsProviderRacList(managed: [String]? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedRACPropertyMappingList {
        return try await propertymappingsProviderRacListWithRequestBuilder(managed: managed, name: name, ordering: ordering, page: page, pageSize: pageSize, search: search, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /propertymappings/provider/rac/
     - RACPropertyMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter managed: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedRACPropertyMappingList> 
     */
    open class func propertymappingsProviderRacListWithRequestBuilder(managed: [String]? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedRACPropertyMappingList> {
        let localVariablePath = "/propertymappings/provider/rac/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "managed": (wrappedValue: managed?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedRACPropertyMappingList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this RAC Provider Property Mapping. 
     - parameter patchedRACPropertyMappingRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RACPropertyMapping
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsProviderRacPartialUpdate(pmUuid: UUID, patchedRACPropertyMappingRequest: PatchedRACPropertyMappingRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> RACPropertyMapping {
        return try await propertymappingsProviderRacPartialUpdateWithRequestBuilder(pmUuid: pmUuid, patchedRACPropertyMappingRequest: patchedRACPropertyMappingRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /propertymappings/provider/rac/{pm_uuid}/
     - RACPropertyMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this RAC Provider Property Mapping. 
     - parameter patchedRACPropertyMappingRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<RACPropertyMapping> 
     */
    open class func propertymappingsProviderRacPartialUpdateWithRequestBuilder(pmUuid: UUID, patchedRACPropertyMappingRequest: PatchedRACPropertyMappingRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<RACPropertyMapping> {
        var localVariablePath = "/propertymappings/provider/rac/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedRACPropertyMappingRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RACPropertyMapping>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this RAC Provider Property Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RACPropertyMapping
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsProviderRacRetrieve(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> RACPropertyMapping {
        return try await propertymappingsProviderRacRetrieveWithRequestBuilder(pmUuid: pmUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /propertymappings/provider/rac/{pm_uuid}/
     - RACPropertyMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this RAC Provider Property Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<RACPropertyMapping> 
     */
    open class func propertymappingsProviderRacRetrieveWithRequestBuilder(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<RACPropertyMapping> {
        var localVariablePath = "/propertymappings/provider/rac/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RACPropertyMapping>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this RAC Provider Property Mapping. 
     - parameter rACPropertyMappingRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RACPropertyMapping
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsProviderRacUpdate(pmUuid: UUID, rACPropertyMappingRequest: RACPropertyMappingRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> RACPropertyMapping {
        return try await propertymappingsProviderRacUpdateWithRequestBuilder(pmUuid: pmUuid, rACPropertyMappingRequest: rACPropertyMappingRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /propertymappings/provider/rac/{pm_uuid}/
     - RACPropertyMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this RAC Provider Property Mapping. 
     - parameter rACPropertyMappingRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<RACPropertyMapping> 
     */
    open class func propertymappingsProviderRacUpdateWithRequestBuilder(pmUuid: UUID, rACPropertyMappingRequest: RACPropertyMappingRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<RACPropertyMapping> {
        var localVariablePath = "/propertymappings/provider/rac/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: rACPropertyMappingRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RACPropertyMapping>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this RAC Provider Property Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsProviderRacUsedByList(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await propertymappingsProviderRacUsedByListWithRequestBuilder(pmUuid: pmUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /propertymappings/provider/rac/{pm_uuid}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this RAC Provider Property Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func propertymappingsProviderRacUsedByListWithRequestBuilder(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/propertymappings/provider/rac/{pm_uuid}/used_by/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter radiusProviderPropertyMappingRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RadiusProviderPropertyMapping
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsProviderRadiusCreate(radiusProviderPropertyMappingRequest: RadiusProviderPropertyMappingRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> RadiusProviderPropertyMapping {
        return try await propertymappingsProviderRadiusCreateWithRequestBuilder(radiusProviderPropertyMappingRequest: radiusProviderPropertyMappingRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /propertymappings/provider/radius/
     - RadiusProviderPropertyMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter radiusProviderPropertyMappingRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<RadiusProviderPropertyMapping> 
     */
    open class func propertymappingsProviderRadiusCreateWithRequestBuilder(radiusProviderPropertyMappingRequest: RadiusProviderPropertyMappingRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<RadiusProviderPropertyMapping> {
        let localVariablePath = "/propertymappings/provider/radius/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: radiusProviderPropertyMappingRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RadiusProviderPropertyMapping>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this Radius Provider Property Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsProviderRadiusDestroy(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await propertymappingsProviderRadiusDestroyWithRequestBuilder(pmUuid: pmUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /propertymappings/provider/radius/{pm_uuid}/
     - RadiusProviderPropertyMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this Radius Provider Property Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func propertymappingsProviderRadiusDestroyWithRequestBuilder(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/propertymappings/provider/radius/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter managed: (query)  (optional)
     - parameter managedIsnull: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedRadiusProviderPropertyMappingList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsProviderRadiusList(managed: [String]? = nil, managedIsnull: Bool? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedRadiusProviderPropertyMappingList {
        return try await propertymappingsProviderRadiusListWithRequestBuilder(managed: managed, managedIsnull: managedIsnull, name: name, ordering: ordering, page: page, pageSize: pageSize, search: search, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /propertymappings/provider/radius/
     - RadiusProviderPropertyMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter managed: (query)  (optional)
     - parameter managedIsnull: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedRadiusProviderPropertyMappingList> 
     */
    open class func propertymappingsProviderRadiusListWithRequestBuilder(managed: [String]? = nil, managedIsnull: Bool? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedRadiusProviderPropertyMappingList> {
        let localVariablePath = "/propertymappings/provider/radius/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "managed": (wrappedValue: managed?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "managed__isnull": (wrappedValue: managedIsnull?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedRadiusProviderPropertyMappingList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this Radius Provider Property Mapping. 
     - parameter patchedRadiusProviderPropertyMappingRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RadiusProviderPropertyMapping
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsProviderRadiusPartialUpdate(pmUuid: UUID, patchedRadiusProviderPropertyMappingRequest: PatchedRadiusProviderPropertyMappingRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> RadiusProviderPropertyMapping {
        return try await propertymappingsProviderRadiusPartialUpdateWithRequestBuilder(pmUuid: pmUuid, patchedRadiusProviderPropertyMappingRequest: patchedRadiusProviderPropertyMappingRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /propertymappings/provider/radius/{pm_uuid}/
     - RadiusProviderPropertyMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this Radius Provider Property Mapping. 
     - parameter patchedRadiusProviderPropertyMappingRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<RadiusProviderPropertyMapping> 
     */
    open class func propertymappingsProviderRadiusPartialUpdateWithRequestBuilder(pmUuid: UUID, patchedRadiusProviderPropertyMappingRequest: PatchedRadiusProviderPropertyMappingRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<RadiusProviderPropertyMapping> {
        var localVariablePath = "/propertymappings/provider/radius/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedRadiusProviderPropertyMappingRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RadiusProviderPropertyMapping>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this Radius Provider Property Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RadiusProviderPropertyMapping
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsProviderRadiusRetrieve(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> RadiusProviderPropertyMapping {
        return try await propertymappingsProviderRadiusRetrieveWithRequestBuilder(pmUuid: pmUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /propertymappings/provider/radius/{pm_uuid}/
     - RadiusProviderPropertyMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this Radius Provider Property Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<RadiusProviderPropertyMapping> 
     */
    open class func propertymappingsProviderRadiusRetrieveWithRequestBuilder(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<RadiusProviderPropertyMapping> {
        var localVariablePath = "/propertymappings/provider/radius/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RadiusProviderPropertyMapping>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this Radius Provider Property Mapping. 
     - parameter radiusProviderPropertyMappingRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RadiusProviderPropertyMapping
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsProviderRadiusUpdate(pmUuid: UUID, radiusProviderPropertyMappingRequest: RadiusProviderPropertyMappingRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> RadiusProviderPropertyMapping {
        return try await propertymappingsProviderRadiusUpdateWithRequestBuilder(pmUuid: pmUuid, radiusProviderPropertyMappingRequest: radiusProviderPropertyMappingRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /propertymappings/provider/radius/{pm_uuid}/
     - RadiusProviderPropertyMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this Radius Provider Property Mapping. 
     - parameter radiusProviderPropertyMappingRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<RadiusProviderPropertyMapping> 
     */
    open class func propertymappingsProviderRadiusUpdateWithRequestBuilder(pmUuid: UUID, radiusProviderPropertyMappingRequest: RadiusProviderPropertyMappingRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<RadiusProviderPropertyMapping> {
        var localVariablePath = "/propertymappings/provider/radius/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: radiusProviderPropertyMappingRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RadiusProviderPropertyMapping>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this Radius Provider Property Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsProviderRadiusUsedByList(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await propertymappingsProviderRadiusUsedByListWithRequestBuilder(pmUuid: pmUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /propertymappings/provider/radius/{pm_uuid}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this Radius Provider Property Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func propertymappingsProviderRadiusUsedByListWithRequestBuilder(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/propertymappings/provider/radius/{pm_uuid}/used_by/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter sAMLPropertyMappingRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SAMLPropertyMapping
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsProviderSamlCreate(sAMLPropertyMappingRequest: SAMLPropertyMappingRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> SAMLPropertyMapping {
        return try await propertymappingsProviderSamlCreateWithRequestBuilder(sAMLPropertyMappingRequest: sAMLPropertyMappingRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /propertymappings/provider/saml/
     - SAMLPropertyMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter sAMLPropertyMappingRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SAMLPropertyMapping> 
     */
    open class func propertymappingsProviderSamlCreateWithRequestBuilder(sAMLPropertyMappingRequest: SAMLPropertyMappingRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<SAMLPropertyMapping> {
        let localVariablePath = "/propertymappings/provider/saml/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sAMLPropertyMappingRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SAMLPropertyMapping>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this SAML Provider Property Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsProviderSamlDestroy(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await propertymappingsProviderSamlDestroyWithRequestBuilder(pmUuid: pmUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /propertymappings/provider/saml/{pm_uuid}/
     - SAMLPropertyMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this SAML Provider Property Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func propertymappingsProviderSamlDestroyWithRequestBuilder(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/propertymappings/provider/saml/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter friendlyName: (query)  (optional)
     - parameter managed: (query)  (optional)
     - parameter managedIsnull: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter samlName: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedSAMLPropertyMappingList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsProviderSamlList(friendlyName: String? = nil, managed: [String]? = nil, managedIsnull: Bool? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, samlName: String? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedSAMLPropertyMappingList {
        return try await propertymappingsProviderSamlListWithRequestBuilder(friendlyName: friendlyName, managed: managed, managedIsnull: managedIsnull, name: name, ordering: ordering, page: page, pageSize: pageSize, samlName: samlName, search: search, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /propertymappings/provider/saml/
     - SAMLPropertyMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter friendlyName: (query)  (optional)
     - parameter managed: (query)  (optional)
     - parameter managedIsnull: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter samlName: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedSAMLPropertyMappingList> 
     */
    open class func propertymappingsProviderSamlListWithRequestBuilder(friendlyName: String? = nil, managed: [String]? = nil, managedIsnull: Bool? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, samlName: String? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedSAMLPropertyMappingList> {
        let localVariablePath = "/propertymappings/provider/saml/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "friendly_name": (wrappedValue: friendlyName?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "managed": (wrappedValue: managed?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "managed__isnull": (wrappedValue: managedIsnull?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "saml_name": (wrappedValue: samlName?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedSAMLPropertyMappingList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this SAML Provider Property Mapping. 
     - parameter patchedSAMLPropertyMappingRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SAMLPropertyMapping
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsProviderSamlPartialUpdate(pmUuid: UUID, patchedSAMLPropertyMappingRequest: PatchedSAMLPropertyMappingRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> SAMLPropertyMapping {
        return try await propertymappingsProviderSamlPartialUpdateWithRequestBuilder(pmUuid: pmUuid, patchedSAMLPropertyMappingRequest: patchedSAMLPropertyMappingRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /propertymappings/provider/saml/{pm_uuid}/
     - SAMLPropertyMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this SAML Provider Property Mapping. 
     - parameter patchedSAMLPropertyMappingRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SAMLPropertyMapping> 
     */
    open class func propertymappingsProviderSamlPartialUpdateWithRequestBuilder(pmUuid: UUID, patchedSAMLPropertyMappingRequest: PatchedSAMLPropertyMappingRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<SAMLPropertyMapping> {
        var localVariablePath = "/propertymappings/provider/saml/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedSAMLPropertyMappingRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SAMLPropertyMapping>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this SAML Provider Property Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SAMLPropertyMapping
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsProviderSamlRetrieve(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> SAMLPropertyMapping {
        return try await propertymappingsProviderSamlRetrieveWithRequestBuilder(pmUuid: pmUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /propertymappings/provider/saml/{pm_uuid}/
     - SAMLPropertyMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this SAML Provider Property Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SAMLPropertyMapping> 
     */
    open class func propertymappingsProviderSamlRetrieveWithRequestBuilder(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<SAMLPropertyMapping> {
        var localVariablePath = "/propertymappings/provider/saml/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SAMLPropertyMapping>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this SAML Provider Property Mapping. 
     - parameter sAMLPropertyMappingRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SAMLPropertyMapping
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsProviderSamlUpdate(pmUuid: UUID, sAMLPropertyMappingRequest: SAMLPropertyMappingRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> SAMLPropertyMapping {
        return try await propertymappingsProviderSamlUpdateWithRequestBuilder(pmUuid: pmUuid, sAMLPropertyMappingRequest: sAMLPropertyMappingRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /propertymappings/provider/saml/{pm_uuid}/
     - SAMLPropertyMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this SAML Provider Property Mapping. 
     - parameter sAMLPropertyMappingRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SAMLPropertyMapping> 
     */
    open class func propertymappingsProviderSamlUpdateWithRequestBuilder(pmUuid: UUID, sAMLPropertyMappingRequest: SAMLPropertyMappingRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<SAMLPropertyMapping> {
        var localVariablePath = "/propertymappings/provider/saml/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sAMLPropertyMappingRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SAMLPropertyMapping>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this SAML Provider Property Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsProviderSamlUsedByList(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await propertymappingsProviderSamlUsedByListWithRequestBuilder(pmUuid: pmUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /propertymappings/provider/saml/{pm_uuid}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this SAML Provider Property Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func propertymappingsProviderSamlUsedByListWithRequestBuilder(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/propertymappings/provider/saml/{pm_uuid}/used_by/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter sCIMMappingRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SCIMMapping
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsProviderScimCreate(sCIMMappingRequest: SCIMMappingRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> SCIMMapping {
        return try await propertymappingsProviderScimCreateWithRequestBuilder(sCIMMappingRequest: sCIMMappingRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /propertymappings/provider/scim/
     - SCIMMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter sCIMMappingRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SCIMMapping> 
     */
    open class func propertymappingsProviderScimCreateWithRequestBuilder(sCIMMappingRequest: SCIMMappingRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<SCIMMapping> {
        let localVariablePath = "/propertymappings/provider/scim/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sCIMMappingRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SCIMMapping>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this SCIM Provider Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsProviderScimDestroy(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await propertymappingsProviderScimDestroyWithRequestBuilder(pmUuid: pmUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /propertymappings/provider/scim/{pm_uuid}/
     - SCIMMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this SCIM Provider Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func propertymappingsProviderScimDestroyWithRequestBuilder(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/propertymappings/provider/scim/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter managed: (query)  (optional)
     - parameter managedIsnull: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedSCIMMappingList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsProviderScimList(managed: [String]? = nil, managedIsnull: Bool? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedSCIMMappingList {
        return try await propertymappingsProviderScimListWithRequestBuilder(managed: managed, managedIsnull: managedIsnull, name: name, ordering: ordering, page: page, pageSize: pageSize, search: search, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /propertymappings/provider/scim/
     - SCIMMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter managed: (query)  (optional)
     - parameter managedIsnull: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedSCIMMappingList> 
     */
    open class func propertymappingsProviderScimListWithRequestBuilder(managed: [String]? = nil, managedIsnull: Bool? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedSCIMMappingList> {
        let localVariablePath = "/propertymappings/provider/scim/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "managed": (wrappedValue: managed?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "managed__isnull": (wrappedValue: managedIsnull?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedSCIMMappingList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this SCIM Provider Mapping. 
     - parameter patchedSCIMMappingRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SCIMMapping
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsProviderScimPartialUpdate(pmUuid: UUID, patchedSCIMMappingRequest: PatchedSCIMMappingRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> SCIMMapping {
        return try await propertymappingsProviderScimPartialUpdateWithRequestBuilder(pmUuid: pmUuid, patchedSCIMMappingRequest: patchedSCIMMappingRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /propertymappings/provider/scim/{pm_uuid}/
     - SCIMMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this SCIM Provider Mapping. 
     - parameter patchedSCIMMappingRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SCIMMapping> 
     */
    open class func propertymappingsProviderScimPartialUpdateWithRequestBuilder(pmUuid: UUID, patchedSCIMMappingRequest: PatchedSCIMMappingRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<SCIMMapping> {
        var localVariablePath = "/propertymappings/provider/scim/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedSCIMMappingRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SCIMMapping>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this SCIM Provider Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SCIMMapping
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsProviderScimRetrieve(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> SCIMMapping {
        return try await propertymappingsProviderScimRetrieveWithRequestBuilder(pmUuid: pmUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /propertymappings/provider/scim/{pm_uuid}/
     - SCIMMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this SCIM Provider Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SCIMMapping> 
     */
    open class func propertymappingsProviderScimRetrieveWithRequestBuilder(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<SCIMMapping> {
        var localVariablePath = "/propertymappings/provider/scim/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SCIMMapping>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this SCIM Provider Mapping. 
     - parameter sCIMMappingRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SCIMMapping
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsProviderScimUpdate(pmUuid: UUID, sCIMMappingRequest: SCIMMappingRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> SCIMMapping {
        return try await propertymappingsProviderScimUpdateWithRequestBuilder(pmUuid: pmUuid, sCIMMappingRequest: sCIMMappingRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /propertymappings/provider/scim/{pm_uuid}/
     - SCIMMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this SCIM Provider Mapping. 
     - parameter sCIMMappingRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SCIMMapping> 
     */
    open class func propertymappingsProviderScimUpdateWithRequestBuilder(pmUuid: UUID, sCIMMappingRequest: SCIMMappingRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<SCIMMapping> {
        var localVariablePath = "/propertymappings/provider/scim/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sCIMMappingRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SCIMMapping>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this SCIM Provider Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsProviderScimUsedByList(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await propertymappingsProviderScimUsedByListWithRequestBuilder(pmUuid: pmUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /propertymappings/provider/scim/{pm_uuid}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this SCIM Provider Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func propertymappingsProviderScimUsedByListWithRequestBuilder(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/propertymappings/provider/scim/{pm_uuid}/used_by/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter scopeMappingRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ScopeMapping
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsProviderScopeCreate(scopeMappingRequest: ScopeMappingRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> ScopeMapping {
        return try await propertymappingsProviderScopeCreateWithRequestBuilder(scopeMappingRequest: scopeMappingRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /propertymappings/provider/scope/
     - ScopeMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter scopeMappingRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ScopeMapping> 
     */
    open class func propertymappingsProviderScopeCreateWithRequestBuilder(scopeMappingRequest: ScopeMappingRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<ScopeMapping> {
        let localVariablePath = "/propertymappings/provider/scope/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: scopeMappingRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ScopeMapping>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this Scope Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsProviderScopeDestroy(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await propertymappingsProviderScopeDestroyWithRequestBuilder(pmUuid: pmUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /propertymappings/provider/scope/{pm_uuid}/
     - ScopeMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this Scope Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func propertymappingsProviderScopeDestroyWithRequestBuilder(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/propertymappings/provider/scope/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter managed: (query)  (optional)
     - parameter managedIsnull: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter scopeName: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedScopeMappingList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsProviderScopeList(managed: [String]? = nil, managedIsnull: Bool? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, scopeName: String? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedScopeMappingList {
        return try await propertymappingsProviderScopeListWithRequestBuilder(managed: managed, managedIsnull: managedIsnull, name: name, ordering: ordering, page: page, pageSize: pageSize, scopeName: scopeName, search: search, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /propertymappings/provider/scope/
     - ScopeMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter managed: (query)  (optional)
     - parameter managedIsnull: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter scopeName: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedScopeMappingList> 
     */
    open class func propertymappingsProviderScopeListWithRequestBuilder(managed: [String]? = nil, managedIsnull: Bool? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, scopeName: String? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedScopeMappingList> {
        let localVariablePath = "/propertymappings/provider/scope/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "managed": (wrappedValue: managed?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "managed__isnull": (wrappedValue: managedIsnull?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "scope_name": (wrappedValue: scopeName?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedScopeMappingList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this Scope Mapping. 
     - parameter patchedScopeMappingRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ScopeMapping
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsProviderScopePartialUpdate(pmUuid: UUID, patchedScopeMappingRequest: PatchedScopeMappingRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> ScopeMapping {
        return try await propertymappingsProviderScopePartialUpdateWithRequestBuilder(pmUuid: pmUuid, patchedScopeMappingRequest: patchedScopeMappingRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /propertymappings/provider/scope/{pm_uuid}/
     - ScopeMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this Scope Mapping. 
     - parameter patchedScopeMappingRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ScopeMapping> 
     */
    open class func propertymappingsProviderScopePartialUpdateWithRequestBuilder(pmUuid: UUID, patchedScopeMappingRequest: PatchedScopeMappingRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<ScopeMapping> {
        var localVariablePath = "/propertymappings/provider/scope/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedScopeMappingRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ScopeMapping>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this Scope Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ScopeMapping
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsProviderScopeRetrieve(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> ScopeMapping {
        return try await propertymappingsProviderScopeRetrieveWithRequestBuilder(pmUuid: pmUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /propertymappings/provider/scope/{pm_uuid}/
     - ScopeMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this Scope Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ScopeMapping> 
     */
    open class func propertymappingsProviderScopeRetrieveWithRequestBuilder(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<ScopeMapping> {
        var localVariablePath = "/propertymappings/provider/scope/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ScopeMapping>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this Scope Mapping. 
     - parameter scopeMappingRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ScopeMapping
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsProviderScopeUpdate(pmUuid: UUID, scopeMappingRequest: ScopeMappingRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> ScopeMapping {
        return try await propertymappingsProviderScopeUpdateWithRequestBuilder(pmUuid: pmUuid, scopeMappingRequest: scopeMappingRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /propertymappings/provider/scope/{pm_uuid}/
     - ScopeMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this Scope Mapping. 
     - parameter scopeMappingRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ScopeMapping> 
     */
    open class func propertymappingsProviderScopeUpdateWithRequestBuilder(pmUuid: UUID, scopeMappingRequest: ScopeMappingRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<ScopeMapping> {
        var localVariablePath = "/propertymappings/provider/scope/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: scopeMappingRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ScopeMapping>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this Scope Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsProviderScopeUsedByList(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await propertymappingsProviderScopeUsedByListWithRequestBuilder(pmUuid: pmUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /propertymappings/provider/scope/{pm_uuid}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this Scope Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func propertymappingsProviderScopeUsedByListWithRequestBuilder(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/propertymappings/provider/scope/{pm_uuid}/used_by/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter kerberosSourcePropertyMappingRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: KerberosSourcePropertyMapping
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsSourceKerberosCreate(kerberosSourcePropertyMappingRequest: KerberosSourcePropertyMappingRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> KerberosSourcePropertyMapping {
        return try await propertymappingsSourceKerberosCreateWithRequestBuilder(kerberosSourcePropertyMappingRequest: kerberosSourcePropertyMappingRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /propertymappings/source/kerberos/
     - KerberosSource PropertyMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter kerberosSourcePropertyMappingRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<KerberosSourcePropertyMapping> 
     */
    open class func propertymappingsSourceKerberosCreateWithRequestBuilder(kerberosSourcePropertyMappingRequest: KerberosSourcePropertyMappingRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<KerberosSourcePropertyMapping> {
        let localVariablePath = "/propertymappings/source/kerberos/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: kerberosSourcePropertyMappingRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<KerberosSourcePropertyMapping>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this Kerberos Source Property Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsSourceKerberosDestroy(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await propertymappingsSourceKerberosDestroyWithRequestBuilder(pmUuid: pmUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /propertymappings/source/kerberos/{pm_uuid}/
     - KerberosSource PropertyMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this Kerberos Source Property Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func propertymappingsSourceKerberosDestroyWithRequestBuilder(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/propertymappings/source/kerberos/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter managed: (query)  (optional)
     - parameter managedIsnull: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedKerberosSourcePropertyMappingList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsSourceKerberosList(managed: [String]? = nil, managedIsnull: Bool? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedKerberosSourcePropertyMappingList {
        return try await propertymappingsSourceKerberosListWithRequestBuilder(managed: managed, managedIsnull: managedIsnull, name: name, ordering: ordering, page: page, pageSize: pageSize, search: search, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /propertymappings/source/kerberos/
     - KerberosSource PropertyMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter managed: (query)  (optional)
     - parameter managedIsnull: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedKerberosSourcePropertyMappingList> 
     */
    open class func propertymappingsSourceKerberosListWithRequestBuilder(managed: [String]? = nil, managedIsnull: Bool? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedKerberosSourcePropertyMappingList> {
        let localVariablePath = "/propertymappings/source/kerberos/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "managed": (wrappedValue: managed?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "managed__isnull": (wrappedValue: managedIsnull?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedKerberosSourcePropertyMappingList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this Kerberos Source Property Mapping. 
     - parameter patchedKerberosSourcePropertyMappingRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: KerberosSourcePropertyMapping
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsSourceKerberosPartialUpdate(pmUuid: UUID, patchedKerberosSourcePropertyMappingRequest: PatchedKerberosSourcePropertyMappingRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> KerberosSourcePropertyMapping {
        return try await propertymappingsSourceKerberosPartialUpdateWithRequestBuilder(pmUuid: pmUuid, patchedKerberosSourcePropertyMappingRequest: patchedKerberosSourcePropertyMappingRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /propertymappings/source/kerberos/{pm_uuid}/
     - KerberosSource PropertyMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this Kerberos Source Property Mapping. 
     - parameter patchedKerberosSourcePropertyMappingRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<KerberosSourcePropertyMapping> 
     */
    open class func propertymappingsSourceKerberosPartialUpdateWithRequestBuilder(pmUuid: UUID, patchedKerberosSourcePropertyMappingRequest: PatchedKerberosSourcePropertyMappingRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<KerberosSourcePropertyMapping> {
        var localVariablePath = "/propertymappings/source/kerberos/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedKerberosSourcePropertyMappingRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<KerberosSourcePropertyMapping>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this Kerberos Source Property Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: KerberosSourcePropertyMapping
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsSourceKerberosRetrieve(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> KerberosSourcePropertyMapping {
        return try await propertymappingsSourceKerberosRetrieveWithRequestBuilder(pmUuid: pmUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /propertymappings/source/kerberos/{pm_uuid}/
     - KerberosSource PropertyMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this Kerberos Source Property Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<KerberosSourcePropertyMapping> 
     */
    open class func propertymappingsSourceKerberosRetrieveWithRequestBuilder(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<KerberosSourcePropertyMapping> {
        var localVariablePath = "/propertymappings/source/kerberos/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<KerberosSourcePropertyMapping>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this Kerberos Source Property Mapping. 
     - parameter kerberosSourcePropertyMappingRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: KerberosSourcePropertyMapping
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsSourceKerberosUpdate(pmUuid: UUID, kerberosSourcePropertyMappingRequest: KerberosSourcePropertyMappingRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> KerberosSourcePropertyMapping {
        return try await propertymappingsSourceKerberosUpdateWithRequestBuilder(pmUuid: pmUuid, kerberosSourcePropertyMappingRequest: kerberosSourcePropertyMappingRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /propertymappings/source/kerberos/{pm_uuid}/
     - KerberosSource PropertyMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this Kerberos Source Property Mapping. 
     - parameter kerberosSourcePropertyMappingRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<KerberosSourcePropertyMapping> 
     */
    open class func propertymappingsSourceKerberosUpdateWithRequestBuilder(pmUuid: UUID, kerberosSourcePropertyMappingRequest: KerberosSourcePropertyMappingRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<KerberosSourcePropertyMapping> {
        var localVariablePath = "/propertymappings/source/kerberos/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: kerberosSourcePropertyMappingRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<KerberosSourcePropertyMapping>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this Kerberos Source Property Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsSourceKerberosUsedByList(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await propertymappingsSourceKerberosUsedByListWithRequestBuilder(pmUuid: pmUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /propertymappings/source/kerberos/{pm_uuid}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this Kerberos Source Property Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func propertymappingsSourceKerberosUsedByListWithRequestBuilder(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/propertymappings/source/kerberos/{pm_uuid}/used_by/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter lDAPSourcePropertyMappingRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: LDAPSourcePropertyMapping
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsSourceLdapCreate(lDAPSourcePropertyMappingRequest: LDAPSourcePropertyMappingRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> LDAPSourcePropertyMapping {
        return try await propertymappingsSourceLdapCreateWithRequestBuilder(lDAPSourcePropertyMappingRequest: lDAPSourcePropertyMappingRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /propertymappings/source/ldap/
     - LDAP PropertyMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter lDAPSourcePropertyMappingRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<LDAPSourcePropertyMapping> 
     */
    open class func propertymappingsSourceLdapCreateWithRequestBuilder(lDAPSourcePropertyMappingRequest: LDAPSourcePropertyMappingRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<LDAPSourcePropertyMapping> {
        let localVariablePath = "/propertymappings/source/ldap/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: lDAPSourcePropertyMappingRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LDAPSourcePropertyMapping>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this LDAP Source Property Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsSourceLdapDestroy(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await propertymappingsSourceLdapDestroyWithRequestBuilder(pmUuid: pmUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /propertymappings/source/ldap/{pm_uuid}/
     - LDAP PropertyMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this LDAP Source Property Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func propertymappingsSourceLdapDestroyWithRequestBuilder(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/propertymappings/source/ldap/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter managed: (query)  (optional)
     - parameter managedIsnull: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedLDAPSourcePropertyMappingList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsSourceLdapList(managed: [String]? = nil, managedIsnull: Bool? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedLDAPSourcePropertyMappingList {
        return try await propertymappingsSourceLdapListWithRequestBuilder(managed: managed, managedIsnull: managedIsnull, name: name, ordering: ordering, page: page, pageSize: pageSize, search: search, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /propertymappings/source/ldap/
     - LDAP PropertyMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter managed: (query)  (optional)
     - parameter managedIsnull: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedLDAPSourcePropertyMappingList> 
     */
    open class func propertymappingsSourceLdapListWithRequestBuilder(managed: [String]? = nil, managedIsnull: Bool? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedLDAPSourcePropertyMappingList> {
        let localVariablePath = "/propertymappings/source/ldap/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "managed": (wrappedValue: managed?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "managed__isnull": (wrappedValue: managedIsnull?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedLDAPSourcePropertyMappingList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this LDAP Source Property Mapping. 
     - parameter patchedLDAPSourcePropertyMappingRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: LDAPSourcePropertyMapping
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsSourceLdapPartialUpdate(pmUuid: UUID, patchedLDAPSourcePropertyMappingRequest: PatchedLDAPSourcePropertyMappingRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> LDAPSourcePropertyMapping {
        return try await propertymappingsSourceLdapPartialUpdateWithRequestBuilder(pmUuid: pmUuid, patchedLDAPSourcePropertyMappingRequest: patchedLDAPSourcePropertyMappingRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /propertymappings/source/ldap/{pm_uuid}/
     - LDAP PropertyMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this LDAP Source Property Mapping. 
     - parameter patchedLDAPSourcePropertyMappingRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<LDAPSourcePropertyMapping> 
     */
    open class func propertymappingsSourceLdapPartialUpdateWithRequestBuilder(pmUuid: UUID, patchedLDAPSourcePropertyMappingRequest: PatchedLDAPSourcePropertyMappingRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<LDAPSourcePropertyMapping> {
        var localVariablePath = "/propertymappings/source/ldap/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedLDAPSourcePropertyMappingRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LDAPSourcePropertyMapping>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this LDAP Source Property Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: LDAPSourcePropertyMapping
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsSourceLdapRetrieve(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> LDAPSourcePropertyMapping {
        return try await propertymappingsSourceLdapRetrieveWithRequestBuilder(pmUuid: pmUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /propertymappings/source/ldap/{pm_uuid}/
     - LDAP PropertyMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this LDAP Source Property Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<LDAPSourcePropertyMapping> 
     */
    open class func propertymappingsSourceLdapRetrieveWithRequestBuilder(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<LDAPSourcePropertyMapping> {
        var localVariablePath = "/propertymappings/source/ldap/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LDAPSourcePropertyMapping>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this LDAP Source Property Mapping. 
     - parameter lDAPSourcePropertyMappingRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: LDAPSourcePropertyMapping
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsSourceLdapUpdate(pmUuid: UUID, lDAPSourcePropertyMappingRequest: LDAPSourcePropertyMappingRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> LDAPSourcePropertyMapping {
        return try await propertymappingsSourceLdapUpdateWithRequestBuilder(pmUuid: pmUuid, lDAPSourcePropertyMappingRequest: lDAPSourcePropertyMappingRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /propertymappings/source/ldap/{pm_uuid}/
     - LDAP PropertyMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this LDAP Source Property Mapping. 
     - parameter lDAPSourcePropertyMappingRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<LDAPSourcePropertyMapping> 
     */
    open class func propertymappingsSourceLdapUpdateWithRequestBuilder(pmUuid: UUID, lDAPSourcePropertyMappingRequest: LDAPSourcePropertyMappingRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<LDAPSourcePropertyMapping> {
        var localVariablePath = "/propertymappings/source/ldap/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: lDAPSourcePropertyMappingRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LDAPSourcePropertyMapping>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this LDAP Source Property Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsSourceLdapUsedByList(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await propertymappingsSourceLdapUsedByListWithRequestBuilder(pmUuid: pmUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /propertymappings/source/ldap/{pm_uuid}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this LDAP Source Property Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func propertymappingsSourceLdapUsedByListWithRequestBuilder(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/propertymappings/source/ldap/{pm_uuid}/used_by/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter oAuthSourcePropertyMappingRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: OAuthSourcePropertyMapping
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsSourceOauthCreate(oAuthSourcePropertyMappingRequest: OAuthSourcePropertyMappingRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> OAuthSourcePropertyMapping {
        return try await propertymappingsSourceOauthCreateWithRequestBuilder(oAuthSourcePropertyMappingRequest: oAuthSourcePropertyMappingRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /propertymappings/source/oauth/
     - OAuthSourcePropertyMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter oAuthSourcePropertyMappingRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<OAuthSourcePropertyMapping> 
     */
    open class func propertymappingsSourceOauthCreateWithRequestBuilder(oAuthSourcePropertyMappingRequest: OAuthSourcePropertyMappingRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<OAuthSourcePropertyMapping> {
        let localVariablePath = "/propertymappings/source/oauth/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: oAuthSourcePropertyMappingRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OAuthSourcePropertyMapping>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this OAuth Source Property Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsSourceOauthDestroy(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await propertymappingsSourceOauthDestroyWithRequestBuilder(pmUuid: pmUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /propertymappings/source/oauth/{pm_uuid}/
     - OAuthSourcePropertyMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this OAuth Source Property Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func propertymappingsSourceOauthDestroyWithRequestBuilder(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/propertymappings/source/oauth/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter managed: (query)  (optional)
     - parameter managedIsnull: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedOAuthSourcePropertyMappingList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsSourceOauthList(managed: [String]? = nil, managedIsnull: Bool? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedOAuthSourcePropertyMappingList {
        return try await propertymappingsSourceOauthListWithRequestBuilder(managed: managed, managedIsnull: managedIsnull, name: name, ordering: ordering, page: page, pageSize: pageSize, search: search, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /propertymappings/source/oauth/
     - OAuthSourcePropertyMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter managed: (query)  (optional)
     - parameter managedIsnull: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedOAuthSourcePropertyMappingList> 
     */
    open class func propertymappingsSourceOauthListWithRequestBuilder(managed: [String]? = nil, managedIsnull: Bool? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedOAuthSourcePropertyMappingList> {
        let localVariablePath = "/propertymappings/source/oauth/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "managed": (wrappedValue: managed?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "managed__isnull": (wrappedValue: managedIsnull?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedOAuthSourcePropertyMappingList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this OAuth Source Property Mapping. 
     - parameter patchedOAuthSourcePropertyMappingRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: OAuthSourcePropertyMapping
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsSourceOauthPartialUpdate(pmUuid: UUID, patchedOAuthSourcePropertyMappingRequest: PatchedOAuthSourcePropertyMappingRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> OAuthSourcePropertyMapping {
        return try await propertymappingsSourceOauthPartialUpdateWithRequestBuilder(pmUuid: pmUuid, patchedOAuthSourcePropertyMappingRequest: patchedOAuthSourcePropertyMappingRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /propertymappings/source/oauth/{pm_uuid}/
     - OAuthSourcePropertyMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this OAuth Source Property Mapping. 
     - parameter patchedOAuthSourcePropertyMappingRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<OAuthSourcePropertyMapping> 
     */
    open class func propertymappingsSourceOauthPartialUpdateWithRequestBuilder(pmUuid: UUID, patchedOAuthSourcePropertyMappingRequest: PatchedOAuthSourcePropertyMappingRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<OAuthSourcePropertyMapping> {
        var localVariablePath = "/propertymappings/source/oauth/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedOAuthSourcePropertyMappingRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OAuthSourcePropertyMapping>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this OAuth Source Property Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: OAuthSourcePropertyMapping
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsSourceOauthRetrieve(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> OAuthSourcePropertyMapping {
        return try await propertymappingsSourceOauthRetrieveWithRequestBuilder(pmUuid: pmUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /propertymappings/source/oauth/{pm_uuid}/
     - OAuthSourcePropertyMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this OAuth Source Property Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<OAuthSourcePropertyMapping> 
     */
    open class func propertymappingsSourceOauthRetrieveWithRequestBuilder(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<OAuthSourcePropertyMapping> {
        var localVariablePath = "/propertymappings/source/oauth/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OAuthSourcePropertyMapping>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this OAuth Source Property Mapping. 
     - parameter oAuthSourcePropertyMappingRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: OAuthSourcePropertyMapping
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsSourceOauthUpdate(pmUuid: UUID, oAuthSourcePropertyMappingRequest: OAuthSourcePropertyMappingRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> OAuthSourcePropertyMapping {
        return try await propertymappingsSourceOauthUpdateWithRequestBuilder(pmUuid: pmUuid, oAuthSourcePropertyMappingRequest: oAuthSourcePropertyMappingRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /propertymappings/source/oauth/{pm_uuid}/
     - OAuthSourcePropertyMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this OAuth Source Property Mapping. 
     - parameter oAuthSourcePropertyMappingRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<OAuthSourcePropertyMapping> 
     */
    open class func propertymappingsSourceOauthUpdateWithRequestBuilder(pmUuid: UUID, oAuthSourcePropertyMappingRequest: OAuthSourcePropertyMappingRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<OAuthSourcePropertyMapping> {
        var localVariablePath = "/propertymappings/source/oauth/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: oAuthSourcePropertyMappingRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OAuthSourcePropertyMapping>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this OAuth Source Property Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsSourceOauthUsedByList(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await propertymappingsSourceOauthUsedByListWithRequestBuilder(pmUuid: pmUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /propertymappings/source/oauth/{pm_uuid}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this OAuth Source Property Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func propertymappingsSourceOauthUsedByListWithRequestBuilder(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/propertymappings/source/oauth/{pm_uuid}/used_by/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter plexSourcePropertyMappingRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PlexSourcePropertyMapping
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsSourcePlexCreate(plexSourcePropertyMappingRequest: PlexSourcePropertyMappingRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PlexSourcePropertyMapping {
        return try await propertymappingsSourcePlexCreateWithRequestBuilder(plexSourcePropertyMappingRequest: plexSourcePropertyMappingRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /propertymappings/source/plex/
     - PlexSourcePropertyMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter plexSourcePropertyMappingRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PlexSourcePropertyMapping> 
     */
    open class func propertymappingsSourcePlexCreateWithRequestBuilder(plexSourcePropertyMappingRequest: PlexSourcePropertyMappingRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PlexSourcePropertyMapping> {
        let localVariablePath = "/propertymappings/source/plex/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: plexSourcePropertyMappingRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PlexSourcePropertyMapping>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this Plex Source Property Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsSourcePlexDestroy(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await propertymappingsSourcePlexDestroyWithRequestBuilder(pmUuid: pmUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /propertymappings/source/plex/{pm_uuid}/
     - PlexSourcePropertyMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this Plex Source Property Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func propertymappingsSourcePlexDestroyWithRequestBuilder(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/propertymappings/source/plex/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter managed: (query)  (optional)
     - parameter managedIsnull: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedPlexSourcePropertyMappingList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsSourcePlexList(managed: [String]? = nil, managedIsnull: Bool? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedPlexSourcePropertyMappingList {
        return try await propertymappingsSourcePlexListWithRequestBuilder(managed: managed, managedIsnull: managedIsnull, name: name, ordering: ordering, page: page, pageSize: pageSize, search: search, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /propertymappings/source/plex/
     - PlexSourcePropertyMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter managed: (query)  (optional)
     - parameter managedIsnull: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedPlexSourcePropertyMappingList> 
     */
    open class func propertymappingsSourcePlexListWithRequestBuilder(managed: [String]? = nil, managedIsnull: Bool? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedPlexSourcePropertyMappingList> {
        let localVariablePath = "/propertymappings/source/plex/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "managed": (wrappedValue: managed?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "managed__isnull": (wrappedValue: managedIsnull?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedPlexSourcePropertyMappingList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this Plex Source Property Mapping. 
     - parameter patchedPlexSourcePropertyMappingRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PlexSourcePropertyMapping
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsSourcePlexPartialUpdate(pmUuid: UUID, patchedPlexSourcePropertyMappingRequest: PatchedPlexSourcePropertyMappingRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PlexSourcePropertyMapping {
        return try await propertymappingsSourcePlexPartialUpdateWithRequestBuilder(pmUuid: pmUuid, patchedPlexSourcePropertyMappingRequest: patchedPlexSourcePropertyMappingRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /propertymappings/source/plex/{pm_uuid}/
     - PlexSourcePropertyMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this Plex Source Property Mapping. 
     - parameter patchedPlexSourcePropertyMappingRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PlexSourcePropertyMapping> 
     */
    open class func propertymappingsSourcePlexPartialUpdateWithRequestBuilder(pmUuid: UUID, patchedPlexSourcePropertyMappingRequest: PatchedPlexSourcePropertyMappingRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PlexSourcePropertyMapping> {
        var localVariablePath = "/propertymappings/source/plex/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedPlexSourcePropertyMappingRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PlexSourcePropertyMapping>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this Plex Source Property Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PlexSourcePropertyMapping
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsSourcePlexRetrieve(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PlexSourcePropertyMapping {
        return try await propertymappingsSourcePlexRetrieveWithRequestBuilder(pmUuid: pmUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /propertymappings/source/plex/{pm_uuid}/
     - PlexSourcePropertyMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this Plex Source Property Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PlexSourcePropertyMapping> 
     */
    open class func propertymappingsSourcePlexRetrieveWithRequestBuilder(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PlexSourcePropertyMapping> {
        var localVariablePath = "/propertymappings/source/plex/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PlexSourcePropertyMapping>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this Plex Source Property Mapping. 
     - parameter plexSourcePropertyMappingRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PlexSourcePropertyMapping
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsSourcePlexUpdate(pmUuid: UUID, plexSourcePropertyMappingRequest: PlexSourcePropertyMappingRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PlexSourcePropertyMapping {
        return try await propertymappingsSourcePlexUpdateWithRequestBuilder(pmUuid: pmUuid, plexSourcePropertyMappingRequest: plexSourcePropertyMappingRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /propertymappings/source/plex/{pm_uuid}/
     - PlexSourcePropertyMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this Plex Source Property Mapping. 
     - parameter plexSourcePropertyMappingRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PlexSourcePropertyMapping> 
     */
    open class func propertymappingsSourcePlexUpdateWithRequestBuilder(pmUuid: UUID, plexSourcePropertyMappingRequest: PlexSourcePropertyMappingRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PlexSourcePropertyMapping> {
        var localVariablePath = "/propertymappings/source/plex/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: plexSourcePropertyMappingRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PlexSourcePropertyMapping>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this Plex Source Property Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsSourcePlexUsedByList(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await propertymappingsSourcePlexUsedByListWithRequestBuilder(pmUuid: pmUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /propertymappings/source/plex/{pm_uuid}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this Plex Source Property Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func propertymappingsSourcePlexUsedByListWithRequestBuilder(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/propertymappings/source/plex/{pm_uuid}/used_by/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter sAMLSourcePropertyMappingRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SAMLSourcePropertyMapping
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsSourceSamlCreate(sAMLSourcePropertyMappingRequest: SAMLSourcePropertyMappingRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> SAMLSourcePropertyMapping {
        return try await propertymappingsSourceSamlCreateWithRequestBuilder(sAMLSourcePropertyMappingRequest: sAMLSourcePropertyMappingRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /propertymappings/source/saml/
     - SAMLSourcePropertyMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter sAMLSourcePropertyMappingRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SAMLSourcePropertyMapping> 
     */
    open class func propertymappingsSourceSamlCreateWithRequestBuilder(sAMLSourcePropertyMappingRequest: SAMLSourcePropertyMappingRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<SAMLSourcePropertyMapping> {
        let localVariablePath = "/propertymappings/source/saml/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sAMLSourcePropertyMappingRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SAMLSourcePropertyMapping>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this SAML Source Property Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsSourceSamlDestroy(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await propertymappingsSourceSamlDestroyWithRequestBuilder(pmUuid: pmUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /propertymappings/source/saml/{pm_uuid}/
     - SAMLSourcePropertyMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this SAML Source Property Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func propertymappingsSourceSamlDestroyWithRequestBuilder(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/propertymappings/source/saml/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter managed: (query)  (optional)
     - parameter managedIsnull: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedSAMLSourcePropertyMappingList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsSourceSamlList(managed: [String]? = nil, managedIsnull: Bool? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedSAMLSourcePropertyMappingList {
        return try await propertymappingsSourceSamlListWithRequestBuilder(managed: managed, managedIsnull: managedIsnull, name: name, ordering: ordering, page: page, pageSize: pageSize, search: search, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /propertymappings/source/saml/
     - SAMLSourcePropertyMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter managed: (query)  (optional)
     - parameter managedIsnull: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedSAMLSourcePropertyMappingList> 
     */
    open class func propertymappingsSourceSamlListWithRequestBuilder(managed: [String]? = nil, managedIsnull: Bool? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedSAMLSourcePropertyMappingList> {
        let localVariablePath = "/propertymappings/source/saml/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "managed": (wrappedValue: managed?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "managed__isnull": (wrappedValue: managedIsnull?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedSAMLSourcePropertyMappingList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this SAML Source Property Mapping. 
     - parameter patchedSAMLSourcePropertyMappingRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SAMLSourcePropertyMapping
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsSourceSamlPartialUpdate(pmUuid: UUID, patchedSAMLSourcePropertyMappingRequest: PatchedSAMLSourcePropertyMappingRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> SAMLSourcePropertyMapping {
        return try await propertymappingsSourceSamlPartialUpdateWithRequestBuilder(pmUuid: pmUuid, patchedSAMLSourcePropertyMappingRequest: patchedSAMLSourcePropertyMappingRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /propertymappings/source/saml/{pm_uuid}/
     - SAMLSourcePropertyMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this SAML Source Property Mapping. 
     - parameter patchedSAMLSourcePropertyMappingRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SAMLSourcePropertyMapping> 
     */
    open class func propertymappingsSourceSamlPartialUpdateWithRequestBuilder(pmUuid: UUID, patchedSAMLSourcePropertyMappingRequest: PatchedSAMLSourcePropertyMappingRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<SAMLSourcePropertyMapping> {
        var localVariablePath = "/propertymappings/source/saml/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedSAMLSourcePropertyMappingRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SAMLSourcePropertyMapping>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this SAML Source Property Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SAMLSourcePropertyMapping
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsSourceSamlRetrieve(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> SAMLSourcePropertyMapping {
        return try await propertymappingsSourceSamlRetrieveWithRequestBuilder(pmUuid: pmUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /propertymappings/source/saml/{pm_uuid}/
     - SAMLSourcePropertyMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this SAML Source Property Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SAMLSourcePropertyMapping> 
     */
    open class func propertymappingsSourceSamlRetrieveWithRequestBuilder(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<SAMLSourcePropertyMapping> {
        var localVariablePath = "/propertymappings/source/saml/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SAMLSourcePropertyMapping>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this SAML Source Property Mapping. 
     - parameter sAMLSourcePropertyMappingRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SAMLSourcePropertyMapping
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsSourceSamlUpdate(pmUuid: UUID, sAMLSourcePropertyMappingRequest: SAMLSourcePropertyMappingRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> SAMLSourcePropertyMapping {
        return try await propertymappingsSourceSamlUpdateWithRequestBuilder(pmUuid: pmUuid, sAMLSourcePropertyMappingRequest: sAMLSourcePropertyMappingRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /propertymappings/source/saml/{pm_uuid}/
     - SAMLSourcePropertyMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this SAML Source Property Mapping. 
     - parameter sAMLSourcePropertyMappingRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SAMLSourcePropertyMapping> 
     */
    open class func propertymappingsSourceSamlUpdateWithRequestBuilder(pmUuid: UUID, sAMLSourcePropertyMappingRequest: SAMLSourcePropertyMappingRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<SAMLSourcePropertyMapping> {
        var localVariablePath = "/propertymappings/source/saml/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sAMLSourcePropertyMappingRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SAMLSourcePropertyMapping>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this SAML Source Property Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsSourceSamlUsedByList(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await propertymappingsSourceSamlUsedByListWithRequestBuilder(pmUuid: pmUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /propertymappings/source/saml/{pm_uuid}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this SAML Source Property Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func propertymappingsSourceSamlUsedByListWithRequestBuilder(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/propertymappings/source/saml/{pm_uuid}/used_by/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter sCIMSourcePropertyMappingRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SCIMSourcePropertyMapping
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsSourceScimCreate(sCIMSourcePropertyMappingRequest: SCIMSourcePropertyMappingRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> SCIMSourcePropertyMapping {
        return try await propertymappingsSourceScimCreateWithRequestBuilder(sCIMSourcePropertyMappingRequest: sCIMSourcePropertyMappingRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /propertymappings/source/scim/
     - SCIMSourcePropertyMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter sCIMSourcePropertyMappingRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SCIMSourcePropertyMapping> 
     */
    open class func propertymappingsSourceScimCreateWithRequestBuilder(sCIMSourcePropertyMappingRequest: SCIMSourcePropertyMappingRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<SCIMSourcePropertyMapping> {
        let localVariablePath = "/propertymappings/source/scim/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sCIMSourcePropertyMappingRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SCIMSourcePropertyMapping>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this SCIM Source Property Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsSourceScimDestroy(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await propertymappingsSourceScimDestroyWithRequestBuilder(pmUuid: pmUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /propertymappings/source/scim/{pm_uuid}/
     - SCIMSourcePropertyMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this SCIM Source Property Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func propertymappingsSourceScimDestroyWithRequestBuilder(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/propertymappings/source/scim/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter managed: (query)  (optional)
     - parameter managedIsnull: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedSCIMSourcePropertyMappingList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsSourceScimList(managed: [String]? = nil, managedIsnull: Bool? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedSCIMSourcePropertyMappingList {
        return try await propertymappingsSourceScimListWithRequestBuilder(managed: managed, managedIsnull: managedIsnull, name: name, ordering: ordering, page: page, pageSize: pageSize, search: search, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /propertymappings/source/scim/
     - SCIMSourcePropertyMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter managed: (query)  (optional)
     - parameter managedIsnull: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedSCIMSourcePropertyMappingList> 
     */
    open class func propertymappingsSourceScimListWithRequestBuilder(managed: [String]? = nil, managedIsnull: Bool? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedSCIMSourcePropertyMappingList> {
        let localVariablePath = "/propertymappings/source/scim/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "managed": (wrappedValue: managed?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "managed__isnull": (wrappedValue: managedIsnull?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedSCIMSourcePropertyMappingList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this SCIM Source Property Mapping. 
     - parameter patchedSCIMSourcePropertyMappingRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SCIMSourcePropertyMapping
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsSourceScimPartialUpdate(pmUuid: UUID, patchedSCIMSourcePropertyMappingRequest: PatchedSCIMSourcePropertyMappingRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> SCIMSourcePropertyMapping {
        return try await propertymappingsSourceScimPartialUpdateWithRequestBuilder(pmUuid: pmUuid, patchedSCIMSourcePropertyMappingRequest: patchedSCIMSourcePropertyMappingRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /propertymappings/source/scim/{pm_uuid}/
     - SCIMSourcePropertyMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this SCIM Source Property Mapping. 
     - parameter patchedSCIMSourcePropertyMappingRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SCIMSourcePropertyMapping> 
     */
    open class func propertymappingsSourceScimPartialUpdateWithRequestBuilder(pmUuid: UUID, patchedSCIMSourcePropertyMappingRequest: PatchedSCIMSourcePropertyMappingRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<SCIMSourcePropertyMapping> {
        var localVariablePath = "/propertymappings/source/scim/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedSCIMSourcePropertyMappingRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SCIMSourcePropertyMapping>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this SCIM Source Property Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SCIMSourcePropertyMapping
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsSourceScimRetrieve(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> SCIMSourcePropertyMapping {
        return try await propertymappingsSourceScimRetrieveWithRequestBuilder(pmUuid: pmUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /propertymappings/source/scim/{pm_uuid}/
     - SCIMSourcePropertyMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this SCIM Source Property Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SCIMSourcePropertyMapping> 
     */
    open class func propertymappingsSourceScimRetrieveWithRequestBuilder(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<SCIMSourcePropertyMapping> {
        var localVariablePath = "/propertymappings/source/scim/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SCIMSourcePropertyMapping>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this SCIM Source Property Mapping. 
     - parameter sCIMSourcePropertyMappingRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SCIMSourcePropertyMapping
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsSourceScimUpdate(pmUuid: UUID, sCIMSourcePropertyMappingRequest: SCIMSourcePropertyMappingRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> SCIMSourcePropertyMapping {
        return try await propertymappingsSourceScimUpdateWithRequestBuilder(pmUuid: pmUuid, sCIMSourcePropertyMappingRequest: sCIMSourcePropertyMappingRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /propertymappings/source/scim/{pm_uuid}/
     - SCIMSourcePropertyMapping Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this SCIM Source Property Mapping. 
     - parameter sCIMSourcePropertyMappingRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SCIMSourcePropertyMapping> 
     */
    open class func propertymappingsSourceScimUpdateWithRequestBuilder(pmUuid: UUID, sCIMSourcePropertyMappingRequest: SCIMSourcePropertyMappingRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<SCIMSourcePropertyMapping> {
        var localVariablePath = "/propertymappings/source/scim/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sCIMSourcePropertyMappingRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SCIMSourcePropertyMapping>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this SCIM Source Property Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func propertymappingsSourceScimUsedByList(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await propertymappingsSourceScimUsedByListWithRequestBuilder(pmUuid: pmUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /propertymappings/source/scim/{pm_uuid}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this SCIM Source Property Mapping. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func propertymappingsSourceScimUsedByListWithRequestBuilder(pmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/propertymappings/source/scim/{pm_uuid}/used_by/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }
}
