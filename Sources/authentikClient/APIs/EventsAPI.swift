//
// EventsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class EventsAPI {

    /**

     - parameter apiConfiguration: The configuration for the http request.
     - returns: [TypeCreate]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func eventsEventsActionsList(apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [TypeCreate] {
        return try await eventsEventsActionsListWithRequestBuilder(apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /events/events/actions/
     - Get all actions
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[TypeCreate]> 
     */
    open class func eventsEventsActionsListWithRequestBuilder(apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[TypeCreate]> {
        let localVariablePath = "/events/events/actions/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[TypeCreate]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter eventRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Event
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func eventsEventsCreate(eventRequest: EventRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> Event {
        return try await eventsEventsCreateWithRequestBuilder(eventRequest: eventRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /events/events/
     - Event Read-Only Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter eventRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Event> 
     */
    open class func eventsEventsCreateWithRequestBuilder(eventRequest: EventRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Event> {
        let localVariablePath = "/events/events/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: eventRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Event>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter eventUuid: (path) A UUID string identifying this Event. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func eventsEventsDestroy(eventUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await eventsEventsDestroyWithRequestBuilder(eventUuid: eventUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /events/events/{event_uuid}/
     - Event Read-Only Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter eventUuid: (path) A UUID string identifying this Event. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func eventsEventsDestroyWithRequestBuilder(eventUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/events/events/{event_uuid}/"
        let eventUuidPreEscape = "\(APIHelper.mapValueToPathItem(eventUuid))"
        let eventUuidPostEscape = eventUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{event_uuid}", with: eventUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter actions
     */
    public enum Actions_eventsEventsList: String, Sendable, CaseIterable {
        case authorizeApplication = "authorize_application"
        case configurationError = "configuration_error"
        case custom = "custom_"
        case emailSent = "email_sent"
        case flowExecution = "flow_execution"
        case impersonationEnded = "impersonation_ended"
        case impersonationStarted = "impersonation_started"
        case invitationUsed = "invitation_used"
        case login = "login"
        case loginFailed = "login_failed"
        case logout = "logout"
        case modelCreated = "model_created"
        case modelDeleted = "model_deleted"
        case modelUpdated = "model_updated"
        case passwordSet = "password_set"
        case policyException = "policy_exception"
        case policyExecution = "policy_execution"
        case propertyMappingException = "property_mapping_exception"
        case secretRotate = "secret_rotate"
        case secretView = "secret_view"
        case sourceLinked = "source_linked"
        case suspiciousRequest = "suspicious_request"
        case systemException = "system_exception"
        case systemTaskException = "system_task_exception"
        case systemTaskExecution = "system_task_execution"
        case updateAvailable = "update_available"
        case userWrite = "user_write"
    }

    /**

     - parameter action: (query)  (optional)
     - parameter actions: (query)  (optional)
     - parameter brandName: (query) Brand name (optional)
     - parameter clientIp: (query)  (optional)
     - parameter contextAuthorizedApp: (query) Context Authorized application (optional)
     - parameter contextModelApp: (query) Context Model App (optional)
     - parameter contextModelName: (query) Context Model Name (optional)
     - parameter contextModelPk: (query) Context Model Primary Key (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter username: (query) Username (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedEventList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func eventsEventsList(action: String? = nil, actions: [Actions_eventsEventsList]? = nil, brandName: String? = nil, clientIp: String? = nil, contextAuthorizedApp: String? = nil, contextModelApp: String? = nil, contextModelName: String? = nil, contextModelPk: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, username: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedEventList {
        return try await eventsEventsListWithRequestBuilder(action: action, actions: actions, brandName: brandName, clientIp: clientIp, contextAuthorizedApp: contextAuthorizedApp, contextModelApp: contextModelApp, contextModelName: contextModelName, contextModelPk: contextModelPk, ordering: ordering, page: page, pageSize: pageSize, search: search, username: username, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /events/events/
     - Event Read-Only Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter action: (query)  (optional)
     - parameter actions: (query)  (optional)
     - parameter brandName: (query) Brand name (optional)
     - parameter clientIp: (query)  (optional)
     - parameter contextAuthorizedApp: (query) Context Authorized application (optional)
     - parameter contextModelApp: (query) Context Model App (optional)
     - parameter contextModelName: (query) Context Model Name (optional)
     - parameter contextModelPk: (query) Context Model Primary Key (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter username: (query) Username (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedEventList> 
     */
    open class func eventsEventsListWithRequestBuilder(action: String? = nil, actions: [Actions_eventsEventsList]? = nil, brandName: String? = nil, clientIp: String? = nil, contextAuthorizedApp: String? = nil, contextModelApp: String? = nil, contextModelName: String? = nil, contextModelPk: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, username: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedEventList> {
        let localVariablePath = "/events/events/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "action": (wrappedValue: action?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "actions": (wrappedValue: actions?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "brand_name": (wrappedValue: brandName?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "client_ip": (wrappedValue: clientIp?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "context_authorized_app": (wrappedValue: contextAuthorizedApp?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "context_model_app": (wrappedValue: contextModelApp?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "context_model_name": (wrappedValue: contextModelName?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "context_model_pk": (wrappedValue: contextModelPk?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "username": (wrappedValue: username?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedEventList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter eventUuid: (path) A UUID string identifying this Event. 
     - parameter patchedEventRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Event
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func eventsEventsPartialUpdate(eventUuid: UUID, patchedEventRequest: PatchedEventRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> Event {
        return try await eventsEventsPartialUpdateWithRequestBuilder(eventUuid: eventUuid, patchedEventRequest: patchedEventRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /events/events/{event_uuid}/
     - Event Read-Only Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter eventUuid: (path) A UUID string identifying this Event. 
     - parameter patchedEventRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Event> 
     */
    open class func eventsEventsPartialUpdateWithRequestBuilder(eventUuid: UUID, patchedEventRequest: PatchedEventRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Event> {
        var localVariablePath = "/events/events/{event_uuid}/"
        let eventUuidPreEscape = "\(APIHelper.mapValueToPathItem(eventUuid))"
        let eventUuidPostEscape = eventUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{event_uuid}", with: eventUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedEventRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Event>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter eventUuid: (path) A UUID string identifying this Event. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Event
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func eventsEventsRetrieve(eventUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> Event {
        return try await eventsEventsRetrieveWithRequestBuilder(eventUuid: eventUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /events/events/{event_uuid}/
     - Event Read-Only Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter eventUuid: (path) A UUID string identifying this Event. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Event> 
     */
    open class func eventsEventsRetrieveWithRequestBuilder(eventUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Event> {
        var localVariablePath = "/events/events/{event_uuid}/"
        let eventUuidPreEscape = "\(APIHelper.mapValueToPathItem(eventUuid))"
        let eventUuidPostEscape = eventUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{event_uuid}", with: eventUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Event>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter action: (query)  (optional)
     - parameter topN: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [EventTopPerUser]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func eventsEventsTopPerUserList(action: String? = nil, topN: Int? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [EventTopPerUser] {
        return try await eventsEventsTopPerUserListWithRequestBuilder(action: action, topN: topN, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /events/events/top_per_user/
     - Get the top_n events grouped by user count
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter action: (query)  (optional)
     - parameter topN: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[EventTopPerUser]> 
     */
    open class func eventsEventsTopPerUserListWithRequestBuilder(action: String? = nil, topN: Int? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[EventTopPerUser]> {
        let localVariablePath = "/events/events/top_per_user/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "action": (wrappedValue: action?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "top_n": (wrappedValue: topN?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[EventTopPerUser]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter eventUuid: (path) A UUID string identifying this Event. 
     - parameter eventRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Event
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func eventsEventsUpdate(eventUuid: UUID, eventRequest: EventRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> Event {
        return try await eventsEventsUpdateWithRequestBuilder(eventUuid: eventUuid, eventRequest: eventRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /events/events/{event_uuid}/
     - Event Read-Only Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter eventUuid: (path) A UUID string identifying this Event. 
     - parameter eventRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Event> 
     */
    open class func eventsEventsUpdateWithRequestBuilder(eventUuid: UUID, eventRequest: EventRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Event> {
        var localVariablePath = "/events/events/{event_uuid}/"
        let eventUuidPreEscape = "\(APIHelper.mapValueToPathItem(eventUuid))"
        let eventUuidPostEscape = eventUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{event_uuid}", with: eventUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: eventRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Event>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter actions
     */
    public enum Actions_eventsEventsVolumeList: String, Sendable, CaseIterable {
        case authorizeApplication = "authorize_application"
        case configurationError = "configuration_error"
        case custom = "custom_"
        case emailSent = "email_sent"
        case flowExecution = "flow_execution"
        case impersonationEnded = "impersonation_ended"
        case impersonationStarted = "impersonation_started"
        case invitationUsed = "invitation_used"
        case login = "login"
        case loginFailed = "login_failed"
        case logout = "logout"
        case modelCreated = "model_created"
        case modelDeleted = "model_deleted"
        case modelUpdated = "model_updated"
        case passwordSet = "password_set"
        case policyException = "policy_exception"
        case policyExecution = "policy_execution"
        case propertyMappingException = "property_mapping_exception"
        case secretRotate = "secret_rotate"
        case secretView = "secret_view"
        case sourceLinked = "source_linked"
        case suspiciousRequest = "suspicious_request"
        case systemException = "system_exception"
        case systemTaskException = "system_task_exception"
        case systemTaskExecution = "system_task_execution"
        case updateAvailable = "update_available"
        case userWrite = "user_write"
    }

    /**

     - parameter action: (query)  (optional)
     - parameter actions: (query)  (optional)
     - parameter brandName: (query) Brand name (optional)
     - parameter clientIp: (query)  (optional)
     - parameter contextAuthorizedApp: (query) Context Authorized application (optional)
     - parameter contextModelApp: (query) Context Model App (optional)
     - parameter contextModelName: (query) Context Model Name (optional)
     - parameter contextModelPk: (query) Context Model Primary Key (optional)
     - parameter historyDays: (query)  (optional, default to 7)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter username: (query) Username (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [EventVolume]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func eventsEventsVolumeList(action: String? = nil, actions: [Actions_eventsEventsVolumeList]? = nil, brandName: String? = nil, clientIp: String? = nil, contextAuthorizedApp: String? = nil, contextModelApp: String? = nil, contextModelName: String? = nil, contextModelPk: String? = nil, historyDays: Double? = nil, ordering: String? = nil, search: String? = nil, username: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [EventVolume] {
        return try await eventsEventsVolumeListWithRequestBuilder(action: action, actions: actions, brandName: brandName, clientIp: clientIp, contextAuthorizedApp: contextAuthorizedApp, contextModelApp: contextModelApp, contextModelName: contextModelName, contextModelPk: contextModelPk, historyDays: historyDays, ordering: ordering, search: search, username: username, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /events/events/volume/
     - Get event volume for specified filters and timeframe
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter action: (query)  (optional)
     - parameter actions: (query)  (optional)
     - parameter brandName: (query) Brand name (optional)
     - parameter clientIp: (query)  (optional)
     - parameter contextAuthorizedApp: (query) Context Authorized application (optional)
     - parameter contextModelApp: (query) Context Model App (optional)
     - parameter contextModelName: (query) Context Model Name (optional)
     - parameter contextModelPk: (query) Context Model Primary Key (optional)
     - parameter historyDays: (query)  (optional, default to 7)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter username: (query) Username (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[EventVolume]> 
     */
    open class func eventsEventsVolumeListWithRequestBuilder(action: String? = nil, actions: [Actions_eventsEventsVolumeList]? = nil, brandName: String? = nil, clientIp: String? = nil, contextAuthorizedApp: String? = nil, contextModelApp: String? = nil, contextModelName: String? = nil, contextModelPk: String? = nil, historyDays: Double? = nil, ordering: String? = nil, search: String? = nil, username: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[EventVolume]> {
        let localVariablePath = "/events/events/volume/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "action": (wrappedValue: action?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "actions": (wrappedValue: actions?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "brand_name": (wrappedValue: brandName?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "client_ip": (wrappedValue: clientIp?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "context_authorized_app": (wrappedValue: contextAuthorizedApp?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "context_model_app": (wrappedValue: contextModelApp?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "context_model_name": (wrappedValue: contextModelName?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "context_model_pk": (wrappedValue: contextModelPk?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "history_days": (wrappedValue: historyDays?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "username": (wrappedValue: username?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[EventVolume]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter uuid: (path) A UUID string identifying this Notification. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func eventsNotificationsDestroy(uuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await eventsNotificationsDestroyWithRequestBuilder(uuid: uuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /events/notifications/{uuid}/
     - Notification Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter uuid: (path) A UUID string identifying this Notification. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func eventsNotificationsDestroyWithRequestBuilder(uuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/events/notifications/{uuid}/"
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter severity
     */
    public enum Severity_eventsNotificationsList: String, Sendable, CaseIterable {
        case alert = "alert"
        case notice = "notice"
        case warning = "warning"
    }

    /**

     - parameter body: (query)  (optional)
     - parameter created: (query)  (optional)
     - parameter event: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter seen: (query)  (optional)
     - parameter severity: (query)  (optional)
     - parameter user: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedNotificationList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func eventsNotificationsList(body: String? = nil, created: Date? = nil, event: UUID? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, seen: Bool? = nil, severity: Severity_eventsNotificationsList? = nil, user: Int? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedNotificationList {
        return try await eventsNotificationsListWithRequestBuilder(body: body, created: created, event: event, ordering: ordering, page: page, pageSize: pageSize, search: search, seen: seen, severity: severity, user: user, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /events/notifications/
     - Notification Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter body: (query)  (optional)
     - parameter created: (query)  (optional)
     - parameter event: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter seen: (query)  (optional)
     - parameter severity: (query)  (optional)
     - parameter user: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedNotificationList> 
     */
    open class func eventsNotificationsListWithRequestBuilder(body: String? = nil, created: Date? = nil, event: UUID? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, seen: Bool? = nil, severity: Severity_eventsNotificationsList? = nil, user: Int? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedNotificationList> {
        let localVariablePath = "/events/notifications/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "body": (wrappedValue: body?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "created": (wrappedValue: created?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "event": (wrappedValue: event?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "seen": (wrappedValue: seen?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "severity": (wrappedValue: severity?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "user": (wrappedValue: user?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedNotificationList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func eventsNotificationsMarkAllSeenCreate(apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await eventsNotificationsMarkAllSeenCreateWithRequestBuilder(apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /events/notifications/mark_all_seen/
     - Mark all the user's notifications as seen
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func eventsNotificationsMarkAllSeenCreateWithRequestBuilder(apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        let localVariablePath = "/events/notifications/mark_all_seen/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter uuid: (path) A UUID string identifying this Notification. 
     - parameter patchedNotificationRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Notification
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func eventsNotificationsPartialUpdate(uuid: UUID, patchedNotificationRequest: PatchedNotificationRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> Notification {
        return try await eventsNotificationsPartialUpdateWithRequestBuilder(uuid: uuid, patchedNotificationRequest: patchedNotificationRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /events/notifications/{uuid}/
     - Notification Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter uuid: (path) A UUID string identifying this Notification. 
     - parameter patchedNotificationRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Notification> 
     */
    open class func eventsNotificationsPartialUpdateWithRequestBuilder(uuid: UUID, patchedNotificationRequest: PatchedNotificationRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Notification> {
        var localVariablePath = "/events/notifications/{uuid}/"
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedNotificationRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Notification>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter uuid: (path) A UUID string identifying this Notification. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Notification
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func eventsNotificationsRetrieve(uuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> Notification {
        return try await eventsNotificationsRetrieveWithRequestBuilder(uuid: uuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /events/notifications/{uuid}/
     - Notification Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter uuid: (path) A UUID string identifying this Notification. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Notification> 
     */
    open class func eventsNotificationsRetrieveWithRequestBuilder(uuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Notification> {
        var localVariablePath = "/events/notifications/{uuid}/"
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Notification>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter uuid: (path) A UUID string identifying this Notification. 
     - parameter notificationRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Notification
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func eventsNotificationsUpdate(uuid: UUID, notificationRequest: NotificationRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> Notification {
        return try await eventsNotificationsUpdateWithRequestBuilder(uuid: uuid, notificationRequest: notificationRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /events/notifications/{uuid}/
     - Notification Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter uuid: (path) A UUID string identifying this Notification. 
     - parameter notificationRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Notification> 
     */
    open class func eventsNotificationsUpdateWithRequestBuilder(uuid: UUID, notificationRequest: NotificationRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Notification> {
        var localVariablePath = "/events/notifications/{uuid}/"
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: notificationRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Notification>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter uuid: (path) A UUID string identifying this Notification. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func eventsNotificationsUsedByList(uuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await eventsNotificationsUsedByListWithRequestBuilder(uuid: uuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /events/notifications/{uuid}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter uuid: (path) A UUID string identifying this Notification. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func eventsNotificationsUsedByListWithRequestBuilder(uuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/events/notifications/{uuid}/used_by/"
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter notificationRuleRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: NotificationRule
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func eventsRulesCreate(notificationRuleRequest: NotificationRuleRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> NotificationRule {
        return try await eventsRulesCreateWithRequestBuilder(notificationRuleRequest: notificationRuleRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /events/rules/
     - NotificationRule Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter notificationRuleRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<NotificationRule> 
     */
    open class func eventsRulesCreateWithRequestBuilder(notificationRuleRequest: NotificationRuleRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<NotificationRule> {
        let localVariablePath = "/events/rules/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: notificationRuleRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NotificationRule>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pbmUuid: (path) A UUID string identifying this Notification Rule. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func eventsRulesDestroy(pbmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await eventsRulesDestroyWithRequestBuilder(pbmUuid: pbmUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /events/rules/{pbm_uuid}/
     - NotificationRule Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pbmUuid: (path) A UUID string identifying this Notification Rule. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func eventsRulesDestroyWithRequestBuilder(pbmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/events/rules/{pbm_uuid}/"
        let pbmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pbmUuid))"
        let pbmUuidPostEscape = pbmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pbm_uuid}", with: pbmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter severity
     */
    public enum Severity_eventsRulesList: String, Sendable, CaseIterable {
        case alert = "alert"
        case notice = "notice"
        case warning = "warning"
    }

    /**

     - parameter destinationGroupName: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter severity: (query) Controls which severity level the created notifications will have.   (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedNotificationRuleList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func eventsRulesList(destinationGroupName: String? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, severity: Severity_eventsRulesList? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedNotificationRuleList {
        return try await eventsRulesListWithRequestBuilder(destinationGroupName: destinationGroupName, name: name, ordering: ordering, page: page, pageSize: pageSize, search: search, severity: severity, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /events/rules/
     - NotificationRule Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter destinationGroupName: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter severity: (query) Controls which severity level the created notifications will have.   (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedNotificationRuleList> 
     */
    open class func eventsRulesListWithRequestBuilder(destinationGroupName: String? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, severity: Severity_eventsRulesList? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedNotificationRuleList> {
        let localVariablePath = "/events/rules/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "destination_group__name": (wrappedValue: destinationGroupName?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "severity": (wrappedValue: severity?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedNotificationRuleList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pbmUuid: (path) A UUID string identifying this Notification Rule. 
     - parameter patchedNotificationRuleRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: NotificationRule
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func eventsRulesPartialUpdate(pbmUuid: UUID, patchedNotificationRuleRequest: PatchedNotificationRuleRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> NotificationRule {
        return try await eventsRulesPartialUpdateWithRequestBuilder(pbmUuid: pbmUuid, patchedNotificationRuleRequest: patchedNotificationRuleRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /events/rules/{pbm_uuid}/
     - NotificationRule Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pbmUuid: (path) A UUID string identifying this Notification Rule. 
     - parameter patchedNotificationRuleRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<NotificationRule> 
     */
    open class func eventsRulesPartialUpdateWithRequestBuilder(pbmUuid: UUID, patchedNotificationRuleRequest: PatchedNotificationRuleRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<NotificationRule> {
        var localVariablePath = "/events/rules/{pbm_uuid}/"
        let pbmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pbmUuid))"
        let pbmUuidPostEscape = pbmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pbm_uuid}", with: pbmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedNotificationRuleRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NotificationRule>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pbmUuid: (path) A UUID string identifying this Notification Rule. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: NotificationRule
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func eventsRulesRetrieve(pbmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> NotificationRule {
        return try await eventsRulesRetrieveWithRequestBuilder(pbmUuid: pbmUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /events/rules/{pbm_uuid}/
     - NotificationRule Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pbmUuid: (path) A UUID string identifying this Notification Rule. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<NotificationRule> 
     */
    open class func eventsRulesRetrieveWithRequestBuilder(pbmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<NotificationRule> {
        var localVariablePath = "/events/rules/{pbm_uuid}/"
        let pbmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pbmUuid))"
        let pbmUuidPostEscape = pbmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pbm_uuid}", with: pbmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NotificationRule>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pbmUuid: (path) A UUID string identifying this Notification Rule. 
     - parameter notificationRuleRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: NotificationRule
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func eventsRulesUpdate(pbmUuid: UUID, notificationRuleRequest: NotificationRuleRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> NotificationRule {
        return try await eventsRulesUpdateWithRequestBuilder(pbmUuid: pbmUuid, notificationRuleRequest: notificationRuleRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /events/rules/{pbm_uuid}/
     - NotificationRule Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pbmUuid: (path) A UUID string identifying this Notification Rule. 
     - parameter notificationRuleRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<NotificationRule> 
     */
    open class func eventsRulesUpdateWithRequestBuilder(pbmUuid: UUID, notificationRuleRequest: NotificationRuleRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<NotificationRule> {
        var localVariablePath = "/events/rules/{pbm_uuid}/"
        let pbmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pbmUuid))"
        let pbmUuidPostEscape = pbmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pbm_uuid}", with: pbmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: notificationRuleRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NotificationRule>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter pbmUuid: (path) A UUID string identifying this Notification Rule. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func eventsRulesUsedByList(pbmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await eventsRulesUsedByListWithRequestBuilder(pbmUuid: pbmUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /events/rules/{pbm_uuid}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter pbmUuid: (path) A UUID string identifying this Notification Rule. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func eventsRulesUsedByListWithRequestBuilder(pbmUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/events/rules/{pbm_uuid}/used_by/"
        let pbmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pbmUuid))"
        let pbmUuidPostEscape = pbmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pbm_uuid}", with: pbmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter status
     */
    public enum Status_eventsSystemTasksList: String, Sendable, CaseIterable {
        case error = "error"
        case successful = "successful"
        case unknown = "unknown"
        case warning = "warning"
    }

    /**

     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter status: (query)  (optional)
     - parameter uid: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedSystemTaskList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func eventsSystemTasksList(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, status: Status_eventsSystemTasksList? = nil, uid: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedSystemTaskList {
        return try await eventsSystemTasksListWithRequestBuilder(name: name, ordering: ordering, page: page, pageSize: pageSize, search: search, status: status, uid: uid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /events/system_tasks/
     - Read-only view set that returns all background tasks
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter status: (query)  (optional)
     - parameter uid: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedSystemTaskList> 
     */
    open class func eventsSystemTasksListWithRequestBuilder(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, status: Status_eventsSystemTasksList? = nil, uid: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedSystemTaskList> {
        let localVariablePath = "/events/system_tasks/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "status": (wrappedValue: status?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "uid": (wrappedValue: uid?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedSystemTaskList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter uuid: (path) A UUID string identifying this System Task. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SystemTask
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func eventsSystemTasksRetrieve(uuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> SystemTask {
        return try await eventsSystemTasksRetrieveWithRequestBuilder(uuid: uuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /events/system_tasks/{uuid}/
     - Read-only view set that returns all background tasks
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter uuid: (path) A UUID string identifying this System Task. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SystemTask> 
     */
    open class func eventsSystemTasksRetrieveWithRequestBuilder(uuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<SystemTask> {
        var localVariablePath = "/events/system_tasks/{uuid}/"
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SystemTask>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter uuid: (path) A UUID string identifying this System Task. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func eventsSystemTasksRunCreate(uuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await eventsSystemTasksRunCreateWithRequestBuilder(uuid: uuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /events/system_tasks/{uuid}/run/
     - Run task
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter uuid: (path) A UUID string identifying this System Task. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func eventsSystemTasksRunCreateWithRequestBuilder(uuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/events/system_tasks/{uuid}/run/"
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter notificationTransportRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: NotificationTransport
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func eventsTransportsCreate(notificationTransportRequest: NotificationTransportRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> NotificationTransport {
        return try await eventsTransportsCreateWithRequestBuilder(notificationTransportRequest: notificationTransportRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /events/transports/
     - NotificationTransport Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter notificationTransportRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<NotificationTransport> 
     */
    open class func eventsTransportsCreateWithRequestBuilder(notificationTransportRequest: NotificationTransportRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<NotificationTransport> {
        let localVariablePath = "/events/transports/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: notificationTransportRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NotificationTransport>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter uuid: (path) A UUID string identifying this Notification Transport. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func eventsTransportsDestroy(uuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await eventsTransportsDestroyWithRequestBuilder(uuid: uuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /events/transports/{uuid}/
     - NotificationTransport Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter uuid: (path) A UUID string identifying this Notification Transport. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func eventsTransportsDestroyWithRequestBuilder(uuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/events/transports/{uuid}/"
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter mode
     */
    public enum Mode_eventsTransportsList: String, Sendable, CaseIterable {
        case email = "email"
        case local = "local"
        case webhook = "webhook"
        case webhookSlack = "webhook_slack"
    }

    /**

     - parameter mode: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter sendOnce: (query)  (optional)
     - parameter webhookUrl: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedNotificationTransportList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func eventsTransportsList(mode: Mode_eventsTransportsList? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, sendOnce: Bool? = nil, webhookUrl: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedNotificationTransportList {
        return try await eventsTransportsListWithRequestBuilder(mode: mode, name: name, ordering: ordering, page: page, pageSize: pageSize, search: search, sendOnce: sendOnce, webhookUrl: webhookUrl, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /events/transports/
     - NotificationTransport Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter mode: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter sendOnce: (query)  (optional)
     - parameter webhookUrl: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedNotificationTransportList> 
     */
    open class func eventsTransportsListWithRequestBuilder(mode: Mode_eventsTransportsList? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, sendOnce: Bool? = nil, webhookUrl: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedNotificationTransportList> {
        let localVariablePath = "/events/transports/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "mode": (wrappedValue: mode?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "send_once": (wrappedValue: sendOnce?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "webhook_url": (wrappedValue: webhookUrl?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedNotificationTransportList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter uuid: (path) A UUID string identifying this Notification Transport. 
     - parameter patchedNotificationTransportRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: NotificationTransport
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func eventsTransportsPartialUpdate(uuid: UUID, patchedNotificationTransportRequest: PatchedNotificationTransportRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> NotificationTransport {
        return try await eventsTransportsPartialUpdateWithRequestBuilder(uuid: uuid, patchedNotificationTransportRequest: patchedNotificationTransportRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /events/transports/{uuid}/
     - NotificationTransport Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter uuid: (path) A UUID string identifying this Notification Transport. 
     - parameter patchedNotificationTransportRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<NotificationTransport> 
     */
    open class func eventsTransportsPartialUpdateWithRequestBuilder(uuid: UUID, patchedNotificationTransportRequest: PatchedNotificationTransportRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<NotificationTransport> {
        var localVariablePath = "/events/transports/{uuid}/"
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedNotificationTransportRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NotificationTransport>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter uuid: (path) A UUID string identifying this Notification Transport. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: NotificationTransport
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func eventsTransportsRetrieve(uuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> NotificationTransport {
        return try await eventsTransportsRetrieveWithRequestBuilder(uuid: uuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /events/transports/{uuid}/
     - NotificationTransport Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter uuid: (path) A UUID string identifying this Notification Transport. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<NotificationTransport> 
     */
    open class func eventsTransportsRetrieveWithRequestBuilder(uuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<NotificationTransport> {
        var localVariablePath = "/events/transports/{uuid}/"
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NotificationTransport>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter uuid: (path) A UUID string identifying this Notification Transport. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: NotificationTransportTest
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func eventsTransportsTestCreate(uuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> NotificationTransportTest {
        return try await eventsTransportsTestCreateWithRequestBuilder(uuid: uuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /events/transports/{uuid}/test/
     - Send example notification using selected transport. Requires Modify permissions.
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter uuid: (path) A UUID string identifying this Notification Transport. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<NotificationTransportTest> 
     */
    open class func eventsTransportsTestCreateWithRequestBuilder(uuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<NotificationTransportTest> {
        var localVariablePath = "/events/transports/{uuid}/test/"
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NotificationTransportTest>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter uuid: (path) A UUID string identifying this Notification Transport. 
     - parameter notificationTransportRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: NotificationTransport
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func eventsTransportsUpdate(uuid: UUID, notificationTransportRequest: NotificationTransportRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> NotificationTransport {
        return try await eventsTransportsUpdateWithRequestBuilder(uuid: uuid, notificationTransportRequest: notificationTransportRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /events/transports/{uuid}/
     - NotificationTransport Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter uuid: (path) A UUID string identifying this Notification Transport. 
     - parameter notificationTransportRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<NotificationTransport> 
     */
    open class func eventsTransportsUpdateWithRequestBuilder(uuid: UUID, notificationTransportRequest: NotificationTransportRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<NotificationTransport> {
        var localVariablePath = "/events/transports/{uuid}/"
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: notificationTransportRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NotificationTransport>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter uuid: (path) A UUID string identifying this Notification Transport. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func eventsTransportsUsedByList(uuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await eventsTransportsUsedByListWithRequestBuilder(uuid: uuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /events/transports/{uuid}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter uuid: (path) A UUID string identifying this Notification Transport. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func eventsTransportsUsedByListWithRequestBuilder(uuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/events/transports/{uuid}/used_by/"
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }
}
