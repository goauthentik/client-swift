//
// PoliciesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class PoliciesAPI {

    /**

     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesAllCacheClearCreate(apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await policiesAllCacheClearCreateWithRequestBuilder(apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /policies/all/cache_clear/
     - Clear policy cache
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func policiesAllCacheClearCreateWithRequestBuilder(apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        let localVariablePath = "/policies/all/cache_clear/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter apiConfiguration: The configuration for the http request.
     - returns: Cache
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesAllCacheInfoRetrieve(apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> Cache {
        return try await policiesAllCacheInfoRetrieveWithRequestBuilder(apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /policies/all/cache_info/
     - Info about cached policies
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Cache> 
     */
    open class func policiesAllCacheInfoRetrieveWithRequestBuilder(apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Cache> {
        let localVariablePath = "/policies/all/cache_info/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Cache>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Policy. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesAllDestroy(policyUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await policiesAllDestroyWithRequestBuilder(policyUuid: policyUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /policies/all/{policy_uuid}/
     - Policy Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Policy. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func policiesAllDestroyWithRequestBuilder(policyUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/policies/all/{policy_uuid}/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter bindingsIsnull: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter promptstageIsnull: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedPolicyList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesAllList(bindingsIsnull: Bool? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, promptstageIsnull: Bool? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedPolicyList {
        return try await policiesAllListWithRequestBuilder(bindingsIsnull: bindingsIsnull, ordering: ordering, page: page, pageSize: pageSize, promptstageIsnull: promptstageIsnull, search: search, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /policies/all/
     - Policy Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter bindingsIsnull: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter promptstageIsnull: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedPolicyList> 
     */
    open class func policiesAllListWithRequestBuilder(bindingsIsnull: Bool? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, promptstageIsnull: Bool? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedPolicyList> {
        let localVariablePath = "/policies/all/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "bindings__isnull": (wrappedValue: bindingsIsnull?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "promptstage__isnull": (wrappedValue: promptstageIsnull?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedPolicyList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Policy. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Policy
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesAllRetrieve(policyUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> Policy {
        return try await policiesAllRetrieveWithRequestBuilder(policyUuid: policyUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /policies/all/{policy_uuid}/
     - Policy Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Policy. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Policy> 
     */
    open class func policiesAllRetrieveWithRequestBuilder(policyUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Policy> {
        var localVariablePath = "/policies/all/{policy_uuid}/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Policy>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Policy. 
     - parameter policyTestRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PolicyTestResult
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesAllTestCreate(policyUuid: UUID, policyTestRequest: PolicyTestRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PolicyTestResult {
        return try await policiesAllTestCreateWithRequestBuilder(policyUuid: policyUuid, policyTestRequest: policyTestRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /policies/all/{policy_uuid}/test/
     - Test policy
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Policy. 
     - parameter policyTestRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PolicyTestResult> 
     */
    open class func policiesAllTestCreateWithRequestBuilder(policyUuid: UUID, policyTestRequest: PolicyTestRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PolicyTestResult> {
        var localVariablePath = "/policies/all/{policy_uuid}/test/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: policyTestRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PolicyTestResult>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter apiConfiguration: The configuration for the http request.
     - returns: [TypeCreate]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesAllTypesList(apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [TypeCreate] {
        return try await policiesAllTypesListWithRequestBuilder(apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /policies/all/types/
     - Get all creatable types
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[TypeCreate]> 
     */
    open class func policiesAllTypesListWithRequestBuilder(apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[TypeCreate]> {
        let localVariablePath = "/policies/all/types/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[TypeCreate]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Policy. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesAllUsedByList(policyUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await policiesAllUsedByListWithRequestBuilder(policyUuid: policyUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /policies/all/{policy_uuid}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Policy. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func policiesAllUsedByListWithRequestBuilder(policyUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/policies/all/{policy_uuid}/used_by/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter policyBindingRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PolicyBinding
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesBindingsCreate(policyBindingRequest: PolicyBindingRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PolicyBinding {
        return try await policiesBindingsCreateWithRequestBuilder(policyBindingRequest: policyBindingRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /policies/bindings/
     - PolicyBinding Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter policyBindingRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PolicyBinding> 
     */
    open class func policiesBindingsCreateWithRequestBuilder(policyBindingRequest: PolicyBindingRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PolicyBinding> {
        let localVariablePath = "/policies/bindings/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: policyBindingRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PolicyBinding>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter policyBindingUuid: (path) A UUID string identifying this Policy Binding. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesBindingsDestroy(policyBindingUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await policiesBindingsDestroyWithRequestBuilder(policyBindingUuid: policyBindingUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /policies/bindings/{policy_binding_uuid}/
     - PolicyBinding Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter policyBindingUuid: (path) A UUID string identifying this Policy Binding. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func policiesBindingsDestroyWithRequestBuilder(policyBindingUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/policies/bindings/{policy_binding_uuid}/"
        let policyBindingUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyBindingUuid))"
        let policyBindingUuidPostEscape = policyBindingUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_binding_uuid}", with: policyBindingUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter enabled: (query)  (optional)
     - parameter order: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter policy: (query)  (optional)
     - parameter policyIsnull: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter target: (query)  (optional)
     - parameter targetIn: (query)  (optional)
     - parameter timeout: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedPolicyBindingList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesBindingsList(enabled: Bool? = nil, order: Int? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, policy: UUID? = nil, policyIsnull: Bool? = nil, search: String? = nil, target: UUID? = nil, targetIn: [UUID]? = nil, timeout: Int? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedPolicyBindingList {
        return try await policiesBindingsListWithRequestBuilder(enabled: enabled, order: order, ordering: ordering, page: page, pageSize: pageSize, policy: policy, policyIsnull: policyIsnull, search: search, target: target, targetIn: targetIn, timeout: timeout, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /policies/bindings/
     - PolicyBinding Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter enabled: (query)  (optional)
     - parameter order: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter policy: (query)  (optional)
     - parameter policyIsnull: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter target: (query)  (optional)
     - parameter targetIn: (query)  (optional)
     - parameter timeout: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedPolicyBindingList> 
     */
    open class func policiesBindingsListWithRequestBuilder(enabled: Bool? = nil, order: Int? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, policy: UUID? = nil, policyIsnull: Bool? = nil, search: String? = nil, target: UUID? = nil, targetIn: [UUID]? = nil, timeout: Int? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedPolicyBindingList> {
        let localVariablePath = "/policies/bindings/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "enabled": (wrappedValue: enabled?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "order": (wrappedValue: order?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "policy": (wrappedValue: policy?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "policy__isnull": (wrappedValue: policyIsnull?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "target": (wrappedValue: target?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "target_in": (wrappedValue: targetIn?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "timeout": (wrappedValue: timeout?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedPolicyBindingList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter policyBindingUuid: (path) A UUID string identifying this Policy Binding. 
     - parameter patchedPolicyBindingRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PolicyBinding
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesBindingsPartialUpdate(policyBindingUuid: UUID, patchedPolicyBindingRequest: PatchedPolicyBindingRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PolicyBinding {
        return try await policiesBindingsPartialUpdateWithRequestBuilder(policyBindingUuid: policyBindingUuid, patchedPolicyBindingRequest: patchedPolicyBindingRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /policies/bindings/{policy_binding_uuid}/
     - PolicyBinding Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter policyBindingUuid: (path) A UUID string identifying this Policy Binding. 
     - parameter patchedPolicyBindingRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PolicyBinding> 
     */
    open class func policiesBindingsPartialUpdateWithRequestBuilder(policyBindingUuid: UUID, patchedPolicyBindingRequest: PatchedPolicyBindingRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PolicyBinding> {
        var localVariablePath = "/policies/bindings/{policy_binding_uuid}/"
        let policyBindingUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyBindingUuid))"
        let policyBindingUuidPostEscape = policyBindingUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_binding_uuid}", with: policyBindingUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedPolicyBindingRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PolicyBinding>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter policyBindingUuid: (path) A UUID string identifying this Policy Binding. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PolicyBinding
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesBindingsRetrieve(policyBindingUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PolicyBinding {
        return try await policiesBindingsRetrieveWithRequestBuilder(policyBindingUuid: policyBindingUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /policies/bindings/{policy_binding_uuid}/
     - PolicyBinding Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter policyBindingUuid: (path) A UUID string identifying this Policy Binding. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PolicyBinding> 
     */
    open class func policiesBindingsRetrieveWithRequestBuilder(policyBindingUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PolicyBinding> {
        var localVariablePath = "/policies/bindings/{policy_binding_uuid}/"
        let policyBindingUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyBindingUuid))"
        let policyBindingUuidPostEscape = policyBindingUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_binding_uuid}", with: policyBindingUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PolicyBinding>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter policyBindingUuid: (path) A UUID string identifying this Policy Binding. 
     - parameter policyBindingRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PolicyBinding
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesBindingsUpdate(policyBindingUuid: UUID, policyBindingRequest: PolicyBindingRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PolicyBinding {
        return try await policiesBindingsUpdateWithRequestBuilder(policyBindingUuid: policyBindingUuid, policyBindingRequest: policyBindingRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /policies/bindings/{policy_binding_uuid}/
     - PolicyBinding Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter policyBindingUuid: (path) A UUID string identifying this Policy Binding. 
     - parameter policyBindingRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PolicyBinding> 
     */
    open class func policiesBindingsUpdateWithRequestBuilder(policyBindingUuid: UUID, policyBindingRequest: PolicyBindingRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PolicyBinding> {
        var localVariablePath = "/policies/bindings/{policy_binding_uuid}/"
        let policyBindingUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyBindingUuid))"
        let policyBindingUuidPostEscape = policyBindingUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_binding_uuid}", with: policyBindingUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: policyBindingRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PolicyBinding>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter policyBindingUuid: (path) A UUID string identifying this Policy Binding. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesBindingsUsedByList(policyBindingUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await policiesBindingsUsedByListWithRequestBuilder(policyBindingUuid: policyBindingUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /policies/bindings/{policy_binding_uuid}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter policyBindingUuid: (path) A UUID string identifying this Policy Binding. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func policiesBindingsUsedByListWithRequestBuilder(policyBindingUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/policies/bindings/{policy_binding_uuid}/used_by/"
        let policyBindingUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyBindingUuid))"
        let policyBindingUuidPostEscape = policyBindingUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_binding_uuid}", with: policyBindingUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter dummyPolicyRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: DummyPolicy
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesDummyCreate(dummyPolicyRequest: DummyPolicyRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> DummyPolicy {
        return try await policiesDummyCreateWithRequestBuilder(dummyPolicyRequest: dummyPolicyRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /policies/dummy/
     - Dummy Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter dummyPolicyRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<DummyPolicy> 
     */
    open class func policiesDummyCreateWithRequestBuilder(dummyPolicyRequest: DummyPolicyRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<DummyPolicy> {
        let localVariablePath = "/policies/dummy/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: dummyPolicyRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DummyPolicy>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Dummy Policy. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesDummyDestroy(policyUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await policiesDummyDestroyWithRequestBuilder(policyUuid: policyUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /policies/dummy/{policy_uuid}/
     - Dummy Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Dummy Policy. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func policiesDummyDestroyWithRequestBuilder(policyUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/policies/dummy/{policy_uuid}/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter created: (query)  (optional)
     - parameter executionLogging: (query)  (optional)
     - parameter lastUpdated: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter policyUuid: (query)  (optional)
     - parameter result: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter waitMax: (query)  (optional)
     - parameter waitMin: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedDummyPolicyList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesDummyList(created: Date? = nil, executionLogging: Bool? = nil, lastUpdated: Date? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, policyUuid: UUID? = nil, result: Bool? = nil, search: String? = nil, waitMax: Int? = nil, waitMin: Int? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedDummyPolicyList {
        return try await policiesDummyListWithRequestBuilder(created: created, executionLogging: executionLogging, lastUpdated: lastUpdated, name: name, ordering: ordering, page: page, pageSize: pageSize, policyUuid: policyUuid, result: result, search: search, waitMax: waitMax, waitMin: waitMin, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /policies/dummy/
     - Dummy Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter created: (query)  (optional)
     - parameter executionLogging: (query)  (optional)
     - parameter lastUpdated: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter policyUuid: (query)  (optional)
     - parameter result: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter waitMax: (query)  (optional)
     - parameter waitMin: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedDummyPolicyList> 
     */
    open class func policiesDummyListWithRequestBuilder(created: Date? = nil, executionLogging: Bool? = nil, lastUpdated: Date? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, policyUuid: UUID? = nil, result: Bool? = nil, search: String? = nil, waitMax: Int? = nil, waitMin: Int? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedDummyPolicyList> {
        let localVariablePath = "/policies/dummy/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "created": (wrappedValue: created?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "execution_logging": (wrappedValue: executionLogging?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "last_updated": (wrappedValue: lastUpdated?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "policy_uuid": (wrappedValue: policyUuid?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "result": (wrappedValue: result?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "wait_max": (wrappedValue: waitMax?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "wait_min": (wrappedValue: waitMin?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedDummyPolicyList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Dummy Policy. 
     - parameter patchedDummyPolicyRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: DummyPolicy
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesDummyPartialUpdate(policyUuid: UUID, patchedDummyPolicyRequest: PatchedDummyPolicyRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> DummyPolicy {
        return try await policiesDummyPartialUpdateWithRequestBuilder(policyUuid: policyUuid, patchedDummyPolicyRequest: patchedDummyPolicyRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /policies/dummy/{policy_uuid}/
     - Dummy Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Dummy Policy. 
     - parameter patchedDummyPolicyRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<DummyPolicy> 
     */
    open class func policiesDummyPartialUpdateWithRequestBuilder(policyUuid: UUID, patchedDummyPolicyRequest: PatchedDummyPolicyRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<DummyPolicy> {
        var localVariablePath = "/policies/dummy/{policy_uuid}/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedDummyPolicyRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DummyPolicy>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Dummy Policy. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: DummyPolicy
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesDummyRetrieve(policyUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> DummyPolicy {
        return try await policiesDummyRetrieveWithRequestBuilder(policyUuid: policyUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /policies/dummy/{policy_uuid}/
     - Dummy Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Dummy Policy. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<DummyPolicy> 
     */
    open class func policiesDummyRetrieveWithRequestBuilder(policyUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<DummyPolicy> {
        var localVariablePath = "/policies/dummy/{policy_uuid}/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DummyPolicy>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Dummy Policy. 
     - parameter dummyPolicyRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: DummyPolicy
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesDummyUpdate(policyUuid: UUID, dummyPolicyRequest: DummyPolicyRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> DummyPolicy {
        return try await policiesDummyUpdateWithRequestBuilder(policyUuid: policyUuid, dummyPolicyRequest: dummyPolicyRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /policies/dummy/{policy_uuid}/
     - Dummy Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Dummy Policy. 
     - parameter dummyPolicyRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<DummyPolicy> 
     */
    open class func policiesDummyUpdateWithRequestBuilder(policyUuid: UUID, dummyPolicyRequest: DummyPolicyRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<DummyPolicy> {
        var localVariablePath = "/policies/dummy/{policy_uuid}/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: dummyPolicyRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DummyPolicy>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Dummy Policy. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesDummyUsedByList(policyUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await policiesDummyUsedByListWithRequestBuilder(policyUuid: policyUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /policies/dummy/{policy_uuid}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Dummy Policy. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func policiesDummyUsedByListWithRequestBuilder(policyUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/policies/dummy/{policy_uuid}/used_by/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter eventMatcherPolicyRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: EventMatcherPolicy
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesEventMatcherCreate(eventMatcherPolicyRequest: EventMatcherPolicyRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> EventMatcherPolicy {
        return try await policiesEventMatcherCreateWithRequestBuilder(eventMatcherPolicyRequest: eventMatcherPolicyRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /policies/event_matcher/
     - Event Matcher Policy Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter eventMatcherPolicyRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<EventMatcherPolicy> 
     */
    open class func policiesEventMatcherCreateWithRequestBuilder(eventMatcherPolicyRequest: EventMatcherPolicyRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<EventMatcherPolicy> {
        let localVariablePath = "/policies/event_matcher/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: eventMatcherPolicyRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EventMatcherPolicy>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Event Matcher Policy. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesEventMatcherDestroy(policyUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await policiesEventMatcherDestroyWithRequestBuilder(policyUuid: policyUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /policies/event_matcher/{policy_uuid}/
     - Event Matcher Policy Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Event Matcher Policy. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func policiesEventMatcherDestroyWithRequestBuilder(policyUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/policies/event_matcher/{policy_uuid}/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter action
     */
    public enum Action_policiesEventMatcherList: String, Sendable, CaseIterable {
        case authorizeApplication = "authorize_application"
        case configurationError = "configuration_error"
        case custom = "custom_"
        case emailSent = "email_sent"
        case flowExecution = "flow_execution"
        case impersonationEnded = "impersonation_ended"
        case impersonationStarted = "impersonation_started"
        case invitationUsed = "invitation_used"
        case login = "login"
        case loginFailed = "login_failed"
        case logout = "logout"
        case modelCreated = "model_created"
        case modelDeleted = "model_deleted"
        case modelUpdated = "model_updated"
        case passwordSet = "password_set"
        case policyException = "policy_exception"
        case policyExecution = "policy_execution"
        case propertyMappingException = "property_mapping_exception"
        case secretRotate = "secret_rotate"
        case secretView = "secret_view"
        case sourceLinked = "source_linked"
        case suspiciousRequest = "suspicious_request"
        case systemException = "system_exception"
        case systemTaskException = "system_task_exception"
        case systemTaskExecution = "system_task_execution"
        case updateAvailable = "update_available"
        case userWrite = "user_write"
    }

    /**

     - parameter action: (query) Match created events with this action type. When left empty, all action types will be matched.   (optional)
     - parameter app: (query)  (optional)
     - parameter clientIp: (query)  (optional)
     - parameter created: (query)  (optional)
     - parameter executionLogging: (query)  (optional)
     - parameter lastUpdated: (query)  (optional)
     - parameter model: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter policyUuid: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedEventMatcherPolicyList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesEventMatcherList(action: Action_policiesEventMatcherList? = nil, app: String? = nil, clientIp: String? = nil, created: Date? = nil, executionLogging: Bool? = nil, lastUpdated: Date? = nil, model: String? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, policyUuid: UUID? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedEventMatcherPolicyList {
        return try await policiesEventMatcherListWithRequestBuilder(action: action, app: app, clientIp: clientIp, created: created, executionLogging: executionLogging, lastUpdated: lastUpdated, model: model, name: name, ordering: ordering, page: page, pageSize: pageSize, policyUuid: policyUuid, search: search, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /policies/event_matcher/
     - Event Matcher Policy Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter action: (query) Match created events with this action type. When left empty, all action types will be matched.   (optional)
     - parameter app: (query)  (optional)
     - parameter clientIp: (query)  (optional)
     - parameter created: (query)  (optional)
     - parameter executionLogging: (query)  (optional)
     - parameter lastUpdated: (query)  (optional)
     - parameter model: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter policyUuid: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedEventMatcherPolicyList> 
     */
    open class func policiesEventMatcherListWithRequestBuilder(action: Action_policiesEventMatcherList? = nil, app: String? = nil, clientIp: String? = nil, created: Date? = nil, executionLogging: Bool? = nil, lastUpdated: Date? = nil, model: String? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, policyUuid: UUID? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedEventMatcherPolicyList> {
        let localVariablePath = "/policies/event_matcher/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "action": (wrappedValue: action?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "app": (wrappedValue: app?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "client_ip": (wrappedValue: clientIp?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "created": (wrappedValue: created?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "execution_logging": (wrappedValue: executionLogging?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "last_updated": (wrappedValue: lastUpdated?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "model": (wrappedValue: model?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "policy_uuid": (wrappedValue: policyUuid?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedEventMatcherPolicyList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Event Matcher Policy. 
     - parameter patchedEventMatcherPolicyRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: EventMatcherPolicy
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesEventMatcherPartialUpdate(policyUuid: UUID, patchedEventMatcherPolicyRequest: PatchedEventMatcherPolicyRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> EventMatcherPolicy {
        return try await policiesEventMatcherPartialUpdateWithRequestBuilder(policyUuid: policyUuid, patchedEventMatcherPolicyRequest: patchedEventMatcherPolicyRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /policies/event_matcher/{policy_uuid}/
     - Event Matcher Policy Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Event Matcher Policy. 
     - parameter patchedEventMatcherPolicyRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<EventMatcherPolicy> 
     */
    open class func policiesEventMatcherPartialUpdateWithRequestBuilder(policyUuid: UUID, patchedEventMatcherPolicyRequest: PatchedEventMatcherPolicyRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<EventMatcherPolicy> {
        var localVariablePath = "/policies/event_matcher/{policy_uuid}/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedEventMatcherPolicyRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EventMatcherPolicy>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Event Matcher Policy. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: EventMatcherPolicy
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesEventMatcherRetrieve(policyUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> EventMatcherPolicy {
        return try await policiesEventMatcherRetrieveWithRequestBuilder(policyUuid: policyUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /policies/event_matcher/{policy_uuid}/
     - Event Matcher Policy Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Event Matcher Policy. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<EventMatcherPolicy> 
     */
    open class func policiesEventMatcherRetrieveWithRequestBuilder(policyUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<EventMatcherPolicy> {
        var localVariablePath = "/policies/event_matcher/{policy_uuid}/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EventMatcherPolicy>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Event Matcher Policy. 
     - parameter eventMatcherPolicyRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: EventMatcherPolicy
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesEventMatcherUpdate(policyUuid: UUID, eventMatcherPolicyRequest: EventMatcherPolicyRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> EventMatcherPolicy {
        return try await policiesEventMatcherUpdateWithRequestBuilder(policyUuid: policyUuid, eventMatcherPolicyRequest: eventMatcherPolicyRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /policies/event_matcher/{policy_uuid}/
     - Event Matcher Policy Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Event Matcher Policy. 
     - parameter eventMatcherPolicyRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<EventMatcherPolicy> 
     */
    open class func policiesEventMatcherUpdateWithRequestBuilder(policyUuid: UUID, eventMatcherPolicyRequest: EventMatcherPolicyRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<EventMatcherPolicy> {
        var localVariablePath = "/policies/event_matcher/{policy_uuid}/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: eventMatcherPolicyRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EventMatcherPolicy>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Event Matcher Policy. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesEventMatcherUsedByList(policyUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await policiesEventMatcherUsedByListWithRequestBuilder(policyUuid: policyUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /policies/event_matcher/{policy_uuid}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Event Matcher Policy. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func policiesEventMatcherUsedByListWithRequestBuilder(policyUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/policies/event_matcher/{policy_uuid}/used_by/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter expressionPolicyRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ExpressionPolicy
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesExpressionCreate(expressionPolicyRequest: ExpressionPolicyRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> ExpressionPolicy {
        return try await policiesExpressionCreateWithRequestBuilder(expressionPolicyRequest: expressionPolicyRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /policies/expression/
     - Source Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter expressionPolicyRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ExpressionPolicy> 
     */
    open class func policiesExpressionCreateWithRequestBuilder(expressionPolicyRequest: ExpressionPolicyRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<ExpressionPolicy> {
        let localVariablePath = "/policies/expression/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: expressionPolicyRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ExpressionPolicy>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Expression Policy. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesExpressionDestroy(policyUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await policiesExpressionDestroyWithRequestBuilder(policyUuid: policyUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /policies/expression/{policy_uuid}/
     - Source Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Expression Policy. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func policiesExpressionDestroyWithRequestBuilder(policyUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/policies/expression/{policy_uuid}/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter created: (query)  (optional)
     - parameter executionLogging: (query)  (optional)
     - parameter expression: (query)  (optional)
     - parameter lastUpdated: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter policyUuid: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedExpressionPolicyList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesExpressionList(created: Date? = nil, executionLogging: Bool? = nil, expression: String? = nil, lastUpdated: Date? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, policyUuid: UUID? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedExpressionPolicyList {
        return try await policiesExpressionListWithRequestBuilder(created: created, executionLogging: executionLogging, expression: expression, lastUpdated: lastUpdated, name: name, ordering: ordering, page: page, pageSize: pageSize, policyUuid: policyUuid, search: search, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /policies/expression/
     - Source Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter created: (query)  (optional)
     - parameter executionLogging: (query)  (optional)
     - parameter expression: (query)  (optional)
     - parameter lastUpdated: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter policyUuid: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedExpressionPolicyList> 
     */
    open class func policiesExpressionListWithRequestBuilder(created: Date? = nil, executionLogging: Bool? = nil, expression: String? = nil, lastUpdated: Date? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, policyUuid: UUID? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedExpressionPolicyList> {
        let localVariablePath = "/policies/expression/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "created": (wrappedValue: created?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "execution_logging": (wrappedValue: executionLogging?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "expression": (wrappedValue: expression?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "last_updated": (wrappedValue: lastUpdated?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "policy_uuid": (wrappedValue: policyUuid?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedExpressionPolicyList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Expression Policy. 
     - parameter patchedExpressionPolicyRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ExpressionPolicy
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesExpressionPartialUpdate(policyUuid: UUID, patchedExpressionPolicyRequest: PatchedExpressionPolicyRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> ExpressionPolicy {
        return try await policiesExpressionPartialUpdateWithRequestBuilder(policyUuid: policyUuid, patchedExpressionPolicyRequest: patchedExpressionPolicyRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /policies/expression/{policy_uuid}/
     - Source Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Expression Policy. 
     - parameter patchedExpressionPolicyRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ExpressionPolicy> 
     */
    open class func policiesExpressionPartialUpdateWithRequestBuilder(policyUuid: UUID, patchedExpressionPolicyRequest: PatchedExpressionPolicyRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<ExpressionPolicy> {
        var localVariablePath = "/policies/expression/{policy_uuid}/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedExpressionPolicyRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ExpressionPolicy>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Expression Policy. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ExpressionPolicy
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesExpressionRetrieve(policyUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> ExpressionPolicy {
        return try await policiesExpressionRetrieveWithRequestBuilder(policyUuid: policyUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /policies/expression/{policy_uuid}/
     - Source Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Expression Policy. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ExpressionPolicy> 
     */
    open class func policiesExpressionRetrieveWithRequestBuilder(policyUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<ExpressionPolicy> {
        var localVariablePath = "/policies/expression/{policy_uuid}/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ExpressionPolicy>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Expression Policy. 
     - parameter expressionPolicyRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ExpressionPolicy
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesExpressionUpdate(policyUuid: UUID, expressionPolicyRequest: ExpressionPolicyRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> ExpressionPolicy {
        return try await policiesExpressionUpdateWithRequestBuilder(policyUuid: policyUuid, expressionPolicyRequest: expressionPolicyRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /policies/expression/{policy_uuid}/
     - Source Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Expression Policy. 
     - parameter expressionPolicyRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ExpressionPolicy> 
     */
    open class func policiesExpressionUpdateWithRequestBuilder(policyUuid: UUID, expressionPolicyRequest: ExpressionPolicyRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<ExpressionPolicy> {
        var localVariablePath = "/policies/expression/{policy_uuid}/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: expressionPolicyRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ExpressionPolicy>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Expression Policy. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesExpressionUsedByList(policyUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await policiesExpressionUsedByListWithRequestBuilder(policyUuid: policyUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /policies/expression/{policy_uuid}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Expression Policy. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func policiesExpressionUsedByListWithRequestBuilder(policyUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/policies/expression/{policy_uuid}/used_by/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter geoIPPolicyRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GeoIPPolicy
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesGeoipCreate(geoIPPolicyRequest: GeoIPPolicyRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> GeoIPPolicy {
        return try await policiesGeoipCreateWithRequestBuilder(geoIPPolicyRequest: geoIPPolicyRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /policies/geoip/
     - GeoIP Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter geoIPPolicyRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GeoIPPolicy> 
     */
    open class func policiesGeoipCreateWithRequestBuilder(geoIPPolicyRequest: GeoIPPolicyRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<GeoIPPolicy> {
        let localVariablePath = "/policies/geoip/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: geoIPPolicyRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GeoIPPolicy>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this GeoIP Policy. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesGeoipDestroy(policyUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await policiesGeoipDestroyWithRequestBuilder(policyUuid: policyUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /policies/geoip/{policy_uuid}/
     - GeoIP Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this GeoIP Policy. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func policiesGeoipDestroyWithRequestBuilder(policyUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/policies/geoip/{policy_uuid}/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter apiConfiguration: The configuration for the http request.
     - returns: [DetailedCountry]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesGeoipIso3166List(apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [DetailedCountry] {
        return try await policiesGeoipIso3166ListWithRequestBuilder(apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /policies/geoip_iso3166/
     - Get all countries in ISO-3166-1
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[DetailedCountry]> 
     */
    open class func policiesGeoipIso3166ListWithRequestBuilder(apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[DetailedCountry]> {
        let localVariablePath = "/policies/geoip_iso3166/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[DetailedCountry]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedGeoIPPolicyList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesGeoipList(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedGeoIPPolicyList {
        return try await policiesGeoipListWithRequestBuilder(name: name, ordering: ordering, page: page, pageSize: pageSize, search: search, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /policies/geoip/
     - GeoIP Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedGeoIPPolicyList> 
     */
    open class func policiesGeoipListWithRequestBuilder(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedGeoIPPolicyList> {
        let localVariablePath = "/policies/geoip/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedGeoIPPolicyList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this GeoIP Policy. 
     - parameter patchedGeoIPPolicyRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GeoIPPolicy
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesGeoipPartialUpdate(policyUuid: UUID, patchedGeoIPPolicyRequest: PatchedGeoIPPolicyRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> GeoIPPolicy {
        return try await policiesGeoipPartialUpdateWithRequestBuilder(policyUuid: policyUuid, patchedGeoIPPolicyRequest: patchedGeoIPPolicyRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /policies/geoip/{policy_uuid}/
     - GeoIP Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this GeoIP Policy. 
     - parameter patchedGeoIPPolicyRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GeoIPPolicy> 
     */
    open class func policiesGeoipPartialUpdateWithRequestBuilder(policyUuid: UUID, patchedGeoIPPolicyRequest: PatchedGeoIPPolicyRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<GeoIPPolicy> {
        var localVariablePath = "/policies/geoip/{policy_uuid}/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedGeoIPPolicyRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GeoIPPolicy>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this GeoIP Policy. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GeoIPPolicy
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesGeoipRetrieve(policyUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> GeoIPPolicy {
        return try await policiesGeoipRetrieveWithRequestBuilder(policyUuid: policyUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /policies/geoip/{policy_uuid}/
     - GeoIP Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this GeoIP Policy. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GeoIPPolicy> 
     */
    open class func policiesGeoipRetrieveWithRequestBuilder(policyUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<GeoIPPolicy> {
        var localVariablePath = "/policies/geoip/{policy_uuid}/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GeoIPPolicy>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this GeoIP Policy. 
     - parameter geoIPPolicyRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GeoIPPolicy
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesGeoipUpdate(policyUuid: UUID, geoIPPolicyRequest: GeoIPPolicyRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> GeoIPPolicy {
        return try await policiesGeoipUpdateWithRequestBuilder(policyUuid: policyUuid, geoIPPolicyRequest: geoIPPolicyRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /policies/geoip/{policy_uuid}/
     - GeoIP Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this GeoIP Policy. 
     - parameter geoIPPolicyRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GeoIPPolicy> 
     */
    open class func policiesGeoipUpdateWithRequestBuilder(policyUuid: UUID, geoIPPolicyRequest: GeoIPPolicyRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<GeoIPPolicy> {
        var localVariablePath = "/policies/geoip/{policy_uuid}/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: geoIPPolicyRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GeoIPPolicy>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this GeoIP Policy. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesGeoipUsedByList(policyUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await policiesGeoipUsedByListWithRequestBuilder(policyUuid: policyUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /policies/geoip/{policy_uuid}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this GeoIP Policy. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func policiesGeoipUsedByListWithRequestBuilder(policyUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/policies/geoip/{policy_uuid}/used_by/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter passwordPolicyRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PasswordPolicy
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesPasswordCreate(passwordPolicyRequest: PasswordPolicyRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PasswordPolicy {
        return try await policiesPasswordCreateWithRequestBuilder(passwordPolicyRequest: passwordPolicyRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /policies/password/
     - Password Policy Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter passwordPolicyRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PasswordPolicy> 
     */
    open class func policiesPasswordCreateWithRequestBuilder(passwordPolicyRequest: PasswordPolicyRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PasswordPolicy> {
        let localVariablePath = "/policies/password/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: passwordPolicyRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PasswordPolicy>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Password Policy. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesPasswordDestroy(policyUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await policiesPasswordDestroyWithRequestBuilder(policyUuid: policyUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /policies/password/{policy_uuid}/
     - Password Policy Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Password Policy. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func policiesPasswordDestroyWithRequestBuilder(policyUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/policies/password/{policy_uuid}/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter passwordExpiryPolicyRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PasswordExpiryPolicy
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesPasswordExpiryCreate(passwordExpiryPolicyRequest: PasswordExpiryPolicyRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PasswordExpiryPolicy {
        return try await policiesPasswordExpiryCreateWithRequestBuilder(passwordExpiryPolicyRequest: passwordExpiryPolicyRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /policies/password_expiry/
     - Password Expiry Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter passwordExpiryPolicyRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PasswordExpiryPolicy> 
     */
    open class func policiesPasswordExpiryCreateWithRequestBuilder(passwordExpiryPolicyRequest: PasswordExpiryPolicyRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PasswordExpiryPolicy> {
        let localVariablePath = "/policies/password_expiry/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: passwordExpiryPolicyRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PasswordExpiryPolicy>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Password Expiry Policy. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesPasswordExpiryDestroy(policyUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await policiesPasswordExpiryDestroyWithRequestBuilder(policyUuid: policyUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /policies/password_expiry/{policy_uuid}/
     - Password Expiry Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Password Expiry Policy. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func policiesPasswordExpiryDestroyWithRequestBuilder(policyUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/policies/password_expiry/{policy_uuid}/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter created: (query)  (optional)
     - parameter days: (query)  (optional)
     - parameter denyOnly: (query)  (optional)
     - parameter executionLogging: (query)  (optional)
     - parameter lastUpdated: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter policyUuid: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedPasswordExpiryPolicyList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesPasswordExpiryList(created: Date? = nil, days: Int? = nil, denyOnly: Bool? = nil, executionLogging: Bool? = nil, lastUpdated: Date? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, policyUuid: UUID? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedPasswordExpiryPolicyList {
        return try await policiesPasswordExpiryListWithRequestBuilder(created: created, days: days, denyOnly: denyOnly, executionLogging: executionLogging, lastUpdated: lastUpdated, name: name, ordering: ordering, page: page, pageSize: pageSize, policyUuid: policyUuid, search: search, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /policies/password_expiry/
     - Password Expiry Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter created: (query)  (optional)
     - parameter days: (query)  (optional)
     - parameter denyOnly: (query)  (optional)
     - parameter executionLogging: (query)  (optional)
     - parameter lastUpdated: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter policyUuid: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedPasswordExpiryPolicyList> 
     */
    open class func policiesPasswordExpiryListWithRequestBuilder(created: Date? = nil, days: Int? = nil, denyOnly: Bool? = nil, executionLogging: Bool? = nil, lastUpdated: Date? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, policyUuid: UUID? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedPasswordExpiryPolicyList> {
        let localVariablePath = "/policies/password_expiry/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "created": (wrappedValue: created?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "days": (wrappedValue: days?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "deny_only": (wrappedValue: denyOnly?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "execution_logging": (wrappedValue: executionLogging?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "last_updated": (wrappedValue: lastUpdated?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "policy_uuid": (wrappedValue: policyUuid?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedPasswordExpiryPolicyList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Password Expiry Policy. 
     - parameter patchedPasswordExpiryPolicyRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PasswordExpiryPolicy
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesPasswordExpiryPartialUpdate(policyUuid: UUID, patchedPasswordExpiryPolicyRequest: PatchedPasswordExpiryPolicyRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PasswordExpiryPolicy {
        return try await policiesPasswordExpiryPartialUpdateWithRequestBuilder(policyUuid: policyUuid, patchedPasswordExpiryPolicyRequest: patchedPasswordExpiryPolicyRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /policies/password_expiry/{policy_uuid}/
     - Password Expiry Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Password Expiry Policy. 
     - parameter patchedPasswordExpiryPolicyRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PasswordExpiryPolicy> 
     */
    open class func policiesPasswordExpiryPartialUpdateWithRequestBuilder(policyUuid: UUID, patchedPasswordExpiryPolicyRequest: PatchedPasswordExpiryPolicyRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PasswordExpiryPolicy> {
        var localVariablePath = "/policies/password_expiry/{policy_uuid}/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedPasswordExpiryPolicyRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PasswordExpiryPolicy>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Password Expiry Policy. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PasswordExpiryPolicy
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesPasswordExpiryRetrieve(policyUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PasswordExpiryPolicy {
        return try await policiesPasswordExpiryRetrieveWithRequestBuilder(policyUuid: policyUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /policies/password_expiry/{policy_uuid}/
     - Password Expiry Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Password Expiry Policy. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PasswordExpiryPolicy> 
     */
    open class func policiesPasswordExpiryRetrieveWithRequestBuilder(policyUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PasswordExpiryPolicy> {
        var localVariablePath = "/policies/password_expiry/{policy_uuid}/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PasswordExpiryPolicy>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Password Expiry Policy. 
     - parameter passwordExpiryPolicyRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PasswordExpiryPolicy
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesPasswordExpiryUpdate(policyUuid: UUID, passwordExpiryPolicyRequest: PasswordExpiryPolicyRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PasswordExpiryPolicy {
        return try await policiesPasswordExpiryUpdateWithRequestBuilder(policyUuid: policyUuid, passwordExpiryPolicyRequest: passwordExpiryPolicyRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /policies/password_expiry/{policy_uuid}/
     - Password Expiry Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Password Expiry Policy. 
     - parameter passwordExpiryPolicyRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PasswordExpiryPolicy> 
     */
    open class func policiesPasswordExpiryUpdateWithRequestBuilder(policyUuid: UUID, passwordExpiryPolicyRequest: PasswordExpiryPolicyRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PasswordExpiryPolicy> {
        var localVariablePath = "/policies/password_expiry/{policy_uuid}/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: passwordExpiryPolicyRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PasswordExpiryPolicy>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Password Expiry Policy. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesPasswordExpiryUsedByList(policyUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await policiesPasswordExpiryUsedByListWithRequestBuilder(policyUuid: policyUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /policies/password_expiry/{policy_uuid}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Password Expiry Policy. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func policiesPasswordExpiryUsedByListWithRequestBuilder(policyUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/policies/password_expiry/{policy_uuid}/used_by/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter amountDigits: (query)  (optional)
     - parameter amountLowercase: (query)  (optional)
     - parameter amountSymbols: (query)  (optional)
     - parameter amountUppercase: (query)  (optional)
     - parameter checkHaveIBeenPwned: (query)  (optional)
     - parameter checkStaticRules: (query)  (optional)
     - parameter checkZxcvbn: (query)  (optional)
     - parameter created: (query)  (optional)
     - parameter errorMessage: (query)  (optional)
     - parameter executionLogging: (query)  (optional)
     - parameter hibpAllowedCount: (query)  (optional)
     - parameter lastUpdated: (query)  (optional)
     - parameter lengthMin: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter passwordField: (query)  (optional)
     - parameter policyUuid: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter symbolCharset: (query)  (optional)
     - parameter zxcvbnScoreThreshold: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedPasswordPolicyList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesPasswordList(amountDigits: Int? = nil, amountLowercase: Int? = nil, amountSymbols: Int? = nil, amountUppercase: Int? = nil, checkHaveIBeenPwned: Bool? = nil, checkStaticRules: Bool? = nil, checkZxcvbn: Bool? = nil, created: Date? = nil, errorMessage: String? = nil, executionLogging: Bool? = nil, hibpAllowedCount: Int? = nil, lastUpdated: Date? = nil, lengthMin: Int? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, passwordField: String? = nil, policyUuid: UUID? = nil, search: String? = nil, symbolCharset: String? = nil, zxcvbnScoreThreshold: Int? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedPasswordPolicyList {
        return try await policiesPasswordListWithRequestBuilder(amountDigits: amountDigits, amountLowercase: amountLowercase, amountSymbols: amountSymbols, amountUppercase: amountUppercase, checkHaveIBeenPwned: checkHaveIBeenPwned, checkStaticRules: checkStaticRules, checkZxcvbn: checkZxcvbn, created: created, errorMessage: errorMessage, executionLogging: executionLogging, hibpAllowedCount: hibpAllowedCount, lastUpdated: lastUpdated, lengthMin: lengthMin, name: name, ordering: ordering, page: page, pageSize: pageSize, passwordField: passwordField, policyUuid: policyUuid, search: search, symbolCharset: symbolCharset, zxcvbnScoreThreshold: zxcvbnScoreThreshold, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /policies/password/
     - Password Policy Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter amountDigits: (query)  (optional)
     - parameter amountLowercase: (query)  (optional)
     - parameter amountSymbols: (query)  (optional)
     - parameter amountUppercase: (query)  (optional)
     - parameter checkHaveIBeenPwned: (query)  (optional)
     - parameter checkStaticRules: (query)  (optional)
     - parameter checkZxcvbn: (query)  (optional)
     - parameter created: (query)  (optional)
     - parameter errorMessage: (query)  (optional)
     - parameter executionLogging: (query)  (optional)
     - parameter hibpAllowedCount: (query)  (optional)
     - parameter lastUpdated: (query)  (optional)
     - parameter lengthMin: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter passwordField: (query)  (optional)
     - parameter policyUuid: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter symbolCharset: (query)  (optional)
     - parameter zxcvbnScoreThreshold: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedPasswordPolicyList> 
     */
    open class func policiesPasswordListWithRequestBuilder(amountDigits: Int? = nil, amountLowercase: Int? = nil, amountSymbols: Int? = nil, amountUppercase: Int? = nil, checkHaveIBeenPwned: Bool? = nil, checkStaticRules: Bool? = nil, checkZxcvbn: Bool? = nil, created: Date? = nil, errorMessage: String? = nil, executionLogging: Bool? = nil, hibpAllowedCount: Int? = nil, lastUpdated: Date? = nil, lengthMin: Int? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, passwordField: String? = nil, policyUuid: UUID? = nil, search: String? = nil, symbolCharset: String? = nil, zxcvbnScoreThreshold: Int? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedPasswordPolicyList> {
        let localVariablePath = "/policies/password/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "amount_digits": (wrappedValue: amountDigits?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "amount_lowercase": (wrappedValue: amountLowercase?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "amount_symbols": (wrappedValue: amountSymbols?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "amount_uppercase": (wrappedValue: amountUppercase?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "check_have_i_been_pwned": (wrappedValue: checkHaveIBeenPwned?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "check_static_rules": (wrappedValue: checkStaticRules?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "check_zxcvbn": (wrappedValue: checkZxcvbn?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "created": (wrappedValue: created?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "error_message": (wrappedValue: errorMessage?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "execution_logging": (wrappedValue: executionLogging?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "hibp_allowed_count": (wrappedValue: hibpAllowedCount?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "last_updated": (wrappedValue: lastUpdated?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "length_min": (wrappedValue: lengthMin?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "password_field": (wrappedValue: passwordField?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "policy_uuid": (wrappedValue: policyUuid?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "symbol_charset": (wrappedValue: symbolCharset?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "zxcvbn_score_threshold": (wrappedValue: zxcvbnScoreThreshold?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedPasswordPolicyList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Password Policy. 
     - parameter patchedPasswordPolicyRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PasswordPolicy
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesPasswordPartialUpdate(policyUuid: UUID, patchedPasswordPolicyRequest: PatchedPasswordPolicyRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PasswordPolicy {
        return try await policiesPasswordPartialUpdateWithRequestBuilder(policyUuid: policyUuid, patchedPasswordPolicyRequest: patchedPasswordPolicyRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /policies/password/{policy_uuid}/
     - Password Policy Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Password Policy. 
     - parameter patchedPasswordPolicyRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PasswordPolicy> 
     */
    open class func policiesPasswordPartialUpdateWithRequestBuilder(policyUuid: UUID, patchedPasswordPolicyRequest: PatchedPasswordPolicyRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PasswordPolicy> {
        var localVariablePath = "/policies/password/{policy_uuid}/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedPasswordPolicyRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PasswordPolicy>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Password Policy. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PasswordPolicy
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesPasswordRetrieve(policyUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PasswordPolicy {
        return try await policiesPasswordRetrieveWithRequestBuilder(policyUuid: policyUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /policies/password/{policy_uuid}/
     - Password Policy Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Password Policy. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PasswordPolicy> 
     */
    open class func policiesPasswordRetrieveWithRequestBuilder(policyUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PasswordPolicy> {
        var localVariablePath = "/policies/password/{policy_uuid}/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PasswordPolicy>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Password Policy. 
     - parameter passwordPolicyRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PasswordPolicy
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesPasswordUpdate(policyUuid: UUID, passwordPolicyRequest: PasswordPolicyRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PasswordPolicy {
        return try await policiesPasswordUpdateWithRequestBuilder(policyUuid: policyUuid, passwordPolicyRequest: passwordPolicyRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /policies/password/{policy_uuid}/
     - Password Policy Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Password Policy. 
     - parameter passwordPolicyRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PasswordPolicy> 
     */
    open class func policiesPasswordUpdateWithRequestBuilder(policyUuid: UUID, passwordPolicyRequest: PasswordPolicyRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PasswordPolicy> {
        var localVariablePath = "/policies/password/{policy_uuid}/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: passwordPolicyRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PasswordPolicy>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Password Policy. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesPasswordUsedByList(policyUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await policiesPasswordUsedByListWithRequestBuilder(policyUuid: policyUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /policies/password/{policy_uuid}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Password Policy. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func policiesPasswordUsedByListWithRequestBuilder(policyUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/policies/password/{policy_uuid}/used_by/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter reputationPolicyRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ReputationPolicy
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesReputationCreate(reputationPolicyRequest: ReputationPolicyRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> ReputationPolicy {
        return try await policiesReputationCreateWithRequestBuilder(reputationPolicyRequest: reputationPolicyRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /policies/reputation/
     - Reputation Policy Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter reputationPolicyRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ReputationPolicy> 
     */
    open class func policiesReputationCreateWithRequestBuilder(reputationPolicyRequest: ReputationPolicyRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<ReputationPolicy> {
        let localVariablePath = "/policies/reputation/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: reputationPolicyRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ReputationPolicy>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Reputation Policy. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesReputationDestroy(policyUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await policiesReputationDestroyWithRequestBuilder(policyUuid: policyUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /policies/reputation/{policy_uuid}/
     - Reputation Policy Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Reputation Policy. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func policiesReputationDestroyWithRequestBuilder(policyUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/policies/reputation/{policy_uuid}/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter checkIp: (query)  (optional)
     - parameter checkUsername: (query)  (optional)
     - parameter created: (query)  (optional)
     - parameter executionLogging: (query)  (optional)
     - parameter lastUpdated: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter policyUuid: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter threshold: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedReputationPolicyList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesReputationList(checkIp: Bool? = nil, checkUsername: Bool? = nil, created: Date? = nil, executionLogging: Bool? = nil, lastUpdated: Date? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, policyUuid: UUID? = nil, search: String? = nil, threshold: Int? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedReputationPolicyList {
        return try await policiesReputationListWithRequestBuilder(checkIp: checkIp, checkUsername: checkUsername, created: created, executionLogging: executionLogging, lastUpdated: lastUpdated, name: name, ordering: ordering, page: page, pageSize: pageSize, policyUuid: policyUuid, search: search, threshold: threshold, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /policies/reputation/
     - Reputation Policy Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter checkIp: (query)  (optional)
     - parameter checkUsername: (query)  (optional)
     - parameter created: (query)  (optional)
     - parameter executionLogging: (query)  (optional)
     - parameter lastUpdated: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter policyUuid: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter threshold: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedReputationPolicyList> 
     */
    open class func policiesReputationListWithRequestBuilder(checkIp: Bool? = nil, checkUsername: Bool? = nil, created: Date? = nil, executionLogging: Bool? = nil, lastUpdated: Date? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, policyUuid: UUID? = nil, search: String? = nil, threshold: Int? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedReputationPolicyList> {
        let localVariablePath = "/policies/reputation/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "check_ip": (wrappedValue: checkIp?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "check_username": (wrappedValue: checkUsername?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "created": (wrappedValue: created?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "execution_logging": (wrappedValue: executionLogging?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "last_updated": (wrappedValue: lastUpdated?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "policy_uuid": (wrappedValue: policyUuid?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "threshold": (wrappedValue: threshold?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedReputationPolicyList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Reputation Policy. 
     - parameter patchedReputationPolicyRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ReputationPolicy
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesReputationPartialUpdate(policyUuid: UUID, patchedReputationPolicyRequest: PatchedReputationPolicyRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> ReputationPolicy {
        return try await policiesReputationPartialUpdateWithRequestBuilder(policyUuid: policyUuid, patchedReputationPolicyRequest: patchedReputationPolicyRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /policies/reputation/{policy_uuid}/
     - Reputation Policy Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Reputation Policy. 
     - parameter patchedReputationPolicyRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ReputationPolicy> 
     */
    open class func policiesReputationPartialUpdateWithRequestBuilder(policyUuid: UUID, patchedReputationPolicyRequest: PatchedReputationPolicyRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<ReputationPolicy> {
        var localVariablePath = "/policies/reputation/{policy_uuid}/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedReputationPolicyRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ReputationPolicy>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Reputation Policy. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ReputationPolicy
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesReputationRetrieve(policyUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> ReputationPolicy {
        return try await policiesReputationRetrieveWithRequestBuilder(policyUuid: policyUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /policies/reputation/{policy_uuid}/
     - Reputation Policy Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Reputation Policy. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ReputationPolicy> 
     */
    open class func policiesReputationRetrieveWithRequestBuilder(policyUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<ReputationPolicy> {
        var localVariablePath = "/policies/reputation/{policy_uuid}/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ReputationPolicy>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter reputationUuid: (path) A UUID string identifying this Reputation Score. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesReputationScoresDestroy(reputationUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await policiesReputationScoresDestroyWithRequestBuilder(reputationUuid: reputationUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /policies/reputation/scores/{reputation_uuid}/
     - Reputation Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter reputationUuid: (path) A UUID string identifying this Reputation Score. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func policiesReputationScoresDestroyWithRequestBuilder(reputationUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/policies/reputation/scores/{reputation_uuid}/"
        let reputationUuidPreEscape = "\(APIHelper.mapValueToPathItem(reputationUuid))"
        let reputationUuidPostEscape = reputationUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{reputation_uuid}", with: reputationUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter identifier: (query)  (optional)
     - parameter identifierIn: (query) Multiple values may be separated by commas. (optional)
     - parameter ip: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter score: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedReputationList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesReputationScoresList(identifier: String? = nil, identifierIn: [String]? = nil, ip: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, score: Int? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedReputationList {
        return try await policiesReputationScoresListWithRequestBuilder(identifier: identifier, identifierIn: identifierIn, ip: ip, ordering: ordering, page: page, pageSize: pageSize, score: score, search: search, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /policies/reputation/scores/
     - Reputation Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter identifier: (query)  (optional)
     - parameter identifierIn: (query) Multiple values may be separated by commas. (optional)
     - parameter ip: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter score: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedReputationList> 
     */
    open class func policiesReputationScoresListWithRequestBuilder(identifier: String? = nil, identifierIn: [String]? = nil, ip: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, score: Int? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedReputationList> {
        let localVariablePath = "/policies/reputation/scores/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "identifier": (wrappedValue: identifier?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "identifier_in": (wrappedValue: identifierIn?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "ip": (wrappedValue: ip?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "score": (wrappedValue: score?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedReputationList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter reputationUuid: (path) A UUID string identifying this Reputation Score. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Reputation
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesReputationScoresRetrieve(reputationUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> Reputation {
        return try await policiesReputationScoresRetrieveWithRequestBuilder(reputationUuid: reputationUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /policies/reputation/scores/{reputation_uuid}/
     - Reputation Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter reputationUuid: (path) A UUID string identifying this Reputation Score. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Reputation> 
     */
    open class func policiesReputationScoresRetrieveWithRequestBuilder(reputationUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Reputation> {
        var localVariablePath = "/policies/reputation/scores/{reputation_uuid}/"
        let reputationUuidPreEscape = "\(APIHelper.mapValueToPathItem(reputationUuid))"
        let reputationUuidPostEscape = reputationUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{reputation_uuid}", with: reputationUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Reputation>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter reputationUuid: (path) A UUID string identifying this Reputation Score. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesReputationScoresUsedByList(reputationUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await policiesReputationScoresUsedByListWithRequestBuilder(reputationUuid: reputationUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /policies/reputation/scores/{reputation_uuid}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter reputationUuid: (path) A UUID string identifying this Reputation Score. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func policiesReputationScoresUsedByListWithRequestBuilder(reputationUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/policies/reputation/scores/{reputation_uuid}/used_by/"
        let reputationUuidPreEscape = "\(APIHelper.mapValueToPathItem(reputationUuid))"
        let reputationUuidPostEscape = reputationUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{reputation_uuid}", with: reputationUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Reputation Policy. 
     - parameter reputationPolicyRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ReputationPolicy
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesReputationUpdate(policyUuid: UUID, reputationPolicyRequest: ReputationPolicyRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> ReputationPolicy {
        return try await policiesReputationUpdateWithRequestBuilder(policyUuid: policyUuid, reputationPolicyRequest: reputationPolicyRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /policies/reputation/{policy_uuid}/
     - Reputation Policy Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Reputation Policy. 
     - parameter reputationPolicyRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ReputationPolicy> 
     */
    open class func policiesReputationUpdateWithRequestBuilder(policyUuid: UUID, reputationPolicyRequest: ReputationPolicyRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<ReputationPolicy> {
        var localVariablePath = "/policies/reputation/{policy_uuid}/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: reputationPolicyRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ReputationPolicy>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Reputation Policy. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesReputationUsedByList(policyUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await policiesReputationUsedByListWithRequestBuilder(policyUuid: policyUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /policies/reputation/{policy_uuid}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Reputation Policy. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func policiesReputationUsedByListWithRequestBuilder(policyUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/policies/reputation/{policy_uuid}/used_by/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter uniquePasswordPolicyRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: UniquePasswordPolicy
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesUniquePasswordCreate(uniquePasswordPolicyRequest: UniquePasswordPolicyRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> UniquePasswordPolicy {
        return try await policiesUniquePasswordCreateWithRequestBuilder(uniquePasswordPolicyRequest: uniquePasswordPolicyRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /policies/unique_password/
     - Password Uniqueness Policy Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter uniquePasswordPolicyRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<UniquePasswordPolicy> 
     */
    open class func policiesUniquePasswordCreateWithRequestBuilder(uniquePasswordPolicyRequest: UniquePasswordPolicyRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<UniquePasswordPolicy> {
        let localVariablePath = "/policies/unique_password/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: uniquePasswordPolicyRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UniquePasswordPolicy>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Password Uniqueness Policy. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesUniquePasswordDestroy(policyUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await policiesUniquePasswordDestroyWithRequestBuilder(policyUuid: policyUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /policies/unique_password/{policy_uuid}/
     - Password Uniqueness Policy Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Password Uniqueness Policy. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func policiesUniquePasswordDestroyWithRequestBuilder(policyUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/policies/unique_password/{policy_uuid}/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter created: (query)  (optional)
     - parameter executionLogging: (query)  (optional)
     - parameter lastUpdated: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter numHistoricalPasswords: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter passwordField: (query)  (optional)
     - parameter policyUuid: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedUniquePasswordPolicyList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesUniquePasswordList(created: Date? = nil, executionLogging: Bool? = nil, lastUpdated: Date? = nil, name: String? = nil, numHistoricalPasswords: Int? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, passwordField: String? = nil, policyUuid: UUID? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedUniquePasswordPolicyList {
        return try await policiesUniquePasswordListWithRequestBuilder(created: created, executionLogging: executionLogging, lastUpdated: lastUpdated, name: name, numHistoricalPasswords: numHistoricalPasswords, ordering: ordering, page: page, pageSize: pageSize, passwordField: passwordField, policyUuid: policyUuid, search: search, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /policies/unique_password/
     - Password Uniqueness Policy Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter created: (query)  (optional)
     - parameter executionLogging: (query)  (optional)
     - parameter lastUpdated: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter numHistoricalPasswords: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter passwordField: (query)  (optional)
     - parameter policyUuid: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedUniquePasswordPolicyList> 
     */
    open class func policiesUniquePasswordListWithRequestBuilder(created: Date? = nil, executionLogging: Bool? = nil, lastUpdated: Date? = nil, name: String? = nil, numHistoricalPasswords: Int? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, passwordField: String? = nil, policyUuid: UUID? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedUniquePasswordPolicyList> {
        let localVariablePath = "/policies/unique_password/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "created": (wrappedValue: created?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "execution_logging": (wrappedValue: executionLogging?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "last_updated": (wrappedValue: lastUpdated?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "num_historical_passwords": (wrappedValue: numHistoricalPasswords?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "password_field": (wrappedValue: passwordField?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "policy_uuid": (wrappedValue: policyUuid?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedUniquePasswordPolicyList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Password Uniqueness Policy. 
     - parameter patchedUniquePasswordPolicyRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: UniquePasswordPolicy
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesUniquePasswordPartialUpdate(policyUuid: UUID, patchedUniquePasswordPolicyRequest: PatchedUniquePasswordPolicyRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> UniquePasswordPolicy {
        return try await policiesUniquePasswordPartialUpdateWithRequestBuilder(policyUuid: policyUuid, patchedUniquePasswordPolicyRequest: patchedUniquePasswordPolicyRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /policies/unique_password/{policy_uuid}/
     - Password Uniqueness Policy Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Password Uniqueness Policy. 
     - parameter patchedUniquePasswordPolicyRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<UniquePasswordPolicy> 
     */
    open class func policiesUniquePasswordPartialUpdateWithRequestBuilder(policyUuid: UUID, patchedUniquePasswordPolicyRequest: PatchedUniquePasswordPolicyRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<UniquePasswordPolicy> {
        var localVariablePath = "/policies/unique_password/{policy_uuid}/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedUniquePasswordPolicyRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UniquePasswordPolicy>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Password Uniqueness Policy. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: UniquePasswordPolicy
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesUniquePasswordRetrieve(policyUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> UniquePasswordPolicy {
        return try await policiesUniquePasswordRetrieveWithRequestBuilder(policyUuid: policyUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /policies/unique_password/{policy_uuid}/
     - Password Uniqueness Policy Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Password Uniqueness Policy. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<UniquePasswordPolicy> 
     */
    open class func policiesUniquePasswordRetrieveWithRequestBuilder(policyUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<UniquePasswordPolicy> {
        var localVariablePath = "/policies/unique_password/{policy_uuid}/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UniquePasswordPolicy>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Password Uniqueness Policy. 
     - parameter uniquePasswordPolicyRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: UniquePasswordPolicy
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesUniquePasswordUpdate(policyUuid: UUID, uniquePasswordPolicyRequest: UniquePasswordPolicyRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> UniquePasswordPolicy {
        return try await policiesUniquePasswordUpdateWithRequestBuilder(policyUuid: policyUuid, uniquePasswordPolicyRequest: uniquePasswordPolicyRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /policies/unique_password/{policy_uuid}/
     - Password Uniqueness Policy Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Password Uniqueness Policy. 
     - parameter uniquePasswordPolicyRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<UniquePasswordPolicy> 
     */
    open class func policiesUniquePasswordUpdateWithRequestBuilder(policyUuid: UUID, uniquePasswordPolicyRequest: UniquePasswordPolicyRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<UniquePasswordPolicy> {
        var localVariablePath = "/policies/unique_password/{policy_uuid}/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: uniquePasswordPolicyRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UniquePasswordPolicy>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Password Uniqueness Policy. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func policiesUniquePasswordUsedByList(policyUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await policiesUniquePasswordUsedByListWithRequestBuilder(policyUuid: policyUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /policies/unique_password/{policy_uuid}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Password Uniqueness Policy. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func policiesUniquePasswordUsedByListWithRequestBuilder(policyUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/policies/unique_password/{policy_uuid}/used_by/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }
}
