//
// SsfAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class SsfAPI {

    /**
     * enum for parameter deliveryMethod
     */
    public enum DeliveryMethod_ssfStreamsList: String, Sendable, CaseIterable {
        case httpsSlashSlashSchemasPeriodOpenidPeriodNetSlashSeceventSlashRiscSlashDeliveryMethodSlashPoll = "https://schemas.openid.net/secevent/risc/delivery-method/poll"
        case httpsSlashSlashSchemasPeriodOpenidPeriodNetSlashSeceventSlashRiscSlashDeliveryMethodSlashPush = "https://schemas.openid.net/secevent/risc/delivery-method/push"
    }

    /**

     - parameter deliveryMethod: (query)  (optional)
     - parameter endpointUrl: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter provider: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedSSFStreamList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func ssfStreamsList(deliveryMethod: DeliveryMethod_ssfStreamsList? = nil, endpointUrl: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, provider: Int? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedSSFStreamList {
        return try await ssfStreamsListWithRequestBuilder(deliveryMethod: deliveryMethod, endpointUrl: endpointUrl, ordering: ordering, page: page, pageSize: pageSize, provider: provider, search: search, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /ssf/streams/
     - SSFStream Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter deliveryMethod: (query)  (optional)
     - parameter endpointUrl: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter provider: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedSSFStreamList> 
     */
    open class func ssfStreamsListWithRequestBuilder(deliveryMethod: DeliveryMethod_ssfStreamsList? = nil, endpointUrl: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, provider: Int? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedSSFStreamList> {
        let localVariablePath = "/ssf/streams/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "delivery_method": (wrappedValue: deliveryMethod?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "endpoint_url": (wrappedValue: endpointUrl?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "provider": (wrappedValue: provider?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedSSFStreamList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter uuid: (path) A UUID string identifying this SSF Stream. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SSFStream
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func ssfStreamsRetrieve(uuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> SSFStream {
        return try await ssfStreamsRetrieveWithRequestBuilder(uuid: uuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /ssf/streams/{uuid}/
     - SSFStream Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter uuid: (path) A UUID string identifying this SSF Stream. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SSFStream> 
     */
    open class func ssfStreamsRetrieveWithRequestBuilder(uuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<SSFStream> {
        var localVariablePath = "/ssf/streams/{uuid}/"
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SSFStream>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }
}
