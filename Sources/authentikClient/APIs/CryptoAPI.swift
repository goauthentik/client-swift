//
// CryptoAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class CryptoAPI {

    /**

     - parameter certificateKeyPairRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: CertificateKeyPair
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func cryptoCertificatekeypairsCreate(certificateKeyPairRequest: CertificateKeyPairRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> CertificateKeyPair {
        return try await cryptoCertificatekeypairsCreateWithRequestBuilder(certificateKeyPairRequest: certificateKeyPairRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /crypto/certificatekeypairs/
     - CertificateKeyPair Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter certificateKeyPairRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<CertificateKeyPair> 
     */
    open class func cryptoCertificatekeypairsCreateWithRequestBuilder(certificateKeyPairRequest: CertificateKeyPairRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<CertificateKeyPair> {
        let localVariablePath = "/crypto/certificatekeypairs/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: certificateKeyPairRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CertificateKeyPair>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter kpUuid: (path) A UUID string identifying this Certificate-Key Pair. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func cryptoCertificatekeypairsDestroy(kpUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await cryptoCertificatekeypairsDestroyWithRequestBuilder(kpUuid: kpUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /crypto/certificatekeypairs/{kp_uuid}/
     - CertificateKeyPair Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter kpUuid: (path) A UUID string identifying this Certificate-Key Pair. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func cryptoCertificatekeypairsDestroyWithRequestBuilder(kpUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/crypto/certificatekeypairs/{kp_uuid}/"
        let kpUuidPreEscape = "\(APIHelper.mapValueToPathItem(kpUuid))"
        let kpUuidPostEscape = kpUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{kp_uuid}", with: kpUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter certificateGenerationRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: CertificateKeyPair
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func cryptoCertificatekeypairsGenerateCreate(certificateGenerationRequest: CertificateGenerationRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> CertificateKeyPair {
        return try await cryptoCertificatekeypairsGenerateCreateWithRequestBuilder(certificateGenerationRequest: certificateGenerationRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /crypto/certificatekeypairs/generate/
     - Generate a new, self-signed certificate-key pair
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter certificateGenerationRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<CertificateKeyPair> 
     */
    open class func cryptoCertificatekeypairsGenerateCreateWithRequestBuilder(certificateGenerationRequest: CertificateGenerationRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<CertificateKeyPair> {
        let localVariablePath = "/crypto/certificatekeypairs/generate/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: certificateGenerationRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CertificateKeyPair>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter hasKey: (query) Only return certificate-key pairs with keys (optional)
     - parameter includeDetails: (query)  (optional, default to true)
     - parameter managed: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedCertificateKeyPairList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func cryptoCertificatekeypairsList(hasKey: Bool? = nil, includeDetails: Bool? = nil, managed: String? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedCertificateKeyPairList {
        return try await cryptoCertificatekeypairsListWithRequestBuilder(hasKey: hasKey, includeDetails: includeDetails, managed: managed, name: name, ordering: ordering, page: page, pageSize: pageSize, search: search, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /crypto/certificatekeypairs/
     - CertificateKeyPair Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter hasKey: (query) Only return certificate-key pairs with keys (optional)
     - parameter includeDetails: (query)  (optional, default to true)
     - parameter managed: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedCertificateKeyPairList> 
     */
    open class func cryptoCertificatekeypairsListWithRequestBuilder(hasKey: Bool? = nil, includeDetails: Bool? = nil, managed: String? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedCertificateKeyPairList> {
        let localVariablePath = "/crypto/certificatekeypairs/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "has_key": (wrappedValue: hasKey?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "include_details": (wrappedValue: includeDetails?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "managed": (wrappedValue: managed?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedCertificateKeyPairList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter kpUuid: (path) A UUID string identifying this Certificate-Key Pair. 
     - parameter patchedCertificateKeyPairRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: CertificateKeyPair
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func cryptoCertificatekeypairsPartialUpdate(kpUuid: UUID, patchedCertificateKeyPairRequest: PatchedCertificateKeyPairRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> CertificateKeyPair {
        return try await cryptoCertificatekeypairsPartialUpdateWithRequestBuilder(kpUuid: kpUuid, patchedCertificateKeyPairRequest: patchedCertificateKeyPairRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /crypto/certificatekeypairs/{kp_uuid}/
     - CertificateKeyPair Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter kpUuid: (path) A UUID string identifying this Certificate-Key Pair. 
     - parameter patchedCertificateKeyPairRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<CertificateKeyPair> 
     */
    open class func cryptoCertificatekeypairsPartialUpdateWithRequestBuilder(kpUuid: UUID, patchedCertificateKeyPairRequest: PatchedCertificateKeyPairRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<CertificateKeyPair> {
        var localVariablePath = "/crypto/certificatekeypairs/{kp_uuid}/"
        let kpUuidPreEscape = "\(APIHelper.mapValueToPathItem(kpUuid))"
        let kpUuidPostEscape = kpUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{kp_uuid}", with: kpUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedCertificateKeyPairRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CertificateKeyPair>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter kpUuid: (path) A UUID string identifying this Certificate-Key Pair. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: CertificateKeyPair
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func cryptoCertificatekeypairsRetrieve(kpUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> CertificateKeyPair {
        return try await cryptoCertificatekeypairsRetrieveWithRequestBuilder(kpUuid: kpUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /crypto/certificatekeypairs/{kp_uuid}/
     - CertificateKeyPair Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter kpUuid: (path) A UUID string identifying this Certificate-Key Pair. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<CertificateKeyPair> 
     */
    open class func cryptoCertificatekeypairsRetrieveWithRequestBuilder(kpUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<CertificateKeyPair> {
        var localVariablePath = "/crypto/certificatekeypairs/{kp_uuid}/"
        let kpUuidPreEscape = "\(APIHelper.mapValueToPathItem(kpUuid))"
        let kpUuidPostEscape = kpUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{kp_uuid}", with: kpUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CertificateKeyPair>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter kpUuid: (path) A UUID string identifying this Certificate-Key Pair. 
     - parameter certificateKeyPairRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: CertificateKeyPair
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func cryptoCertificatekeypairsUpdate(kpUuid: UUID, certificateKeyPairRequest: CertificateKeyPairRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> CertificateKeyPair {
        return try await cryptoCertificatekeypairsUpdateWithRequestBuilder(kpUuid: kpUuid, certificateKeyPairRequest: certificateKeyPairRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /crypto/certificatekeypairs/{kp_uuid}/
     - CertificateKeyPair Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter kpUuid: (path) A UUID string identifying this Certificate-Key Pair. 
     - parameter certificateKeyPairRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<CertificateKeyPair> 
     */
    open class func cryptoCertificatekeypairsUpdateWithRequestBuilder(kpUuid: UUID, certificateKeyPairRequest: CertificateKeyPairRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<CertificateKeyPair> {
        var localVariablePath = "/crypto/certificatekeypairs/{kp_uuid}/"
        let kpUuidPreEscape = "\(APIHelper.mapValueToPathItem(kpUuid))"
        let kpUuidPostEscape = kpUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{kp_uuid}", with: kpUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: certificateKeyPairRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CertificateKeyPair>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter kpUuid: (path) A UUID string identifying this Certificate-Key Pair. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func cryptoCertificatekeypairsUsedByList(kpUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await cryptoCertificatekeypairsUsedByListWithRequestBuilder(kpUuid: kpUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /crypto/certificatekeypairs/{kp_uuid}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter kpUuid: (path) A UUID string identifying this Certificate-Key Pair. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func cryptoCertificatekeypairsUsedByListWithRequestBuilder(kpUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/crypto/certificatekeypairs/{kp_uuid}/used_by/"
        let kpUuidPreEscape = "\(APIHelper.mapValueToPathItem(kpUuid))"
        let kpUuidPostEscape = kpUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{kp_uuid}", with: kpUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter kpUuid: (path) A UUID string identifying this Certificate-Key Pair. 
     - parameter download: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: CertificateData
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func cryptoCertificatekeypairsViewCertificateRetrieve(kpUuid: UUID, download: Bool? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> CertificateData {
        return try await cryptoCertificatekeypairsViewCertificateRetrieveWithRequestBuilder(kpUuid: kpUuid, download: download, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /crypto/certificatekeypairs/{kp_uuid}/view_certificate/
     - Return certificate-key pairs certificate and log access
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter kpUuid: (path) A UUID string identifying this Certificate-Key Pair. 
     - parameter download: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<CertificateData> 
     */
    open class func cryptoCertificatekeypairsViewCertificateRetrieveWithRequestBuilder(kpUuid: UUID, download: Bool? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<CertificateData> {
        var localVariablePath = "/crypto/certificatekeypairs/{kp_uuid}/view_certificate/"
        let kpUuidPreEscape = "\(APIHelper.mapValueToPathItem(kpUuid))"
        let kpUuidPostEscape = kpUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{kp_uuid}", with: kpUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "download": (wrappedValue: download?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CertificateData>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter kpUuid: (path) A UUID string identifying this Certificate-Key Pair. 
     - parameter download: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: CertificateData
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func cryptoCertificatekeypairsViewPrivateKeyRetrieve(kpUuid: UUID, download: Bool? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> CertificateData {
        return try await cryptoCertificatekeypairsViewPrivateKeyRetrieveWithRequestBuilder(kpUuid: kpUuid, download: download, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /crypto/certificatekeypairs/{kp_uuid}/view_private_key/
     - Return certificate-key pairs private key and log access
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter kpUuid: (path) A UUID string identifying this Certificate-Key Pair. 
     - parameter download: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<CertificateData> 
     */
    open class func cryptoCertificatekeypairsViewPrivateKeyRetrieveWithRequestBuilder(kpUuid: UUID, download: Bool? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<CertificateData> {
        var localVariablePath = "/crypto/certificatekeypairs/{kp_uuid}/view_private_key/"
        let kpUuidPreEscape = "\(APIHelper.mapValueToPathItem(kpUuid))"
        let kpUuidPostEscape = kpUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{kp_uuid}", with: kpUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "download": (wrappedValue: download?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CertificateData>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }
}
