//
// EnterpriseAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class EnterpriseAPI {

    /**

     - parameter licenseRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: License
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func enterpriseLicenseCreate(licenseRequest: LicenseRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> License {
        return try await enterpriseLicenseCreateWithRequestBuilder(licenseRequest: licenseRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /enterprise/license/
     - License Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter licenseRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<License> 
     */
    open class func enterpriseLicenseCreateWithRequestBuilder(licenseRequest: LicenseRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<License> {
        let localVariablePath = "/enterprise/license/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: licenseRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<License>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter licenseUuid: (path) A UUID string identifying this License. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func enterpriseLicenseDestroy(licenseUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await enterpriseLicenseDestroyWithRequestBuilder(licenseUuid: licenseUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /enterprise/license/{license_uuid}/
     - License Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter licenseUuid: (path) A UUID string identifying this License. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func enterpriseLicenseDestroyWithRequestBuilder(licenseUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/enterprise/license/{license_uuid}/"
        let licenseUuidPreEscape = "\(APIHelper.mapValueToPathItem(licenseUuid))"
        let licenseUuidPostEscape = licenseUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{license_uuid}", with: licenseUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter apiConfiguration: The configuration for the http request.
     - returns: LicenseForecast
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func enterpriseLicenseForecastRetrieve(apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> LicenseForecast {
        return try await enterpriseLicenseForecastRetrieveWithRequestBuilder(apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /enterprise/license/forecast/
     - Forecast how many users will be required in a year
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<LicenseForecast> 
     */
    open class func enterpriseLicenseForecastRetrieveWithRequestBuilder(apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<LicenseForecast> {
        let localVariablePath = "/enterprise/license/forecast/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LicenseForecast>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter apiConfiguration: The configuration for the http request.
     - returns: InstallID
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func enterpriseLicenseInstallIdRetrieve(apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> InstallID {
        return try await enterpriseLicenseInstallIdRetrieveWithRequestBuilder(apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /enterprise/license/install_id/
     - Get install_id
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<InstallID> 
     */
    open class func enterpriseLicenseInstallIdRetrieveWithRequestBuilder(apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<InstallID> {
        let localVariablePath = "/enterprise/license/install_id/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InstallID>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PaginatedLicenseList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func enterpriseLicenseList(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> PaginatedLicenseList {
        return try await enterpriseLicenseListWithRequestBuilder(name: name, ordering: ordering, page: page, pageSize: pageSize, search: search, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /enterprise/license/
     - License Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PaginatedLicenseList> 
     */
    open class func enterpriseLicenseListWithRequestBuilder(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<PaginatedLicenseList> {
        let localVariablePath = "/enterprise/license/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ordering": (wrappedValue: ordering?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_size": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedLicenseList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter licenseUuid: (path) A UUID string identifying this License. 
     - parameter patchedLicenseRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: License
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func enterpriseLicensePartialUpdate(licenseUuid: UUID, patchedLicenseRequest: PatchedLicenseRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> License {
        return try await enterpriseLicensePartialUpdateWithRequestBuilder(licenseUuid: licenseUuid, patchedLicenseRequest: patchedLicenseRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /enterprise/license/{license_uuid}/
     - License Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter licenseUuid: (path) A UUID string identifying this License. 
     - parameter patchedLicenseRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<License> 
     */
    open class func enterpriseLicensePartialUpdateWithRequestBuilder(licenseUuid: UUID, patchedLicenseRequest: PatchedLicenseRequest? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<License> {
        var localVariablePath = "/enterprise/license/{license_uuid}/"
        let licenseUuidPreEscape = "\(APIHelper.mapValueToPathItem(licenseUuid))"
        let licenseUuidPostEscape = licenseUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{license_uuid}", with: licenseUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedLicenseRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<License>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter licenseUuid: (path) A UUID string identifying this License. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: License
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func enterpriseLicenseRetrieve(licenseUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> License {
        return try await enterpriseLicenseRetrieveWithRequestBuilder(licenseUuid: licenseUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /enterprise/license/{license_uuid}/
     - License Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter licenseUuid: (path) A UUID string identifying this License. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<License> 
     */
    open class func enterpriseLicenseRetrieveWithRequestBuilder(licenseUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<License> {
        var localVariablePath = "/enterprise/license/{license_uuid}/"
        let licenseUuidPreEscape = "\(APIHelper.mapValueToPathItem(licenseUuid))"
        let licenseUuidPostEscape = licenseUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{license_uuid}", with: licenseUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<License>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter cached: (query)  (optional, default to true)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: LicenseSummary
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func enterpriseLicenseSummaryRetrieve(cached: Bool? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> LicenseSummary {
        return try await enterpriseLicenseSummaryRetrieveWithRequestBuilder(cached: cached, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /enterprise/license/summary/
     - Get the total license status
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter cached: (query)  (optional, default to true)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<LicenseSummary> 
     */
    open class func enterpriseLicenseSummaryRetrieveWithRequestBuilder(cached: Bool? = nil, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<LicenseSummary> {
        let localVariablePath = "/enterprise/license/summary/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "cached": (wrappedValue: cached?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LicenseSummary>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter licenseUuid: (path) A UUID string identifying this License. 
     - parameter licenseRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: License
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func enterpriseLicenseUpdate(licenseUuid: UUID, licenseRequest: LicenseRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> License {
        return try await enterpriseLicenseUpdateWithRequestBuilder(licenseUuid: licenseUuid, licenseRequest: licenseRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PUT /enterprise/license/{license_uuid}/
     - License Viewset
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter licenseUuid: (path) A UUID string identifying this License. 
     - parameter licenseRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<License> 
     */
    open class func enterpriseLicenseUpdateWithRequestBuilder(licenseUuid: UUID, licenseRequest: LicenseRequest, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<License> {
        var localVariablePath = "/enterprise/license/{license_uuid}/"
        let licenseUuidPreEscape = "\(APIHelper.mapValueToPathItem(licenseUuid))"
        let licenseUuidPostEscape = licenseUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{license_uuid}", with: licenseUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: licenseRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<License>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter licenseUuid: (path) A UUID string identifying this License. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [UsedBy]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func enterpriseLicenseUsedByList(licenseUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) async throws(ErrorResponse) -> [UsedBy] {
        return try await enterpriseLicenseUsedByListWithRequestBuilder(licenseUuid: licenseUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /enterprise/license/{license_uuid}/used_by/
     - Get a list of all objects that use this object
     - Bearer Token:
       - type: http
       - name: authentik
     - parameter licenseUuid: (path) A UUID string identifying this License. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func enterpriseLicenseUsedByListWithRequestBuilder(licenseUuid: UUID, apiConfiguration: authentikClientAPIConfiguration = authentikClientAPIConfiguration.shared) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/enterprise/license/{license_uuid}/used_by/"
        let licenseUuidPreEscape = "\(APIHelper.mapValueToPathItem(licenseUuid))"
        let licenseUuidPostEscape = licenseUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{license_uuid}", with: licenseUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }
}
