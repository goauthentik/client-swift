//
// GroupMemberRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** Stripped down user serializer to show relevant users for groups */
public struct GroupMemberRequest: Sendable, Codable, ParameterConvertible, Hashable {

    public static let usernameRule = StringRule(minLength: 1, maxLength: 150, pattern: "/^[\\w.@+-]+$/")
    public static let nameRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public static let emailRule = StringRule(minLength: nil, maxLength: 254, pattern: nil)
    /** Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. */
    public var username: String
    /** User's display name. */
    public var name: String
    /** Designates whether this user should be treated as active. Unselect this instead of deleting accounts. */
    public var isActive: Bool?
    public var lastLogin: Date?
    public var email: String?
    public var attributes: [String: JSONValue]?

    public init(username: String, name: String, isActive: Bool? = nil, lastLogin: Date? = nil, email: String? = nil, attributes: [String: JSONValue]? = nil) {
        self.username = username
        self.name = name
        self.isActive = isActive
        self.lastLogin = lastLogin
        self.email = email
        self.attributes = attributes
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case username
        case name
        case isActive = "is_active"
        case lastLogin = "last_login"
        case email
        case attributes
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(username, forKey: .username)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(isActive, forKey: .isActive)
        try container.encodeIfPresent(lastLogin, forKey: .lastLogin)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(attributes, forKey: .attributes)
    }
}

