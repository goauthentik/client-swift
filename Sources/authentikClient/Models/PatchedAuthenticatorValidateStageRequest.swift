//
// PatchedAuthenticatorValidateStageRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** AuthenticatorValidateStage Serializer */
public struct PatchedAuthenticatorValidateStageRequest: Sendable, Codable, ParameterConvertible, Hashable {

    public static let nameRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public static let lastAuthThresholdRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public var name: String?
    public var flowSet: [FlowSetRequest]?
    public var notConfiguredAction: NotConfiguredActionEnum?
    /** Device classes which can be used to authenticate */
    public var deviceClasses: [DeviceClassesEnum]?
    /** Stages used to configure Authenticator when user doesn't have any compatible devices. After this configuration Stage passes, the user is not prompted again. */
    public var configurationStages: [UUID]?
    /** If any of the user's device has been used within this threshold, this stage will be skipped */
    public var lastAuthThreshold: String?
    /** Enforce user verification for WebAuthn devices. */
    public var webauthnUserVerification: UserVerificationEnum?
    public var webauthnAllowedDeviceTypes: [UUID]?

    public init(name: String? = nil, flowSet: [FlowSetRequest]? = nil, notConfiguredAction: NotConfiguredActionEnum? = nil, deviceClasses: [DeviceClassesEnum]? = nil, configurationStages: [UUID]? = nil, lastAuthThreshold: String? = nil, webauthnUserVerification: UserVerificationEnum? = nil, webauthnAllowedDeviceTypes: [UUID]? = nil) {
        self.name = name
        self.flowSet = flowSet
        self.notConfiguredAction = notConfiguredAction
        self.deviceClasses = deviceClasses
        self.configurationStages = configurationStages
        self.lastAuthThreshold = lastAuthThreshold
        self.webauthnUserVerification = webauthnUserVerification
        self.webauthnAllowedDeviceTypes = webauthnAllowedDeviceTypes
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case flowSet = "flow_set"
        case notConfiguredAction = "not_configured_action"
        case deviceClasses = "device_classes"
        case configurationStages = "configuration_stages"
        case lastAuthThreshold = "last_auth_threshold"
        case webauthnUserVerification = "webauthn_user_verification"
        case webauthnAllowedDeviceTypes = "webauthn_allowed_device_types"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(flowSet, forKey: .flowSet)
        try container.encodeIfPresent(notConfiguredAction, forKey: .notConfiguredAction)
        try container.encodeIfPresent(deviceClasses, forKey: .deviceClasses)
        try container.encodeIfPresent(configurationStages, forKey: .configurationStages)
        try container.encodeIfPresent(lastAuthThreshold, forKey: .lastAuthThreshold)
        try container.encodeIfPresent(webauthnUserVerification, forKey: .webauthnUserVerification)
        try container.encodeIfPresent(webauthnAllowedDeviceTypes, forKey: .webauthnAllowedDeviceTypes)
    }
}

