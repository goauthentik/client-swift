//
// SystemInfo.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** Get system information. */
public struct SystemInfo: Sendable, Codable, ParameterConvertible, Hashable {

    /** Get HTTP Request headers */
    public var httpHeaders: [String: String]
    /** Get HTTP host */
    public var httpHost: String
    /** Get HTTP Secure flag */
    public var httpIsSecure: Bool
    public var runtime: SystemInfoRuntime
    /** Currently active brand */
    public var brand: String
    /** Current server time */
    public var serverTime: Date
    /** Whether the embedded outpost is disabled */
    public var embeddedOutpostDisabled: Bool
    /** Get the FQDN configured on the embedded outpost */
    public var embeddedOutpostHost: String

    public init(httpHeaders: [String: String], httpHost: String, httpIsSecure: Bool, runtime: SystemInfoRuntime, brand: String, serverTime: Date, embeddedOutpostDisabled: Bool, embeddedOutpostHost: String) {
        self.httpHeaders = httpHeaders
        self.httpHost = httpHost
        self.httpIsSecure = httpIsSecure
        self.runtime = runtime
        self.brand = brand
        self.serverTime = serverTime
        self.embeddedOutpostDisabled = embeddedOutpostDisabled
        self.embeddedOutpostHost = embeddedOutpostHost
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case httpHeaders = "http_headers"
        case httpHost = "http_host"
        case httpIsSecure = "http_is_secure"
        case runtime
        case brand
        case serverTime = "server_time"
        case embeddedOutpostDisabled = "embedded_outpost_disabled"
        case embeddedOutpostHost = "embedded_outpost_host"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(httpHeaders, forKey: .httpHeaders)
        try container.encode(httpHost, forKey: .httpHost)
        try container.encode(httpIsSecure, forKey: .httpIsSecure)
        try container.encode(runtime, forKey: .runtime)
        try container.encode(brand, forKey: .brand)
        try container.encode(serverTime, forKey: .serverTime)
        try container.encode(embeddedOutpostDisabled, forKey: .embeddedOutpostDisabled)
        try container.encode(embeddedOutpostHost, forKey: .embeddedOutpostHost)
    }
}

