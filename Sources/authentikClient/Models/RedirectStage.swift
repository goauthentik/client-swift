//
// RedirectStage.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** RedirectStage Serializer */
public struct RedirectStage: Sendable, Codable, ParameterConvertible, Hashable {

    public var pk: UUID
    public var name: String
    /** Get object type so that we know how to edit the object */
    public var component: String
    /** Return object's verbose_name */
    public var verboseName: String
    /** Return object's plural verbose_name */
    public var verboseNamePlural: String
    /** Return internal model name */
    public var metaModelName: String
    public var flowSet: [FlowSet]?
    public var keepContext: Bool?
    public var mode: RedirectStageModeEnum
    public var targetStatic: String?
    public var targetFlow: UUID?

    public init(pk: UUID, name: String, component: String, verboseName: String, verboseNamePlural: String, metaModelName: String, flowSet: [FlowSet]? = nil, keepContext: Bool? = nil, mode: RedirectStageModeEnum, targetStatic: String? = nil, targetFlow: UUID? = nil) {
        self.pk = pk
        self.name = name
        self.component = component
        self.verboseName = verboseName
        self.verboseNamePlural = verboseNamePlural
        self.metaModelName = metaModelName
        self.flowSet = flowSet
        self.keepContext = keepContext
        self.mode = mode
        self.targetStatic = targetStatic
        self.targetFlow = targetFlow
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pk
        case name
        case component
        case verboseName = "verbose_name"
        case verboseNamePlural = "verbose_name_plural"
        case metaModelName = "meta_model_name"
        case flowSet = "flow_set"
        case keepContext = "keep_context"
        case mode
        case targetStatic = "target_static"
        case targetFlow = "target_flow"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pk, forKey: .pk)
        try container.encode(name, forKey: .name)
        try container.encode(component, forKey: .component)
        try container.encode(verboseName, forKey: .verboseName)
        try container.encode(verboseNamePlural, forKey: .verboseNamePlural)
        try container.encode(metaModelName, forKey: .metaModelName)
        try container.encodeIfPresent(flowSet, forKey: .flowSet)
        try container.encodeIfPresent(keepContext, forKey: .keepContext)
        try container.encode(mode, forKey: .mode)
        try container.encodeIfPresent(targetStatic, forKey: .targetStatic)
        try container.encodeIfPresent(targetFlow, forKey: .targetFlow)
    }
}

