//
// PatchedRadiusProviderRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** RadiusProvider Serializer */
public struct PatchedRadiusProviderRequest: Sendable, Codable, ParameterConvertible, Hashable {

    public static let nameRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public static let clientNetworksRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public static let sharedSecretRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public var name: String?
    /** Flow used for authentication when the associated application is accessed by an un-authenticated user. */
    public var authenticationFlow: UUID?
    /** Flow used when authorizing this provider. */
    public var authorizationFlow: UUID?
    /** Flow used ending the session from a provider. */
    public var invalidationFlow: UUID?
    public var propertyMappings: [UUID]?
    /** List of CIDRs (comma-separated) that clients can connect from. A more specific CIDR will match before a looser one. Clients connecting from a non-specified CIDR will be dropped. */
    public var clientNetworks: String?
    /** Shared secret between clients and server to hash packets. */
    public var sharedSecret: String?
    /** When enabled, code-based multi-factor authentication can be used by appending a semicolon and the TOTP code to the password. This should only be enabled if all users that will bind to this provider have a TOTP device configured, as otherwise a password may incorrectly be rejected if it contains a semicolon. */
    public var mfaSupport: Bool?

    public init(name: String? = nil, authenticationFlow: UUID? = nil, authorizationFlow: UUID? = nil, invalidationFlow: UUID? = nil, propertyMappings: [UUID]? = nil, clientNetworks: String? = nil, sharedSecret: String? = nil, mfaSupport: Bool? = nil) {
        self.name = name
        self.authenticationFlow = authenticationFlow
        self.authorizationFlow = authorizationFlow
        self.invalidationFlow = invalidationFlow
        self.propertyMappings = propertyMappings
        self.clientNetworks = clientNetworks
        self.sharedSecret = sharedSecret
        self.mfaSupport = mfaSupport
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case authenticationFlow = "authentication_flow"
        case authorizationFlow = "authorization_flow"
        case invalidationFlow = "invalidation_flow"
        case propertyMappings = "property_mappings"
        case clientNetworks = "client_networks"
        case sharedSecret = "shared_secret"
        case mfaSupport = "mfa_support"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(authenticationFlow, forKey: .authenticationFlow)
        try container.encodeIfPresent(authorizationFlow, forKey: .authorizationFlow)
        try container.encodeIfPresent(invalidationFlow, forKey: .invalidationFlow)
        try container.encodeIfPresent(propertyMappings, forKey: .propertyMappings)
        try container.encodeIfPresent(clientNetworks, forKey: .clientNetworks)
        try container.encodeIfPresent(sharedSecret, forKey: .sharedSecret)
        try container.encodeIfPresent(mfaSupport, forKey: .mfaSupport)
    }
}

