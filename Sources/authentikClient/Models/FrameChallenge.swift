//
// FrameChallenge.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** Challenge type to render a frame */
public struct FrameChallenge: Sendable, Codable, ParameterConvertible, Hashable {

    public var flowInfo: ContextualFlowInfo?
    public var component: String? = "xak-flow-frame"
    public var responseErrors: [String: [ErrorDetail]]?
    public var url: String
    public var loadingOverlay: Bool? = false
    public var loadingText: String

    public init(flowInfo: ContextualFlowInfo? = nil, component: String? = "xak-flow-frame", responseErrors: [String: [ErrorDetail]]? = nil, url: String, loadingOverlay: Bool? = false, loadingText: String) {
        self.flowInfo = flowInfo
        self.component = component
        self.responseErrors = responseErrors
        self.url = url
        self.loadingOverlay = loadingOverlay
        self.loadingText = loadingText
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case flowInfo = "flow_info"
        case component
        case responseErrors = "response_errors"
        case url
        case loadingOverlay = "loading_overlay"
        case loadingText = "loading_text"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(flowInfo, forKey: .flowInfo)
        try container.encodeIfPresent(component, forKey: .component)
        try container.encodeIfPresent(responseErrors, forKey: .responseErrors)
        try container.encode(url, forKey: .url)
        try container.encodeIfPresent(loadingOverlay, forKey: .loadingOverlay)
        try container.encode(loadingText, forKey: .loadingText)
    }
}

