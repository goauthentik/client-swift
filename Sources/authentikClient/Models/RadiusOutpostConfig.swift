//
// RadiusOutpostConfig.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** RadiusProvider Serializer */
public struct RadiusOutpostConfig: Sendable, Codable, ParameterConvertible, Hashable {

    public var pk: Int
    public var name: String
    public var applicationSlug: String
    public var authFlowSlug: String
    /** List of CIDRs (comma-separated) that clients can connect from. A more specific CIDR will match before a looser one. Clients connecting from a non-specified CIDR will be dropped. */
    public var clientNetworks: String?
    /** Shared secret between clients and server to hash packets. */
    public var sharedSecret: String?
    /** When enabled, code-based multi-factor authentication can be used by appending a semicolon and the TOTP code to the password. This should only be enabled if all users that will bind to this provider have a TOTP device configured, as otherwise a password may incorrectly be rejected if it contains a semicolon. */
    public var mfaSupport: Bool?

    public init(pk: Int, name: String, applicationSlug: String, authFlowSlug: String, clientNetworks: String? = nil, sharedSecret: String? = nil, mfaSupport: Bool? = nil) {
        self.pk = pk
        self.name = name
        self.applicationSlug = applicationSlug
        self.authFlowSlug = authFlowSlug
        self.clientNetworks = clientNetworks
        self.sharedSecret = sharedSecret
        self.mfaSupport = mfaSupport
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pk
        case name
        case applicationSlug = "application_slug"
        case authFlowSlug = "auth_flow_slug"
        case clientNetworks = "client_networks"
        case sharedSecret = "shared_secret"
        case mfaSupport = "mfa_support"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pk, forKey: .pk)
        try container.encode(name, forKey: .name)
        try container.encode(applicationSlug, forKey: .applicationSlug)
        try container.encode(authFlowSlug, forKey: .authFlowSlug)
        try container.encodeIfPresent(clientNetworks, forKey: .clientNetworks)
        try container.encodeIfPresent(sharedSecret, forKey: .sharedSecret)
        try container.encodeIfPresent(mfaSupport, forKey: .mfaSupport)
    }
}

