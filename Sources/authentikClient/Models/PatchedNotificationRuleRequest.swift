//
// PatchedNotificationRuleRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** NotificationRule Serializer */
public struct PatchedNotificationRuleRequest: Sendable, Codable, ParameterConvertible, Hashable {

    public static let nameRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public var name: String?
    /** Select which transports should be used to notify the user. If none are selected, the notification will only be shown in the authentik UI. */
    public var transports: [UUID]?
    /** Controls which severity level the created notifications will have. */
    public var severity: SeverityEnum?
    /** Define which group of users this notification should be sent and shown to. If left empty, Notification won't ben sent. */
    public var destinationGroup: UUID?
    /** When enabled, notification will be sent to user the user that triggered the event.When destination_group is configured, notification is sent to both. */
    public var destinationEventUser: Bool?

    public init(name: String? = nil, transports: [UUID]? = nil, severity: SeverityEnum? = nil, destinationGroup: UUID? = nil, destinationEventUser: Bool? = nil) {
        self.name = name
        self.transports = transports
        self.severity = severity
        self.destinationGroup = destinationGroup
        self.destinationEventUser = destinationEventUser
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case transports
        case severity
        case destinationGroup = "destination_group"
        case destinationEventUser = "destination_event_user"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(transports, forKey: .transports)
        try container.encodeIfPresent(severity, forKey: .severity)
        try container.encodeIfPresent(destinationGroup, forKey: .destinationGroup)
        try container.encodeIfPresent(destinationEventUser, forKey: .destinationEventUser)
    }
}

