//
// PatchedEmailStageRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** EmailStage Serializer */
public struct PatchedEmailStageRequest: Sendable, Codable, ParameterConvertible, Hashable {

    public static let nameRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public static let hostRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public static let portRule = NumericRule<Int>(minimum: -2147483648, exclusiveMinimum: false, maximum: 2147483647, exclusiveMaximum: false, multipleOf: nil)
    public static let timeoutRule = NumericRule<Int>(minimum: -2147483648, exclusiveMinimum: false, maximum: 2147483647, exclusiveMaximum: false, multipleOf: nil)
    public static let fromAddressRule = StringRule(minLength: 1, maxLength: 254, pattern: nil)
    public static let tokenExpiryRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public static let subjectRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public static let templateRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public var name: String?
    public var flowSet: [FlowSetRequest]?
    /** When enabled, global Email connection settings will be used and connection settings below will be ignored. */
    public var useGlobalSettings: Bool?
    public var host: String?
    public var port: Int?
    public var username: String?
    public var password: String?
    public var useTls: Bool?
    public var useSsl: Bool?
    public var timeout: Int?
    public var fromAddress: String?
    /** Time the token sent is valid (Format: hours=3,minutes=17,seconds=300). */
    public var tokenExpiry: String?
    public var subject: String?
    public var template: String?
    /** Activate users upon completion of stage. */
    public var activateUserOnSuccess: Bool?

    public init(name: String? = nil, flowSet: [FlowSetRequest]? = nil, useGlobalSettings: Bool? = nil, host: String? = nil, port: Int? = nil, username: String? = nil, password: String? = nil, useTls: Bool? = nil, useSsl: Bool? = nil, timeout: Int? = nil, fromAddress: String? = nil, tokenExpiry: String? = nil, subject: String? = nil, template: String? = nil, activateUserOnSuccess: Bool? = nil) {
        self.name = name
        self.flowSet = flowSet
        self.useGlobalSettings = useGlobalSettings
        self.host = host
        self.port = port
        self.username = username
        self.password = password
        self.useTls = useTls
        self.useSsl = useSsl
        self.timeout = timeout
        self.fromAddress = fromAddress
        self.tokenExpiry = tokenExpiry
        self.subject = subject
        self.template = template
        self.activateUserOnSuccess = activateUserOnSuccess
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case flowSet = "flow_set"
        case useGlobalSettings = "use_global_settings"
        case host
        case port
        case username
        case password
        case useTls = "use_tls"
        case useSsl = "use_ssl"
        case timeout
        case fromAddress = "from_address"
        case tokenExpiry = "token_expiry"
        case subject
        case template
        case activateUserOnSuccess = "activate_user_on_success"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(flowSet, forKey: .flowSet)
        try container.encodeIfPresent(useGlobalSettings, forKey: .useGlobalSettings)
        try container.encodeIfPresent(host, forKey: .host)
        try container.encodeIfPresent(port, forKey: .port)
        try container.encodeIfPresent(username, forKey: .username)
        try container.encodeIfPresent(password, forKey: .password)
        try container.encodeIfPresent(useTls, forKey: .useTls)
        try container.encodeIfPresent(useSsl, forKey: .useSsl)
        try container.encodeIfPresent(timeout, forKey: .timeout)
        try container.encodeIfPresent(fromAddress, forKey: .fromAddress)
        try container.encodeIfPresent(tokenExpiry, forKey: .tokenExpiry)
        try container.encodeIfPresent(subject, forKey: .subject)
        try container.encodeIfPresent(template, forKey: .template)
        try container.encodeIfPresent(activateUserOnSuccess, forKey: .activateUserOnSuccess)
    }
}

