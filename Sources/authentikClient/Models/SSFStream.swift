//
// SSFStream.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** SSFStream Serializer */
public struct SSFStream: Sendable, Codable, ParameterConvertible, Hashable {

    public var pk: UUID
    public var provider: Int
    public var providerObj: SSFProvider
    public var deliveryMethod: DeliveryMethodEnum
    public var endpointUrl: String?
    public var eventsRequested: [EventsRequestedEnum]?
    public var format: String
    public var aud: [String]?
    public var iss: String

    public init(pk: UUID, provider: Int, providerObj: SSFProvider, deliveryMethod: DeliveryMethodEnum, endpointUrl: String? = nil, eventsRequested: [EventsRequestedEnum]? = nil, format: String, aud: [String]? = nil, iss: String) {
        self.pk = pk
        self.provider = provider
        self.providerObj = providerObj
        self.deliveryMethod = deliveryMethod
        self.endpointUrl = endpointUrl
        self.eventsRequested = eventsRequested
        self.format = format
        self.aud = aud
        self.iss = iss
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pk
        case provider
        case providerObj = "provider_obj"
        case deliveryMethod = "delivery_method"
        case endpointUrl = "endpoint_url"
        case eventsRequested = "events_requested"
        case format
        case aud
        case iss
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pk, forKey: .pk)
        try container.encode(provider, forKey: .provider)
        try container.encode(providerObj, forKey: .providerObj)
        try container.encode(deliveryMethod, forKey: .deliveryMethod)
        try container.encodeIfPresent(endpointUrl, forKey: .endpointUrl)
        try container.encodeIfPresent(eventsRequested, forKey: .eventsRequested)
        try container.encode(format, forKey: .format)
        try container.encodeIfPresent(aud, forKey: .aud)
        try container.encode(iss, forKey: .iss)
    }
}

