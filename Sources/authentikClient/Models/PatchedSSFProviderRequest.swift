//
// PatchedSSFProviderRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** SSFProvider Serializer */
public struct PatchedSSFProviderRequest: Sendable, Codable, ParameterConvertible, Hashable {

    public static let nameRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public static let eventRetentionRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public var name: String?
    /** Key used to sign the SSF Events. */
    public var signingKey: UUID?
    public var oidcAuthProviders: [Int]?
    public var eventRetention: String?

    public init(name: String? = nil, signingKey: UUID? = nil, oidcAuthProviders: [Int]? = nil, eventRetention: String? = nil) {
        self.name = name
        self.signingKey = signingKey
        self.oidcAuthProviders = oidcAuthProviders
        self.eventRetention = eventRetention
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case signingKey = "signing_key"
        case oidcAuthProviders = "oidc_auth_providers"
        case eventRetention = "event_retention"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(signingKey, forKey: .signingKey)
        try container.encodeIfPresent(oidcAuthProviders, forKey: .oidcAuthProviders)
        try container.encodeIfPresent(eventRetention, forKey: .eventRetention)
    }
}

