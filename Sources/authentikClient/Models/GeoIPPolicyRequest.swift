//
// GeoIPPolicyRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** GeoIP Policy Serializer */
public struct GeoIPPolicyRequest: Sendable, Codable, ParameterConvertible, Hashable {

    public static let nameRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public static let countriesRule = ArrayRule(minItems: nil, maxItems: 249, uniqueItems: false)
    public static let historyMaxDistanceKmRule = NumericRule<Int64>(minimum: 0, exclusiveMinimum: false, maximum: 9223372036854775807, exclusiveMaximum: false, multipleOf: nil)
    public static let distanceToleranceKmRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 2147483647, exclusiveMaximum: false, multipleOf: nil)
    public static let historyLoginCountRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 2147483647, exclusiveMaximum: false, multipleOf: nil)
    public static let impossibleToleranceKmRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 2147483647, exclusiveMaximum: false, multipleOf: nil)
    public var name: String
    /** When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged. */
    public var executionLogging: Bool?
    public var asns: [Int]?
    public var countries: [CountryCodeEnum]
    public var checkHistoryDistance: Bool?
    public var historyMaxDistanceKm: Int64?
    public var distanceToleranceKm: Int?
    public var historyLoginCount: Int?
    public var checkImpossibleTravel: Bool?
    public var impossibleToleranceKm: Int?

    public init(name: String, executionLogging: Bool? = nil, asns: [Int]? = nil, countries: [CountryCodeEnum], checkHistoryDistance: Bool? = nil, historyMaxDistanceKm: Int64? = nil, distanceToleranceKm: Int? = nil, historyLoginCount: Int? = nil, checkImpossibleTravel: Bool? = nil, impossibleToleranceKm: Int? = nil) {
        self.name = name
        self.executionLogging = executionLogging
        self.asns = asns
        self.countries = countries
        self.checkHistoryDistance = checkHistoryDistance
        self.historyMaxDistanceKm = historyMaxDistanceKm
        self.distanceToleranceKm = distanceToleranceKm
        self.historyLoginCount = historyLoginCount
        self.checkImpossibleTravel = checkImpossibleTravel
        self.impossibleToleranceKm = impossibleToleranceKm
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case executionLogging = "execution_logging"
        case asns
        case countries
        case checkHistoryDistance = "check_history_distance"
        case historyMaxDistanceKm = "history_max_distance_km"
        case distanceToleranceKm = "distance_tolerance_km"
        case historyLoginCount = "history_login_count"
        case checkImpossibleTravel = "check_impossible_travel"
        case impossibleToleranceKm = "impossible_tolerance_km"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(executionLogging, forKey: .executionLogging)
        try container.encodeIfPresent(asns, forKey: .asns)
        try container.encode(countries, forKey: .countries)
        try container.encodeIfPresent(checkHistoryDistance, forKey: .checkHistoryDistance)
        try container.encodeIfPresent(historyMaxDistanceKm, forKey: .historyMaxDistanceKm)
        try container.encodeIfPresent(distanceToleranceKm, forKey: .distanceToleranceKm)
        try container.encodeIfPresent(historyLoginCount, forKey: .historyLoginCount)
        try container.encodeIfPresent(checkImpossibleTravel, forKey: .checkImpossibleTravel)
        try container.encodeIfPresent(impossibleToleranceKm, forKey: .impossibleToleranceKm)
    }
}

