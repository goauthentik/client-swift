//
// CertificateGenerationRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** Certificate generation parameters */
public struct CertificateGenerationRequest: Sendable, Codable, ParameterConvertible, Hashable {

    public static let commonNameRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public var commonName: String
    public var subjectAltName: String?
    public var validityDays: Int
    public var alg: AlgEnum?

    public init(commonName: String, subjectAltName: String? = nil, validityDays: Int, alg: AlgEnum? = nil) {
        self.commonName = commonName
        self.subjectAltName = subjectAltName
        self.validityDays = validityDays
        self.alg = alg
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case commonName = "common_name"
        case subjectAltName = "subject_alt_name"
        case validityDays = "validity_days"
        case alg
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(commonName, forKey: .commonName)
        try container.encodeIfPresent(subjectAltName, forKey: .subjectAltName)
        try container.encode(validityDays, forKey: .validityDays)
        try container.encodeIfPresent(alg, forKey: .alg)
    }
}

