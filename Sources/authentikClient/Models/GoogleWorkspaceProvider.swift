//
// GoogleWorkspaceProvider.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** GoogleWorkspaceProvider Serializer */
public struct GoogleWorkspaceProvider: Sendable, Codable, ParameterConvertible, Hashable {

    public static let delegatedSubjectRule = StringRule(minLength: nil, maxLength: 254, pattern: nil)
    public var pk: Int
    public var name: String
    public var propertyMappings: [UUID]?
    /** Property mappings used for group creation/updating. */
    public var propertyMappingsGroup: [UUID]?
    /** Get object component so that we know how to edit the object */
    public var component: String
    /** Internal application name, used in URLs. */
    public var assignedBackchannelApplicationSlug: String
    /** Application's display Name. */
    public var assignedBackchannelApplicationName: String
    /** Return object's verbose_name */
    public var verboseName: String
    /** Return object's plural verbose_name */
    public var verboseNamePlural: String
    /** Return internal model name */
    public var metaModelName: String
    public var delegatedSubject: String
    public var credentials: [String: JSONValue]
    public var scopes: String?
    public var excludeUsersServiceAccount: Bool?
    public var filterGroup: UUID?
    public var userDeleteAction: OutgoingSyncDeleteAction?
    public var groupDeleteAction: OutgoingSyncDeleteAction?
    public var defaultGroupEmailDomain: String
    /** When enabled, provider will not modify or create objects in the remote system. */
    public var dryRun: Bool?

    public init(pk: Int, name: String, propertyMappings: [UUID]? = nil, propertyMappingsGroup: [UUID]? = nil, component: String, assignedBackchannelApplicationSlug: String, assignedBackchannelApplicationName: String, verboseName: String, verboseNamePlural: String, metaModelName: String, delegatedSubject: String, credentials: [String: JSONValue], scopes: String? = nil, excludeUsersServiceAccount: Bool? = nil, filterGroup: UUID? = nil, userDeleteAction: OutgoingSyncDeleteAction? = nil, groupDeleteAction: OutgoingSyncDeleteAction? = nil, defaultGroupEmailDomain: String, dryRun: Bool? = nil) {
        self.pk = pk
        self.name = name
        self.propertyMappings = propertyMappings
        self.propertyMappingsGroup = propertyMappingsGroup
        self.component = component
        self.assignedBackchannelApplicationSlug = assignedBackchannelApplicationSlug
        self.assignedBackchannelApplicationName = assignedBackchannelApplicationName
        self.verboseName = verboseName
        self.verboseNamePlural = verboseNamePlural
        self.metaModelName = metaModelName
        self.delegatedSubject = delegatedSubject
        self.credentials = credentials
        self.scopes = scopes
        self.excludeUsersServiceAccount = excludeUsersServiceAccount
        self.filterGroup = filterGroup
        self.userDeleteAction = userDeleteAction
        self.groupDeleteAction = groupDeleteAction
        self.defaultGroupEmailDomain = defaultGroupEmailDomain
        self.dryRun = dryRun
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pk
        case name
        case propertyMappings = "property_mappings"
        case propertyMappingsGroup = "property_mappings_group"
        case component
        case assignedBackchannelApplicationSlug = "assigned_backchannel_application_slug"
        case assignedBackchannelApplicationName = "assigned_backchannel_application_name"
        case verboseName = "verbose_name"
        case verboseNamePlural = "verbose_name_plural"
        case metaModelName = "meta_model_name"
        case delegatedSubject = "delegated_subject"
        case credentials
        case scopes
        case excludeUsersServiceAccount = "exclude_users_service_account"
        case filterGroup = "filter_group"
        case userDeleteAction = "user_delete_action"
        case groupDeleteAction = "group_delete_action"
        case defaultGroupEmailDomain = "default_group_email_domain"
        case dryRun = "dry_run"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pk, forKey: .pk)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(propertyMappings, forKey: .propertyMappings)
        try container.encodeIfPresent(propertyMappingsGroup, forKey: .propertyMappingsGroup)
        try container.encode(component, forKey: .component)
        try container.encode(assignedBackchannelApplicationSlug, forKey: .assignedBackchannelApplicationSlug)
        try container.encode(assignedBackchannelApplicationName, forKey: .assignedBackchannelApplicationName)
        try container.encode(verboseName, forKey: .verboseName)
        try container.encode(verboseNamePlural, forKey: .verboseNamePlural)
        try container.encode(metaModelName, forKey: .metaModelName)
        try container.encode(delegatedSubject, forKey: .delegatedSubject)
        try container.encode(credentials, forKey: .credentials)
        try container.encodeIfPresent(scopes, forKey: .scopes)
        try container.encodeIfPresent(excludeUsersServiceAccount, forKey: .excludeUsersServiceAccount)
        try container.encodeIfPresent(filterGroup, forKey: .filterGroup)
        try container.encodeIfPresent(userDeleteAction, forKey: .userDeleteAction)
        try container.encodeIfPresent(groupDeleteAction, forKey: .groupDeleteAction)
        try container.encode(defaultGroupEmailDomain, forKey: .defaultGroupEmailDomain)
        try container.encodeIfPresent(dryRun, forKey: .dryRun)
    }
}

