//
// UserLoginStageRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** UserLoginStage Serializer */
public struct UserLoginStageRequest: Sendable, Codable, ParameterConvertible, Hashable {

    public static let nameRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public static let sessionDurationRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public static let rememberMeOffsetRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public static let rememberDeviceRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public var name: String
    public var flowSet: [FlowSetRequest]?
    /** Determines how long a session lasts. Default of 0 means that the sessions lasts until the browser is closed. (Format: hours=-1;minutes=-2;seconds=-3) */
    public var sessionDuration: String?
    /** Terminate all other sessions of the user logging in. */
    public var terminateOtherSessions: Bool?
    /** Offset the session will be extended by when the user picks the remember me option. Default of 0 means that the remember me option will not be shown. (Format: hours=-1;minutes=-2;seconds=-3) */
    public var rememberMeOffset: String?
    /** Bind sessions created by this stage to the configured network */
    public var networkBinding: NetworkBindingEnum?
    /** Bind sessions created by this stage to the configured GeoIP location */
    public var geoipBinding: GeoipBindingEnum?
    /** When set to a non-zero value, authentik will save a cookie with a longer expiry,to remember the device the user is logging in from. (Format: hours=-1;minutes=-2;seconds=-3) */
    public var rememberDevice: String?

    public init(name: String, flowSet: [FlowSetRequest]? = nil, sessionDuration: String? = nil, terminateOtherSessions: Bool? = nil, rememberMeOffset: String? = nil, networkBinding: NetworkBindingEnum? = nil, geoipBinding: GeoipBindingEnum? = nil, rememberDevice: String? = nil) {
        self.name = name
        self.flowSet = flowSet
        self.sessionDuration = sessionDuration
        self.terminateOtherSessions = terminateOtherSessions
        self.rememberMeOffset = rememberMeOffset
        self.networkBinding = networkBinding
        self.geoipBinding = geoipBinding
        self.rememberDevice = rememberDevice
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case flowSet = "flow_set"
        case sessionDuration = "session_duration"
        case terminateOtherSessions = "terminate_other_sessions"
        case rememberMeOffset = "remember_me_offset"
        case networkBinding = "network_binding"
        case geoipBinding = "geoip_binding"
        case rememberDevice = "remember_device"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(flowSet, forKey: .flowSet)
        try container.encodeIfPresent(sessionDuration, forKey: .sessionDuration)
        try container.encodeIfPresent(terminateOtherSessions, forKey: .terminateOtherSessions)
        try container.encodeIfPresent(rememberMeOffset, forKey: .rememberMeOffset)
        try container.encodeIfPresent(networkBinding, forKey: .networkBinding)
        try container.encodeIfPresent(geoipBinding, forKey: .geoipBinding)
        try container.encodeIfPresent(rememberDevice, forKey: .rememberDevice)
    }
}

