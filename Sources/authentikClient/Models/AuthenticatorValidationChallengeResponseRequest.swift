//
// AuthenticatorValidationChallengeResponseRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** Challenge used for Code-based and WebAuthn authenticators */
public struct AuthenticatorValidationChallengeResponseRequest: Sendable, Codable, ParameterConvertible, Hashable {

    public static let componentRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public static let selectedStageRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public static let codeRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public var component: String? = "ak-stage-authenticator-validate"
    public var selectedChallenge: DeviceChallengeRequest?
    public var selectedStage: String?
    public var code: String?
    public var webauthn: [String: JSONValue]?
    public var duo: Int?

    public init(component: String? = "ak-stage-authenticator-validate", selectedChallenge: DeviceChallengeRequest? = nil, selectedStage: String? = nil, code: String? = nil, webauthn: [String: JSONValue]? = nil, duo: Int? = nil) {
        self.component = component
        self.selectedChallenge = selectedChallenge
        self.selectedStage = selectedStage
        self.code = code
        self.webauthn = webauthn
        self.duo = duo
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case component
        case selectedChallenge = "selected_challenge"
        case selectedStage = "selected_stage"
        case code
        case webauthn
        case duo
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(component, forKey: .component)
        try container.encodeIfPresent(selectedChallenge, forKey: .selectedChallenge)
        try container.encodeIfPresent(selectedStage, forKey: .selectedStage)
        try container.encodeIfPresent(code, forKey: .code)
        try container.encodeIfPresent(webauthn, forKey: .webauthn)
        try container.encodeIfPresent(duo, forKey: .duo)
    }
}

