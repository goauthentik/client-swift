//
// NativeLogoutChallenge.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** Challenge for native browser logout */
public struct NativeLogoutChallenge: Sendable, Codable, ParameterConvertible, Hashable {

    public var flowInfo: ContextualFlowInfo?
    public var component: String? = "ak-provider-saml-native-logout"
    public var responseErrors: [String: [ErrorDetail]]?
    public var postUrl: String?
    public var samlRequest: String?
    public var relayState: String?
    public var providerName: String?
    public var binding: String?
    public var redirectUrl: String?
    public var isComplete: Bool? = false

    public init(flowInfo: ContextualFlowInfo? = nil, component: String? = "ak-provider-saml-native-logout", responseErrors: [String: [ErrorDetail]]? = nil, postUrl: String? = nil, samlRequest: String? = nil, relayState: String? = nil, providerName: String? = nil, binding: String? = nil, redirectUrl: String? = nil, isComplete: Bool? = false) {
        self.flowInfo = flowInfo
        self.component = component
        self.responseErrors = responseErrors
        self.postUrl = postUrl
        self.samlRequest = samlRequest
        self.relayState = relayState
        self.providerName = providerName
        self.binding = binding
        self.redirectUrl = redirectUrl
        self.isComplete = isComplete
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case flowInfo = "flow_info"
        case component
        case responseErrors = "response_errors"
        case postUrl = "post_url"
        case samlRequest = "saml_request"
        case relayState = "relay_state"
        case providerName = "provider_name"
        case binding
        case redirectUrl = "redirect_url"
        case isComplete = "is_complete"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(flowInfo, forKey: .flowInfo)
        try container.encodeIfPresent(component, forKey: .component)
        try container.encodeIfPresent(responseErrors, forKey: .responseErrors)
        try container.encodeIfPresent(postUrl, forKey: .postUrl)
        try container.encodeIfPresent(samlRequest, forKey: .samlRequest)
        try container.encodeIfPresent(relayState, forKey: .relayState)
        try container.encodeIfPresent(providerName, forKey: .providerName)
        try container.encodeIfPresent(binding, forKey: .binding)
        try container.encodeIfPresent(redirectUrl, forKey: .redirectUrl)
        try container.encodeIfPresent(isComplete, forKey: .isComplete)
    }
}

