//
// AuthenticatorSMSChallenge.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** SMS Setup challenge */
public struct AuthenticatorSMSChallenge: Sendable, Codable, ParameterConvertible, Hashable {

    public var flowInfo: ContextualFlowInfo?
    public var component: String? = "ak-stage-authenticator-sms"
    public var responseErrors: [String: [ErrorDetail]]?
    public var pendingUser: String
    public var pendingUserAvatar: String
    public var phoneNumberRequired: Bool? = true

    public init(flowInfo: ContextualFlowInfo? = nil, component: String? = "ak-stage-authenticator-sms", responseErrors: [String: [ErrorDetail]]? = nil, pendingUser: String, pendingUserAvatar: String, phoneNumberRequired: Bool? = true) {
        self.flowInfo = flowInfo
        self.component = component
        self.responseErrors = responseErrors
        self.pendingUser = pendingUser
        self.pendingUserAvatar = pendingUserAvatar
        self.phoneNumberRequired = phoneNumberRequired
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case flowInfo = "flow_info"
        case component
        case responseErrors = "response_errors"
        case pendingUser = "pending_user"
        case pendingUserAvatar = "pending_user_avatar"
        case phoneNumberRequired = "phone_number_required"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(flowInfo, forKey: .flowInfo)
        try container.encodeIfPresent(component, forKey: .component)
        try container.encodeIfPresent(responseErrors, forKey: .responseErrors)
        try container.encode(pendingUser, forKey: .pendingUser)
        try container.encode(pendingUserAvatar, forKey: .pendingUserAvatar)
        try container.encodeIfPresent(phoneNumberRequired, forKey: .phoneNumberRequired)
    }
}

