//
// SAMLProvider.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** SAMLProvider Serializer */
public struct SAMLProvider: Sendable, Codable, ParameterConvertible, Hashable {

    public var pk: Int
    public var name: String
    /** Flow used for authentication when the associated application is accessed by an un-authenticated user. */
    public var authenticationFlow: UUID?
    /** Flow used when authorizing this provider. */
    public var authorizationFlow: UUID
    /** Flow used ending the session from a provider. */
    public var invalidationFlow: UUID
    public var propertyMappings: [UUID]?
    /** Get object component so that we know how to edit the object */
    public var component: String
    /** Internal application name, used in URLs. */
    public var assignedApplicationSlug: String
    /** Application's display Name. */
    public var assignedApplicationName: String
    /** Internal application name, used in URLs. */
    public var assignedBackchannelApplicationSlug: String
    /** Application's display Name. */
    public var assignedBackchannelApplicationName: String
    /** Return object's verbose_name */
    public var verboseName: String
    /** Return object's plural verbose_name */
    public var verboseNamePlural: String
    /** Return internal model name */
    public var metaModelName: String
    public var acsUrl: String
    /** Single Logout Service URL where the logout response should be sent. */
    public var slsUrl: String?
    /** Value of the audience restriction field of the assertion. When left empty, no audience restriction will be added. */
    public var audience: String?
    /** Also known as EntityID */
    public var issuer: String?
    /** Assertion valid not before current time + this value (Format: hours=-1;minutes=-2;seconds=-3). */
    public var assertionValidNotBefore: String?
    /** Assertion not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3). */
    public var assertionValidNotOnOrAfter: String?
    /** Session not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3). */
    public var sessionValidNotOnOrAfter: String?
    /** Configure how the NameID value will be created. When left empty, the NameIDPolicy of the incoming request will be considered */
    public var nameIdMapping: UUID?
    /** Configure how the AuthnContextClassRef value will be created. When left empty, the AuthnContextClassRef will be set based on which authentication methods the user used to authenticate. */
    public var authnContextClassRefMapping: UUID?
    public var digestAlgorithm: DigestAlgorithmEnum?
    public var signatureAlgorithm: SignatureAlgorithmEnum?
    /** Keypair used to sign outgoing Responses going to the Service Provider. */
    public var signingKp: UUID?
    /** When selected, incoming assertion's Signatures will be validated against this certificate. To allow unsigned Requests, leave on default. */
    public var verificationKp: UUID?
    /** When selected, incoming assertions are encrypted by the IdP using the public key of the encryption keypair. The assertion is decrypted by the SP using the the private key. */
    public var encryptionKp: UUID?
    public var signAssertion: Bool?
    public var signResponse: Bool?
    public var signLogoutRequest: Bool?
    /** This determines how authentik sends the response back to the Service Provider. */
    public var spBinding: SAMLBindingsEnum?
    /** This determines how authentik sends the logout response back to the Service Provider. */
    public var slsBinding: SAMLBindingsEnum?
    /** Method to use for logout. Front-channel iframe loads all logout URLs simultaneously in hidden iframes. Front-channel native uses your active browser tab to send post requests and redirect to providers. Back-channel sends logout requests directly from the server without user interaction (requires POST SLS binding). */
    public var logoutMethod: SAMLProviderLogoutMethodEnum?
    /** Default relay_state value for IDP-initiated logins */
    public var defaultRelayState: String?
    public var defaultNameIdPolicy: SAMLNameIDPolicyEnum?
    /** Get metadata download URL */
    public var urlDownloadMetadata: String
    /** Get SSO Post URL */
    public var urlSsoPost: String
    /** Get SSO Redirect URL */
    public var urlSsoRedirect: String
    /** Get SSO IDP-Initiated URL */
    public var urlSsoInit: String
    /** Get SLO POST URL */
    public var urlSloPost: String
    /** Get SLO redirect URL */
    public var urlSloRedirect: String

    public init(pk: Int, name: String, authenticationFlow: UUID? = nil, authorizationFlow: UUID, invalidationFlow: UUID, propertyMappings: [UUID]? = nil, component: String, assignedApplicationSlug: String, assignedApplicationName: String, assignedBackchannelApplicationSlug: String, assignedBackchannelApplicationName: String, verboseName: String, verboseNamePlural: String, metaModelName: String, acsUrl: String, slsUrl: String? = nil, audience: String? = nil, issuer: String? = nil, assertionValidNotBefore: String? = nil, assertionValidNotOnOrAfter: String? = nil, sessionValidNotOnOrAfter: String? = nil, nameIdMapping: UUID? = nil, authnContextClassRefMapping: UUID? = nil, digestAlgorithm: DigestAlgorithmEnum? = nil, signatureAlgorithm: SignatureAlgorithmEnum? = nil, signingKp: UUID? = nil, verificationKp: UUID? = nil, encryptionKp: UUID? = nil, signAssertion: Bool? = nil, signResponse: Bool? = nil, signLogoutRequest: Bool? = nil, spBinding: SAMLBindingsEnum? = nil, slsBinding: SAMLBindingsEnum? = nil, logoutMethod: SAMLProviderLogoutMethodEnum? = nil, defaultRelayState: String? = nil, defaultNameIdPolicy: SAMLNameIDPolicyEnum? = nil, urlDownloadMetadata: String, urlSsoPost: String, urlSsoRedirect: String, urlSsoInit: String, urlSloPost: String, urlSloRedirect: String) {
        self.pk = pk
        self.name = name
        self.authenticationFlow = authenticationFlow
        self.authorizationFlow = authorizationFlow
        self.invalidationFlow = invalidationFlow
        self.propertyMappings = propertyMappings
        self.component = component
        self.assignedApplicationSlug = assignedApplicationSlug
        self.assignedApplicationName = assignedApplicationName
        self.assignedBackchannelApplicationSlug = assignedBackchannelApplicationSlug
        self.assignedBackchannelApplicationName = assignedBackchannelApplicationName
        self.verboseName = verboseName
        self.verboseNamePlural = verboseNamePlural
        self.metaModelName = metaModelName
        self.acsUrl = acsUrl
        self.slsUrl = slsUrl
        self.audience = audience
        self.issuer = issuer
        self.assertionValidNotBefore = assertionValidNotBefore
        self.assertionValidNotOnOrAfter = assertionValidNotOnOrAfter
        self.sessionValidNotOnOrAfter = sessionValidNotOnOrAfter
        self.nameIdMapping = nameIdMapping
        self.authnContextClassRefMapping = authnContextClassRefMapping
        self.digestAlgorithm = digestAlgorithm
        self.signatureAlgorithm = signatureAlgorithm
        self.signingKp = signingKp
        self.verificationKp = verificationKp
        self.encryptionKp = encryptionKp
        self.signAssertion = signAssertion
        self.signResponse = signResponse
        self.signLogoutRequest = signLogoutRequest
        self.spBinding = spBinding
        self.slsBinding = slsBinding
        self.logoutMethod = logoutMethod
        self.defaultRelayState = defaultRelayState
        self.defaultNameIdPolicy = defaultNameIdPolicy
        self.urlDownloadMetadata = urlDownloadMetadata
        self.urlSsoPost = urlSsoPost
        self.urlSsoRedirect = urlSsoRedirect
        self.urlSsoInit = urlSsoInit
        self.urlSloPost = urlSloPost
        self.urlSloRedirect = urlSloRedirect
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pk
        case name
        case authenticationFlow = "authentication_flow"
        case authorizationFlow = "authorization_flow"
        case invalidationFlow = "invalidation_flow"
        case propertyMappings = "property_mappings"
        case component
        case assignedApplicationSlug = "assigned_application_slug"
        case assignedApplicationName = "assigned_application_name"
        case assignedBackchannelApplicationSlug = "assigned_backchannel_application_slug"
        case assignedBackchannelApplicationName = "assigned_backchannel_application_name"
        case verboseName = "verbose_name"
        case verboseNamePlural = "verbose_name_plural"
        case metaModelName = "meta_model_name"
        case acsUrl = "acs_url"
        case slsUrl = "sls_url"
        case audience
        case issuer
        case assertionValidNotBefore = "assertion_valid_not_before"
        case assertionValidNotOnOrAfter = "assertion_valid_not_on_or_after"
        case sessionValidNotOnOrAfter = "session_valid_not_on_or_after"
        case nameIdMapping = "name_id_mapping"
        case authnContextClassRefMapping = "authn_context_class_ref_mapping"
        case digestAlgorithm = "digest_algorithm"
        case signatureAlgorithm = "signature_algorithm"
        case signingKp = "signing_kp"
        case verificationKp = "verification_kp"
        case encryptionKp = "encryption_kp"
        case signAssertion = "sign_assertion"
        case signResponse = "sign_response"
        case signLogoutRequest = "sign_logout_request"
        case spBinding = "sp_binding"
        case slsBinding = "sls_binding"
        case logoutMethod = "logout_method"
        case defaultRelayState = "default_relay_state"
        case defaultNameIdPolicy = "default_name_id_policy"
        case urlDownloadMetadata = "url_download_metadata"
        case urlSsoPost = "url_sso_post"
        case urlSsoRedirect = "url_sso_redirect"
        case urlSsoInit = "url_sso_init"
        case urlSloPost = "url_slo_post"
        case urlSloRedirect = "url_slo_redirect"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pk, forKey: .pk)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(authenticationFlow, forKey: .authenticationFlow)
        try container.encode(authorizationFlow, forKey: .authorizationFlow)
        try container.encode(invalidationFlow, forKey: .invalidationFlow)
        try container.encodeIfPresent(propertyMappings, forKey: .propertyMappings)
        try container.encode(component, forKey: .component)
        try container.encode(assignedApplicationSlug, forKey: .assignedApplicationSlug)
        try container.encode(assignedApplicationName, forKey: .assignedApplicationName)
        try container.encode(assignedBackchannelApplicationSlug, forKey: .assignedBackchannelApplicationSlug)
        try container.encode(assignedBackchannelApplicationName, forKey: .assignedBackchannelApplicationName)
        try container.encode(verboseName, forKey: .verboseName)
        try container.encode(verboseNamePlural, forKey: .verboseNamePlural)
        try container.encode(metaModelName, forKey: .metaModelName)
        try container.encode(acsUrl, forKey: .acsUrl)
        try container.encodeIfPresent(slsUrl, forKey: .slsUrl)
        try container.encodeIfPresent(audience, forKey: .audience)
        try container.encodeIfPresent(issuer, forKey: .issuer)
        try container.encodeIfPresent(assertionValidNotBefore, forKey: .assertionValidNotBefore)
        try container.encodeIfPresent(assertionValidNotOnOrAfter, forKey: .assertionValidNotOnOrAfter)
        try container.encodeIfPresent(sessionValidNotOnOrAfter, forKey: .sessionValidNotOnOrAfter)
        try container.encodeIfPresent(nameIdMapping, forKey: .nameIdMapping)
        try container.encodeIfPresent(authnContextClassRefMapping, forKey: .authnContextClassRefMapping)
        try container.encodeIfPresent(digestAlgorithm, forKey: .digestAlgorithm)
        try container.encodeIfPresent(signatureAlgorithm, forKey: .signatureAlgorithm)
        try container.encodeIfPresent(signingKp, forKey: .signingKp)
        try container.encodeIfPresent(verificationKp, forKey: .verificationKp)
        try container.encodeIfPresent(encryptionKp, forKey: .encryptionKp)
        try container.encodeIfPresent(signAssertion, forKey: .signAssertion)
        try container.encodeIfPresent(signResponse, forKey: .signResponse)
        try container.encodeIfPresent(signLogoutRequest, forKey: .signLogoutRequest)
        try container.encodeIfPresent(spBinding, forKey: .spBinding)
        try container.encodeIfPresent(slsBinding, forKey: .slsBinding)
        try container.encodeIfPresent(logoutMethod, forKey: .logoutMethod)
        try container.encodeIfPresent(defaultRelayState, forKey: .defaultRelayState)
        try container.encodeIfPresent(defaultNameIdPolicy, forKey: .defaultNameIdPolicy)
        try container.encode(urlDownloadMetadata, forKey: .urlDownloadMetadata)
        try container.encode(urlSsoPost, forKey: .urlSsoPost)
        try container.encode(urlSsoRedirect, forKey: .urlSsoRedirect)
        try container.encode(urlSsoInit, forKey: .urlSsoInit)
        try container.encode(urlSloPost, forKey: .urlSloPost)
        try container.encode(urlSloRedirect, forKey: .urlSloRedirect)
    }
}

