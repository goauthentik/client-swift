//
// DeviceChallenge.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** Single device challenge */
public struct DeviceChallenge: Sendable, Codable, ParameterConvertible, Hashable {

    public var deviceClass: String
    public var deviceUid: String
    public var challenge: [String: JSONValue]
    public var lastUsed: Date?

    public init(deviceClass: String, deviceUid: String, challenge: [String: JSONValue], lastUsed: Date?) {
        self.deviceClass = deviceClass
        self.deviceUid = deviceUid
        self.challenge = challenge
        self.lastUsed = lastUsed
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case deviceClass = "device_class"
        case deviceUid = "device_uid"
        case challenge
        case lastUsed = "last_used"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(deviceClass, forKey: .deviceClass)
        try container.encode(deviceUid, forKey: .deviceUid)
        try container.encode(challenge, forKey: .challenge)
        try container.encode(lastUsed, forKey: .lastUsed)
    }
}

