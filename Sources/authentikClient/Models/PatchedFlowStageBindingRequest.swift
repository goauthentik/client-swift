//
// PatchedFlowStageBindingRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** FlowStageBinding Serializer */
public struct PatchedFlowStageBindingRequest: Sendable, Codable, ParameterConvertible, Hashable {

    public static let orderRule = NumericRule<Int>(minimum: -2147483648, exclusiveMinimum: false, maximum: 2147483647, exclusiveMaximum: false, multipleOf: nil)
    public var target: UUID?
    public var stage: UUID?
    /** Evaluate policies during the Flow planning process. */
    public var evaluateOnPlan: Bool?
    /** Evaluate policies when the Stage is presented to the user. */
    public var reEvaluatePolicies: Bool?
    public var order: Int?
    public var policyEngineMode: PolicyEngineMode?
    /** Configure how the flow executor should handle an invalid response to a challenge. RETRY returns the error message and a similar challenge to the executor. RESTART restarts the flow from the beginning, and RESTART_WITH_CONTEXT restarts the flow while keeping the current context. */
    public var invalidResponseAction: InvalidResponseActionEnum?

    public init(target: UUID? = nil, stage: UUID? = nil, evaluateOnPlan: Bool? = nil, reEvaluatePolicies: Bool? = nil, order: Int? = nil, policyEngineMode: PolicyEngineMode? = nil, invalidResponseAction: InvalidResponseActionEnum? = nil) {
        self.target = target
        self.stage = stage
        self.evaluateOnPlan = evaluateOnPlan
        self.reEvaluatePolicies = reEvaluatePolicies
        self.order = order
        self.policyEngineMode = policyEngineMode
        self.invalidResponseAction = invalidResponseAction
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case target
        case stage
        case evaluateOnPlan = "evaluate_on_plan"
        case reEvaluatePolicies = "re_evaluate_policies"
        case order
        case policyEngineMode = "policy_engine_mode"
        case invalidResponseAction = "invalid_response_action"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(target, forKey: .target)
        try container.encodeIfPresent(stage, forKey: .stage)
        try container.encodeIfPresent(evaluateOnPlan, forKey: .evaluateOnPlan)
        try container.encodeIfPresent(reEvaluatePolicies, forKey: .reEvaluatePolicies)
        try container.encodeIfPresent(order, forKey: .order)
        try container.encodeIfPresent(policyEngineMode, forKey: .policyEngineMode)
        try container.encodeIfPresent(invalidResponseAction, forKey: .invalidResponseAction)
    }
}

