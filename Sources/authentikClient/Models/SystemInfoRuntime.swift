//
// SystemInfoRuntime.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** Get versions */
public struct SystemInfoRuntime: Sendable, Codable, ParameterConvertible, Hashable {

    public var pythonVersion: String
    public var environment: String
    public var architecture: String
    public var platform: String
    public var uname: String
    public var opensslVersion: String
    public var opensslFipsEnabled: Bool?
    public var authentikVersion: String

    public init(pythonVersion: String, environment: String, architecture: String, platform: String, uname: String, opensslVersion: String, opensslFipsEnabled: Bool?, authentikVersion: String) {
        self.pythonVersion = pythonVersion
        self.environment = environment
        self.architecture = architecture
        self.platform = platform
        self.uname = uname
        self.opensslVersion = opensslVersion
        self.opensslFipsEnabled = opensslFipsEnabled
        self.authentikVersion = authentikVersion
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pythonVersion = "python_version"
        case environment
        case architecture
        case platform
        case uname
        case opensslVersion = "openssl_version"
        case opensslFipsEnabled = "openssl_fips_enabled"
        case authentikVersion = "authentik_version"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pythonVersion, forKey: .pythonVersion)
        try container.encode(environment, forKey: .environment)
        try container.encode(architecture, forKey: .architecture)
        try container.encode(platform, forKey: .platform)
        try container.encode(uname, forKey: .uname)
        try container.encode(opensslVersion, forKey: .opensslVersion)
        try container.encode(opensslFipsEnabled, forKey: .opensslFipsEnabled)
        try container.encode(authentikVersion, forKey: .authentikVersion)
    }
}

