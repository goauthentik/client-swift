//
// Device.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** Serializer for authenticator devices */
public struct Device: Sendable, Codable, ParameterConvertible, Hashable {

    /** Return object's verbose_name */
    public var verboseName: String
    /** Return object's plural verbose_name */
    public var verboseNamePlural: String
    /** Return internal model name */
    public var metaModelName: String
    public var pk: String
    public var name: String
    /** Get type of device */
    public var type: String
    public var confirmed: Bool
    public var created: Date
    public var lastUpdated: Date
    public var lastUsed: Date?
    /** Get extra description */
    public var extraDescription: String?
    /** Get external Device ID */
    public var externalId: String?

    public init(verboseName: String, verboseNamePlural: String, metaModelName: String, pk: String, name: String, type: String, confirmed: Bool, created: Date, lastUpdated: Date, lastUsed: Date?, extraDescription: String?, externalId: String?) {
        self.verboseName = verboseName
        self.verboseNamePlural = verboseNamePlural
        self.metaModelName = metaModelName
        self.pk = pk
        self.name = name
        self.type = type
        self.confirmed = confirmed
        self.created = created
        self.lastUpdated = lastUpdated
        self.lastUsed = lastUsed
        self.extraDescription = extraDescription
        self.externalId = externalId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case verboseName = "verbose_name"
        case verboseNamePlural = "verbose_name_plural"
        case metaModelName = "meta_model_name"
        case pk
        case name
        case type
        case confirmed
        case created
        case lastUpdated = "last_updated"
        case lastUsed = "last_used"
        case extraDescription = "extra_description"
        case externalId = "external_id"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(verboseName, forKey: .verboseName)
        try container.encode(verboseNamePlural, forKey: .verboseNamePlural)
        try container.encode(metaModelName, forKey: .metaModelName)
        try container.encode(pk, forKey: .pk)
        try container.encode(name, forKey: .name)
        try container.encode(type, forKey: .type)
        try container.encode(confirmed, forKey: .confirmed)
        try container.encode(created, forKey: .created)
        try container.encode(lastUpdated, forKey: .lastUpdated)
        try container.encode(lastUsed, forKey: .lastUsed)
        try container.encode(extraDescription, forKey: .extraDescription)
        try container.encode(externalId, forKey: .externalId)
    }
}

