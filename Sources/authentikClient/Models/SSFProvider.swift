//
// SSFProvider.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** SSFProvider Serializer */
public struct SSFProvider: Sendable, Codable, ParameterConvertible, Hashable {

    public var pk: Int
    public var name: String
    /** Get object component so that we know how to edit the object */
    public var component: String
    /** Return object's verbose_name */
    public var verboseName: String
    /** Return object's plural verbose_name */
    public var verboseNamePlural: String
    /** Return internal model name */
    public var metaModelName: String
    /** Key used to sign the SSF Events. */
    public var signingKey: UUID
    public var tokenObj: Token
    public var oidcAuthProviders: [Int]?
    public var ssfUrl: String?
    public var eventRetention: String?

    public init(pk: Int, name: String, component: String, verboseName: String, verboseNamePlural: String, metaModelName: String, signingKey: UUID, tokenObj: Token, oidcAuthProviders: [Int]? = nil, ssfUrl: String?, eventRetention: String? = nil) {
        self.pk = pk
        self.name = name
        self.component = component
        self.verboseName = verboseName
        self.verboseNamePlural = verboseNamePlural
        self.metaModelName = metaModelName
        self.signingKey = signingKey
        self.tokenObj = tokenObj
        self.oidcAuthProviders = oidcAuthProviders
        self.ssfUrl = ssfUrl
        self.eventRetention = eventRetention
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pk
        case name
        case component
        case verboseName = "verbose_name"
        case verboseNamePlural = "verbose_name_plural"
        case metaModelName = "meta_model_name"
        case signingKey = "signing_key"
        case tokenObj = "token_obj"
        case oidcAuthProviders = "oidc_auth_providers"
        case ssfUrl = "ssf_url"
        case eventRetention = "event_retention"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pk, forKey: .pk)
        try container.encode(name, forKey: .name)
        try container.encode(component, forKey: .component)
        try container.encode(verboseName, forKey: .verboseName)
        try container.encode(verboseNamePlural, forKey: .verboseNamePlural)
        try container.encode(metaModelName, forKey: .metaModelName)
        try container.encode(signingKey, forKey: .signingKey)
        try container.encode(tokenObj, forKey: .tokenObj)
        try container.encodeIfPresent(oidcAuthProviders, forKey: .oidcAuthProviders)
        try container.encode(ssfUrl, forKey: .ssfUrl)
        try container.encodeIfPresent(eventRetention, forKey: .eventRetention)
    }
}

