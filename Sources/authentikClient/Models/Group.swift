//
// Group.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** Group Serializer */
public struct Group: Sendable, Codable, ParameterConvertible, Hashable {

    public var pk: UUID
    public var numPk: Int
    public var name: String
    /** Users added to this group will be superusers. */
    public var isSuperuser: Bool?
    public var parent: UUID?
    public var parentName: String?
    public var users: [Int]?
    public var usersObj: [PartialUser]?
    public var attributes: [String: JSONValue]?
    public var roles: [UUID]?
    public var rolesObj: [Role]
    public var children: [UUID]?
    public var childrenObj: [GroupChild]?

    public init(pk: UUID, numPk: Int, name: String, isSuperuser: Bool? = nil, parent: UUID? = nil, parentName: String?, users: [Int]? = nil, usersObj: [PartialUser]?, attributes: [String: JSONValue]? = nil, roles: [UUID]? = nil, rolesObj: [Role], children: [UUID]? = nil, childrenObj: [GroupChild]?) {
        self.pk = pk
        self.numPk = numPk
        self.name = name
        self.isSuperuser = isSuperuser
        self.parent = parent
        self.parentName = parentName
        self.users = users
        self.usersObj = usersObj
        self.attributes = attributes
        self.roles = roles
        self.rolesObj = rolesObj
        self.children = children
        self.childrenObj = childrenObj
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pk
        case numPk = "num_pk"
        case name
        case isSuperuser = "is_superuser"
        case parent
        case parentName = "parent_name"
        case users
        case usersObj = "users_obj"
        case attributes
        case roles
        case rolesObj = "roles_obj"
        case children
        case childrenObj = "children_obj"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pk, forKey: .pk)
        try container.encode(numPk, forKey: .numPk)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(isSuperuser, forKey: .isSuperuser)
        try container.encodeIfPresent(parent, forKey: .parent)
        try container.encode(parentName, forKey: .parentName)
        try container.encodeIfPresent(users, forKey: .users)
        try container.encode(usersObj, forKey: .usersObj)
        try container.encodeIfPresent(attributes, forKey: .attributes)
        try container.encodeIfPresent(roles, forKey: .roles)
        try container.encode(rolesObj, forKey: .rolesObj)
        try container.encodeIfPresent(children, forKey: .children)
        try container.encode(childrenObj, forKey: .childrenObj)
    }
}

