//
// NotificationTransportRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** NotificationTransport Serializer */
public struct NotificationTransportRequest: Sendable, Codable, ParameterConvertible, Hashable {

    public static let nameRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public static let emailTemplateRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public var name: String
    public var mode: NotificationTransportModeEnum?
    public var webhookUrl: String?
    /** Customize the body of the request. Mapping should return data that is JSON-serializable. */
    public var webhookMappingBody: UUID?
    /** Configure additional headers to be sent. Mapping should return a dictionary of key-value pairs */
    public var webhookMappingHeaders: UUID?
    public var emailSubjectPrefix: String?
    public var emailTemplate: String?
    /** Only send notification once, for example when sending a webhook into a chat channel. */
    public var sendOnce: Bool?

    public init(name: String, mode: NotificationTransportModeEnum? = nil, webhookUrl: String? = nil, webhookMappingBody: UUID? = nil, webhookMappingHeaders: UUID? = nil, emailSubjectPrefix: String? = nil, emailTemplate: String? = nil, sendOnce: Bool? = nil) {
        self.name = name
        self.mode = mode
        self.webhookUrl = webhookUrl
        self.webhookMappingBody = webhookMappingBody
        self.webhookMappingHeaders = webhookMappingHeaders
        self.emailSubjectPrefix = emailSubjectPrefix
        self.emailTemplate = emailTemplate
        self.sendOnce = sendOnce
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case mode
        case webhookUrl = "webhook_url"
        case webhookMappingBody = "webhook_mapping_body"
        case webhookMappingHeaders = "webhook_mapping_headers"
        case emailSubjectPrefix = "email_subject_prefix"
        case emailTemplate = "email_template"
        case sendOnce = "send_once"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(mode, forKey: .mode)
        try container.encodeIfPresent(webhookUrl, forKey: .webhookUrl)
        try container.encodeIfPresent(webhookMappingBody, forKey: .webhookMappingBody)
        try container.encodeIfPresent(webhookMappingHeaders, forKey: .webhookMappingHeaders)
        try container.encodeIfPresent(emailSubjectPrefix, forKey: .emailSubjectPrefix)
        try container.encodeIfPresent(emailTemplate, forKey: .emailTemplate)
        try container.encodeIfPresent(sendOnce, forKey: .sendOnce)
    }
}

