//
// Version.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** Get running and latest version. */
public struct Version: Sendable, Codable, ParameterConvertible, Hashable {

    /** Get current version */
    public var versionCurrent: String
    /** Get latest version from cache */
    public var versionLatest: String
    /** Check if latest version is valid */
    public var versionLatestValid: Bool
    /** Get build hash, if version is not latest or released */
    public var buildHash: String
    /** Check if we're running the latest version */
    public var outdated: Bool
    /** Check if any outpost is outdated/has a version mismatch */
    public var outpostOutdated: Bool

    public init(versionCurrent: String, versionLatest: String, versionLatestValid: Bool, buildHash: String, outdated: Bool, outpostOutdated: Bool) {
        self.versionCurrent = versionCurrent
        self.versionLatest = versionLatest
        self.versionLatestValid = versionLatestValid
        self.buildHash = buildHash
        self.outdated = outdated
        self.outpostOutdated = outpostOutdated
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case versionCurrent = "version_current"
        case versionLatest = "version_latest"
        case versionLatestValid = "version_latest_valid"
        case buildHash = "build_hash"
        case outdated
        case outpostOutdated = "outpost_outdated"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(versionCurrent, forKey: .versionCurrent)
        try container.encode(versionLatest, forKey: .versionLatest)
        try container.encode(versionLatestValid, forKey: .versionLatestValid)
        try container.encode(buildHash, forKey: .buildHash)
        try container.encode(outdated, forKey: .outdated)
        try container.encode(outpostOutdated, forKey: .outpostOutdated)
    }
}

