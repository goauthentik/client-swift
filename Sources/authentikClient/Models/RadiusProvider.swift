//
// RadiusProvider.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** RadiusProvider Serializer */
public struct RadiusProvider: Sendable, Codable, ParameterConvertible, Hashable {

    public var pk: Int
    public var name: String
    /** Flow used for authentication when the associated application is accessed by an un-authenticated user. */
    public var authenticationFlow: UUID?
    /** Flow used when authorizing this provider. */
    public var authorizationFlow: UUID
    /** Flow used ending the session from a provider. */
    public var invalidationFlow: UUID
    public var propertyMappings: [UUID]?
    /** Get object component so that we know how to edit the object */
    public var component: String
    /** Internal application name, used in URLs. */
    public var assignedApplicationSlug: String
    /** Application's display Name. */
    public var assignedApplicationName: String
    /** Internal application name, used in URLs. */
    public var assignedBackchannelApplicationSlug: String
    /** Application's display Name. */
    public var assignedBackchannelApplicationName: String
    /** Return object's verbose_name */
    public var verboseName: String
    /** Return object's plural verbose_name */
    public var verboseNamePlural: String
    /** Return internal model name */
    public var metaModelName: String
    /** List of CIDRs (comma-separated) that clients can connect from. A more specific CIDR will match before a looser one. Clients connecting from a non-specified CIDR will be dropped. */
    public var clientNetworks: String?
    /** Shared secret between clients and server to hash packets. */
    public var sharedSecret: String?
    public var outpostSet: [String]
    /** When enabled, code-based multi-factor authentication can be used by appending a semicolon and the TOTP code to the password. This should only be enabled if all users that will bind to this provider have a TOTP device configured, as otherwise a password may incorrectly be rejected if it contains a semicolon. */
    public var mfaSupport: Bool?
    public var certificate: UUID?

    public init(pk: Int, name: String, authenticationFlow: UUID? = nil, authorizationFlow: UUID, invalidationFlow: UUID, propertyMappings: [UUID]? = nil, component: String, assignedApplicationSlug: String, assignedApplicationName: String, assignedBackchannelApplicationSlug: String, assignedBackchannelApplicationName: String, verboseName: String, verboseNamePlural: String, metaModelName: String, clientNetworks: String? = nil, sharedSecret: String? = nil, outpostSet: [String], mfaSupport: Bool? = nil, certificate: UUID? = nil) {
        self.pk = pk
        self.name = name
        self.authenticationFlow = authenticationFlow
        self.authorizationFlow = authorizationFlow
        self.invalidationFlow = invalidationFlow
        self.propertyMappings = propertyMappings
        self.component = component
        self.assignedApplicationSlug = assignedApplicationSlug
        self.assignedApplicationName = assignedApplicationName
        self.assignedBackchannelApplicationSlug = assignedBackchannelApplicationSlug
        self.assignedBackchannelApplicationName = assignedBackchannelApplicationName
        self.verboseName = verboseName
        self.verboseNamePlural = verboseNamePlural
        self.metaModelName = metaModelName
        self.clientNetworks = clientNetworks
        self.sharedSecret = sharedSecret
        self.outpostSet = outpostSet
        self.mfaSupport = mfaSupport
        self.certificate = certificate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pk
        case name
        case authenticationFlow = "authentication_flow"
        case authorizationFlow = "authorization_flow"
        case invalidationFlow = "invalidation_flow"
        case propertyMappings = "property_mappings"
        case component
        case assignedApplicationSlug = "assigned_application_slug"
        case assignedApplicationName = "assigned_application_name"
        case assignedBackchannelApplicationSlug = "assigned_backchannel_application_slug"
        case assignedBackchannelApplicationName = "assigned_backchannel_application_name"
        case verboseName = "verbose_name"
        case verboseNamePlural = "verbose_name_plural"
        case metaModelName = "meta_model_name"
        case clientNetworks = "client_networks"
        case sharedSecret = "shared_secret"
        case outpostSet = "outpost_set"
        case mfaSupport = "mfa_support"
        case certificate
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pk, forKey: .pk)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(authenticationFlow, forKey: .authenticationFlow)
        try container.encode(authorizationFlow, forKey: .authorizationFlow)
        try container.encode(invalidationFlow, forKey: .invalidationFlow)
        try container.encodeIfPresent(propertyMappings, forKey: .propertyMappings)
        try container.encode(component, forKey: .component)
        try container.encode(assignedApplicationSlug, forKey: .assignedApplicationSlug)
        try container.encode(assignedApplicationName, forKey: .assignedApplicationName)
        try container.encode(assignedBackchannelApplicationSlug, forKey: .assignedBackchannelApplicationSlug)
        try container.encode(assignedBackchannelApplicationName, forKey: .assignedBackchannelApplicationName)
        try container.encode(verboseName, forKey: .verboseName)
        try container.encode(verboseNamePlural, forKey: .verboseNamePlural)
        try container.encode(metaModelName, forKey: .metaModelName)
        try container.encodeIfPresent(clientNetworks, forKey: .clientNetworks)
        try container.encodeIfPresent(sharedSecret, forKey: .sharedSecret)
        try container.encode(outpostSet, forKey: .outpostSet)
        try container.encodeIfPresent(mfaSupport, forKey: .mfaSupport)
        try container.encodeIfPresent(certificate, forKey: .certificate)
    }
}

