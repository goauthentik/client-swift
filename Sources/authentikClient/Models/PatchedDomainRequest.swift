//
// PatchedDomainRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** Domain Serializer */
public struct PatchedDomainRequest: Sendable, Codable, ParameterConvertible, Hashable {

    public static let domainRule = StringRule(minLength: 1, maxLength: 253, pattern: nil)
    public var domain: String?
    public var isPrimary: Bool?
    public var tenant: UUID?

    public init(domain: String? = nil, isPrimary: Bool? = nil, tenant: UUID? = nil) {
        self.domain = domain
        self.isPrimary = isPrimary
        self.tenant = tenant
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case domain
        case isPrimary = "is_primary"
        case tenant
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(domain, forKey: .domain)
        try container.encodeIfPresent(isPrimary, forKey: .isPrimary)
        try container.encodeIfPresent(tenant, forKey: .tenant)
    }
}

