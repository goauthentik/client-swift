//
// IdentificationChallengeResponseRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** Identification challenge */
public struct IdentificationChallengeResponseRequest: Sendable, Codable, ParameterConvertible, Hashable {

    public static let componentRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public static let uidFieldRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public var component: String? = "ak-stage-identification"
    public var uidField: String
    public var password: String?
    public var captchaToken: String?

    public init(component: String? = "ak-stage-identification", uidField: String, password: String? = nil, captchaToken: String? = nil) {
        self.component = component
        self.uidField = uidField
        self.password = password
        self.captchaToken = captchaToken
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case component
        case uidField = "uid_field"
        case password
        case captchaToken = "captcha_token"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(component, forKey: .component)
        try container.encode(uidField, forKey: .uidField)
        try container.encodeIfPresent(password, forKey: .password)
        try container.encodeIfPresent(captchaToken, forKey: .captchaToken)
    }
}

