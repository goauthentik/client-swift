//
// PatchedOAuthSourceRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** OAuth Source Serializer */
public struct PatchedOAuthSourceRequest: Sendable, Codable, ParameterConvertible, Hashable {

    public static let nameRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public static let slugRule = StringRule(minLength: 1, maxLength: 50, pattern: "/^[-a-zA-Z0-9_]+$/")
    public static let userPathTemplateRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public static let requestTokenUrlRule = StringRule(minLength: nil, maxLength: 255, pattern: nil)
    public static let authorizationUrlRule = StringRule(minLength: nil, maxLength: 255, pattern: nil)
    public static let accessTokenUrlRule = StringRule(minLength: nil, maxLength: 255, pattern: nil)
    public static let profileUrlRule = StringRule(minLength: nil, maxLength: 255, pattern: nil)
    public static let consumerKeyRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public static let consumerSecretRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    /** Source's display Name. */
    public var name: String?
    /** Internal source name, used in URLs. */
    public var slug: String?
    public var enabled: Bool?
    /** Flow to use when authenticating existing users. */
    public var authenticationFlow: UUID?
    /** Flow to use when enrolling new users. */
    public var enrollmentFlow: UUID?
    public var userPropertyMappings: [UUID]?
    public var groupPropertyMappings: [UUID]?
    public var policyEngineMode: PolicyEngineMode?
    /** How the source determines if an existing user should be authenticated or a new user enrolled. */
    public var userMatchingMode: UserMatchingModeEnum?
    public var userPathTemplate: String?
    /** How the source determines if an existing group should be used or a new group created. */
    public var groupMatchingMode: GroupMatchingModeEnum?
    public var providerType: ProviderTypeEnum?
    /** URL used to request the initial token. This URL is only required for OAuth 1. */
    public var requestTokenUrl: String?
    /** URL the user is redirect to to conest the flow. */
    public var authorizationUrl: String?
    /** URL used by authentik to retrieve tokens. */
    public var accessTokenUrl: String?
    /** URL used by authentik to get user information. */
    public var profileUrl: String?
    public var consumerKey: String?
    public var consumerSecret: String?
    public var additionalScopes: String?
    public var oidcWellKnownUrl: String?
    public var oidcJwksUrl: String?
    public var oidcJwks: [String: JSONValue]?
    /** How to perform authentication during an authorization_code token request flow */
    public var authorizationCodeAuthMethod: AuthorizationCodeAuthMethodEnum?

    public init(name: String? = nil, slug: String? = nil, enabled: Bool? = nil, authenticationFlow: UUID? = nil, enrollmentFlow: UUID? = nil, userPropertyMappings: [UUID]? = nil, groupPropertyMappings: [UUID]? = nil, policyEngineMode: PolicyEngineMode? = nil, userMatchingMode: UserMatchingModeEnum? = nil, userPathTemplate: String? = nil, groupMatchingMode: GroupMatchingModeEnum? = nil, providerType: ProviderTypeEnum? = nil, requestTokenUrl: String? = nil, authorizationUrl: String? = nil, accessTokenUrl: String? = nil, profileUrl: String? = nil, consumerKey: String? = nil, consumerSecret: String? = nil, additionalScopes: String? = nil, oidcWellKnownUrl: String? = nil, oidcJwksUrl: String? = nil, oidcJwks: [String: JSONValue]? = nil, authorizationCodeAuthMethod: AuthorizationCodeAuthMethodEnum? = nil) {
        self.name = name
        self.slug = slug
        self.enabled = enabled
        self.authenticationFlow = authenticationFlow
        self.enrollmentFlow = enrollmentFlow
        self.userPropertyMappings = userPropertyMappings
        self.groupPropertyMappings = groupPropertyMappings
        self.policyEngineMode = policyEngineMode
        self.userMatchingMode = userMatchingMode
        self.userPathTemplate = userPathTemplate
        self.groupMatchingMode = groupMatchingMode
        self.providerType = providerType
        self.requestTokenUrl = requestTokenUrl
        self.authorizationUrl = authorizationUrl
        self.accessTokenUrl = accessTokenUrl
        self.profileUrl = profileUrl
        self.consumerKey = consumerKey
        self.consumerSecret = consumerSecret
        self.additionalScopes = additionalScopes
        self.oidcWellKnownUrl = oidcWellKnownUrl
        self.oidcJwksUrl = oidcJwksUrl
        self.oidcJwks = oidcJwks
        self.authorizationCodeAuthMethod = authorizationCodeAuthMethod
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case slug
        case enabled
        case authenticationFlow = "authentication_flow"
        case enrollmentFlow = "enrollment_flow"
        case userPropertyMappings = "user_property_mappings"
        case groupPropertyMappings = "group_property_mappings"
        case policyEngineMode = "policy_engine_mode"
        case userMatchingMode = "user_matching_mode"
        case userPathTemplate = "user_path_template"
        case groupMatchingMode = "group_matching_mode"
        case providerType = "provider_type"
        case requestTokenUrl = "request_token_url"
        case authorizationUrl = "authorization_url"
        case accessTokenUrl = "access_token_url"
        case profileUrl = "profile_url"
        case consumerKey = "consumer_key"
        case consumerSecret = "consumer_secret"
        case additionalScopes = "additional_scopes"
        case oidcWellKnownUrl = "oidc_well_known_url"
        case oidcJwksUrl = "oidc_jwks_url"
        case oidcJwks = "oidc_jwks"
        case authorizationCodeAuthMethod = "authorization_code_auth_method"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(slug, forKey: .slug)
        try container.encodeIfPresent(enabled, forKey: .enabled)
        try container.encodeIfPresent(authenticationFlow, forKey: .authenticationFlow)
        try container.encodeIfPresent(enrollmentFlow, forKey: .enrollmentFlow)
        try container.encodeIfPresent(userPropertyMappings, forKey: .userPropertyMappings)
        try container.encodeIfPresent(groupPropertyMappings, forKey: .groupPropertyMappings)
        try container.encodeIfPresent(policyEngineMode, forKey: .policyEngineMode)
        try container.encodeIfPresent(userMatchingMode, forKey: .userMatchingMode)
        try container.encodeIfPresent(userPathTemplate, forKey: .userPathTemplate)
        try container.encodeIfPresent(groupMatchingMode, forKey: .groupMatchingMode)
        try container.encodeIfPresent(providerType, forKey: .providerType)
        try container.encodeIfPresent(requestTokenUrl, forKey: .requestTokenUrl)
        try container.encodeIfPresent(authorizationUrl, forKey: .authorizationUrl)
        try container.encodeIfPresent(accessTokenUrl, forKey: .accessTokenUrl)
        try container.encodeIfPresent(profileUrl, forKey: .profileUrl)
        try container.encodeIfPresent(consumerKey, forKey: .consumerKey)
        try container.encodeIfPresent(consumerSecret, forKey: .consumerSecret)
        try container.encodeIfPresent(additionalScopes, forKey: .additionalScopes)
        try container.encodeIfPresent(oidcWellKnownUrl, forKey: .oidcWellKnownUrl)
        try container.encodeIfPresent(oidcJwksUrl, forKey: .oidcJwksUrl)
        try container.encodeIfPresent(oidcJwks, forKey: .oidcJwks)
        try container.encodeIfPresent(authorizationCodeAuthMethod, forKey: .authorizationCodeAuthMethod)
    }
}

