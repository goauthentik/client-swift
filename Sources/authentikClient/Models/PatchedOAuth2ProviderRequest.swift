//
// PatchedOAuth2ProviderRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** OAuth2Provider Serializer */
public struct PatchedOAuth2ProviderRequest: Sendable, Codable, ParameterConvertible, Hashable {

    public static let nameRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public static let clientIdRule = StringRule(minLength: 1, maxLength: 255, pattern: nil)
    public static let clientSecretRule = StringRule(minLength: nil, maxLength: 255, pattern: nil)
    public static let accessCodeValidityRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public static let accessTokenValidityRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public static let refreshTokenValidityRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public var name: String?
    /** Flow used for authentication when the associated application is accessed by an un-authenticated user. */
    public var authenticationFlow: UUID?
    /** Flow used when authorizing this provider. */
    public var authorizationFlow: UUID?
    /** Flow used ending the session from a provider. */
    public var invalidationFlow: UUID?
    public var propertyMappings: [UUID]?
    /** Confidential clients are capable of maintaining the confidentiality of their credentials. Public clients are incapable */
    public var clientType: ClientTypeEnum?
    public var clientId: String?
    public var clientSecret: String?
    /** Access codes not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3). */
    public var accessCodeValidity: String?
    /** Tokens not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3). */
    public var accessTokenValidity: String?
    /** Tokens not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3). */
    public var refreshTokenValidity: String?
    /** Include User claims from scopes in the id_token, for applications that don't access the userinfo endpoint. */
    public var includeClaimsInIdToken: Bool?
    /** Key used to sign the tokens. */
    public var signingKey: UUID?
    /** Key used to encrypt the tokens. When set, tokens will be encrypted and returned as JWEs. */
    public var encryptionKey: UUID?
    public var redirectUris: [RedirectURIRequest]?
    public var backchannelLogoutUri: String?
    /** Configure what data should be used as unique User Identifier. For most cases, the default should be fine. */
    public var subMode: SubModeEnum?
    /** Configure how the issuer field of the ID Token should be filled. */
    public var issuerMode: IssuerModeEnum?
    public var jwtFederationSources: [UUID]?
    public var jwtFederationProviders: [Int]?

    public init(name: String? = nil, authenticationFlow: UUID? = nil, authorizationFlow: UUID? = nil, invalidationFlow: UUID? = nil, propertyMappings: [UUID]? = nil, clientType: ClientTypeEnum? = nil, clientId: String? = nil, clientSecret: String? = nil, accessCodeValidity: String? = nil, accessTokenValidity: String? = nil, refreshTokenValidity: String? = nil, includeClaimsInIdToken: Bool? = nil, signingKey: UUID? = nil, encryptionKey: UUID? = nil, redirectUris: [RedirectURIRequest]? = nil, backchannelLogoutUri: String? = nil, subMode: SubModeEnum? = nil, issuerMode: IssuerModeEnum? = nil, jwtFederationSources: [UUID]? = nil, jwtFederationProviders: [Int]? = nil) {
        self.name = name
        self.authenticationFlow = authenticationFlow
        self.authorizationFlow = authorizationFlow
        self.invalidationFlow = invalidationFlow
        self.propertyMappings = propertyMappings
        self.clientType = clientType
        self.clientId = clientId
        self.clientSecret = clientSecret
        self.accessCodeValidity = accessCodeValidity
        self.accessTokenValidity = accessTokenValidity
        self.refreshTokenValidity = refreshTokenValidity
        self.includeClaimsInIdToken = includeClaimsInIdToken
        self.signingKey = signingKey
        self.encryptionKey = encryptionKey
        self.redirectUris = redirectUris
        self.backchannelLogoutUri = backchannelLogoutUri
        self.subMode = subMode
        self.issuerMode = issuerMode
        self.jwtFederationSources = jwtFederationSources
        self.jwtFederationProviders = jwtFederationProviders
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case authenticationFlow = "authentication_flow"
        case authorizationFlow = "authorization_flow"
        case invalidationFlow = "invalidation_flow"
        case propertyMappings = "property_mappings"
        case clientType = "client_type"
        case clientId = "client_id"
        case clientSecret = "client_secret"
        case accessCodeValidity = "access_code_validity"
        case accessTokenValidity = "access_token_validity"
        case refreshTokenValidity = "refresh_token_validity"
        case includeClaimsInIdToken = "include_claims_in_id_token"
        case signingKey = "signing_key"
        case encryptionKey = "encryption_key"
        case redirectUris = "redirect_uris"
        case backchannelLogoutUri = "backchannel_logout_uri"
        case subMode = "sub_mode"
        case issuerMode = "issuer_mode"
        case jwtFederationSources = "jwt_federation_sources"
        case jwtFederationProviders = "jwt_federation_providers"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(authenticationFlow, forKey: .authenticationFlow)
        try container.encodeIfPresent(authorizationFlow, forKey: .authorizationFlow)
        try container.encodeIfPresent(invalidationFlow, forKey: .invalidationFlow)
        try container.encodeIfPresent(propertyMappings, forKey: .propertyMappings)
        try container.encodeIfPresent(clientType, forKey: .clientType)
        try container.encodeIfPresent(clientId, forKey: .clientId)
        try container.encodeIfPresent(clientSecret, forKey: .clientSecret)
        try container.encodeIfPresent(accessCodeValidity, forKey: .accessCodeValidity)
        try container.encodeIfPresent(accessTokenValidity, forKey: .accessTokenValidity)
        try container.encodeIfPresent(refreshTokenValidity, forKey: .refreshTokenValidity)
        try container.encodeIfPresent(includeClaimsInIdToken, forKey: .includeClaimsInIdToken)
        try container.encodeIfPresent(signingKey, forKey: .signingKey)
        try container.encodeIfPresent(encryptionKey, forKey: .encryptionKey)
        try container.encodeIfPresent(redirectUris, forKey: .redirectUris)
        try container.encodeIfPresent(backchannelLogoutUri, forKey: .backchannelLogoutUri)
        try container.encodeIfPresent(subMode, forKey: .subMode)
        try container.encodeIfPresent(issuerMode, forKey: .issuerMode)
        try container.encodeIfPresent(jwtFederationSources, forKey: .jwtFederationSources)
        try container.encodeIfPresent(jwtFederationProviders, forKey: .jwtFederationProviders)
    }
}

