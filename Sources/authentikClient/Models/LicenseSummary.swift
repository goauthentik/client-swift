//
// LicenseSummary.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** Serializer for license status */
public struct LicenseSummary: Sendable, Codable, ParameterConvertible, Hashable {

    public var internalUsers: Int
    public var externalUsers: Int
    public var status: LicenseSummaryStatusEnum
    public var latestValid: Date
    public var licenseFlags: [LicenseFlagsEnum]

    public init(internalUsers: Int, externalUsers: Int, status: LicenseSummaryStatusEnum, latestValid: Date, licenseFlags: [LicenseFlagsEnum]) {
        self.internalUsers = internalUsers
        self.externalUsers = externalUsers
        self.status = status
        self.latestValid = latestValid
        self.licenseFlags = licenseFlags
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case internalUsers = "internal_users"
        case externalUsers = "external_users"
        case status
        case latestValid = "latest_valid"
        case licenseFlags = "license_flags"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(internalUsers, forKey: .internalUsers)
        try container.encode(externalUsers, forKey: .externalUsers)
        try container.encode(status, forKey: .status)
        try container.encode(latestValid, forKey: .latestValid)
        try container.encode(licenseFlags, forKey: .licenseFlags)
    }
}

