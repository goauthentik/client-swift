//
// PromptChallengeResponseRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** Validate response, fields are dynamically created based on the stage */
public struct PromptChallengeResponseRequest: Sendable, Codable, ParameterConvertible, Hashable {

    public static let componentRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public var component: String? = "ak-stage-prompt"

    public init(component: String? = "ak-stage-prompt") {
        self.component = component
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case component
    }

    public var additionalProperties: [String: JSONValue] = [:]

    public subscript(key: String) -> JSONValue? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(component, forKey: .component)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        component = try container.decodeIfPresent(String.self, forKey: .component)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("component")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(JSONValue.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

