//
// ExpiringBaseGrantModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** Serializer for BaseGrantModel and ExpiringBaseGrant */
public struct ExpiringBaseGrantModel: Sendable, Codable, ParameterConvertible, Hashable {

    public var pk: Int
    public var provider: OAuth2Provider
    public var user: User
    /** Check if token is expired yet. */
    public var isExpired: Bool
    public var expires: Date?
    public var scope: [String]

    public init(pk: Int, provider: OAuth2Provider, user: User, isExpired: Bool, expires: Date? = nil, scope: [String]) {
        self.pk = pk
        self.provider = provider
        self.user = user
        self.isExpired = isExpired
        self.expires = expires
        self.scope = scope
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pk
        case provider
        case user
        case isExpired = "is_expired"
        case expires
        case scope
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pk, forKey: .pk)
        try container.encode(provider, forKey: .provider)
        try container.encode(user, forKey: .user)
        try container.encode(isExpired, forKey: .isExpired)
        try container.encodeIfPresent(expires, forKey: .expires)
        try container.encode(scope, forKey: .scope)
    }
}

