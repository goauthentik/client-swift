//
// PatchedEventMatcherPolicyRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** Event Matcher Policy Serializer */
public struct PatchedEventMatcherPolicyRequest: Sendable, Codable, ParameterConvertible, Hashable {

    public static let nameRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public static let clientIpRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public var name: String?
    /** When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged. */
    public var executionLogging: Bool?
    /** Match created events with this action type. When left empty, all action types will be matched. */
    public var action: EventActions?
    /** Matches Event's Client IP (strict matching, for network matching use an Expression Policy) */
    public var clientIp: String?
    /** Match events created by selected application. When left empty, all applications are matched. */
    public var app: AppEnum?
    /** Match events created by selected model. When left empty, all models are matched. When an app is selected, all the application's models are matched. */
    public var model: ModelEnum?

    public init(name: String? = nil, executionLogging: Bool? = nil, action: EventActions? = nil, clientIp: String? = nil, app: AppEnum? = nil, model: ModelEnum? = nil) {
        self.name = name
        self.executionLogging = executionLogging
        self.action = action
        self.clientIp = clientIp
        self.app = app
        self.model = model
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case executionLogging = "execution_logging"
        case action
        case clientIp = "client_ip"
        case app
        case model
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(executionLogging, forKey: .executionLogging)
        try container.encodeIfPresent(action, forKey: .action)
        try container.encodeIfPresent(clientIp, forKey: .clientIp)
        try container.encodeIfPresent(app, forKey: .app)
        try container.encodeIfPresent(model, forKey: .model)
    }
}

