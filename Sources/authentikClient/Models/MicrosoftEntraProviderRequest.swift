//
// MicrosoftEntraProviderRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** MicrosoftEntraProvider Serializer */
public struct MicrosoftEntraProviderRequest: Sendable, Codable, ParameterConvertible, Hashable {

    public static let nameRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public static let clientIdRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public static let clientSecretRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public static let tenantIdRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public var name: String
    public var propertyMappings: [UUID]?
    /** Property mappings used for group creation/updating. */
    public var propertyMappingsGroup: [UUID]?
    public var clientId: String
    public var clientSecret: String
    public var tenantId: String
    public var excludeUsersServiceAccount: Bool?
    public var filterGroup: UUID?
    public var userDeleteAction: OutgoingSyncDeleteAction?
    public var groupDeleteAction: OutgoingSyncDeleteAction?
    /** When enabled, provider will not modify or create objects in the remote system. */
    public var dryRun: Bool?

    public init(name: String, propertyMappings: [UUID]? = nil, propertyMappingsGroup: [UUID]? = nil, clientId: String, clientSecret: String, tenantId: String, excludeUsersServiceAccount: Bool? = nil, filterGroup: UUID? = nil, userDeleteAction: OutgoingSyncDeleteAction? = nil, groupDeleteAction: OutgoingSyncDeleteAction? = nil, dryRun: Bool? = nil) {
        self.name = name
        self.propertyMappings = propertyMappings
        self.propertyMappingsGroup = propertyMappingsGroup
        self.clientId = clientId
        self.clientSecret = clientSecret
        self.tenantId = tenantId
        self.excludeUsersServiceAccount = excludeUsersServiceAccount
        self.filterGroup = filterGroup
        self.userDeleteAction = userDeleteAction
        self.groupDeleteAction = groupDeleteAction
        self.dryRun = dryRun
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case propertyMappings = "property_mappings"
        case propertyMappingsGroup = "property_mappings_group"
        case clientId = "client_id"
        case clientSecret = "client_secret"
        case tenantId = "tenant_id"
        case excludeUsersServiceAccount = "exclude_users_service_account"
        case filterGroup = "filter_group"
        case userDeleteAction = "user_delete_action"
        case groupDeleteAction = "group_delete_action"
        case dryRun = "dry_run"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(propertyMappings, forKey: .propertyMappings)
        try container.encodeIfPresent(propertyMappingsGroup, forKey: .propertyMappingsGroup)
        try container.encode(clientId, forKey: .clientId)
        try container.encode(clientSecret, forKey: .clientSecret)
        try container.encode(tenantId, forKey: .tenantId)
        try container.encodeIfPresent(excludeUsersServiceAccount, forKey: .excludeUsersServiceAccount)
        try container.encodeIfPresent(filterGroup, forKey: .filterGroup)
        try container.encodeIfPresent(userDeleteAction, forKey: .userDeleteAction)
        try container.encodeIfPresent(groupDeleteAction, forKey: .groupDeleteAction)
        try container.encodeIfPresent(dryRun, forKey: .dryRun)
    }
}

