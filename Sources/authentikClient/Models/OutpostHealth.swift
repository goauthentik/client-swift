//
// OutpostHealth.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** Outpost health status */
public struct OutpostHealth: Sendable, Codable, ParameterConvertible, Hashable {

    public var uid: String
    public var lastSeen: Date
    public var version: String
    public var golangVersion: String
    public var opensslEnabled: Bool
    public var opensslVersion: String
    /** Get FIPS enabled */
    public var fipsEnabled: Bool?
    public var versionShould: String
    public var versionOutdated: Bool
    public var buildHash: String
    public var buildHashShould: String
    public var hostname: String

    public init(uid: String, lastSeen: Date, version: String, golangVersion: String, opensslEnabled: Bool, opensslVersion: String, fipsEnabled: Bool?, versionShould: String, versionOutdated: Bool, buildHash: String, buildHashShould: String, hostname: String) {
        self.uid = uid
        self.lastSeen = lastSeen
        self.version = version
        self.golangVersion = golangVersion
        self.opensslEnabled = opensslEnabled
        self.opensslVersion = opensslVersion
        self.fipsEnabled = fipsEnabled
        self.versionShould = versionShould
        self.versionOutdated = versionOutdated
        self.buildHash = buildHash
        self.buildHashShould = buildHashShould
        self.hostname = hostname
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case uid
        case lastSeen = "last_seen"
        case version
        case golangVersion = "golang_version"
        case opensslEnabled = "openssl_enabled"
        case opensslVersion = "openssl_version"
        case fipsEnabled = "fips_enabled"
        case versionShould = "version_should"
        case versionOutdated = "version_outdated"
        case buildHash = "build_hash"
        case buildHashShould = "build_hash_should"
        case hostname
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(uid, forKey: .uid)
        try container.encode(lastSeen, forKey: .lastSeen)
        try container.encode(version, forKey: .version)
        try container.encode(golangVersion, forKey: .golangVersion)
        try container.encode(opensslEnabled, forKey: .opensslEnabled)
        try container.encode(opensslVersion, forKey: .opensslVersion)
        try container.encode(fipsEnabled, forKey: .fipsEnabled)
        try container.encode(versionShould, forKey: .versionShould)
        try container.encode(versionOutdated, forKey: .versionOutdated)
        try container.encode(buildHash, forKey: .buildHash)
        try container.encode(buildHashShould, forKey: .buildHashShould)
        try container.encode(hostname, forKey: .hostname)
    }
}

