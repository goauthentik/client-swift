//
// TransactionPolicyBindingRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** PolicyBindingSerializer which does not require target as target is set implicitly */
public struct TransactionPolicyBindingRequest: Sendable, Codable, ParameterConvertible, Hashable {

    public static let orderRule = NumericRule<Int>(minimum: -2147483648, exclusiveMinimum: false, maximum: 2147483647, exclusiveMaximum: false, multipleOf: nil)
    public static let timeoutRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 2147483647, exclusiveMaximum: false, multipleOf: nil)
    public var policy: UUID?
    public var group: UUID?
    public var user: Int?
    /** Negates the outcome of the policy. Messages are unaffected. */
    public var negate: Bool?
    public var enabled: Bool?
    public var order: Int
    /** Timeout after which Policy execution is terminated. */
    public var timeout: Int?
    /** Result if the Policy execution fails. */
    public var failureResult: Bool?

    public init(policy: UUID? = nil, group: UUID? = nil, user: Int? = nil, negate: Bool? = nil, enabled: Bool? = nil, order: Int, timeout: Int? = nil, failureResult: Bool? = nil) {
        self.policy = policy
        self.group = group
        self.user = user
        self.negate = negate
        self.enabled = enabled
        self.order = order
        self.timeout = timeout
        self.failureResult = failureResult
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case policy
        case group
        case user
        case negate
        case enabled
        case order
        case timeout
        case failureResult = "failure_result"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(policy, forKey: .policy)
        try container.encodeIfPresent(group, forKey: .group)
        try container.encodeIfPresent(user, forKey: .user)
        try container.encodeIfPresent(negate, forKey: .negate)
        try container.encodeIfPresent(enabled, forKey: .enabled)
        try container.encode(order, forKey: .order)
        try container.encodeIfPresent(timeout, forKey: .timeout)
        try container.encodeIfPresent(failureResult, forKey: .failureResult)
    }
}

