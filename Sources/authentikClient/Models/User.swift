//
// User.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** User Serializer */
public struct User: Sendable, Codable, ParameterConvertible, Hashable {

    public static let usernameRule = StringRule(minLength: nil, maxLength: 150, pattern: nil)
    public static let emailRule = StringRule(minLength: nil, maxLength: 254, pattern: nil)
    public var pk: Int
    public var username: String
    /** User's display name. */
    public var name: String
    /** Designates whether this user should be treated as active. Unselect this instead of deleting accounts. */
    public var isActive: Bool?
    public var lastLogin: Date?
    public var dateJoined: Date
    public var isSuperuser: Bool
    public var groups: [UUID]?
    public var groupsObj: [UserGroup]?
    public var email: String?
    /** User's avatar, either a http/https URL or a data URI */
    public var avatar: String
    public var attributes: [String: JSONValue]?
    public var uid: String
    public var path: String?
    public var type: UserTypeEnum?
    public var uuid: UUID
    public var passwordChangeDate: Date
    public var lastUpdated: Date

    public init(pk: Int, username: String, name: String, isActive: Bool? = nil, lastLogin: Date? = nil, dateJoined: Date, isSuperuser: Bool, groups: [UUID]? = nil, groupsObj: [UserGroup]?, email: String? = nil, avatar: String, attributes: [String: JSONValue]? = nil, uid: String, path: String? = nil, type: UserTypeEnum? = nil, uuid: UUID, passwordChangeDate: Date, lastUpdated: Date) {
        self.pk = pk
        self.username = username
        self.name = name
        self.isActive = isActive
        self.lastLogin = lastLogin
        self.dateJoined = dateJoined
        self.isSuperuser = isSuperuser
        self.groups = groups
        self.groupsObj = groupsObj
        self.email = email
        self.avatar = avatar
        self.attributes = attributes
        self.uid = uid
        self.path = path
        self.type = type
        self.uuid = uuid
        self.passwordChangeDate = passwordChangeDate
        self.lastUpdated = lastUpdated
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pk
        case username
        case name
        case isActive = "is_active"
        case lastLogin = "last_login"
        case dateJoined = "date_joined"
        case isSuperuser = "is_superuser"
        case groups
        case groupsObj = "groups_obj"
        case email
        case avatar
        case attributes
        case uid
        case path
        case type
        case uuid
        case passwordChangeDate = "password_change_date"
        case lastUpdated = "last_updated"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pk, forKey: .pk)
        try container.encode(username, forKey: .username)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(isActive, forKey: .isActive)
        try container.encodeIfPresent(lastLogin, forKey: .lastLogin)
        try container.encode(dateJoined, forKey: .dateJoined)
        try container.encode(isSuperuser, forKey: .isSuperuser)
        try container.encodeIfPresent(groups, forKey: .groups)
        try container.encode(groupsObj, forKey: .groupsObj)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encode(avatar, forKey: .avatar)
        try container.encodeIfPresent(attributes, forKey: .attributes)
        try container.encode(uid, forKey: .uid)
        try container.encodeIfPresent(path, forKey: .path)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encode(uuid, forKey: .uuid)
        try container.encode(passwordChangeDate, forKey: .passwordChangeDate)
        try container.encode(lastUpdated, forKey: .lastUpdated)
    }
}

