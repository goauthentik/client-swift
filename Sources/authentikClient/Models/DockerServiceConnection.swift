//
// DockerServiceConnection.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** DockerServiceConnection Serializer */
public struct DockerServiceConnection: Sendable, Codable, ParameterConvertible, Hashable {

    public var pk: UUID
    public var name: String
    /** If enabled, use the local connection. Required Docker socket/Kubernetes Integration */
    public var local: Bool?
    public var component: String
    /** Return object's verbose_name */
    public var verboseName: String
    /** Return object's plural verbose_name */
    public var verboseNamePlural: String
    /** Return internal model name */
    public var metaModelName: String
    /** Can be in the format of 'unix://<path>' when connecting to a local docker daemon, or 'https://<hostname>:2376' when connecting to a remote system. */
    public var url: String
    /** CA which the endpoint's Certificate is verified against. Can be left empty for no validation. */
    public var tlsVerification: UUID?
    /** Certificate/Key used for authentication. Can be left empty for no authentication. */
    public var tlsAuthentication: UUID?

    public init(pk: UUID, name: String, local: Bool? = nil, component: String, verboseName: String, verboseNamePlural: String, metaModelName: String, url: String, tlsVerification: UUID? = nil, tlsAuthentication: UUID? = nil) {
        self.pk = pk
        self.name = name
        self.local = local
        self.component = component
        self.verboseName = verboseName
        self.verboseNamePlural = verboseNamePlural
        self.metaModelName = metaModelName
        self.url = url
        self.tlsVerification = tlsVerification
        self.tlsAuthentication = tlsAuthentication
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pk
        case name
        case local
        case component
        case verboseName = "verbose_name"
        case verboseNamePlural = "verbose_name_plural"
        case metaModelName = "meta_model_name"
        case url
        case tlsVerification = "tls_verification"
        case tlsAuthentication = "tls_authentication"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pk, forKey: .pk)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(local, forKey: .local)
        try container.encode(component, forKey: .component)
        try container.encode(verboseName, forKey: .verboseName)
        try container.encode(verboseNamePlural, forKey: .verboseNamePlural)
        try container.encode(metaModelName, forKey: .metaModelName)
        try container.encode(url, forKey: .url)
        try container.encodeIfPresent(tlsVerification, forKey: .tlsVerification)
        try container.encodeIfPresent(tlsAuthentication, forKey: .tlsAuthentication)
    }
}

