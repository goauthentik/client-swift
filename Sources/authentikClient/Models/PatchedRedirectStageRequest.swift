//
// PatchedRedirectStageRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** RedirectStage Serializer */
public struct PatchedRedirectStageRequest: Sendable, Codable, ParameterConvertible, Hashable {

    public static let nameRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public var name: String?
    public var flowSet: [FlowSetRequest]?
    public var keepContext: Bool?
    public var mode: RedirectStageModeEnum?
    public var targetStatic: String?
    public var targetFlow: UUID?

    public init(name: String? = nil, flowSet: [FlowSetRequest]? = nil, keepContext: Bool? = nil, mode: RedirectStageModeEnum? = nil, targetStatic: String? = nil, targetFlow: UUID? = nil) {
        self.name = name
        self.flowSet = flowSet
        self.keepContext = keepContext
        self.mode = mode
        self.targetStatic = targetStatic
        self.targetFlow = targetFlow
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case flowSet = "flow_set"
        case keepContext = "keep_context"
        case mode
        case targetStatic = "target_static"
        case targetFlow = "target_flow"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(flowSet, forKey: .flowSet)
        try container.encodeIfPresent(keepContext, forKey: .keepContext)
        try container.encodeIfPresent(mode, forKey: .mode)
        try container.encodeIfPresent(targetStatic, forKey: .targetStatic)
        try container.encodeIfPresent(targetFlow, forKey: .targetFlow)
    }
}

