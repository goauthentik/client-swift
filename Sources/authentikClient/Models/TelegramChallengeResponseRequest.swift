//
// TelegramChallengeResponseRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** Base class for all challenge responses */
public struct TelegramChallengeResponseRequest: Sendable, Codable, ParameterConvertible, Hashable {

    public static let componentRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public static let firstNameRule = StringRule(minLength: 1, maxLength: 255, pattern: nil)
    public static let lastNameRule = StringRule(minLength: 1, maxLength: 255, pattern: nil)
    public static let usernameRule = StringRule(minLength: 1, maxLength: 255, pattern: nil)
    public static let photoUrlRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public static let hashRule = StringRule(minLength: 1, maxLength: 64, pattern: nil)
    public var component: String? = "ak-source-telegram"
    public var id: Int
    public var firstName: String?
    public var lastName: String?
    public var username: String?
    public var photoUrl: String?
    public var authDate: Int
    public var hash: String

    public init(component: String? = "ak-source-telegram", id: Int, firstName: String? = nil, lastName: String? = nil, username: String? = nil, photoUrl: String? = nil, authDate: Int, hash: String) {
        self.component = component
        self.id = id
        self.firstName = firstName
        self.lastName = lastName
        self.username = username
        self.photoUrl = photoUrl
        self.authDate = authDate
        self.hash = hash
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case component
        case id
        case firstName = "first_name"
        case lastName = "last_name"
        case username
        case photoUrl = "photo_url"
        case authDate = "auth_date"
        case hash
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(component, forKey: .component)
        try container.encode(id, forKey: .id)
        try container.encodeIfPresent(firstName, forKey: .firstName)
        try container.encodeIfPresent(lastName, forKey: .lastName)
        try container.encodeIfPresent(username, forKey: .username)
        try container.encodeIfPresent(photoUrl, forKey: .photoUrl)
        try container.encode(authDate, forKey: .authDate)
        try container.encode(hash, forKey: .hash)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension TelegramChallengeResponseRequest: Identifiable {}
