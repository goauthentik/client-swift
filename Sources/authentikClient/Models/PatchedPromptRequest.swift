//
// PatchedPromptRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** Prompt Serializer */
public struct PatchedPromptRequest: Sendable, Codable, ParameterConvertible, Hashable {

    public static let nameRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public static let fieldKeyRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public static let labelRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public static let orderRule = NumericRule<Int>(minimum: -2147483648, exclusiveMinimum: false, maximum: 2147483647, exclusiveMaximum: false, multipleOf: nil)
    public var name: String?
    /** Name of the form field, also used to store the value */
    public var fieldKey: String?
    public var label: String?
    public var type: PromptTypeEnum?
    public var _required: Bool?
    /** Optionally provide a short hint that describes the expected input value. When creating a fixed choice field, enable interpreting as expression and return a list to return multiple choices. */
    public var placeholder: String?
    /** Optionally pre-fill the input with an initial value. When creating a fixed choice field, enable interpreting as expression and return a list to return multiple default choices. */
    public var initialValue: String?
    public var order: Int?
    public var subText: String?
    public var placeholderExpression: Bool?
    public var initialValueExpression: Bool?

    public init(name: String? = nil, fieldKey: String? = nil, label: String? = nil, type: PromptTypeEnum? = nil, _required: Bool? = nil, placeholder: String? = nil, initialValue: String? = nil, order: Int? = nil, subText: String? = nil, placeholderExpression: Bool? = nil, initialValueExpression: Bool? = nil) {
        self.name = name
        self.fieldKey = fieldKey
        self.label = label
        self.type = type
        self._required = _required
        self.placeholder = placeholder
        self.initialValue = initialValue
        self.order = order
        self.subText = subText
        self.placeholderExpression = placeholderExpression
        self.initialValueExpression = initialValueExpression
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case fieldKey = "field_key"
        case label
        case type
        case _required = "required"
        case placeholder
        case initialValue = "initial_value"
        case order
        case subText = "sub_text"
        case placeholderExpression = "placeholder_expression"
        case initialValueExpression = "initial_value_expression"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(fieldKey, forKey: .fieldKey)
        try container.encodeIfPresent(label, forKey: .label)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(_required, forKey: ._required)
        try container.encodeIfPresent(placeholder, forKey: .placeholder)
        try container.encodeIfPresent(initialValue, forKey: .initialValue)
        try container.encodeIfPresent(order, forKey: .order)
        try container.encodeIfPresent(subText, forKey: .subText)
        try container.encodeIfPresent(placeholderExpression, forKey: .placeholderExpression)
        try container.encodeIfPresent(initialValueExpression, forKey: .initialValueExpression)
    }
}

