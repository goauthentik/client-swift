//
// FlowsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class FlowsAPI {

    /**

     - parameter flowStageBindingRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func flowsBindingsCreate(flowStageBindingRequest: FlowStageBindingRequest, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: FlowStageBinding?, _ error: Error?) -> Void)) -> RequestTask {
        return flowsBindingsCreateWithRequestBuilder(flowStageBindingRequest: flowStageBindingRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /flows/bindings/
     - FlowStageBinding Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter flowStageBindingRequest: (body)  
     - returns: RequestBuilder<FlowStageBinding> 
     */
    open class func flowsBindingsCreateWithRequestBuilder(flowStageBindingRequest: FlowStageBindingRequest) -> RequestBuilder<FlowStageBinding> {
        let localVariablePath = "/flows/bindings/"
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: flowStageBindingRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<FlowStageBinding>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter fsbUuid: (path) A UUID string identifying this Flow Stage Binding. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func flowsBindingsDestroy(fsbUuid: UUID, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return flowsBindingsDestroyWithRequestBuilder(fsbUuid: fsbUuid).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /flows/bindings/{fsb_uuid}/
     - FlowStageBinding Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter fsbUuid: (path) A UUID string identifying this Flow Stage Binding. 
     - returns: RequestBuilder<Void> 
     */
    open class func flowsBindingsDestroyWithRequestBuilder(fsbUuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/flows/bindings/{fsb_uuid}/"
        let fsbUuidPreEscape = "\(APIHelper.mapValueToPathItem(fsbUuid))"
        let fsbUuidPostEscape = fsbUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{fsb_uuid}", with: fsbUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter invalidResponseAction
     */
    public enum InvalidResponseAction_flowsBindingsList: String, CaseIterable {
        case restart = "restart"
        case restartWithContext = "restart_with_context"
        case retry = "retry"
    }

    /**
     * enum for parameter policyEngineMode
     */
    public enum PolicyEngineMode_flowsBindingsList: String, CaseIterable {
        case all = "all"
        case any = "any"
    }

    /**

     - parameter evaluateOnPlan: (query)  (optional)
     - parameter fsbUuid: (query)  (optional)
     - parameter invalidResponseAction: (query) Configure how the flow executor should handle an invalid response to a challenge. RETRY returns the error message and a similar challenge to the executor. RESTART restarts the flow from the beginning, and RESTART_WITH_CONTEXT restarts the flow while keeping the current context.  * &#x60;retry&#x60; - Retry * &#x60;restart&#x60; - Restart * &#x60;restart_with_context&#x60; - Restart With Context (optional)
     - parameter order: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter pbmUuid: (query)  (optional)
     - parameter policies: (query)  (optional)
     - parameter policyEngineMode: (query) * &#x60;all&#x60; - all, all policies must pass * &#x60;any&#x60; - any, any policy must pass (optional)
     - parameter reEvaluatePolicies: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter stage: (query)  (optional)
     - parameter target: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func flowsBindingsList(evaluateOnPlan: Bool? = nil, fsbUuid: UUID? = nil, invalidResponseAction: InvalidResponseAction_flowsBindingsList? = nil, order: Int? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, pbmUuid: UUID? = nil, policies: [UUID]? = nil, policyEngineMode: PolicyEngineMode_flowsBindingsList? = nil, reEvaluatePolicies: Bool? = nil, search: String? = nil, stage: UUID? = nil, target: UUID? = nil, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedFlowStageBindingList?, _ error: Error?) -> Void)) -> RequestTask {
        return flowsBindingsListWithRequestBuilder(evaluateOnPlan: evaluateOnPlan, fsbUuid: fsbUuid, invalidResponseAction: invalidResponseAction, order: order, ordering: ordering, page: page, pageSize: pageSize, pbmUuid: pbmUuid, policies: policies, policyEngineMode: policyEngineMode, reEvaluatePolicies: reEvaluatePolicies, search: search, stage: stage, target: target).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /flows/bindings/
     - FlowStageBinding Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter evaluateOnPlan: (query)  (optional)
     - parameter fsbUuid: (query)  (optional)
     - parameter invalidResponseAction: (query) Configure how the flow executor should handle an invalid response to a challenge. RETRY returns the error message and a similar challenge to the executor. RESTART restarts the flow from the beginning, and RESTART_WITH_CONTEXT restarts the flow while keeping the current context.  * &#x60;retry&#x60; - Retry * &#x60;restart&#x60; - Restart * &#x60;restart_with_context&#x60; - Restart With Context (optional)
     - parameter order: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter pbmUuid: (query)  (optional)
     - parameter policies: (query)  (optional)
     - parameter policyEngineMode: (query) * &#x60;all&#x60; - all, all policies must pass * &#x60;any&#x60; - any, any policy must pass (optional)
     - parameter reEvaluatePolicies: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter stage: (query)  (optional)
     - parameter target: (query)  (optional)
     - returns: RequestBuilder<PaginatedFlowStageBindingList> 
     */
    open class func flowsBindingsListWithRequestBuilder(evaluateOnPlan: Bool? = nil, fsbUuid: UUID? = nil, invalidResponseAction: InvalidResponseAction_flowsBindingsList? = nil, order: Int? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, pbmUuid: UUID? = nil, policies: [UUID]? = nil, policyEngineMode: PolicyEngineMode_flowsBindingsList? = nil, reEvaluatePolicies: Bool? = nil, search: String? = nil, stage: UUID? = nil, target: UUID? = nil) -> RequestBuilder<PaginatedFlowStageBindingList> {
        let localVariablePath = "/flows/bindings/"
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "evaluate_on_plan": (wrappedValue: evaluateOnPlan?.encodeToJSON(), isExplode: true),
            "fsb_uuid": (wrappedValue: fsbUuid?.encodeToJSON(), isExplode: true),
            "invalid_response_action": (wrappedValue: invalidResponseAction?.encodeToJSON(), isExplode: true),
            "order": (wrappedValue: order?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "pbm_uuid": (wrappedValue: pbmUuid?.encodeToJSON(), isExplode: true),
            "policies": (wrappedValue: policies?.encodeToJSON(), isExplode: true),
            "policy_engine_mode": (wrappedValue: policyEngineMode?.encodeToJSON(), isExplode: true),
            "re_evaluate_policies": (wrappedValue: reEvaluatePolicies?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
            "stage": (wrappedValue: stage?.encodeToJSON(), isExplode: true),
            "target": (wrappedValue: target?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedFlowStageBindingList>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter fsbUuid: (path) A UUID string identifying this Flow Stage Binding. 
     - parameter patchedFlowStageBindingRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func flowsBindingsPartialUpdate(fsbUuid: UUID, patchedFlowStageBindingRequest: PatchedFlowStageBindingRequest? = nil, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: FlowStageBinding?, _ error: Error?) -> Void)) -> RequestTask {
        return flowsBindingsPartialUpdateWithRequestBuilder(fsbUuid: fsbUuid, patchedFlowStageBindingRequest: patchedFlowStageBindingRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /flows/bindings/{fsb_uuid}/
     - FlowStageBinding Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter fsbUuid: (path) A UUID string identifying this Flow Stage Binding. 
     - parameter patchedFlowStageBindingRequest: (body)  (optional)
     - returns: RequestBuilder<FlowStageBinding> 
     */
    open class func flowsBindingsPartialUpdateWithRequestBuilder(fsbUuid: UUID, patchedFlowStageBindingRequest: PatchedFlowStageBindingRequest? = nil) -> RequestBuilder<FlowStageBinding> {
        var localVariablePath = "/flows/bindings/{fsb_uuid}/"
        let fsbUuidPreEscape = "\(APIHelper.mapValueToPathItem(fsbUuid))"
        let fsbUuidPostEscape = fsbUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{fsb_uuid}", with: fsbUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedFlowStageBindingRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<FlowStageBinding>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter fsbUuid: (path) A UUID string identifying this Flow Stage Binding. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func flowsBindingsRetrieve(fsbUuid: UUID, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: FlowStageBinding?, _ error: Error?) -> Void)) -> RequestTask {
        return flowsBindingsRetrieveWithRequestBuilder(fsbUuid: fsbUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /flows/bindings/{fsb_uuid}/
     - FlowStageBinding Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter fsbUuid: (path) A UUID string identifying this Flow Stage Binding. 
     - returns: RequestBuilder<FlowStageBinding> 
     */
    open class func flowsBindingsRetrieveWithRequestBuilder(fsbUuid: UUID) -> RequestBuilder<FlowStageBinding> {
        var localVariablePath = "/flows/bindings/{fsb_uuid}/"
        let fsbUuidPreEscape = "\(APIHelper.mapValueToPathItem(fsbUuid))"
        let fsbUuidPostEscape = fsbUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{fsb_uuid}", with: fsbUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<FlowStageBinding>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter fsbUuid: (path) A UUID string identifying this Flow Stage Binding. 
     - parameter flowStageBindingRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func flowsBindingsUpdate(fsbUuid: UUID, flowStageBindingRequest: FlowStageBindingRequest, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: FlowStageBinding?, _ error: Error?) -> Void)) -> RequestTask {
        return flowsBindingsUpdateWithRequestBuilder(fsbUuid: fsbUuid, flowStageBindingRequest: flowStageBindingRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /flows/bindings/{fsb_uuid}/
     - FlowStageBinding Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter fsbUuid: (path) A UUID string identifying this Flow Stage Binding. 
     - parameter flowStageBindingRequest: (body)  
     - returns: RequestBuilder<FlowStageBinding> 
     */
    open class func flowsBindingsUpdateWithRequestBuilder(fsbUuid: UUID, flowStageBindingRequest: FlowStageBindingRequest) -> RequestBuilder<FlowStageBinding> {
        var localVariablePath = "/flows/bindings/{fsb_uuid}/"
        let fsbUuidPreEscape = "\(APIHelper.mapValueToPathItem(fsbUuid))"
        let fsbUuidPostEscape = fsbUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{fsb_uuid}", with: fsbUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: flowStageBindingRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<FlowStageBinding>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter fsbUuid: (path) A UUID string identifying this Flow Stage Binding. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func flowsBindingsUsedByList(fsbUuid: UUID, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: [UsedBy]?, _ error: Error?) -> Void)) -> RequestTask {
        return flowsBindingsUsedByListWithRequestBuilder(fsbUuid: fsbUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /flows/bindings/{fsb_uuid}/used_by/
     - Get a list of all objects that use this object
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter fsbUuid: (path) A UUID string identifying this Flow Stage Binding. 
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func flowsBindingsUsedByListWithRequestBuilder(fsbUuid: UUID) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/flows/bindings/{fsb_uuid}/used_by/"
        let fsbUuidPreEscape = "\(APIHelper.mapValueToPathItem(fsbUuid))"
        let fsbUuidPostEscape = fsbUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{fsb_uuid}", with: fsbUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter flowSlug: (path)  
     - parameter query: (query) Querystring as received 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func flowsExecutorGet(flowSlug: String, query: String, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: ChallengeTypes?, _ error: Error?) -> Void)) -> RequestTask {
        return flowsExecutorGetWithRequestBuilder(flowSlug: flowSlug, query: query).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /flows/executor/{flow_slug}/
     - Get the next pending challenge from the currently active flow.
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter flowSlug: (path)  
     - parameter query: (query) Querystring as received 
     - returns: RequestBuilder<ChallengeTypes> 
     */
    open class func flowsExecutorGetWithRequestBuilder(flowSlug: String, query: String) -> RequestBuilder<ChallengeTypes> {
        var localVariablePath = "/flows/executor/{flow_slug}/"
        let flowSlugPreEscape = "\(APIHelper.mapValueToPathItem(flowSlug))"
        let flowSlugPostEscape = flowSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{flow_slug}", with: flowSlugPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "query": (wrappedValue: query.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ChallengeTypes>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter flowSlug: (path)  
     - parameter query: (query) Querystring as received 
     - parameter flowChallengeResponseRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func flowsExecutorSolve(flowSlug: String, query: String, flowChallengeResponseRequest: FlowChallengeResponseRequest? = nil, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: ChallengeTypes?, _ error: Error?) -> Void)) -> RequestTask {
        return flowsExecutorSolveWithRequestBuilder(flowSlug: flowSlug, query: query, flowChallengeResponseRequest: flowChallengeResponseRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /flows/executor/{flow_slug}/
     - Solve the previously retrieved challenge and advanced to the next stage.
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter flowSlug: (path)  
     - parameter query: (query) Querystring as received 
     - parameter flowChallengeResponseRequest: (body)  (optional)
     - returns: RequestBuilder<ChallengeTypes> 
     */
    open class func flowsExecutorSolveWithRequestBuilder(flowSlug: String, query: String, flowChallengeResponseRequest: FlowChallengeResponseRequest? = nil) -> RequestBuilder<ChallengeTypes> {
        var localVariablePath = "/flows/executor/{flow_slug}/"
        let flowSlugPreEscape = "\(APIHelper.mapValueToPathItem(flowSlug))"
        let flowSlugPostEscape = flowSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{flow_slug}", with: flowSlugPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: flowChallengeResponseRequest)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "query": (wrappedValue: query.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ChallengeTypes>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter flowSlug: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func flowsInspectorGet(flowSlug: String, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: FlowInspection?, _ error: Error?) -> Void)) -> RequestTask {
        return flowsInspectorGetWithRequestBuilder(flowSlug: flowSlug).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /flows/inspector/{flow_slug}/
     - Get current flow state and record it
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter flowSlug: (path)  
     - returns: RequestBuilder<FlowInspection> 
     */
    open class func flowsInspectorGetWithRequestBuilder(flowSlug: String) -> RequestBuilder<FlowInspection> {
        var localVariablePath = "/flows/inspector/{flow_slug}/"
        let flowSlugPreEscape = "\(APIHelper.mapValueToPathItem(flowSlug))"
        let flowSlugPostEscape = flowSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{flow_slug}", with: flowSlugPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<FlowInspection>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func flowsInstancesCacheClearCreate(apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return flowsInstancesCacheClearCreateWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /flows/instances/cache_clear/
     - Clear flow cache
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - returns: RequestBuilder<Void> 
     */
    open class func flowsInstancesCacheClearCreateWithRequestBuilder() -> RequestBuilder<Void> {
        let localVariablePath = "/flows/instances/cache_clear/"
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func flowsInstancesCacheInfoRetrieve(apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: Cache?, _ error: Error?) -> Void)) -> RequestTask {
        return flowsInstancesCacheInfoRetrieveWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /flows/instances/cache_info/
     - Info about cached flows
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - returns: RequestBuilder<Cache> 
     */
    open class func flowsInstancesCacheInfoRetrieveWithRequestBuilder() -> RequestBuilder<Cache> {
        let localVariablePath = "/flows/instances/cache_info/"
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Cache>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter flowRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func flowsInstancesCreate(flowRequest: FlowRequest, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: Flow?, _ error: Error?) -> Void)) -> RequestTask {
        return flowsInstancesCreateWithRequestBuilder(flowRequest: flowRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /flows/instances/
     - Flow Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter flowRequest: (body)  
     - returns: RequestBuilder<Flow> 
     */
    open class func flowsInstancesCreateWithRequestBuilder(flowRequest: FlowRequest) -> RequestBuilder<Flow> {
        let localVariablePath = "/flows/instances/"
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: flowRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Flow>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter slug: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func flowsInstancesDestroy(slug: String, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return flowsInstancesDestroyWithRequestBuilder(slug: slug).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /flows/instances/{slug}/
     - Flow Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter slug: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func flowsInstancesDestroyWithRequestBuilder(slug: String) -> RequestBuilder<Void> {
        var localVariablePath = "/flows/instances/{slug}/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter slug: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func flowsInstancesDiagramRetrieve(slug: String, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: FlowDiagram?, _ error: Error?) -> Void)) -> RequestTask {
        return flowsInstancesDiagramRetrieveWithRequestBuilder(slug: slug).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /flows/instances/{slug}/diagram/
     - Return diagram for flow with slug `slug`, in the format used by flowchart.js
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter slug: (path)  
     - returns: RequestBuilder<FlowDiagram> 
     */
    open class func flowsInstancesDiagramRetrieveWithRequestBuilder(slug: String) -> RequestBuilder<FlowDiagram> {
        var localVariablePath = "/flows/instances/{slug}/diagram/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<FlowDiagram>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter slug: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func flowsInstancesExecuteRetrieve(slug: String, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: Link?, _ error: Error?) -> Void)) -> RequestTask {
        return flowsInstancesExecuteRetrieveWithRequestBuilder(slug: slug).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /flows/instances/{slug}/execute/
     - Execute flow for current user
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter slug: (path)  
     - returns: RequestBuilder<Link> 
     */
    open class func flowsInstancesExecuteRetrieveWithRequestBuilder(slug: String) -> RequestBuilder<Link> {
        var localVariablePath = "/flows/instances/{slug}/execute/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Link>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter slug: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func flowsInstancesExportRetrieve(slug: String, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) -> RequestTask {
        return flowsInstancesExportRetrieveWithRequestBuilder(slug: slug).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /flows/instances/{slug}/export/
     - Export flow to .yaml file
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter slug: (path)  
     - returns: RequestBuilder<URL> 
     */
    open class func flowsInstancesExportRetrieveWithRequestBuilder(slug: String) -> RequestBuilder<URL> {
        var localVariablePath = "/flows/instances/{slug}/export/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter file: (form)  (optional)
     - parameter clear: (form)  (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func flowsInstancesImportCreate(file: URL? = nil, clear: Bool? = nil, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: FlowImportResult?, _ error: Error?) -> Void)) -> RequestTask {
        return flowsInstancesImportCreateWithRequestBuilder(file: file, clear: clear).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /flows/instances/import/
     - Import flow from .yaml file
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter file: (form)  (optional)
     - parameter clear: (form)  (optional, default to false)
     - returns: RequestBuilder<FlowImportResult> 
     */
    open class func flowsInstancesImportCreateWithRequestBuilder(file: URL? = nil, clear: Bool? = nil) -> RequestBuilder<FlowImportResult> {
        let localVariablePath = "/flows/instances/import/"
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "file": file?.encodeToJSON(),
            "clear": clear?.encodeToJSON(),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "multipart/form-data",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<FlowImportResult>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter deniedAction
     */
    public enum DeniedAction_flowsInstancesList: String, CaseIterable {
        case _continue = "continue"
        case message = "message"
        case messageContinue = "message_continue"
    }

    /**
     * enum for parameter designation
     */
    public enum Designation_flowsInstancesList: String, CaseIterable {
        case authentication = "authentication"
        case authorization = "authorization"
        case enrollment = "enrollment"
        case invalidation = "invalidation"
        case recovery = "recovery"
        case stageConfiguration = "stage_configuration"
        case unenrollment = "unenrollment"
    }

    /**

     - parameter deniedAction: (query) Configure what should happen when a flow denies access to a user.  * &#x60;message_continue&#x60; - Message Continue * &#x60;message&#x60; - Message * &#x60;continue&#x60; - Continue (optional)
     - parameter designation: (query) Decides what this Flow is used for. For example, the Authentication flow is redirect to when an un-authenticated user visits authentik.  * &#x60;authentication&#x60; - Authentication * &#x60;authorization&#x60; - Authorization * &#x60;invalidation&#x60; - Invalidation * &#x60;enrollment&#x60; - Enrollment * &#x60;unenrollment&#x60; - Unrenollment * &#x60;recovery&#x60; - Recovery * &#x60;stage_configuration&#x60; - Stage Configuration (optional)
     - parameter flowUuid: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter slug: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func flowsInstancesList(deniedAction: DeniedAction_flowsInstancesList? = nil, designation: Designation_flowsInstancesList? = nil, flowUuid: UUID? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, slug: String? = nil, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedFlowList?, _ error: Error?) -> Void)) -> RequestTask {
        return flowsInstancesListWithRequestBuilder(deniedAction: deniedAction, designation: designation, flowUuid: flowUuid, name: name, ordering: ordering, page: page, pageSize: pageSize, search: search, slug: slug).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /flows/instances/
     - Flow Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter deniedAction: (query) Configure what should happen when a flow denies access to a user.  * &#x60;message_continue&#x60; - Message Continue * &#x60;message&#x60; - Message * &#x60;continue&#x60; - Continue (optional)
     - parameter designation: (query) Decides what this Flow is used for. For example, the Authentication flow is redirect to when an un-authenticated user visits authentik.  * &#x60;authentication&#x60; - Authentication * &#x60;authorization&#x60; - Authorization * &#x60;invalidation&#x60; - Invalidation * &#x60;enrollment&#x60; - Enrollment * &#x60;unenrollment&#x60; - Unrenollment * &#x60;recovery&#x60; - Recovery * &#x60;stage_configuration&#x60; - Stage Configuration (optional)
     - parameter flowUuid: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter slug: (query)  (optional)
     - returns: RequestBuilder<PaginatedFlowList> 
     */
    open class func flowsInstancesListWithRequestBuilder(deniedAction: DeniedAction_flowsInstancesList? = nil, designation: Designation_flowsInstancesList? = nil, flowUuid: UUID? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, slug: String? = nil) -> RequestBuilder<PaginatedFlowList> {
        let localVariablePath = "/flows/instances/"
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "denied_action": (wrappedValue: deniedAction?.encodeToJSON(), isExplode: true),
            "designation": (wrappedValue: designation?.encodeToJSON(), isExplode: true),
            "flow_uuid": (wrappedValue: flowUuid?.encodeToJSON(), isExplode: true),
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
            "slug": (wrappedValue: slug?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedFlowList>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter slug: (path)  
     - parameter patchedFlowRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func flowsInstancesPartialUpdate(slug: String, patchedFlowRequest: PatchedFlowRequest? = nil, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: Flow?, _ error: Error?) -> Void)) -> RequestTask {
        return flowsInstancesPartialUpdateWithRequestBuilder(slug: slug, patchedFlowRequest: patchedFlowRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /flows/instances/{slug}/
     - Flow Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter slug: (path)  
     - parameter patchedFlowRequest: (body)  (optional)
     - returns: RequestBuilder<Flow> 
     */
    open class func flowsInstancesPartialUpdateWithRequestBuilder(slug: String, patchedFlowRequest: PatchedFlowRequest? = nil) -> RequestBuilder<Flow> {
        var localVariablePath = "/flows/instances/{slug}/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedFlowRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Flow>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter slug: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func flowsInstancesRetrieve(slug: String, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: Flow?, _ error: Error?) -> Void)) -> RequestTask {
        return flowsInstancesRetrieveWithRequestBuilder(slug: slug).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /flows/instances/{slug}/
     - Flow Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter slug: (path)  
     - returns: RequestBuilder<Flow> 
     */
    open class func flowsInstancesRetrieveWithRequestBuilder(slug: String) -> RequestBuilder<Flow> {
        var localVariablePath = "/flows/instances/{slug}/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Flow>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter slug: (path)  
     - parameter file: (form)  (optional)
     - parameter clear: (form)  (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func flowsInstancesSetBackgroundCreate(slug: String, file: URL? = nil, clear: Bool? = nil, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return flowsInstancesSetBackgroundCreateWithRequestBuilder(slug: slug, file: file, clear: clear).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /flows/instances/{slug}/set_background/
     - Set Flow background
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter slug: (path)  
     - parameter file: (form)  (optional)
     - parameter clear: (form)  (optional, default to false)
     - returns: RequestBuilder<Void> 
     */
    open class func flowsInstancesSetBackgroundCreateWithRequestBuilder(slug: String, file: URL? = nil, clear: Bool? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/flows/instances/{slug}/set_background/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "file": file?.encodeToJSON(),
            "clear": clear?.encodeToJSON(),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "multipart/form-data",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter slug: (path)  
     - parameter filePathRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func flowsInstancesSetBackgroundUrlCreate(slug: String, filePathRequest: FilePathRequest, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return flowsInstancesSetBackgroundUrlCreateWithRequestBuilder(slug: slug, filePathRequest: filePathRequest).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /flows/instances/{slug}/set_background_url/
     - Set Flow background (as URL)
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter slug: (path)  
     - parameter filePathRequest: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func flowsInstancesSetBackgroundUrlCreateWithRequestBuilder(slug: String, filePathRequest: FilePathRequest) -> RequestBuilder<Void> {
        var localVariablePath = "/flows/instances/{slug}/set_background_url/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: filePathRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter slug: (path)  
     - parameter flowRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func flowsInstancesUpdate(slug: String, flowRequest: FlowRequest, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: Flow?, _ error: Error?) -> Void)) -> RequestTask {
        return flowsInstancesUpdateWithRequestBuilder(slug: slug, flowRequest: flowRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /flows/instances/{slug}/
     - Flow Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter slug: (path)  
     - parameter flowRequest: (body)  
     - returns: RequestBuilder<Flow> 
     */
    open class func flowsInstancesUpdateWithRequestBuilder(slug: String, flowRequest: FlowRequest) -> RequestBuilder<Flow> {
        var localVariablePath = "/flows/instances/{slug}/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: flowRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Flow>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter slug: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func flowsInstancesUsedByList(slug: String, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: [UsedBy]?, _ error: Error?) -> Void)) -> RequestTask {
        return flowsInstancesUsedByListWithRequestBuilder(slug: slug).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /flows/instances/{slug}/used_by/
     - Get a list of all objects that use this object
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter slug: (path)  
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func flowsInstancesUsedByListWithRequestBuilder(slug: String) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/flows/instances/{slug}/used_by/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
