//
// SourcesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class SourcesAPI {

    /**

     - parameter slug: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesAllDestroy(slug: String, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesAllDestroyWithRequestBuilder(slug: slug).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /sources/all/{slug}/
     - Source Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter slug: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func sourcesAllDestroyWithRequestBuilder(slug: String) -> RequestBuilder<Void> {
        var localVariablePath = "/sources/all/{slug}/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter managed: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter slug: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesAllList(managed: String? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, slug: String? = nil, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedSourceList?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesAllListWithRequestBuilder(managed: managed, name: name, ordering: ordering, page: page, pageSize: pageSize, search: search, slug: slug).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /sources/all/
     - Source Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter managed: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter slug: (query)  (optional)
     - returns: RequestBuilder<PaginatedSourceList> 
     */
    open class func sourcesAllListWithRequestBuilder(managed: String? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, slug: String? = nil) -> RequestBuilder<PaginatedSourceList> {
        let localVariablePath = "/sources/all/"
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "managed": (wrappedValue: managed?.encodeToJSON(), isExplode: true),
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
            "slug": (wrappedValue: slug?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedSourceList>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter slug: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesAllRetrieve(slug: String, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: Source?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesAllRetrieveWithRequestBuilder(slug: slug).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /sources/all/{slug}/
     - Source Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter slug: (path)  
     - returns: RequestBuilder<Source> 
     */
    open class func sourcesAllRetrieveWithRequestBuilder(slug: String) -> RequestBuilder<Source> {
        var localVariablePath = "/sources/all/{slug}/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Source>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter slug: (path)  
     - parameter file: (form)  (optional)
     - parameter clear: (form)  (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesAllSetIconCreate(slug: String, file: URL? = nil, clear: Bool? = nil, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesAllSetIconCreateWithRequestBuilder(slug: slug, file: file, clear: clear).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /sources/all/{slug}/set_icon/
     - Set source icon
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter slug: (path)  
     - parameter file: (form)  (optional)
     - parameter clear: (form)  (optional, default to false)
     - returns: RequestBuilder<Void> 
     */
    open class func sourcesAllSetIconCreateWithRequestBuilder(slug: String, file: URL? = nil, clear: Bool? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/sources/all/{slug}/set_icon/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "file": file?.encodeToJSON(),
            "clear": clear?.encodeToJSON(),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "multipart/form-data",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter slug: (path)  
     - parameter filePathRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesAllSetIconUrlCreate(slug: String, filePathRequest: FilePathRequest, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesAllSetIconUrlCreateWithRequestBuilder(slug: slug, filePathRequest: filePathRequest).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /sources/all/{slug}/set_icon_url/
     - Set source icon (as URL)
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter slug: (path)  
     - parameter filePathRequest: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func sourcesAllSetIconUrlCreateWithRequestBuilder(slug: String, filePathRequest: FilePathRequest) -> RequestBuilder<Void> {
        var localVariablePath = "/sources/all/{slug}/set_icon_url/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: filePathRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesAllTypesList(apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: [TypeCreate]?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesAllTypesListWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /sources/all/types/
     - Get all creatable source types
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - returns: RequestBuilder<[TypeCreate]> 
     */
    open class func sourcesAllTypesListWithRequestBuilder() -> RequestBuilder<[TypeCreate]> {
        let localVariablePath = "/sources/all/types/"
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[TypeCreate]>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter slug: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesAllUsedByList(slug: String, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: [UsedBy]?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesAllUsedByListWithRequestBuilder(slug: slug).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /sources/all/{slug}/used_by/
     - Get a list of all objects that use this object
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter slug: (path)  
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func sourcesAllUsedByListWithRequestBuilder(slug: String) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/sources/all/{slug}/used_by/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesAllUserSettingsList(apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: [UserSetting]?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesAllUserSettingsListWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /sources/all/user_settings/
     - Get all sources the user can configure
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - returns: RequestBuilder<[UserSetting]> 
     */
    open class func sourcesAllUserSettingsListWithRequestBuilder() -> RequestBuilder<[UserSetting]> {
        let localVariablePath = "/sources/all/user_settings/"
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UserSetting]>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter lDAPSourceRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesLdapCreate(lDAPSourceRequest: LDAPSourceRequest, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: LDAPSource?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesLdapCreateWithRequestBuilder(lDAPSourceRequest: lDAPSourceRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /sources/ldap/
     - LDAP Source Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter lDAPSourceRequest: (body)  
     - returns: RequestBuilder<LDAPSource> 
     */
    open class func sourcesLdapCreateWithRequestBuilder(lDAPSourceRequest: LDAPSourceRequest) -> RequestBuilder<LDAPSource> {
        let localVariablePath = "/sources/ldap/"
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: lDAPSourceRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LDAPSource>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter slug: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesLdapDebugRetrieve(slug: String, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: LDAPDebug?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesLdapDebugRetrieveWithRequestBuilder(slug: slug).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /sources/ldap/{slug}/debug/
     - Get raw LDAP data to debug
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter slug: (path)  
     - returns: RequestBuilder<LDAPDebug> 
     */
    open class func sourcesLdapDebugRetrieveWithRequestBuilder(slug: String) -> RequestBuilder<LDAPDebug> {
        var localVariablePath = "/sources/ldap/{slug}/debug/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LDAPDebug>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter slug: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesLdapDestroy(slug: String, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesLdapDestroyWithRequestBuilder(slug: slug).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /sources/ldap/{slug}/
     - LDAP Source Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter slug: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func sourcesLdapDestroyWithRequestBuilder(slug: String) -> RequestBuilder<Void> {
        var localVariablePath = "/sources/ldap/{slug}/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter additionalGroupDn: (query)  (optional)
     - parameter additionalUserDn: (query)  (optional)
     - parameter baseDn: (query)  (optional)
     - parameter bindCn: (query)  (optional)
     - parameter clientCertificate: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter groupMembershipField: (query)  (optional)
     - parameter groupObjectFilter: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter objectUniquenessField: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter peerCertificate: (query)  (optional)
     - parameter propertyMappings: (query)  (optional)
     - parameter propertyMappingsGroup: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter serverUri: (query)  (optional)
     - parameter slug: (query)  (optional)
     - parameter sni: (query)  (optional)
     - parameter startTls: (query)  (optional)
     - parameter syncGroups: (query)  (optional)
     - parameter syncParentGroup: (query)  (optional)
     - parameter syncUsers: (query)  (optional)
     - parameter syncUsersPassword: (query)  (optional)
     - parameter userObjectFilter: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesLdapList(additionalGroupDn: String? = nil, additionalUserDn: String? = nil, baseDn: String? = nil, bindCn: String? = nil, clientCertificate: UUID? = nil, enabled: Bool? = nil, groupMembershipField: String? = nil, groupObjectFilter: String? = nil, name: String? = nil, objectUniquenessField: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, peerCertificate: UUID? = nil, propertyMappings: [UUID]? = nil, propertyMappingsGroup: [UUID]? = nil, search: String? = nil, serverUri: String? = nil, slug: String? = nil, sni: Bool? = nil, startTls: Bool? = nil, syncGroups: Bool? = nil, syncParentGroup: UUID? = nil, syncUsers: Bool? = nil, syncUsersPassword: Bool? = nil, userObjectFilter: String? = nil, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedLDAPSourceList?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesLdapListWithRequestBuilder(additionalGroupDn: additionalGroupDn, additionalUserDn: additionalUserDn, baseDn: baseDn, bindCn: bindCn, clientCertificate: clientCertificate, enabled: enabled, groupMembershipField: groupMembershipField, groupObjectFilter: groupObjectFilter, name: name, objectUniquenessField: objectUniquenessField, ordering: ordering, page: page, pageSize: pageSize, peerCertificate: peerCertificate, propertyMappings: propertyMappings, propertyMappingsGroup: propertyMappingsGroup, search: search, serverUri: serverUri, slug: slug, sni: sni, startTls: startTls, syncGroups: syncGroups, syncParentGroup: syncParentGroup, syncUsers: syncUsers, syncUsersPassword: syncUsersPassword, userObjectFilter: userObjectFilter).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /sources/ldap/
     - LDAP Source Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter additionalGroupDn: (query)  (optional)
     - parameter additionalUserDn: (query)  (optional)
     - parameter baseDn: (query)  (optional)
     - parameter bindCn: (query)  (optional)
     - parameter clientCertificate: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter groupMembershipField: (query)  (optional)
     - parameter groupObjectFilter: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter objectUniquenessField: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter peerCertificate: (query)  (optional)
     - parameter propertyMappings: (query)  (optional)
     - parameter propertyMappingsGroup: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter serverUri: (query)  (optional)
     - parameter slug: (query)  (optional)
     - parameter sni: (query)  (optional)
     - parameter startTls: (query)  (optional)
     - parameter syncGroups: (query)  (optional)
     - parameter syncParentGroup: (query)  (optional)
     - parameter syncUsers: (query)  (optional)
     - parameter syncUsersPassword: (query)  (optional)
     - parameter userObjectFilter: (query)  (optional)
     - returns: RequestBuilder<PaginatedLDAPSourceList> 
     */
    open class func sourcesLdapListWithRequestBuilder(additionalGroupDn: String? = nil, additionalUserDn: String? = nil, baseDn: String? = nil, bindCn: String? = nil, clientCertificate: UUID? = nil, enabled: Bool? = nil, groupMembershipField: String? = nil, groupObjectFilter: String? = nil, name: String? = nil, objectUniquenessField: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, peerCertificate: UUID? = nil, propertyMappings: [UUID]? = nil, propertyMappingsGroup: [UUID]? = nil, search: String? = nil, serverUri: String? = nil, slug: String? = nil, sni: Bool? = nil, startTls: Bool? = nil, syncGroups: Bool? = nil, syncParentGroup: UUID? = nil, syncUsers: Bool? = nil, syncUsersPassword: Bool? = nil, userObjectFilter: String? = nil) -> RequestBuilder<PaginatedLDAPSourceList> {
        let localVariablePath = "/sources/ldap/"
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "additional_group_dn": (wrappedValue: additionalGroupDn?.encodeToJSON(), isExplode: true),
            "additional_user_dn": (wrappedValue: additionalUserDn?.encodeToJSON(), isExplode: true),
            "base_dn": (wrappedValue: baseDn?.encodeToJSON(), isExplode: true),
            "bind_cn": (wrappedValue: bindCn?.encodeToJSON(), isExplode: true),
            "client_certificate": (wrappedValue: clientCertificate?.encodeToJSON(), isExplode: true),
            "enabled": (wrappedValue: enabled?.encodeToJSON(), isExplode: true),
            "group_membership_field": (wrappedValue: groupMembershipField?.encodeToJSON(), isExplode: true),
            "group_object_filter": (wrappedValue: groupObjectFilter?.encodeToJSON(), isExplode: true),
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "object_uniqueness_field": (wrappedValue: objectUniquenessField?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "peer_certificate": (wrappedValue: peerCertificate?.encodeToJSON(), isExplode: true),
            "property_mappings": (wrappedValue: propertyMappings?.encodeToJSON(), isExplode: true),
            "property_mappings_group": (wrappedValue: propertyMappingsGroup?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
            "server_uri": (wrappedValue: serverUri?.encodeToJSON(), isExplode: true),
            "slug": (wrappedValue: slug?.encodeToJSON(), isExplode: true),
            "sni": (wrappedValue: sni?.encodeToJSON(), isExplode: true),
            "start_tls": (wrappedValue: startTls?.encodeToJSON(), isExplode: true),
            "sync_groups": (wrappedValue: syncGroups?.encodeToJSON(), isExplode: true),
            "sync_parent_group": (wrappedValue: syncParentGroup?.encodeToJSON(), isExplode: true),
            "sync_users": (wrappedValue: syncUsers?.encodeToJSON(), isExplode: true),
            "sync_users_password": (wrappedValue: syncUsersPassword?.encodeToJSON(), isExplode: true),
            "user_object_filter": (wrappedValue: userObjectFilter?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedLDAPSourceList>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter slug: (path)  
     - parameter patchedLDAPSourceRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesLdapPartialUpdate(slug: String, patchedLDAPSourceRequest: PatchedLDAPSourceRequest? = nil, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: LDAPSource?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesLdapPartialUpdateWithRequestBuilder(slug: slug, patchedLDAPSourceRequest: patchedLDAPSourceRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /sources/ldap/{slug}/
     - LDAP Source Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter slug: (path)  
     - parameter patchedLDAPSourceRequest: (body)  (optional)
     - returns: RequestBuilder<LDAPSource> 
     */
    open class func sourcesLdapPartialUpdateWithRequestBuilder(slug: String, patchedLDAPSourceRequest: PatchedLDAPSourceRequest? = nil) -> RequestBuilder<LDAPSource> {
        var localVariablePath = "/sources/ldap/{slug}/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedLDAPSourceRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LDAPSource>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter slug: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesLdapRetrieve(slug: String, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: LDAPSource?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesLdapRetrieveWithRequestBuilder(slug: slug).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /sources/ldap/{slug}/
     - LDAP Source Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter slug: (path)  
     - returns: RequestBuilder<LDAPSource> 
     */
    open class func sourcesLdapRetrieveWithRequestBuilder(slug: String) -> RequestBuilder<LDAPSource> {
        var localVariablePath = "/sources/ldap/{slug}/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LDAPSource>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter slug: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesLdapSyncStatusList(slug: String, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: [Task]?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesLdapSyncStatusListWithRequestBuilder(slug: slug).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /sources/ldap/{slug}/sync_status/
     - Get source's sync status
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter slug: (path)  
     - returns: RequestBuilder<[Task]> 
     */
    open class func sourcesLdapSyncStatusListWithRequestBuilder(slug: String) -> RequestBuilder<[Task]> {
        var localVariablePath = "/sources/ldap/{slug}/sync_status/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[Task]>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter slug: (path)  
     - parameter lDAPSourceRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesLdapUpdate(slug: String, lDAPSourceRequest: LDAPSourceRequest, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: LDAPSource?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesLdapUpdateWithRequestBuilder(slug: slug, lDAPSourceRequest: lDAPSourceRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /sources/ldap/{slug}/
     - LDAP Source Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter slug: (path)  
     - parameter lDAPSourceRequest: (body)  
     - returns: RequestBuilder<LDAPSource> 
     */
    open class func sourcesLdapUpdateWithRequestBuilder(slug: String, lDAPSourceRequest: LDAPSourceRequest) -> RequestBuilder<LDAPSource> {
        var localVariablePath = "/sources/ldap/{slug}/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: lDAPSourceRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LDAPSource>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter slug: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesLdapUsedByList(slug: String, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: [UsedBy]?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesLdapUsedByListWithRequestBuilder(slug: slug).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /sources/ldap/{slug}/used_by/
     - Get a list of all objects that use this object
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter slug: (path)  
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func sourcesLdapUsedByListWithRequestBuilder(slug: String) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/sources/ldap/{slug}/used_by/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter oAuthSourceRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesOauthCreate(oAuthSourceRequest: OAuthSourceRequest, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: OAuthSource?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesOauthCreateWithRequestBuilder(oAuthSourceRequest: oAuthSourceRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /sources/oauth/
     - Source Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter oAuthSourceRequest: (body)  
     - returns: RequestBuilder<OAuthSource> 
     */
    open class func sourcesOauthCreateWithRequestBuilder(oAuthSourceRequest: OAuthSourceRequest) -> RequestBuilder<OAuthSource> {
        let localVariablePath = "/sources/oauth/"
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: oAuthSourceRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OAuthSource>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter slug: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesOauthDestroy(slug: String, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesOauthDestroyWithRequestBuilder(slug: slug).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /sources/oauth/{slug}/
     - Source Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter slug: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func sourcesOauthDestroyWithRequestBuilder(slug: String) -> RequestBuilder<Void> {
        var localVariablePath = "/sources/oauth/{slug}/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter policyEngineMode
     */
    public enum PolicyEngineMode_sourcesOauthList: String, CaseIterable {
        case all = "all"
        case any = "any"
    }

    /**
     * enum for parameter userMatchingMode
     */
    public enum UserMatchingMode_sourcesOauthList: String, CaseIterable {
        case emailDeny = "email_deny"
        case emailLink = "email_link"
        case identifier = "identifier"
        case usernameDeny = "username_deny"
        case usernameLink = "username_link"
    }

    /**

     - parameter accessTokenUrl: (query)  (optional)
     - parameter additionalScopes: (query)  (optional)
     - parameter authenticationFlow: (query)  (optional)
     - parameter authorizationUrl: (query)  (optional)
     - parameter consumerKey: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter enrollmentFlow: (query)  (optional)
     - parameter hasJwks: (query) Only return sources with JWKS data (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter policyEngineMode: (query) * &#x60;all&#x60; - all, all policies must pass * &#x60;any&#x60; - any, any policy must pass (optional)
     - parameter profileUrl: (query)  (optional)
     - parameter providerType: (query)  (optional)
     - parameter requestTokenUrl: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter slug: (query)  (optional)
     - parameter userMatchingMode: (query) How the source determines if an existing user should be authenticated or a new user enrolled.  * &#x60;identifier&#x60; - Use the source-specific identifier * &#x60;email_link&#x60; - Link to a user with identical email address. Can have security implications when a source doesn&#39;t validate email addresses. * &#x60;email_deny&#x60; - Use the user&#39;s email address, but deny enrollment when the email address already exists. * &#x60;username_link&#x60; - Link to a user with identical username. Can have security implications when a username is used with another source. * &#x60;username_deny&#x60; - Use the user&#39;s username, but deny enrollment when the username already exists. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesOauthList(accessTokenUrl: String? = nil, additionalScopes: String? = nil, authenticationFlow: UUID? = nil, authorizationUrl: String? = nil, consumerKey: String? = nil, enabled: Bool? = nil, enrollmentFlow: UUID? = nil, hasJwks: Bool? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, policyEngineMode: PolicyEngineMode_sourcesOauthList? = nil, profileUrl: String? = nil, providerType: String? = nil, requestTokenUrl: String? = nil, search: String? = nil, slug: String? = nil, userMatchingMode: UserMatchingMode_sourcesOauthList? = nil, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedOAuthSourceList?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesOauthListWithRequestBuilder(accessTokenUrl: accessTokenUrl, additionalScopes: additionalScopes, authenticationFlow: authenticationFlow, authorizationUrl: authorizationUrl, consumerKey: consumerKey, enabled: enabled, enrollmentFlow: enrollmentFlow, hasJwks: hasJwks, name: name, ordering: ordering, page: page, pageSize: pageSize, policyEngineMode: policyEngineMode, profileUrl: profileUrl, providerType: providerType, requestTokenUrl: requestTokenUrl, search: search, slug: slug, userMatchingMode: userMatchingMode).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /sources/oauth/
     - Source Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter accessTokenUrl: (query)  (optional)
     - parameter additionalScopes: (query)  (optional)
     - parameter authenticationFlow: (query)  (optional)
     - parameter authorizationUrl: (query)  (optional)
     - parameter consumerKey: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter enrollmentFlow: (query)  (optional)
     - parameter hasJwks: (query) Only return sources with JWKS data (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter policyEngineMode: (query) * &#x60;all&#x60; - all, all policies must pass * &#x60;any&#x60; - any, any policy must pass (optional)
     - parameter profileUrl: (query)  (optional)
     - parameter providerType: (query)  (optional)
     - parameter requestTokenUrl: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter slug: (query)  (optional)
     - parameter userMatchingMode: (query) How the source determines if an existing user should be authenticated or a new user enrolled.  * &#x60;identifier&#x60; - Use the source-specific identifier * &#x60;email_link&#x60; - Link to a user with identical email address. Can have security implications when a source doesn&#39;t validate email addresses. * &#x60;email_deny&#x60; - Use the user&#39;s email address, but deny enrollment when the email address already exists. * &#x60;username_link&#x60; - Link to a user with identical username. Can have security implications when a username is used with another source. * &#x60;username_deny&#x60; - Use the user&#39;s username, but deny enrollment when the username already exists. (optional)
     - returns: RequestBuilder<PaginatedOAuthSourceList> 
     */
    open class func sourcesOauthListWithRequestBuilder(accessTokenUrl: String? = nil, additionalScopes: String? = nil, authenticationFlow: UUID? = nil, authorizationUrl: String? = nil, consumerKey: String? = nil, enabled: Bool? = nil, enrollmentFlow: UUID? = nil, hasJwks: Bool? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, policyEngineMode: PolicyEngineMode_sourcesOauthList? = nil, profileUrl: String? = nil, providerType: String? = nil, requestTokenUrl: String? = nil, search: String? = nil, slug: String? = nil, userMatchingMode: UserMatchingMode_sourcesOauthList? = nil) -> RequestBuilder<PaginatedOAuthSourceList> {
        let localVariablePath = "/sources/oauth/"
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token_url": (wrappedValue: accessTokenUrl?.encodeToJSON(), isExplode: true),
            "additional_scopes": (wrappedValue: additionalScopes?.encodeToJSON(), isExplode: true),
            "authentication_flow": (wrappedValue: authenticationFlow?.encodeToJSON(), isExplode: true),
            "authorization_url": (wrappedValue: authorizationUrl?.encodeToJSON(), isExplode: true),
            "consumer_key": (wrappedValue: consumerKey?.encodeToJSON(), isExplode: true),
            "enabled": (wrappedValue: enabled?.encodeToJSON(), isExplode: true),
            "enrollment_flow": (wrappedValue: enrollmentFlow?.encodeToJSON(), isExplode: true),
            "has_jwks": (wrappedValue: hasJwks?.encodeToJSON(), isExplode: true),
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "policy_engine_mode": (wrappedValue: policyEngineMode?.encodeToJSON(), isExplode: true),
            "profile_url": (wrappedValue: profileUrl?.encodeToJSON(), isExplode: true),
            "provider_type": (wrappedValue: providerType?.encodeToJSON(), isExplode: true),
            "request_token_url": (wrappedValue: requestTokenUrl?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
            "slug": (wrappedValue: slug?.encodeToJSON(), isExplode: true),
            "user_matching_mode": (wrappedValue: userMatchingMode?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedOAuthSourceList>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter slug: (path)  
     - parameter patchedOAuthSourceRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesOauthPartialUpdate(slug: String, patchedOAuthSourceRequest: PatchedOAuthSourceRequest? = nil, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: OAuthSource?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesOauthPartialUpdateWithRequestBuilder(slug: slug, patchedOAuthSourceRequest: patchedOAuthSourceRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /sources/oauth/{slug}/
     - Source Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter slug: (path)  
     - parameter patchedOAuthSourceRequest: (body)  (optional)
     - returns: RequestBuilder<OAuthSource> 
     */
    open class func sourcesOauthPartialUpdateWithRequestBuilder(slug: String, patchedOAuthSourceRequest: PatchedOAuthSourceRequest? = nil) -> RequestBuilder<OAuthSource> {
        var localVariablePath = "/sources/oauth/{slug}/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedOAuthSourceRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OAuthSource>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter slug: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesOauthRetrieve(slug: String, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: OAuthSource?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesOauthRetrieveWithRequestBuilder(slug: slug).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /sources/oauth/{slug}/
     - Source Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter slug: (path)  
     - returns: RequestBuilder<OAuthSource> 
     */
    open class func sourcesOauthRetrieveWithRequestBuilder(slug: String) -> RequestBuilder<OAuthSource> {
        var localVariablePath = "/sources/oauth/{slug}/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OAuthSource>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter name: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesOauthSourceTypesList(name: String? = nil, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: [SourceType]?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesOauthSourceTypesListWithRequestBuilder(name: name).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /sources/oauth/source_types/
     - Get all creatable source types. If ?name is set, only returns the type for <name>. If <name> isn't found, returns the default type.
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter name: (query)  (optional)
     - returns: RequestBuilder<[SourceType]> 
     */
    open class func sourcesOauthSourceTypesListWithRequestBuilder(name: String? = nil) -> RequestBuilder<[SourceType]> {
        let localVariablePath = "/sources/oauth/source_types/"
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[SourceType]>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter slug: (path)  
     - parameter oAuthSourceRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesOauthUpdate(slug: String, oAuthSourceRequest: OAuthSourceRequest, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: OAuthSource?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesOauthUpdateWithRequestBuilder(slug: slug, oAuthSourceRequest: oAuthSourceRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /sources/oauth/{slug}/
     - Source Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter slug: (path)  
     - parameter oAuthSourceRequest: (body)  
     - returns: RequestBuilder<OAuthSource> 
     */
    open class func sourcesOauthUpdateWithRequestBuilder(slug: String, oAuthSourceRequest: OAuthSourceRequest) -> RequestBuilder<OAuthSource> {
        var localVariablePath = "/sources/oauth/{slug}/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: oAuthSourceRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OAuthSource>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter slug: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesOauthUsedByList(slug: String, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: [UsedBy]?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesOauthUsedByListWithRequestBuilder(slug: slug).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /sources/oauth/{slug}/used_by/
     - Get a list of all objects that use this object
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter slug: (path)  
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func sourcesOauthUsedByListWithRequestBuilder(slug: String) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/sources/oauth/{slug}/used_by/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter plexSourceRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesPlexCreate(plexSourceRequest: PlexSourceRequest, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: PlexSource?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesPlexCreateWithRequestBuilder(plexSourceRequest: plexSourceRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /sources/plex/
     - Plex source Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter plexSourceRequest: (body)  
     - returns: RequestBuilder<PlexSource> 
     */
    open class func sourcesPlexCreateWithRequestBuilder(plexSourceRequest: PlexSourceRequest) -> RequestBuilder<PlexSource> {
        let localVariablePath = "/sources/plex/"
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: plexSourceRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PlexSource>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter slug: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesPlexDestroy(slug: String, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesPlexDestroyWithRequestBuilder(slug: slug).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /sources/plex/{slug}/
     - Plex source Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter slug: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func sourcesPlexDestroyWithRequestBuilder(slug: String) -> RequestBuilder<Void> {
        var localVariablePath = "/sources/plex/{slug}/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter policyEngineMode
     */
    public enum PolicyEngineMode_sourcesPlexList: String, CaseIterable {
        case all = "all"
        case any = "any"
    }

    /**
     * enum for parameter userMatchingMode
     */
    public enum UserMatchingMode_sourcesPlexList: String, CaseIterable {
        case emailDeny = "email_deny"
        case emailLink = "email_link"
        case identifier = "identifier"
        case usernameDeny = "username_deny"
        case usernameLink = "username_link"
    }

    /**

     - parameter allowFriends: (query)  (optional)
     - parameter authenticationFlow: (query)  (optional)
     - parameter clientId: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter enrollmentFlow: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter policyEngineMode: (query) * &#x60;all&#x60; - all, all policies must pass * &#x60;any&#x60; - any, any policy must pass (optional)
     - parameter search: (query) A search term. (optional)
     - parameter slug: (query)  (optional)
     - parameter userMatchingMode: (query) How the source determines if an existing user should be authenticated or a new user enrolled.  * &#x60;identifier&#x60; - Use the source-specific identifier * &#x60;email_link&#x60; - Link to a user with identical email address. Can have security implications when a source doesn&#39;t validate email addresses. * &#x60;email_deny&#x60; - Use the user&#39;s email address, but deny enrollment when the email address already exists. * &#x60;username_link&#x60; - Link to a user with identical username. Can have security implications when a username is used with another source. * &#x60;username_deny&#x60; - Use the user&#39;s username, but deny enrollment when the username already exists. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesPlexList(allowFriends: Bool? = nil, authenticationFlow: UUID? = nil, clientId: String? = nil, enabled: Bool? = nil, enrollmentFlow: UUID? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, policyEngineMode: PolicyEngineMode_sourcesPlexList? = nil, search: String? = nil, slug: String? = nil, userMatchingMode: UserMatchingMode_sourcesPlexList? = nil, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedPlexSourceList?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesPlexListWithRequestBuilder(allowFriends: allowFriends, authenticationFlow: authenticationFlow, clientId: clientId, enabled: enabled, enrollmentFlow: enrollmentFlow, name: name, ordering: ordering, page: page, pageSize: pageSize, policyEngineMode: policyEngineMode, search: search, slug: slug, userMatchingMode: userMatchingMode).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /sources/plex/
     - Plex source Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter allowFriends: (query)  (optional)
     - parameter authenticationFlow: (query)  (optional)
     - parameter clientId: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter enrollmentFlow: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter policyEngineMode: (query) * &#x60;all&#x60; - all, all policies must pass * &#x60;any&#x60; - any, any policy must pass (optional)
     - parameter search: (query) A search term. (optional)
     - parameter slug: (query)  (optional)
     - parameter userMatchingMode: (query) How the source determines if an existing user should be authenticated or a new user enrolled.  * &#x60;identifier&#x60; - Use the source-specific identifier * &#x60;email_link&#x60; - Link to a user with identical email address. Can have security implications when a source doesn&#39;t validate email addresses. * &#x60;email_deny&#x60; - Use the user&#39;s email address, but deny enrollment when the email address already exists. * &#x60;username_link&#x60; - Link to a user with identical username. Can have security implications when a username is used with another source. * &#x60;username_deny&#x60; - Use the user&#39;s username, but deny enrollment when the username already exists. (optional)
     - returns: RequestBuilder<PaginatedPlexSourceList> 
     */
    open class func sourcesPlexListWithRequestBuilder(allowFriends: Bool? = nil, authenticationFlow: UUID? = nil, clientId: String? = nil, enabled: Bool? = nil, enrollmentFlow: UUID? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, policyEngineMode: PolicyEngineMode_sourcesPlexList? = nil, search: String? = nil, slug: String? = nil, userMatchingMode: UserMatchingMode_sourcesPlexList? = nil) -> RequestBuilder<PaginatedPlexSourceList> {
        let localVariablePath = "/sources/plex/"
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "allow_friends": (wrappedValue: allowFriends?.encodeToJSON(), isExplode: true),
            "authentication_flow": (wrappedValue: authenticationFlow?.encodeToJSON(), isExplode: true),
            "client_id": (wrappedValue: clientId?.encodeToJSON(), isExplode: true),
            "enabled": (wrappedValue: enabled?.encodeToJSON(), isExplode: true),
            "enrollment_flow": (wrappedValue: enrollmentFlow?.encodeToJSON(), isExplode: true),
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "policy_engine_mode": (wrappedValue: policyEngineMode?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
            "slug": (wrappedValue: slug?.encodeToJSON(), isExplode: true),
            "user_matching_mode": (wrappedValue: userMatchingMode?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedPlexSourceList>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter slug: (path)  
     - parameter patchedPlexSourceRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesPlexPartialUpdate(slug: String, patchedPlexSourceRequest: PatchedPlexSourceRequest? = nil, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: PlexSource?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesPlexPartialUpdateWithRequestBuilder(slug: slug, patchedPlexSourceRequest: patchedPlexSourceRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /sources/plex/{slug}/
     - Plex source Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter slug: (path)  
     - parameter patchedPlexSourceRequest: (body)  (optional)
     - returns: RequestBuilder<PlexSource> 
     */
    open class func sourcesPlexPartialUpdateWithRequestBuilder(slug: String, patchedPlexSourceRequest: PatchedPlexSourceRequest? = nil) -> RequestBuilder<PlexSource> {
        var localVariablePath = "/sources/plex/{slug}/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedPlexSourceRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PlexSource>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter plexTokenRedeemRequest: (body)  
     - parameter slug: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesPlexRedeemTokenAuthenticatedCreate(plexTokenRedeemRequest: PlexTokenRedeemRequest, slug: String? = nil, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesPlexRedeemTokenAuthenticatedCreateWithRequestBuilder(plexTokenRedeemRequest: plexTokenRedeemRequest, slug: slug).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /sources/plex/redeem_token_authenticated/
     - Redeem a plex token for an authenticated user, creating a connection
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter plexTokenRedeemRequest: (body)  
     - parameter slug: (query)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func sourcesPlexRedeemTokenAuthenticatedCreateWithRequestBuilder(plexTokenRedeemRequest: PlexTokenRedeemRequest, slug: String? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/sources/plex/redeem_token_authenticated/"
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: plexTokenRedeemRequest)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "slug": (wrappedValue: slug?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter plexTokenRedeemRequest: (body)  
     - parameter slug: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesPlexRedeemTokenCreate(plexTokenRedeemRequest: PlexTokenRedeemRequest, slug: String? = nil, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: RedirectChallenge?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesPlexRedeemTokenCreateWithRequestBuilder(plexTokenRedeemRequest: plexTokenRedeemRequest, slug: slug).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /sources/plex/redeem_token/
     - Redeem a plex token, check it's access to resources against what's allowed for the source, and redirect to an authentication/enrollment flow.
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter plexTokenRedeemRequest: (body)  
     - parameter slug: (query)  (optional)
     - returns: RequestBuilder<RedirectChallenge> 
     */
    open class func sourcesPlexRedeemTokenCreateWithRequestBuilder(plexTokenRedeemRequest: PlexTokenRedeemRequest, slug: String? = nil) -> RequestBuilder<RedirectChallenge> {
        let localVariablePath = "/sources/plex/redeem_token/"
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: plexTokenRedeemRequest)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "slug": (wrappedValue: slug?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RedirectChallenge>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter slug: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesPlexRetrieve(slug: String, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: PlexSource?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesPlexRetrieveWithRequestBuilder(slug: slug).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /sources/plex/{slug}/
     - Plex source Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter slug: (path)  
     - returns: RequestBuilder<PlexSource> 
     */
    open class func sourcesPlexRetrieveWithRequestBuilder(slug: String) -> RequestBuilder<PlexSource> {
        var localVariablePath = "/sources/plex/{slug}/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PlexSource>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter slug: (path)  
     - parameter plexSourceRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesPlexUpdate(slug: String, plexSourceRequest: PlexSourceRequest, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: PlexSource?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesPlexUpdateWithRequestBuilder(slug: slug, plexSourceRequest: plexSourceRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /sources/plex/{slug}/
     - Plex source Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter slug: (path)  
     - parameter plexSourceRequest: (body)  
     - returns: RequestBuilder<PlexSource> 
     */
    open class func sourcesPlexUpdateWithRequestBuilder(slug: String, plexSourceRequest: PlexSourceRequest) -> RequestBuilder<PlexSource> {
        var localVariablePath = "/sources/plex/{slug}/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: plexSourceRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PlexSource>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter slug: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesPlexUsedByList(slug: String, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: [UsedBy]?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesPlexUsedByListWithRequestBuilder(slug: slug).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /sources/plex/{slug}/used_by/
     - Get a list of all objects that use this object
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter slug: (path)  
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func sourcesPlexUsedByListWithRequestBuilder(slug: String) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/sources/plex/{slug}/used_by/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter sAMLSourceRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesSamlCreate(sAMLSourceRequest: SAMLSourceRequest, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: SAMLSource?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesSamlCreateWithRequestBuilder(sAMLSourceRequest: sAMLSourceRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /sources/saml/
     - SAMLSource Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter sAMLSourceRequest: (body)  
     - returns: RequestBuilder<SAMLSource> 
     */
    open class func sourcesSamlCreateWithRequestBuilder(sAMLSourceRequest: SAMLSourceRequest) -> RequestBuilder<SAMLSource> {
        let localVariablePath = "/sources/saml/"
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sAMLSourceRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SAMLSource>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter slug: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesSamlDestroy(slug: String, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesSamlDestroyWithRequestBuilder(slug: slug).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /sources/saml/{slug}/
     - SAMLSource Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter slug: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func sourcesSamlDestroyWithRequestBuilder(slug: String) -> RequestBuilder<Void> {
        var localVariablePath = "/sources/saml/{slug}/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter bindingType
     */
    public enum BindingType_sourcesSamlList: String, CaseIterable {
        case post = "POST"
        case postAuto = "POST_AUTO"
        case redirect = "REDIRECT"
    }

    /**
     * enum for parameter digestAlgorithm
     */
    public enum DigestAlgorithm_sourcesSamlList: String, CaseIterable {
        case _200009xmldsigHashSha1 = "http://www.w3.org/2000/09/xmldsig#sha1"
        case _200104xmldsigMoreHashSha384 = "http://www.w3.org/2001/04/xmldsig-more#sha384"
        case _200104xmlencHashSha256 = "http://www.w3.org/2001/04/xmlenc#sha256"
        case _200104xmlencHashSha512 = "http://www.w3.org/2001/04/xmlenc#sha512"
    }

    /**
     * enum for parameter nameIdPolicy
     */
    public enum NameIdPolicy_sourcesSamlList: String, CaseIterable {
        case _11ColonNameidFormatColonEmailAddress = "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress"
        case _20ColonNameidFormatColonWindowsDomainQualifiedName = "urn:oasis:names:tc:SAML:2.0:nameid-format:WindowsDomainQualifiedName"
        case _20ColonNameidFormatColonX509SubjectName = "urn:oasis:names:tc:SAML:2.0:nameid-format:X509SubjectName"
        case _20ColonNameidFormatColonPersistent = "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent"
        case _20ColonNameidFormatColonTransient = "urn:oasis:names:tc:SAML:2.0:nameid-format:transient"
    }

    /**
     * enum for parameter policyEngineMode
     */
    public enum PolicyEngineMode_sourcesSamlList: String, CaseIterable {
        case all = "all"
        case any = "any"
    }

    /**
     * enum for parameter signatureAlgorithm
     */
    public enum SignatureAlgorithm_sourcesSamlList: String, CaseIterable {
        case _200009xmldsigHashDsaSha1 = "http://www.w3.org/2000/09/xmldsig#dsa-sha1"
        case _200009xmldsigHashRsaSha1 = "http://www.w3.org/2000/09/xmldsig#rsa-sha1"
        case _200104xmldsigMoreHashRsaSha256 = "http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"
        case _200104xmldsigMoreHashRsaSha384 = "http://www.w3.org/2001/04/xmldsig-more#rsa-sha384"
        case _200104xmldsigMoreHashRsaSha512 = "http://www.w3.org/2001/04/xmldsig-more#rsa-sha512"
    }

    /**
     * enum for parameter userMatchingMode
     */
    public enum UserMatchingMode_sourcesSamlList: String, CaseIterable {
        case emailDeny = "email_deny"
        case emailLink = "email_link"
        case identifier = "identifier"
        case usernameDeny = "username_deny"
        case usernameLink = "username_link"
    }

    /**

     - parameter allowIdpInitiated: (query)  (optional)
     - parameter authenticationFlow: (query)  (optional)
     - parameter bindingType: (query) * &#x60;REDIRECT&#x60; - Redirect Binding * &#x60;POST&#x60; - POST Binding * &#x60;POST_AUTO&#x60; - POST Binding with auto-confirmation (optional)
     - parameter digestAlgorithm: (query) * &#x60;http://www.w3.org/2000/09/xmldsig#sha1&#x60; - SHA1 * &#x60;http://www.w3.org/2001/04/xmlenc#sha256&#x60; - SHA256 * &#x60;http://www.w3.org/2001/04/xmldsig-more#sha384&#x60; - SHA384 * &#x60;http://www.w3.org/2001/04/xmlenc#sha512&#x60; - SHA512 (optional)
     - parameter enabled: (query)  (optional)
     - parameter enrollmentFlow: (query)  (optional)
     - parameter issuer: (query)  (optional)
     - parameter managed: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter nameIdPolicy: (query) NameID Policy sent to the IdP. Can be unset, in which case no Policy is sent.  * &#x60;urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress&#x60; - Email * &#x60;urn:oasis:names:tc:SAML:2.0:nameid-format:persistent&#x60; - Persistent * &#x60;urn:oasis:names:tc:SAML:2.0:nameid-format:X509SubjectName&#x60; - X509 * &#x60;urn:oasis:names:tc:SAML:2.0:nameid-format:WindowsDomainQualifiedName&#x60; - Windows * &#x60;urn:oasis:names:tc:SAML:2.0:nameid-format:transient&#x60; - Transient (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter policyEngineMode: (query) * &#x60;all&#x60; - all, all policies must pass * &#x60;any&#x60; - any, any policy must pass (optional)
     - parameter preAuthenticationFlow: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter signatureAlgorithm: (query) * &#x60;http://www.w3.org/2000/09/xmldsig#rsa-sha1&#x60; - RSA-SHA1 * &#x60;http://www.w3.org/2001/04/xmldsig-more#rsa-sha256&#x60; - RSA-SHA256 * &#x60;http://www.w3.org/2001/04/xmldsig-more#rsa-sha384&#x60; - RSA-SHA384 * &#x60;http://www.w3.org/2001/04/xmldsig-more#rsa-sha512&#x60; - RSA-SHA512 * &#x60;http://www.w3.org/2000/09/xmldsig#dsa-sha1&#x60; - DSA-SHA1 (optional)
     - parameter signingKp: (query)  (optional)
     - parameter sloUrl: (query)  (optional)
     - parameter slug: (query)  (optional)
     - parameter ssoUrl: (query)  (optional)
     - parameter temporaryUserDeleteAfter: (query)  (optional)
     - parameter userMatchingMode: (query) How the source determines if an existing user should be authenticated or a new user enrolled.  * &#x60;identifier&#x60; - Use the source-specific identifier * &#x60;email_link&#x60; - Link to a user with identical email address. Can have security implications when a source doesn&#39;t validate email addresses. * &#x60;email_deny&#x60; - Use the user&#39;s email address, but deny enrollment when the email address already exists. * &#x60;username_link&#x60; - Link to a user with identical username. Can have security implications when a username is used with another source. * &#x60;username_deny&#x60; - Use the user&#39;s username, but deny enrollment when the username already exists. (optional)
     - parameter verificationKp: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesSamlList(allowIdpInitiated: Bool? = nil, authenticationFlow: UUID? = nil, bindingType: BindingType_sourcesSamlList? = nil, digestAlgorithm: DigestAlgorithm_sourcesSamlList? = nil, enabled: Bool? = nil, enrollmentFlow: UUID? = nil, issuer: String? = nil, managed: String? = nil, name: String? = nil, nameIdPolicy: NameIdPolicy_sourcesSamlList? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, policyEngineMode: PolicyEngineMode_sourcesSamlList? = nil, preAuthenticationFlow: UUID? = nil, search: String? = nil, signatureAlgorithm: SignatureAlgorithm_sourcesSamlList? = nil, signingKp: UUID? = nil, sloUrl: String? = nil, slug: String? = nil, ssoUrl: String? = nil, temporaryUserDeleteAfter: String? = nil, userMatchingMode: UserMatchingMode_sourcesSamlList? = nil, verificationKp: UUID? = nil, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedSAMLSourceList?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesSamlListWithRequestBuilder(allowIdpInitiated: allowIdpInitiated, authenticationFlow: authenticationFlow, bindingType: bindingType, digestAlgorithm: digestAlgorithm, enabled: enabled, enrollmentFlow: enrollmentFlow, issuer: issuer, managed: managed, name: name, nameIdPolicy: nameIdPolicy, ordering: ordering, page: page, pageSize: pageSize, policyEngineMode: policyEngineMode, preAuthenticationFlow: preAuthenticationFlow, search: search, signatureAlgorithm: signatureAlgorithm, signingKp: signingKp, sloUrl: sloUrl, slug: slug, ssoUrl: ssoUrl, temporaryUserDeleteAfter: temporaryUserDeleteAfter, userMatchingMode: userMatchingMode, verificationKp: verificationKp).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /sources/saml/
     - SAMLSource Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter allowIdpInitiated: (query)  (optional)
     - parameter authenticationFlow: (query)  (optional)
     - parameter bindingType: (query) * &#x60;REDIRECT&#x60; - Redirect Binding * &#x60;POST&#x60; - POST Binding * &#x60;POST_AUTO&#x60; - POST Binding with auto-confirmation (optional)
     - parameter digestAlgorithm: (query) * &#x60;http://www.w3.org/2000/09/xmldsig#sha1&#x60; - SHA1 * &#x60;http://www.w3.org/2001/04/xmlenc#sha256&#x60; - SHA256 * &#x60;http://www.w3.org/2001/04/xmldsig-more#sha384&#x60; - SHA384 * &#x60;http://www.w3.org/2001/04/xmlenc#sha512&#x60; - SHA512 (optional)
     - parameter enabled: (query)  (optional)
     - parameter enrollmentFlow: (query)  (optional)
     - parameter issuer: (query)  (optional)
     - parameter managed: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter nameIdPolicy: (query) NameID Policy sent to the IdP. Can be unset, in which case no Policy is sent.  * &#x60;urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress&#x60; - Email * &#x60;urn:oasis:names:tc:SAML:2.0:nameid-format:persistent&#x60; - Persistent * &#x60;urn:oasis:names:tc:SAML:2.0:nameid-format:X509SubjectName&#x60; - X509 * &#x60;urn:oasis:names:tc:SAML:2.0:nameid-format:WindowsDomainQualifiedName&#x60; - Windows * &#x60;urn:oasis:names:tc:SAML:2.0:nameid-format:transient&#x60; - Transient (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter policyEngineMode: (query) * &#x60;all&#x60; - all, all policies must pass * &#x60;any&#x60; - any, any policy must pass (optional)
     - parameter preAuthenticationFlow: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter signatureAlgorithm: (query) * &#x60;http://www.w3.org/2000/09/xmldsig#rsa-sha1&#x60; - RSA-SHA1 * &#x60;http://www.w3.org/2001/04/xmldsig-more#rsa-sha256&#x60; - RSA-SHA256 * &#x60;http://www.w3.org/2001/04/xmldsig-more#rsa-sha384&#x60; - RSA-SHA384 * &#x60;http://www.w3.org/2001/04/xmldsig-more#rsa-sha512&#x60; - RSA-SHA512 * &#x60;http://www.w3.org/2000/09/xmldsig#dsa-sha1&#x60; - DSA-SHA1 (optional)
     - parameter signingKp: (query)  (optional)
     - parameter sloUrl: (query)  (optional)
     - parameter slug: (query)  (optional)
     - parameter ssoUrl: (query)  (optional)
     - parameter temporaryUserDeleteAfter: (query)  (optional)
     - parameter userMatchingMode: (query) How the source determines if an existing user should be authenticated or a new user enrolled.  * &#x60;identifier&#x60; - Use the source-specific identifier * &#x60;email_link&#x60; - Link to a user with identical email address. Can have security implications when a source doesn&#39;t validate email addresses. * &#x60;email_deny&#x60; - Use the user&#39;s email address, but deny enrollment when the email address already exists. * &#x60;username_link&#x60; - Link to a user with identical username. Can have security implications when a username is used with another source. * &#x60;username_deny&#x60; - Use the user&#39;s username, but deny enrollment when the username already exists. (optional)
     - parameter verificationKp: (query)  (optional)
     - returns: RequestBuilder<PaginatedSAMLSourceList> 
     */
    open class func sourcesSamlListWithRequestBuilder(allowIdpInitiated: Bool? = nil, authenticationFlow: UUID? = nil, bindingType: BindingType_sourcesSamlList? = nil, digestAlgorithm: DigestAlgorithm_sourcesSamlList? = nil, enabled: Bool? = nil, enrollmentFlow: UUID? = nil, issuer: String? = nil, managed: String? = nil, name: String? = nil, nameIdPolicy: NameIdPolicy_sourcesSamlList? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, policyEngineMode: PolicyEngineMode_sourcesSamlList? = nil, preAuthenticationFlow: UUID? = nil, search: String? = nil, signatureAlgorithm: SignatureAlgorithm_sourcesSamlList? = nil, signingKp: UUID? = nil, sloUrl: String? = nil, slug: String? = nil, ssoUrl: String? = nil, temporaryUserDeleteAfter: String? = nil, userMatchingMode: UserMatchingMode_sourcesSamlList? = nil, verificationKp: UUID? = nil) -> RequestBuilder<PaginatedSAMLSourceList> {
        let localVariablePath = "/sources/saml/"
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "allow_idp_initiated": (wrappedValue: allowIdpInitiated?.encodeToJSON(), isExplode: true),
            "authentication_flow": (wrappedValue: authenticationFlow?.encodeToJSON(), isExplode: true),
            "binding_type": (wrappedValue: bindingType?.encodeToJSON(), isExplode: true),
            "digest_algorithm": (wrappedValue: digestAlgorithm?.encodeToJSON(), isExplode: true),
            "enabled": (wrappedValue: enabled?.encodeToJSON(), isExplode: true),
            "enrollment_flow": (wrappedValue: enrollmentFlow?.encodeToJSON(), isExplode: true),
            "issuer": (wrappedValue: issuer?.encodeToJSON(), isExplode: true),
            "managed": (wrappedValue: managed?.encodeToJSON(), isExplode: true),
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "name_id_policy": (wrappedValue: nameIdPolicy?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "policy_engine_mode": (wrappedValue: policyEngineMode?.encodeToJSON(), isExplode: true),
            "pre_authentication_flow": (wrappedValue: preAuthenticationFlow?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
            "signature_algorithm": (wrappedValue: signatureAlgorithm?.encodeToJSON(), isExplode: true),
            "signing_kp": (wrappedValue: signingKp?.encodeToJSON(), isExplode: true),
            "slo_url": (wrappedValue: sloUrl?.encodeToJSON(), isExplode: true),
            "slug": (wrappedValue: slug?.encodeToJSON(), isExplode: true),
            "sso_url": (wrappedValue: ssoUrl?.encodeToJSON(), isExplode: true),
            "temporary_user_delete_after": (wrappedValue: temporaryUserDeleteAfter?.encodeToJSON(), isExplode: true),
            "user_matching_mode": (wrappedValue: userMatchingMode?.encodeToJSON(), isExplode: true),
            "verification_kp": (wrappedValue: verificationKp?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedSAMLSourceList>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter slug: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesSamlMetadataRetrieve(slug: String, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: SAMLMetadata?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesSamlMetadataRetrieveWithRequestBuilder(slug: slug).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /sources/saml/{slug}/metadata/
     - Return metadata as XML string
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter slug: (path)  
     - returns: RequestBuilder<SAMLMetadata> 
     */
    open class func sourcesSamlMetadataRetrieveWithRequestBuilder(slug: String) -> RequestBuilder<SAMLMetadata> {
        var localVariablePath = "/sources/saml/{slug}/metadata/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SAMLMetadata>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter slug: (path)  
     - parameter patchedSAMLSourceRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesSamlPartialUpdate(slug: String, patchedSAMLSourceRequest: PatchedSAMLSourceRequest? = nil, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: SAMLSource?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesSamlPartialUpdateWithRequestBuilder(slug: slug, patchedSAMLSourceRequest: patchedSAMLSourceRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /sources/saml/{slug}/
     - SAMLSource Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter slug: (path)  
     - parameter patchedSAMLSourceRequest: (body)  (optional)
     - returns: RequestBuilder<SAMLSource> 
     */
    open class func sourcesSamlPartialUpdateWithRequestBuilder(slug: String, patchedSAMLSourceRequest: PatchedSAMLSourceRequest? = nil) -> RequestBuilder<SAMLSource> {
        var localVariablePath = "/sources/saml/{slug}/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedSAMLSourceRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SAMLSource>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter slug: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesSamlRetrieve(slug: String, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: SAMLSource?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesSamlRetrieveWithRequestBuilder(slug: slug).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /sources/saml/{slug}/
     - SAMLSource Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter slug: (path)  
     - returns: RequestBuilder<SAMLSource> 
     */
    open class func sourcesSamlRetrieveWithRequestBuilder(slug: String) -> RequestBuilder<SAMLSource> {
        var localVariablePath = "/sources/saml/{slug}/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SAMLSource>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter slug: (path)  
     - parameter sAMLSourceRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesSamlUpdate(slug: String, sAMLSourceRequest: SAMLSourceRequest, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: SAMLSource?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesSamlUpdateWithRequestBuilder(slug: slug, sAMLSourceRequest: sAMLSourceRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /sources/saml/{slug}/
     - SAMLSource Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter slug: (path)  
     - parameter sAMLSourceRequest: (body)  
     - returns: RequestBuilder<SAMLSource> 
     */
    open class func sourcesSamlUpdateWithRequestBuilder(slug: String, sAMLSourceRequest: SAMLSourceRequest) -> RequestBuilder<SAMLSource> {
        var localVariablePath = "/sources/saml/{slug}/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sAMLSourceRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SAMLSource>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter slug: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesSamlUsedByList(slug: String, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: [UsedBy]?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesSamlUsedByListWithRequestBuilder(slug: slug).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /sources/saml/{slug}/used_by/
     - Get a list of all objects that use this object
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter slug: (path)  
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func sourcesSamlUsedByListWithRequestBuilder(slug: String) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/sources/saml/{slug}/used_by/"
        let slugPreEscape = "\(APIHelper.mapValueToPathItem(slug))"
        let slugPostEscape = slugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{slug}", with: slugPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this user source connection. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesUserConnectionsAllDestroy(id: Int, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesUserConnectionsAllDestroyWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /sources/user_connections/all/{id}/
     - User-source connection Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this user source connection. 
     - returns: RequestBuilder<Void> 
     */
    open class func sourcesUserConnectionsAllDestroyWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/sources/user_connections/all/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter user: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesUserConnectionsAllList(ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, user: Int? = nil, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedUserSourceConnectionList?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesUserConnectionsAllListWithRequestBuilder(ordering: ordering, page: page, pageSize: pageSize, search: search, user: user).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /sources/user_connections/all/
     - User-source connection Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter user: (query)  (optional)
     - returns: RequestBuilder<PaginatedUserSourceConnectionList> 
     */
    open class func sourcesUserConnectionsAllListWithRequestBuilder(ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, user: Int? = nil) -> RequestBuilder<PaginatedUserSourceConnectionList> {
        let localVariablePath = "/sources/user_connections/all/"
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
            "user": (wrappedValue: user?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedUserSourceConnectionList>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this user source connection. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesUserConnectionsAllPartialUpdate(id: Int, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: UserSourceConnection?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesUserConnectionsAllPartialUpdateWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /sources/user_connections/all/{id}/
     - User-source connection Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this user source connection. 
     - returns: RequestBuilder<UserSourceConnection> 
     */
    open class func sourcesUserConnectionsAllPartialUpdateWithRequestBuilder(id: Int) -> RequestBuilder<UserSourceConnection> {
        var localVariablePath = "/sources/user_connections/all/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserSourceConnection>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this user source connection. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesUserConnectionsAllRetrieve(id: Int, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: UserSourceConnection?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesUserConnectionsAllRetrieveWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /sources/user_connections/all/{id}/
     - User-source connection Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this user source connection. 
     - returns: RequestBuilder<UserSourceConnection> 
     */
    open class func sourcesUserConnectionsAllRetrieveWithRequestBuilder(id: Int) -> RequestBuilder<UserSourceConnection> {
        var localVariablePath = "/sources/user_connections/all/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserSourceConnection>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this user source connection. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesUserConnectionsAllUpdate(id: Int, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: UserSourceConnection?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesUserConnectionsAllUpdateWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /sources/user_connections/all/{id}/
     - User-source connection Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this user source connection. 
     - returns: RequestBuilder<UserSourceConnection> 
     */
    open class func sourcesUserConnectionsAllUpdateWithRequestBuilder(id: Int) -> RequestBuilder<UserSourceConnection> {
        var localVariablePath = "/sources/user_connections/all/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserSourceConnection>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this user source connection. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesUserConnectionsAllUsedByList(id: Int, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: [UsedBy]?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesUserConnectionsAllUsedByListWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /sources/user_connections/all/{id}/used_by/
     - Get a list of all objects that use this object
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this user source connection. 
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func sourcesUserConnectionsAllUsedByListWithRequestBuilder(id: Int) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/sources/user_connections/all/{id}/used_by/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter userOAuthSourceConnectionRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesUserConnectionsOauthCreate(userOAuthSourceConnectionRequest: UserOAuthSourceConnectionRequest, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: UserOAuthSourceConnection?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesUserConnectionsOauthCreateWithRequestBuilder(userOAuthSourceConnectionRequest: userOAuthSourceConnectionRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /sources/user_connections/oauth/
     - Source Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter userOAuthSourceConnectionRequest: (body)  
     - returns: RequestBuilder<UserOAuthSourceConnection> 
     */
    open class func sourcesUserConnectionsOauthCreateWithRequestBuilder(userOAuthSourceConnectionRequest: UserOAuthSourceConnectionRequest) -> RequestBuilder<UserOAuthSourceConnection> {
        let localVariablePath = "/sources/user_connections/oauth/"
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userOAuthSourceConnectionRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserOAuthSourceConnection>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this User OAuth Source Connection. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesUserConnectionsOauthDestroy(id: Int, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesUserConnectionsOauthDestroyWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /sources/user_connections/oauth/{id}/
     - Source Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this User OAuth Source Connection. 
     - returns: RequestBuilder<Void> 
     */
    open class func sourcesUserConnectionsOauthDestroyWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/sources/user_connections/oauth/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter sourceSlug: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesUserConnectionsOauthList(ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, sourceSlug: String? = nil, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedUserOAuthSourceConnectionList?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesUserConnectionsOauthListWithRequestBuilder(ordering: ordering, page: page, pageSize: pageSize, search: search, sourceSlug: sourceSlug).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /sources/user_connections/oauth/
     - Source Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter sourceSlug: (query)  (optional)
     - returns: RequestBuilder<PaginatedUserOAuthSourceConnectionList> 
     */
    open class func sourcesUserConnectionsOauthListWithRequestBuilder(ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, sourceSlug: String? = nil) -> RequestBuilder<PaginatedUserOAuthSourceConnectionList> {
        let localVariablePath = "/sources/user_connections/oauth/"
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
            "source__slug": (wrappedValue: sourceSlug?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedUserOAuthSourceConnectionList>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this User OAuth Source Connection. 
     - parameter patchedUserOAuthSourceConnectionRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesUserConnectionsOauthPartialUpdate(id: Int, patchedUserOAuthSourceConnectionRequest: PatchedUserOAuthSourceConnectionRequest? = nil, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: UserOAuthSourceConnection?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesUserConnectionsOauthPartialUpdateWithRequestBuilder(id: id, patchedUserOAuthSourceConnectionRequest: patchedUserOAuthSourceConnectionRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /sources/user_connections/oauth/{id}/
     - Source Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this User OAuth Source Connection. 
     - parameter patchedUserOAuthSourceConnectionRequest: (body)  (optional)
     - returns: RequestBuilder<UserOAuthSourceConnection> 
     */
    open class func sourcesUserConnectionsOauthPartialUpdateWithRequestBuilder(id: Int, patchedUserOAuthSourceConnectionRequest: PatchedUserOAuthSourceConnectionRequest? = nil) -> RequestBuilder<UserOAuthSourceConnection> {
        var localVariablePath = "/sources/user_connections/oauth/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedUserOAuthSourceConnectionRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserOAuthSourceConnection>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this User OAuth Source Connection. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesUserConnectionsOauthRetrieve(id: Int, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: UserOAuthSourceConnection?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesUserConnectionsOauthRetrieveWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /sources/user_connections/oauth/{id}/
     - Source Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this User OAuth Source Connection. 
     - returns: RequestBuilder<UserOAuthSourceConnection> 
     */
    open class func sourcesUserConnectionsOauthRetrieveWithRequestBuilder(id: Int) -> RequestBuilder<UserOAuthSourceConnection> {
        var localVariablePath = "/sources/user_connections/oauth/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserOAuthSourceConnection>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this User OAuth Source Connection. 
     - parameter userOAuthSourceConnectionRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesUserConnectionsOauthUpdate(id: Int, userOAuthSourceConnectionRequest: UserOAuthSourceConnectionRequest, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: UserOAuthSourceConnection?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesUserConnectionsOauthUpdateWithRequestBuilder(id: id, userOAuthSourceConnectionRequest: userOAuthSourceConnectionRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /sources/user_connections/oauth/{id}/
     - Source Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this User OAuth Source Connection. 
     - parameter userOAuthSourceConnectionRequest: (body)  
     - returns: RequestBuilder<UserOAuthSourceConnection> 
     */
    open class func sourcesUserConnectionsOauthUpdateWithRequestBuilder(id: Int, userOAuthSourceConnectionRequest: UserOAuthSourceConnectionRequest) -> RequestBuilder<UserOAuthSourceConnection> {
        var localVariablePath = "/sources/user_connections/oauth/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userOAuthSourceConnectionRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserOAuthSourceConnection>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this User OAuth Source Connection. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesUserConnectionsOauthUsedByList(id: Int, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: [UsedBy]?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesUserConnectionsOauthUsedByListWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /sources/user_connections/oauth/{id}/used_by/
     - Get a list of all objects that use this object
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this User OAuth Source Connection. 
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func sourcesUserConnectionsOauthUsedByListWithRequestBuilder(id: Int) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/sources/user_connections/oauth/{id}/used_by/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter plexSourceConnectionRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesUserConnectionsPlexCreate(plexSourceConnectionRequest: PlexSourceConnectionRequest, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: PlexSourceConnection?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesUserConnectionsPlexCreateWithRequestBuilder(plexSourceConnectionRequest: plexSourceConnectionRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /sources/user_connections/plex/
     - Plex Source connection Serializer
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter plexSourceConnectionRequest: (body)  
     - returns: RequestBuilder<PlexSourceConnection> 
     */
    open class func sourcesUserConnectionsPlexCreateWithRequestBuilder(plexSourceConnectionRequest: PlexSourceConnectionRequest) -> RequestBuilder<PlexSourceConnection> {
        let localVariablePath = "/sources/user_connections/plex/"
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: plexSourceConnectionRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PlexSourceConnection>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this User Plex Source Connection. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesUserConnectionsPlexDestroy(id: Int, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesUserConnectionsPlexDestroyWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /sources/user_connections/plex/{id}/
     - Plex Source connection Serializer
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this User Plex Source Connection. 
     - returns: RequestBuilder<Void> 
     */
    open class func sourcesUserConnectionsPlexDestroyWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/sources/user_connections/plex/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter sourceSlug: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesUserConnectionsPlexList(ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, sourceSlug: String? = nil, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedPlexSourceConnectionList?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesUserConnectionsPlexListWithRequestBuilder(ordering: ordering, page: page, pageSize: pageSize, search: search, sourceSlug: sourceSlug).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /sources/user_connections/plex/
     - Plex Source connection Serializer
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter sourceSlug: (query)  (optional)
     - returns: RequestBuilder<PaginatedPlexSourceConnectionList> 
     */
    open class func sourcesUserConnectionsPlexListWithRequestBuilder(ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, sourceSlug: String? = nil) -> RequestBuilder<PaginatedPlexSourceConnectionList> {
        let localVariablePath = "/sources/user_connections/plex/"
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
            "source__slug": (wrappedValue: sourceSlug?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedPlexSourceConnectionList>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this User Plex Source Connection. 
     - parameter patchedPlexSourceConnectionRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesUserConnectionsPlexPartialUpdate(id: Int, patchedPlexSourceConnectionRequest: PatchedPlexSourceConnectionRequest? = nil, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: PlexSourceConnection?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesUserConnectionsPlexPartialUpdateWithRequestBuilder(id: id, patchedPlexSourceConnectionRequest: patchedPlexSourceConnectionRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /sources/user_connections/plex/{id}/
     - Plex Source connection Serializer
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this User Plex Source Connection. 
     - parameter patchedPlexSourceConnectionRequest: (body)  (optional)
     - returns: RequestBuilder<PlexSourceConnection> 
     */
    open class func sourcesUserConnectionsPlexPartialUpdateWithRequestBuilder(id: Int, patchedPlexSourceConnectionRequest: PatchedPlexSourceConnectionRequest? = nil) -> RequestBuilder<PlexSourceConnection> {
        var localVariablePath = "/sources/user_connections/plex/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedPlexSourceConnectionRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PlexSourceConnection>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this User Plex Source Connection. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesUserConnectionsPlexRetrieve(id: Int, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: PlexSourceConnection?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesUserConnectionsPlexRetrieveWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /sources/user_connections/plex/{id}/
     - Plex Source connection Serializer
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this User Plex Source Connection. 
     - returns: RequestBuilder<PlexSourceConnection> 
     */
    open class func sourcesUserConnectionsPlexRetrieveWithRequestBuilder(id: Int) -> RequestBuilder<PlexSourceConnection> {
        var localVariablePath = "/sources/user_connections/plex/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PlexSourceConnection>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this User Plex Source Connection. 
     - parameter plexSourceConnectionRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesUserConnectionsPlexUpdate(id: Int, plexSourceConnectionRequest: PlexSourceConnectionRequest, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: PlexSourceConnection?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesUserConnectionsPlexUpdateWithRequestBuilder(id: id, plexSourceConnectionRequest: plexSourceConnectionRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /sources/user_connections/plex/{id}/
     - Plex Source connection Serializer
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this User Plex Source Connection. 
     - parameter plexSourceConnectionRequest: (body)  
     - returns: RequestBuilder<PlexSourceConnection> 
     */
    open class func sourcesUserConnectionsPlexUpdateWithRequestBuilder(id: Int, plexSourceConnectionRequest: PlexSourceConnectionRequest) -> RequestBuilder<PlexSourceConnection> {
        var localVariablePath = "/sources/user_connections/plex/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: plexSourceConnectionRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PlexSourceConnection>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this User Plex Source Connection. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesUserConnectionsPlexUsedByList(id: Int, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: [UsedBy]?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesUserConnectionsPlexUsedByListWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /sources/user_connections/plex/{id}/used_by/
     - Get a list of all objects that use this object
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this User Plex Source Connection. 
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func sourcesUserConnectionsPlexUsedByListWithRequestBuilder(id: Int) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/sources/user_connections/plex/{id}/used_by/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter userSAMLSourceConnectionRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesUserConnectionsSamlCreate(userSAMLSourceConnectionRequest: UserSAMLSourceConnectionRequest, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: UserSAMLSourceConnection?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesUserConnectionsSamlCreateWithRequestBuilder(userSAMLSourceConnectionRequest: userSAMLSourceConnectionRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /sources/user_connections/saml/
     - Source Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter userSAMLSourceConnectionRequest: (body)  
     - returns: RequestBuilder<UserSAMLSourceConnection> 
     */
    open class func sourcesUserConnectionsSamlCreateWithRequestBuilder(userSAMLSourceConnectionRequest: UserSAMLSourceConnectionRequest) -> RequestBuilder<UserSAMLSourceConnection> {
        let localVariablePath = "/sources/user_connections/saml/"
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userSAMLSourceConnectionRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserSAMLSourceConnection>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this User SAML Source Connection. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesUserConnectionsSamlDestroy(id: Int, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesUserConnectionsSamlDestroyWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /sources/user_connections/saml/{id}/
     - Source Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this User SAML Source Connection. 
     - returns: RequestBuilder<Void> 
     */
    open class func sourcesUserConnectionsSamlDestroyWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/sources/user_connections/saml/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter sourceSlug: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesUserConnectionsSamlList(ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, sourceSlug: String? = nil, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedUserSAMLSourceConnectionList?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesUserConnectionsSamlListWithRequestBuilder(ordering: ordering, page: page, pageSize: pageSize, search: search, sourceSlug: sourceSlug).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /sources/user_connections/saml/
     - Source Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter sourceSlug: (query)  (optional)
     - returns: RequestBuilder<PaginatedUserSAMLSourceConnectionList> 
     */
    open class func sourcesUserConnectionsSamlListWithRequestBuilder(ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, sourceSlug: String? = nil) -> RequestBuilder<PaginatedUserSAMLSourceConnectionList> {
        let localVariablePath = "/sources/user_connections/saml/"
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
            "source__slug": (wrappedValue: sourceSlug?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedUserSAMLSourceConnectionList>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this User SAML Source Connection. 
     - parameter patchedUserSAMLSourceConnectionRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesUserConnectionsSamlPartialUpdate(id: Int, patchedUserSAMLSourceConnectionRequest: PatchedUserSAMLSourceConnectionRequest? = nil, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: UserSAMLSourceConnection?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesUserConnectionsSamlPartialUpdateWithRequestBuilder(id: id, patchedUserSAMLSourceConnectionRequest: patchedUserSAMLSourceConnectionRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /sources/user_connections/saml/{id}/
     - Source Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this User SAML Source Connection. 
     - parameter patchedUserSAMLSourceConnectionRequest: (body)  (optional)
     - returns: RequestBuilder<UserSAMLSourceConnection> 
     */
    open class func sourcesUserConnectionsSamlPartialUpdateWithRequestBuilder(id: Int, patchedUserSAMLSourceConnectionRequest: PatchedUserSAMLSourceConnectionRequest? = nil) -> RequestBuilder<UserSAMLSourceConnection> {
        var localVariablePath = "/sources/user_connections/saml/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedUserSAMLSourceConnectionRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserSAMLSourceConnection>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this User SAML Source Connection. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesUserConnectionsSamlRetrieve(id: Int, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: UserSAMLSourceConnection?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesUserConnectionsSamlRetrieveWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /sources/user_connections/saml/{id}/
     - Source Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this User SAML Source Connection. 
     - returns: RequestBuilder<UserSAMLSourceConnection> 
     */
    open class func sourcesUserConnectionsSamlRetrieveWithRequestBuilder(id: Int) -> RequestBuilder<UserSAMLSourceConnection> {
        var localVariablePath = "/sources/user_connections/saml/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserSAMLSourceConnection>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this User SAML Source Connection. 
     - parameter userSAMLSourceConnectionRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesUserConnectionsSamlUpdate(id: Int, userSAMLSourceConnectionRequest: UserSAMLSourceConnectionRequest, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: UserSAMLSourceConnection?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesUserConnectionsSamlUpdateWithRequestBuilder(id: id, userSAMLSourceConnectionRequest: userSAMLSourceConnectionRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /sources/user_connections/saml/{id}/
     - Source Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this User SAML Source Connection. 
     - parameter userSAMLSourceConnectionRequest: (body)  
     - returns: RequestBuilder<UserSAMLSourceConnection> 
     */
    open class func sourcesUserConnectionsSamlUpdateWithRequestBuilder(id: Int, userSAMLSourceConnectionRequest: UserSAMLSourceConnectionRequest) -> RequestBuilder<UserSAMLSourceConnection> {
        var localVariablePath = "/sources/user_connections/saml/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userSAMLSourceConnectionRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserSAMLSourceConnection>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this User SAML Source Connection. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sourcesUserConnectionsSamlUsedByList(id: Int, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: [UsedBy]?, _ error: Error?) -> Void)) -> RequestTask {
        return sourcesUserConnectionsSamlUsedByListWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /sources/user_connections/saml/{id}/used_by/
     - Get a list of all objects that use this object
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this User SAML Source Connection. 
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func sourcesUserConnectionsSamlUsedByListWithRequestBuilder(id: Int) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/sources/user_connections/saml/{id}/used_by/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
