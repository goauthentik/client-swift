//
// PropertymappingsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class PropertymappingsAPI {

    /**

     - parameter pmUuid: (path) A UUID string identifying this Property Mapping. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func propertymappingsAllDestroy(pmUuid: UUID, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return propertymappingsAllDestroyWithRequestBuilder(pmUuid: pmUuid).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /propertymappings/all/{pm_uuid}/
     - PropertyMapping Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this Property Mapping. 
     - returns: RequestBuilder<Void> 
     */
    open class func propertymappingsAllDestroyWithRequestBuilder(pmUuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/propertymappings/all/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter managedIsnull: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func propertymappingsAllList(managedIsnull: Bool? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedPropertyMappingList?, _ error: Error?) -> Void)) -> RequestTask {
        return propertymappingsAllListWithRequestBuilder(managedIsnull: managedIsnull, ordering: ordering, page: page, pageSize: pageSize, search: search).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /propertymappings/all/
     - PropertyMapping Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter managedIsnull: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - returns: RequestBuilder<PaginatedPropertyMappingList> 
     */
    open class func propertymappingsAllListWithRequestBuilder(managedIsnull: Bool? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil) -> RequestBuilder<PaginatedPropertyMappingList> {
        let localVariablePath = "/propertymappings/all/"
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "managed__isnull": (wrappedValue: managedIsnull?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedPropertyMappingList>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this Property Mapping. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func propertymappingsAllRetrieve(pmUuid: UUID, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: PropertyMapping?, _ error: Error?) -> Void)) -> RequestTask {
        return propertymappingsAllRetrieveWithRequestBuilder(pmUuid: pmUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /propertymappings/all/{pm_uuid}/
     - PropertyMapping Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this Property Mapping. 
     - returns: RequestBuilder<PropertyMapping> 
     */
    open class func propertymappingsAllRetrieveWithRequestBuilder(pmUuid: UUID) -> RequestBuilder<PropertyMapping> {
        var localVariablePath = "/propertymappings/all/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PropertyMapping>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this Property Mapping. 
     - parameter policyTestRequest: (body)  
     - parameter formatResult: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func propertymappingsAllTestCreate(pmUuid: UUID, policyTestRequest: PolicyTestRequest, formatResult: Bool? = nil, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: PropertyMappingTestResult?, _ error: Error?) -> Void)) -> RequestTask {
        return propertymappingsAllTestCreateWithRequestBuilder(pmUuid: pmUuid, policyTestRequest: policyTestRequest, formatResult: formatResult).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /propertymappings/all/{pm_uuid}/test/
     - Test Property Mapping
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this Property Mapping. 
     - parameter policyTestRequest: (body)  
     - parameter formatResult: (query)  (optional)
     - returns: RequestBuilder<PropertyMappingTestResult> 
     */
    open class func propertymappingsAllTestCreateWithRequestBuilder(pmUuid: UUID, policyTestRequest: PolicyTestRequest, formatResult: Bool? = nil) -> RequestBuilder<PropertyMappingTestResult> {
        var localVariablePath = "/propertymappings/all/{pm_uuid}/test/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: policyTestRequest)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "format_result": (wrappedValue: formatResult?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PropertyMappingTestResult>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func propertymappingsAllTypesList(apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: [TypeCreate]?, _ error: Error?) -> Void)) -> RequestTask {
        return propertymappingsAllTypesListWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /propertymappings/all/types/
     - Get all creatable property-mapping types
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - returns: RequestBuilder<[TypeCreate]> 
     */
    open class func propertymappingsAllTypesListWithRequestBuilder() -> RequestBuilder<[TypeCreate]> {
        let localVariablePath = "/propertymappings/all/types/"
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[TypeCreate]>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this Property Mapping. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func propertymappingsAllUsedByList(pmUuid: UUID, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: [UsedBy]?, _ error: Error?) -> Void)) -> RequestTask {
        return propertymappingsAllUsedByListWithRequestBuilder(pmUuid: pmUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /propertymappings/all/{pm_uuid}/used_by/
     - Get a list of all objects that use this object
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this Property Mapping. 
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func propertymappingsAllUsedByListWithRequestBuilder(pmUuid: UUID) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/propertymappings/all/{pm_uuid}/used_by/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter lDAPPropertyMappingRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func propertymappingsLdapCreate(lDAPPropertyMappingRequest: LDAPPropertyMappingRequest, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: LDAPPropertyMapping?, _ error: Error?) -> Void)) -> RequestTask {
        return propertymappingsLdapCreateWithRequestBuilder(lDAPPropertyMappingRequest: lDAPPropertyMappingRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /propertymappings/ldap/
     - LDAP PropertyMapping Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter lDAPPropertyMappingRequest: (body)  
     - returns: RequestBuilder<LDAPPropertyMapping> 
     */
    open class func propertymappingsLdapCreateWithRequestBuilder(lDAPPropertyMappingRequest: LDAPPropertyMappingRequest) -> RequestBuilder<LDAPPropertyMapping> {
        let localVariablePath = "/propertymappings/ldap/"
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: lDAPPropertyMappingRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LDAPPropertyMapping>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this LDAP Property Mapping. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func propertymappingsLdapDestroy(pmUuid: UUID, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return propertymappingsLdapDestroyWithRequestBuilder(pmUuid: pmUuid).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /propertymappings/ldap/{pm_uuid}/
     - LDAP PropertyMapping Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this LDAP Property Mapping. 
     - returns: RequestBuilder<Void> 
     */
    open class func propertymappingsLdapDestroyWithRequestBuilder(pmUuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/propertymappings/ldap/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter expression: (query)  (optional)
     - parameter managed: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter objectField: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter pmUuid: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func propertymappingsLdapList(expression: String? = nil, managed: [String]? = nil, name: String? = nil, objectField: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, pmUuid: UUID? = nil, search: String? = nil, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedLDAPPropertyMappingList?, _ error: Error?) -> Void)) -> RequestTask {
        return propertymappingsLdapListWithRequestBuilder(expression: expression, managed: managed, name: name, objectField: objectField, ordering: ordering, page: page, pageSize: pageSize, pmUuid: pmUuid, search: search).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /propertymappings/ldap/
     - LDAP PropertyMapping Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter expression: (query)  (optional)
     - parameter managed: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter objectField: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter pmUuid: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - returns: RequestBuilder<PaginatedLDAPPropertyMappingList> 
     */
    open class func propertymappingsLdapListWithRequestBuilder(expression: String? = nil, managed: [String]? = nil, name: String? = nil, objectField: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, pmUuid: UUID? = nil, search: String? = nil) -> RequestBuilder<PaginatedLDAPPropertyMappingList> {
        let localVariablePath = "/propertymappings/ldap/"
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "expression": (wrappedValue: expression?.encodeToJSON(), isExplode: true),
            "managed": (wrappedValue: managed?.encodeToJSON(), isExplode: true),
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "object_field": (wrappedValue: objectField?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "pm_uuid": (wrappedValue: pmUuid?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedLDAPPropertyMappingList>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this LDAP Property Mapping. 
     - parameter patchedLDAPPropertyMappingRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func propertymappingsLdapPartialUpdate(pmUuid: UUID, patchedLDAPPropertyMappingRequest: PatchedLDAPPropertyMappingRequest? = nil, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: LDAPPropertyMapping?, _ error: Error?) -> Void)) -> RequestTask {
        return propertymappingsLdapPartialUpdateWithRequestBuilder(pmUuid: pmUuid, patchedLDAPPropertyMappingRequest: patchedLDAPPropertyMappingRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /propertymappings/ldap/{pm_uuid}/
     - LDAP PropertyMapping Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this LDAP Property Mapping. 
     - parameter patchedLDAPPropertyMappingRequest: (body)  (optional)
     - returns: RequestBuilder<LDAPPropertyMapping> 
     */
    open class func propertymappingsLdapPartialUpdateWithRequestBuilder(pmUuid: UUID, patchedLDAPPropertyMappingRequest: PatchedLDAPPropertyMappingRequest? = nil) -> RequestBuilder<LDAPPropertyMapping> {
        var localVariablePath = "/propertymappings/ldap/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedLDAPPropertyMappingRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LDAPPropertyMapping>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this LDAP Property Mapping. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func propertymappingsLdapRetrieve(pmUuid: UUID, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: LDAPPropertyMapping?, _ error: Error?) -> Void)) -> RequestTask {
        return propertymappingsLdapRetrieveWithRequestBuilder(pmUuid: pmUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /propertymappings/ldap/{pm_uuid}/
     - LDAP PropertyMapping Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this LDAP Property Mapping. 
     - returns: RequestBuilder<LDAPPropertyMapping> 
     */
    open class func propertymappingsLdapRetrieveWithRequestBuilder(pmUuid: UUID) -> RequestBuilder<LDAPPropertyMapping> {
        var localVariablePath = "/propertymappings/ldap/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LDAPPropertyMapping>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this LDAP Property Mapping. 
     - parameter lDAPPropertyMappingRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func propertymappingsLdapUpdate(pmUuid: UUID, lDAPPropertyMappingRequest: LDAPPropertyMappingRequest, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: LDAPPropertyMapping?, _ error: Error?) -> Void)) -> RequestTask {
        return propertymappingsLdapUpdateWithRequestBuilder(pmUuid: pmUuid, lDAPPropertyMappingRequest: lDAPPropertyMappingRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /propertymappings/ldap/{pm_uuid}/
     - LDAP PropertyMapping Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this LDAP Property Mapping. 
     - parameter lDAPPropertyMappingRequest: (body)  
     - returns: RequestBuilder<LDAPPropertyMapping> 
     */
    open class func propertymappingsLdapUpdateWithRequestBuilder(pmUuid: UUID, lDAPPropertyMappingRequest: LDAPPropertyMappingRequest) -> RequestBuilder<LDAPPropertyMapping> {
        var localVariablePath = "/propertymappings/ldap/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: lDAPPropertyMappingRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LDAPPropertyMapping>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this LDAP Property Mapping. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func propertymappingsLdapUsedByList(pmUuid: UUID, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: [UsedBy]?, _ error: Error?) -> Void)) -> RequestTask {
        return propertymappingsLdapUsedByListWithRequestBuilder(pmUuid: pmUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /propertymappings/ldap/{pm_uuid}/used_by/
     - Get a list of all objects that use this object
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this LDAP Property Mapping. 
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func propertymappingsLdapUsedByListWithRequestBuilder(pmUuid: UUID) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/propertymappings/ldap/{pm_uuid}/used_by/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter notificationWebhookMappingRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func propertymappingsNotificationCreate(notificationWebhookMappingRequest: NotificationWebhookMappingRequest, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: NotificationWebhookMapping?, _ error: Error?) -> Void)) -> RequestTask {
        return propertymappingsNotificationCreateWithRequestBuilder(notificationWebhookMappingRequest: notificationWebhookMappingRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /propertymappings/notification/
     - NotificationWebhookMapping Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter notificationWebhookMappingRequest: (body)  
     - returns: RequestBuilder<NotificationWebhookMapping> 
     */
    open class func propertymappingsNotificationCreateWithRequestBuilder(notificationWebhookMappingRequest: NotificationWebhookMappingRequest) -> RequestBuilder<NotificationWebhookMapping> {
        let localVariablePath = "/propertymappings/notification/"
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: notificationWebhookMappingRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NotificationWebhookMapping>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this Webhook Mapping. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func propertymappingsNotificationDestroy(pmUuid: UUID, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return propertymappingsNotificationDestroyWithRequestBuilder(pmUuid: pmUuid).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /propertymappings/notification/{pm_uuid}/
     - NotificationWebhookMapping Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this Webhook Mapping. 
     - returns: RequestBuilder<Void> 
     */
    open class func propertymappingsNotificationDestroyWithRequestBuilder(pmUuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/propertymappings/notification/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func propertymappingsNotificationList(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedNotificationWebhookMappingList?, _ error: Error?) -> Void)) -> RequestTask {
        return propertymappingsNotificationListWithRequestBuilder(name: name, ordering: ordering, page: page, pageSize: pageSize, search: search).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /propertymappings/notification/
     - NotificationWebhookMapping Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - returns: RequestBuilder<PaginatedNotificationWebhookMappingList> 
     */
    open class func propertymappingsNotificationListWithRequestBuilder(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil) -> RequestBuilder<PaginatedNotificationWebhookMappingList> {
        let localVariablePath = "/propertymappings/notification/"
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedNotificationWebhookMappingList>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this Webhook Mapping. 
     - parameter patchedNotificationWebhookMappingRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func propertymappingsNotificationPartialUpdate(pmUuid: UUID, patchedNotificationWebhookMappingRequest: PatchedNotificationWebhookMappingRequest? = nil, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: NotificationWebhookMapping?, _ error: Error?) -> Void)) -> RequestTask {
        return propertymappingsNotificationPartialUpdateWithRequestBuilder(pmUuid: pmUuid, patchedNotificationWebhookMappingRequest: patchedNotificationWebhookMappingRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /propertymappings/notification/{pm_uuid}/
     - NotificationWebhookMapping Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this Webhook Mapping. 
     - parameter patchedNotificationWebhookMappingRequest: (body)  (optional)
     - returns: RequestBuilder<NotificationWebhookMapping> 
     */
    open class func propertymappingsNotificationPartialUpdateWithRequestBuilder(pmUuid: UUID, patchedNotificationWebhookMappingRequest: PatchedNotificationWebhookMappingRequest? = nil) -> RequestBuilder<NotificationWebhookMapping> {
        var localVariablePath = "/propertymappings/notification/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedNotificationWebhookMappingRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NotificationWebhookMapping>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this Webhook Mapping. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func propertymappingsNotificationRetrieve(pmUuid: UUID, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: NotificationWebhookMapping?, _ error: Error?) -> Void)) -> RequestTask {
        return propertymappingsNotificationRetrieveWithRequestBuilder(pmUuid: pmUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /propertymappings/notification/{pm_uuid}/
     - NotificationWebhookMapping Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this Webhook Mapping. 
     - returns: RequestBuilder<NotificationWebhookMapping> 
     */
    open class func propertymappingsNotificationRetrieveWithRequestBuilder(pmUuid: UUID) -> RequestBuilder<NotificationWebhookMapping> {
        var localVariablePath = "/propertymappings/notification/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NotificationWebhookMapping>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this Webhook Mapping. 
     - parameter notificationWebhookMappingRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func propertymappingsNotificationUpdate(pmUuid: UUID, notificationWebhookMappingRequest: NotificationWebhookMappingRequest, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: NotificationWebhookMapping?, _ error: Error?) -> Void)) -> RequestTask {
        return propertymappingsNotificationUpdateWithRequestBuilder(pmUuid: pmUuid, notificationWebhookMappingRequest: notificationWebhookMappingRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /propertymappings/notification/{pm_uuid}/
     - NotificationWebhookMapping Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this Webhook Mapping. 
     - parameter notificationWebhookMappingRequest: (body)  
     - returns: RequestBuilder<NotificationWebhookMapping> 
     */
    open class func propertymappingsNotificationUpdateWithRequestBuilder(pmUuid: UUID, notificationWebhookMappingRequest: NotificationWebhookMappingRequest) -> RequestBuilder<NotificationWebhookMapping> {
        var localVariablePath = "/propertymappings/notification/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: notificationWebhookMappingRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NotificationWebhookMapping>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this Webhook Mapping. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func propertymappingsNotificationUsedByList(pmUuid: UUID, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: [UsedBy]?, _ error: Error?) -> Void)) -> RequestTask {
        return propertymappingsNotificationUsedByListWithRequestBuilder(pmUuid: pmUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /propertymappings/notification/{pm_uuid}/used_by/
     - Get a list of all objects that use this object
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this Webhook Mapping. 
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func propertymappingsNotificationUsedByListWithRequestBuilder(pmUuid: UUID) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/propertymappings/notification/{pm_uuid}/used_by/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter sAMLPropertyMappingRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func propertymappingsSamlCreate(sAMLPropertyMappingRequest: SAMLPropertyMappingRequest, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: SAMLPropertyMapping?, _ error: Error?) -> Void)) -> RequestTask {
        return propertymappingsSamlCreateWithRequestBuilder(sAMLPropertyMappingRequest: sAMLPropertyMappingRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /propertymappings/saml/
     - SAMLPropertyMapping Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter sAMLPropertyMappingRequest: (body)  
     - returns: RequestBuilder<SAMLPropertyMapping> 
     */
    open class func propertymappingsSamlCreateWithRequestBuilder(sAMLPropertyMappingRequest: SAMLPropertyMappingRequest) -> RequestBuilder<SAMLPropertyMapping> {
        let localVariablePath = "/propertymappings/saml/"
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sAMLPropertyMappingRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SAMLPropertyMapping>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this SAML Property Mapping. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func propertymappingsSamlDestroy(pmUuid: UUID, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return propertymappingsSamlDestroyWithRequestBuilder(pmUuid: pmUuid).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /propertymappings/saml/{pm_uuid}/
     - SAMLPropertyMapping Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this SAML Property Mapping. 
     - returns: RequestBuilder<Void> 
     */
    open class func propertymappingsSamlDestroyWithRequestBuilder(pmUuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/propertymappings/saml/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter expression: (query)  (optional)
     - parameter friendlyName: (query)  (optional)
     - parameter managed: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter pmUuid: (query)  (optional)
     - parameter samlName: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func propertymappingsSamlList(expression: String? = nil, friendlyName: String? = nil, managed: [String]? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, pmUuid: UUID? = nil, samlName: String? = nil, search: String? = nil, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedSAMLPropertyMappingList?, _ error: Error?) -> Void)) -> RequestTask {
        return propertymappingsSamlListWithRequestBuilder(expression: expression, friendlyName: friendlyName, managed: managed, name: name, ordering: ordering, page: page, pageSize: pageSize, pmUuid: pmUuid, samlName: samlName, search: search).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /propertymappings/saml/
     - SAMLPropertyMapping Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter expression: (query)  (optional)
     - parameter friendlyName: (query)  (optional)
     - parameter managed: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter pmUuid: (query)  (optional)
     - parameter samlName: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - returns: RequestBuilder<PaginatedSAMLPropertyMappingList> 
     */
    open class func propertymappingsSamlListWithRequestBuilder(expression: String? = nil, friendlyName: String? = nil, managed: [String]? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, pmUuid: UUID? = nil, samlName: String? = nil, search: String? = nil) -> RequestBuilder<PaginatedSAMLPropertyMappingList> {
        let localVariablePath = "/propertymappings/saml/"
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "expression": (wrappedValue: expression?.encodeToJSON(), isExplode: true),
            "friendly_name": (wrappedValue: friendlyName?.encodeToJSON(), isExplode: true),
            "managed": (wrappedValue: managed?.encodeToJSON(), isExplode: true),
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "pm_uuid": (wrappedValue: pmUuid?.encodeToJSON(), isExplode: true),
            "saml_name": (wrappedValue: samlName?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedSAMLPropertyMappingList>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this SAML Property Mapping. 
     - parameter patchedSAMLPropertyMappingRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func propertymappingsSamlPartialUpdate(pmUuid: UUID, patchedSAMLPropertyMappingRequest: PatchedSAMLPropertyMappingRequest? = nil, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: SAMLPropertyMapping?, _ error: Error?) -> Void)) -> RequestTask {
        return propertymappingsSamlPartialUpdateWithRequestBuilder(pmUuid: pmUuid, patchedSAMLPropertyMappingRequest: patchedSAMLPropertyMappingRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /propertymappings/saml/{pm_uuid}/
     - SAMLPropertyMapping Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this SAML Property Mapping. 
     - parameter patchedSAMLPropertyMappingRequest: (body)  (optional)
     - returns: RequestBuilder<SAMLPropertyMapping> 
     */
    open class func propertymappingsSamlPartialUpdateWithRequestBuilder(pmUuid: UUID, patchedSAMLPropertyMappingRequest: PatchedSAMLPropertyMappingRequest? = nil) -> RequestBuilder<SAMLPropertyMapping> {
        var localVariablePath = "/propertymappings/saml/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedSAMLPropertyMappingRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SAMLPropertyMapping>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this SAML Property Mapping. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func propertymappingsSamlRetrieve(pmUuid: UUID, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: SAMLPropertyMapping?, _ error: Error?) -> Void)) -> RequestTask {
        return propertymappingsSamlRetrieveWithRequestBuilder(pmUuid: pmUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /propertymappings/saml/{pm_uuid}/
     - SAMLPropertyMapping Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this SAML Property Mapping. 
     - returns: RequestBuilder<SAMLPropertyMapping> 
     */
    open class func propertymappingsSamlRetrieveWithRequestBuilder(pmUuid: UUID) -> RequestBuilder<SAMLPropertyMapping> {
        var localVariablePath = "/propertymappings/saml/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SAMLPropertyMapping>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this SAML Property Mapping. 
     - parameter sAMLPropertyMappingRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func propertymappingsSamlUpdate(pmUuid: UUID, sAMLPropertyMappingRequest: SAMLPropertyMappingRequest, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: SAMLPropertyMapping?, _ error: Error?) -> Void)) -> RequestTask {
        return propertymappingsSamlUpdateWithRequestBuilder(pmUuid: pmUuid, sAMLPropertyMappingRequest: sAMLPropertyMappingRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /propertymappings/saml/{pm_uuid}/
     - SAMLPropertyMapping Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this SAML Property Mapping. 
     - parameter sAMLPropertyMappingRequest: (body)  
     - returns: RequestBuilder<SAMLPropertyMapping> 
     */
    open class func propertymappingsSamlUpdateWithRequestBuilder(pmUuid: UUID, sAMLPropertyMappingRequest: SAMLPropertyMappingRequest) -> RequestBuilder<SAMLPropertyMapping> {
        var localVariablePath = "/propertymappings/saml/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sAMLPropertyMappingRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SAMLPropertyMapping>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this SAML Property Mapping. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func propertymappingsSamlUsedByList(pmUuid: UUID, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: [UsedBy]?, _ error: Error?) -> Void)) -> RequestTask {
        return propertymappingsSamlUsedByListWithRequestBuilder(pmUuid: pmUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /propertymappings/saml/{pm_uuid}/used_by/
     - Get a list of all objects that use this object
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this SAML Property Mapping. 
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func propertymappingsSamlUsedByListWithRequestBuilder(pmUuid: UUID) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/propertymappings/saml/{pm_uuid}/used_by/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter sCIMMappingRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func propertymappingsScimCreate(sCIMMappingRequest: SCIMMappingRequest, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: SCIMMapping?, _ error: Error?) -> Void)) -> RequestTask {
        return propertymappingsScimCreateWithRequestBuilder(sCIMMappingRequest: sCIMMappingRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /propertymappings/scim/
     - SCIMMapping Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter sCIMMappingRequest: (body)  
     - returns: RequestBuilder<SCIMMapping> 
     */
    open class func propertymappingsScimCreateWithRequestBuilder(sCIMMappingRequest: SCIMMappingRequest) -> RequestBuilder<SCIMMapping> {
        let localVariablePath = "/propertymappings/scim/"
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sCIMMappingRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SCIMMapping>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this SCIM Mapping. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func propertymappingsScimDestroy(pmUuid: UUID, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return propertymappingsScimDestroyWithRequestBuilder(pmUuid: pmUuid).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /propertymappings/scim/{pm_uuid}/
     - SCIMMapping Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this SCIM Mapping. 
     - returns: RequestBuilder<Void> 
     */
    open class func propertymappingsScimDestroyWithRequestBuilder(pmUuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/propertymappings/scim/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter expression: (query)  (optional)
     - parameter managed: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter pmUuid: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func propertymappingsScimList(expression: String? = nil, managed: [String]? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, pmUuid: UUID? = nil, search: String? = nil, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedSCIMMappingList?, _ error: Error?) -> Void)) -> RequestTask {
        return propertymappingsScimListWithRequestBuilder(expression: expression, managed: managed, name: name, ordering: ordering, page: page, pageSize: pageSize, pmUuid: pmUuid, search: search).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /propertymappings/scim/
     - SCIMMapping Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter expression: (query)  (optional)
     - parameter managed: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter pmUuid: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - returns: RequestBuilder<PaginatedSCIMMappingList> 
     */
    open class func propertymappingsScimListWithRequestBuilder(expression: String? = nil, managed: [String]? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, pmUuid: UUID? = nil, search: String? = nil) -> RequestBuilder<PaginatedSCIMMappingList> {
        let localVariablePath = "/propertymappings/scim/"
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "expression": (wrappedValue: expression?.encodeToJSON(), isExplode: true),
            "managed": (wrappedValue: managed?.encodeToJSON(), isExplode: true),
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "pm_uuid": (wrappedValue: pmUuid?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedSCIMMappingList>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this SCIM Mapping. 
     - parameter patchedSCIMMappingRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func propertymappingsScimPartialUpdate(pmUuid: UUID, patchedSCIMMappingRequest: PatchedSCIMMappingRequest? = nil, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: SCIMMapping?, _ error: Error?) -> Void)) -> RequestTask {
        return propertymappingsScimPartialUpdateWithRequestBuilder(pmUuid: pmUuid, patchedSCIMMappingRequest: patchedSCIMMappingRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /propertymappings/scim/{pm_uuid}/
     - SCIMMapping Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this SCIM Mapping. 
     - parameter patchedSCIMMappingRequest: (body)  (optional)
     - returns: RequestBuilder<SCIMMapping> 
     */
    open class func propertymappingsScimPartialUpdateWithRequestBuilder(pmUuid: UUID, patchedSCIMMappingRequest: PatchedSCIMMappingRequest? = nil) -> RequestBuilder<SCIMMapping> {
        var localVariablePath = "/propertymappings/scim/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedSCIMMappingRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SCIMMapping>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this SCIM Mapping. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func propertymappingsScimRetrieve(pmUuid: UUID, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: SCIMMapping?, _ error: Error?) -> Void)) -> RequestTask {
        return propertymappingsScimRetrieveWithRequestBuilder(pmUuid: pmUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /propertymappings/scim/{pm_uuid}/
     - SCIMMapping Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this SCIM Mapping. 
     - returns: RequestBuilder<SCIMMapping> 
     */
    open class func propertymappingsScimRetrieveWithRequestBuilder(pmUuid: UUID) -> RequestBuilder<SCIMMapping> {
        var localVariablePath = "/propertymappings/scim/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SCIMMapping>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this SCIM Mapping. 
     - parameter sCIMMappingRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func propertymappingsScimUpdate(pmUuid: UUID, sCIMMappingRequest: SCIMMappingRequest, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: SCIMMapping?, _ error: Error?) -> Void)) -> RequestTask {
        return propertymappingsScimUpdateWithRequestBuilder(pmUuid: pmUuid, sCIMMappingRequest: sCIMMappingRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /propertymappings/scim/{pm_uuid}/
     - SCIMMapping Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this SCIM Mapping. 
     - parameter sCIMMappingRequest: (body)  
     - returns: RequestBuilder<SCIMMapping> 
     */
    open class func propertymappingsScimUpdateWithRequestBuilder(pmUuid: UUID, sCIMMappingRequest: SCIMMappingRequest) -> RequestBuilder<SCIMMapping> {
        var localVariablePath = "/propertymappings/scim/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sCIMMappingRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SCIMMapping>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this SCIM Mapping. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func propertymappingsScimUsedByList(pmUuid: UUID, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: [UsedBy]?, _ error: Error?) -> Void)) -> RequestTask {
        return propertymappingsScimUsedByListWithRequestBuilder(pmUuid: pmUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /propertymappings/scim/{pm_uuid}/used_by/
     - Get a list of all objects that use this object
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this SCIM Mapping. 
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func propertymappingsScimUsedByListWithRequestBuilder(pmUuid: UUID) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/propertymappings/scim/{pm_uuid}/used_by/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter scopeMappingRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func propertymappingsScopeCreate(scopeMappingRequest: ScopeMappingRequest, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: ScopeMapping?, _ error: Error?) -> Void)) -> RequestTask {
        return propertymappingsScopeCreateWithRequestBuilder(scopeMappingRequest: scopeMappingRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /propertymappings/scope/
     - ScopeMapping Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter scopeMappingRequest: (body)  
     - returns: RequestBuilder<ScopeMapping> 
     */
    open class func propertymappingsScopeCreateWithRequestBuilder(scopeMappingRequest: ScopeMappingRequest) -> RequestBuilder<ScopeMapping> {
        let localVariablePath = "/propertymappings/scope/"
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: scopeMappingRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ScopeMapping>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this Scope Mapping. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func propertymappingsScopeDestroy(pmUuid: UUID, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return propertymappingsScopeDestroyWithRequestBuilder(pmUuid: pmUuid).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /propertymappings/scope/{pm_uuid}/
     - ScopeMapping Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this Scope Mapping. 
     - returns: RequestBuilder<Void> 
     */
    open class func propertymappingsScopeDestroyWithRequestBuilder(pmUuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/propertymappings/scope/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter managed: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter scopeName: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func propertymappingsScopeList(managed: [String]? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, scopeName: String? = nil, search: String? = nil, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedScopeMappingList?, _ error: Error?) -> Void)) -> RequestTask {
        return propertymappingsScopeListWithRequestBuilder(managed: managed, name: name, ordering: ordering, page: page, pageSize: pageSize, scopeName: scopeName, search: search).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /propertymappings/scope/
     - ScopeMapping Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter managed: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter scopeName: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - returns: RequestBuilder<PaginatedScopeMappingList> 
     */
    open class func propertymappingsScopeListWithRequestBuilder(managed: [String]? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, scopeName: String? = nil, search: String? = nil) -> RequestBuilder<PaginatedScopeMappingList> {
        let localVariablePath = "/propertymappings/scope/"
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "managed": (wrappedValue: managed?.encodeToJSON(), isExplode: true),
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "scope_name": (wrappedValue: scopeName?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedScopeMappingList>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this Scope Mapping. 
     - parameter patchedScopeMappingRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func propertymappingsScopePartialUpdate(pmUuid: UUID, patchedScopeMappingRequest: PatchedScopeMappingRequest? = nil, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: ScopeMapping?, _ error: Error?) -> Void)) -> RequestTask {
        return propertymappingsScopePartialUpdateWithRequestBuilder(pmUuid: pmUuid, patchedScopeMappingRequest: patchedScopeMappingRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /propertymappings/scope/{pm_uuid}/
     - ScopeMapping Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this Scope Mapping. 
     - parameter patchedScopeMappingRequest: (body)  (optional)
     - returns: RequestBuilder<ScopeMapping> 
     */
    open class func propertymappingsScopePartialUpdateWithRequestBuilder(pmUuid: UUID, patchedScopeMappingRequest: PatchedScopeMappingRequest? = nil) -> RequestBuilder<ScopeMapping> {
        var localVariablePath = "/propertymappings/scope/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedScopeMappingRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ScopeMapping>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this Scope Mapping. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func propertymappingsScopeRetrieve(pmUuid: UUID, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: ScopeMapping?, _ error: Error?) -> Void)) -> RequestTask {
        return propertymappingsScopeRetrieveWithRequestBuilder(pmUuid: pmUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /propertymappings/scope/{pm_uuid}/
     - ScopeMapping Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this Scope Mapping. 
     - returns: RequestBuilder<ScopeMapping> 
     */
    open class func propertymappingsScopeRetrieveWithRequestBuilder(pmUuid: UUID) -> RequestBuilder<ScopeMapping> {
        var localVariablePath = "/propertymappings/scope/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ScopeMapping>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this Scope Mapping. 
     - parameter scopeMappingRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func propertymappingsScopeUpdate(pmUuid: UUID, scopeMappingRequest: ScopeMappingRequest, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: ScopeMapping?, _ error: Error?) -> Void)) -> RequestTask {
        return propertymappingsScopeUpdateWithRequestBuilder(pmUuid: pmUuid, scopeMappingRequest: scopeMappingRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /propertymappings/scope/{pm_uuid}/
     - ScopeMapping Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this Scope Mapping. 
     - parameter scopeMappingRequest: (body)  
     - returns: RequestBuilder<ScopeMapping> 
     */
    open class func propertymappingsScopeUpdateWithRequestBuilder(pmUuid: UUID, scopeMappingRequest: ScopeMappingRequest) -> RequestBuilder<ScopeMapping> {
        var localVariablePath = "/propertymappings/scope/{pm_uuid}/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: scopeMappingRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ScopeMapping>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter pmUuid: (path) A UUID string identifying this Scope Mapping. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func propertymappingsScopeUsedByList(pmUuid: UUID, apiResponseQueue: DispatchQueue = authentikAPIAPI.apiResponseQueue, completion: @escaping ((_ data: [UsedBy]?, _ error: Error?) -> Void)) -> RequestTask {
        return propertymappingsScopeUsedByListWithRequestBuilder(pmUuid: pmUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /propertymappings/scope/{pm_uuid}/used_by/
     - Get a list of all objects that use this object
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter pmUuid: (path) A UUID string identifying this Scope Mapping. 
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func propertymappingsScopeUsedByListWithRequestBuilder(pmUuid: UUID) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/propertymappings/scope/{pm_uuid}/used_by/"
        let pmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pmUuid))"
        let pmUuidPostEscape = pmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pm_uuid}", with: pmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = authentikAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
