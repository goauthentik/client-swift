//
// PatchedAuthenticateWebAuthnStageRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** AuthenticateWebAuthnStage Serializer */
public struct PatchedAuthenticateWebAuthnStageRequest: Codable, JSONEncodable, Hashable {

    public var name: String?
    public var flowSet: [FlowSetRequest]?
    /** Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage. */
    public var configureFlow: UUID?
    public var friendlyName: String?
    public var userVerification: UserVerificationEnum?
    public var authenticatorAttachment: AuthenticatorAttachmentEnum?
    public var residentKeyRequirement: ResidentKeyRequirementEnum?

    public init(name: String? = nil, flowSet: [FlowSetRequest]? = nil, configureFlow: UUID? = nil, friendlyName: String? = nil, userVerification: UserVerificationEnum? = nil, authenticatorAttachment: AuthenticatorAttachmentEnum? = nil, residentKeyRequirement: ResidentKeyRequirementEnum? = nil) {
        self.name = name
        self.flowSet = flowSet
        self.configureFlow = configureFlow
        self.friendlyName = friendlyName
        self.userVerification = userVerification
        self.authenticatorAttachment = authenticatorAttachment
        self.residentKeyRequirement = residentKeyRequirement
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case flowSet = "flow_set"
        case configureFlow = "configure_flow"
        case friendlyName = "friendly_name"
        case userVerification = "user_verification"
        case authenticatorAttachment = "authenticator_attachment"
        case residentKeyRequirement = "resident_key_requirement"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(flowSet, forKey: .flowSet)
        try container.encodeIfPresent(configureFlow, forKey: .configureFlow)
        try container.encodeIfPresent(friendlyName, forKey: .friendlyName)
        try container.encodeIfPresent(userVerification, forKey: .userVerification)
        try container.encodeIfPresent(authenticatorAttachment, forKey: .authenticatorAttachment)
        try container.encodeIfPresent(residentKeyRequirement, forKey: .residentKeyRequirement)
    }
}

