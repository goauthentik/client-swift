//
// FlowStageBinding.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** FlowStageBinding Serializer */
public struct FlowStageBinding: Codable, JSONEncodable, Hashable {

    public var pk: UUID
    public var policybindingmodelPtrId: UUID
    public var target: UUID
    public var stage: UUID
    public var stageObj: Stage
    /** Evaluate policies during the Flow planning process. */
    public var evaluateOnPlan: Bool?
    /** Evaluate policies when the Stage is present to the user. */
    public var reEvaluatePolicies: Bool?
    public var order: Int
    public var policyEngineMode: PolicyEngineMode?
    /** Configure how the flow executor should handle an invalid response to a challenge. RETRY returns the error message and a similar challenge to the executor. RESTART restarts the flow from the beginning, and RESTART_WITH_CONTEXT restarts the flow while keeping the current context.  * `retry` - Retry * `restart` - Restart * `restart_with_context` - Restart With Context */
    public var invalidResponseAction: InvalidResponseActionEnum?

    public init(pk: UUID, policybindingmodelPtrId: UUID, target: UUID, stage: UUID, stageObj: Stage, evaluateOnPlan: Bool? = nil, reEvaluatePolicies: Bool? = nil, order: Int, policyEngineMode: PolicyEngineMode? = nil, invalidResponseAction: InvalidResponseActionEnum? = nil) {
        self.pk = pk
        self.policybindingmodelPtrId = policybindingmodelPtrId
        self.target = target
        self.stage = stage
        self.stageObj = stageObj
        self.evaluateOnPlan = evaluateOnPlan
        self.reEvaluatePolicies = reEvaluatePolicies
        self.order = order
        self.policyEngineMode = policyEngineMode
        self.invalidResponseAction = invalidResponseAction
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pk
        case policybindingmodelPtrId = "policybindingmodel_ptr_id"
        case target
        case stage
        case stageObj = "stage_obj"
        case evaluateOnPlan = "evaluate_on_plan"
        case reEvaluatePolicies = "re_evaluate_policies"
        case order
        case policyEngineMode = "policy_engine_mode"
        case invalidResponseAction = "invalid_response_action"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pk, forKey: .pk)
        try container.encode(policybindingmodelPtrId, forKey: .policybindingmodelPtrId)
        try container.encode(target, forKey: .target)
        try container.encode(stage, forKey: .stage)
        try container.encode(stageObj, forKey: .stageObj)
        try container.encodeIfPresent(evaluateOnPlan, forKey: .evaluateOnPlan)
        try container.encodeIfPresent(reEvaluatePolicies, forKey: .reEvaluatePolicies)
        try container.encode(order, forKey: .order)
        try container.encodeIfPresent(policyEngineMode, forKey: .policyEngineMode)
        try container.encodeIfPresent(invalidResponseAction, forKey: .invalidResponseAction)
    }
}

