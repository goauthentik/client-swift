//
// IdentificationChallenge.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Identification challenges with all UI elements */
public struct IdentificationChallenge: Codable, JSONEncodable, Hashable {

    public var type: ChallengeChoices
    public var flowInfo: ContextualFlowInfo?
    public var component: String? = "ak-stage-identification"
    public var responseErrors: [String: [ErrorDetail]]?
    public var userFields: [String]?
    public var passwordFields: Bool
    public var applicationPre: String?
    public var enrollUrl: String?
    public var recoveryUrl: String?
    public var passwordlessUrl: String?
    public var primaryAction: String
    public var sources: [LoginSource]?
    public var showSourceLabels: Bool

    public init(type: ChallengeChoices, flowInfo: ContextualFlowInfo? = nil, component: String? = "ak-stage-identification", responseErrors: [String: [ErrorDetail]]? = nil, userFields: [String]?, passwordFields: Bool, applicationPre: String? = nil, enrollUrl: String? = nil, recoveryUrl: String? = nil, passwordlessUrl: String? = nil, primaryAction: String, sources: [LoginSource]? = nil, showSourceLabels: Bool) {
        self.type = type
        self.flowInfo = flowInfo
        self.component = component
        self.responseErrors = responseErrors
        self.userFields = userFields
        self.passwordFields = passwordFields
        self.applicationPre = applicationPre
        self.enrollUrl = enrollUrl
        self.recoveryUrl = recoveryUrl
        self.passwordlessUrl = passwordlessUrl
        self.primaryAction = primaryAction
        self.sources = sources
        self.showSourceLabels = showSourceLabels
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case type
        case flowInfo = "flow_info"
        case component
        case responseErrors = "response_errors"
        case userFields = "user_fields"
        case passwordFields = "password_fields"
        case applicationPre = "application_pre"
        case enrollUrl = "enroll_url"
        case recoveryUrl = "recovery_url"
        case passwordlessUrl = "passwordless_url"
        case primaryAction = "primary_action"
        case sources
        case showSourceLabels = "show_source_labels"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(type, forKey: .type)
        try container.encodeIfPresent(flowInfo, forKey: .flowInfo)
        try container.encodeIfPresent(component, forKey: .component)
        try container.encodeIfPresent(responseErrors, forKey: .responseErrors)
        try container.encode(userFields, forKey: .userFields)
        try container.encode(passwordFields, forKey: .passwordFields)
        try container.encodeIfPresent(applicationPre, forKey: .applicationPre)
        try container.encodeIfPresent(enrollUrl, forKey: .enrollUrl)
        try container.encodeIfPresent(recoveryUrl, forKey: .recoveryUrl)
        try container.encodeIfPresent(passwordlessUrl, forKey: .passwordlessUrl)
        try container.encode(primaryAction, forKey: .primaryAction)
        try container.encodeIfPresent(sources, forKey: .sources)
        try container.encode(showSourceLabels, forKey: .showSourceLabels)
    }
}

