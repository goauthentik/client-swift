//
// Invitation.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Invitation Serializer */
public struct Invitation: Codable, JSONEncodable, Hashable {

    public var pk: UUID
    public var name: String
    public var expires: Date?
    public var fixedData: [String: AnyCodable]?
    public var createdBy: GroupMember
    /** When enabled, the invitation will be deleted after usage. */
    public var singleUse: Bool?
    /** When set, only the configured flow can use this invitation. */
    public var flow: UUID?
    public var flowObj: Flow

    public init(pk: UUID, name: String, expires: Date? = nil, fixedData: [String: AnyCodable]? = nil, createdBy: GroupMember, singleUse: Bool? = nil, flow: UUID? = nil, flowObj: Flow) {
        self.pk = pk
        self.name = name
        self.expires = expires
        self.fixedData = fixedData
        self.createdBy = createdBy
        self.singleUse = singleUse
        self.flow = flow
        self.flowObj = flowObj
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pk
        case name
        case expires
        case fixedData = "fixed_data"
        case createdBy = "created_by"
        case singleUse = "single_use"
        case flow
        case flowObj = "flow_obj"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pk, forKey: .pk)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(expires, forKey: .expires)
        try container.encodeIfPresent(fixedData, forKey: .fixedData)
        try container.encode(createdBy, forKey: .createdBy)
        try container.encodeIfPresent(singleUse, forKey: .singleUse)
        try container.encodeIfPresent(flow, forKey: .flow)
        try container.encode(flowObj, forKey: .flowObj)
    }
}

