//
// AuthenticatedSession.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** AuthenticatedSession Serializer */
public struct AuthenticatedSession: Codable, JSONEncodable, Hashable {

    public var uuid: UUID?
    /** Check if session is currently active session */
    public var current: Bool
    public var userAgent: AuthenticatedSessionUserAgent
    public var geoIp: AuthenticatedSessionGeoIp?
    public var user: Int
    public var lastIp: String
    public var lastUserAgent: String?
    public var lastUsed: Date
    public var expires: Date?

    public init(uuid: UUID? = nil, current: Bool, userAgent: AuthenticatedSessionUserAgent, geoIp: AuthenticatedSessionGeoIp?, user: Int, lastIp: String, lastUserAgent: String? = nil, lastUsed: Date, expires: Date? = nil) {
        self.uuid = uuid
        self.current = current
        self.userAgent = userAgent
        self.geoIp = geoIp
        self.user = user
        self.lastIp = lastIp
        self.lastUserAgent = lastUserAgent
        self.lastUsed = lastUsed
        self.expires = expires
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case uuid
        case current
        case userAgent = "user_agent"
        case geoIp = "geo_ip"
        case user
        case lastIp = "last_ip"
        case lastUserAgent = "last_user_agent"
        case lastUsed = "last_used"
        case expires
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(uuid, forKey: .uuid)
        try container.encode(current, forKey: .current)
        try container.encode(userAgent, forKey: .userAgent)
        try container.encode(geoIp, forKey: .geoIp)
        try container.encode(user, forKey: .user)
        try container.encode(lastIp, forKey: .lastIp)
        try container.encodeIfPresent(lastUserAgent, forKey: .lastUserAgent)
        try container.encode(lastUsed, forKey: .lastUsed)
        try container.encodeIfPresent(expires, forKey: .expires)
    }
}

