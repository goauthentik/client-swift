//
// PatchedProxyProviderRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** ProxyProvider Serializer */
public struct PatchedProxyProviderRequest: Codable, JSONEncodable, Hashable {

    public var name: String?
    /** Flow used for authentication when the associated application is accessed by an un-authenticated user. */
    public var authenticationFlow: UUID?
    /** Flow used when authorizing this provider. */
    public var authorizationFlow: UUID?
    public var propertyMappings: [UUID]?
    public var internalHost: String?
    public var externalHost: String?
    /** Validate SSL Certificates of upstream servers */
    public var internalHostSslValidation: Bool?
    public var certificate: UUID?
    /** Regular expressions for which authentication is not required. Each new line is interpreted as a new Regular Expression. */
    public var skipPathRegex: String?
    /** Set a custom HTTP-Basic Authentication header based on values from authentik. */
    public var basicAuthEnabled: Bool?
    /** User/Group Attribute used for the password part of the HTTP-Basic Header. */
    public var basicAuthPasswordAttribute: String?
    /** User/Group Attribute used for the user part of the HTTP-Basic Header. If not set, the user's Email address is used. */
    public var basicAuthUserAttribute: String?
    /** Enable support for forwardAuth in traefik and nginx auth_request. Exclusive with internal_host.  * `proxy` - Proxy * `forward_single` - Forward Single * `forward_domain` - Forward Domain */
    public var mode: ProxyMode?
    /** When enabled, this provider will intercept the authorization header and authenticate requests based on its value. */
    public var interceptHeaderAuth: Bool?
    public var cookieDomain: String?
    public var jwksSources: [UUID]?
    /** Tokens not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3). */
    public var accessTokenValidity: String?
    /** Tokens not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3). */
    public var refreshTokenValidity: String?

    public init(name: String? = nil, authenticationFlow: UUID? = nil, authorizationFlow: UUID? = nil, propertyMappings: [UUID]? = nil, internalHost: String? = nil, externalHost: String? = nil, internalHostSslValidation: Bool? = nil, certificate: UUID? = nil, skipPathRegex: String? = nil, basicAuthEnabled: Bool? = nil, basicAuthPasswordAttribute: String? = nil, basicAuthUserAttribute: String? = nil, mode: ProxyMode? = nil, interceptHeaderAuth: Bool? = nil, cookieDomain: String? = nil, jwksSources: [UUID]? = nil, accessTokenValidity: String? = nil, refreshTokenValidity: String? = nil) {
        self.name = name
        self.authenticationFlow = authenticationFlow
        self.authorizationFlow = authorizationFlow
        self.propertyMappings = propertyMappings
        self.internalHost = internalHost
        self.externalHost = externalHost
        self.internalHostSslValidation = internalHostSslValidation
        self.certificate = certificate
        self.skipPathRegex = skipPathRegex
        self.basicAuthEnabled = basicAuthEnabled
        self.basicAuthPasswordAttribute = basicAuthPasswordAttribute
        self.basicAuthUserAttribute = basicAuthUserAttribute
        self.mode = mode
        self.interceptHeaderAuth = interceptHeaderAuth
        self.cookieDomain = cookieDomain
        self.jwksSources = jwksSources
        self.accessTokenValidity = accessTokenValidity
        self.refreshTokenValidity = refreshTokenValidity
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case authenticationFlow = "authentication_flow"
        case authorizationFlow = "authorization_flow"
        case propertyMappings = "property_mappings"
        case internalHost = "internal_host"
        case externalHost = "external_host"
        case internalHostSslValidation = "internal_host_ssl_validation"
        case certificate
        case skipPathRegex = "skip_path_regex"
        case basicAuthEnabled = "basic_auth_enabled"
        case basicAuthPasswordAttribute = "basic_auth_password_attribute"
        case basicAuthUserAttribute = "basic_auth_user_attribute"
        case mode
        case interceptHeaderAuth = "intercept_header_auth"
        case cookieDomain = "cookie_domain"
        case jwksSources = "jwks_sources"
        case accessTokenValidity = "access_token_validity"
        case refreshTokenValidity = "refresh_token_validity"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(authenticationFlow, forKey: .authenticationFlow)
        try container.encodeIfPresent(authorizationFlow, forKey: .authorizationFlow)
        try container.encodeIfPresent(propertyMappings, forKey: .propertyMappings)
        try container.encodeIfPresent(internalHost, forKey: .internalHost)
        try container.encodeIfPresent(externalHost, forKey: .externalHost)
        try container.encodeIfPresent(internalHostSslValidation, forKey: .internalHostSslValidation)
        try container.encodeIfPresent(certificate, forKey: .certificate)
        try container.encodeIfPresent(skipPathRegex, forKey: .skipPathRegex)
        try container.encodeIfPresent(basicAuthEnabled, forKey: .basicAuthEnabled)
        try container.encodeIfPresent(basicAuthPasswordAttribute, forKey: .basicAuthPasswordAttribute)
        try container.encodeIfPresent(basicAuthUserAttribute, forKey: .basicAuthUserAttribute)
        try container.encodeIfPresent(mode, forKey: .mode)
        try container.encodeIfPresent(interceptHeaderAuth, forKey: .interceptHeaderAuth)
        try container.encodeIfPresent(cookieDomain, forKey: .cookieDomain)
        try container.encodeIfPresent(jwksSources, forKey: .jwksSources)
        try container.encodeIfPresent(accessTokenValidity, forKey: .accessTokenValidity)
        try container.encodeIfPresent(refreshTokenValidity, forKey: .refreshTokenValidity)
    }
}

