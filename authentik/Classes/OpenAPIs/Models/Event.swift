//
// Event.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Event Serializer */
public struct Event: Codable, JSONEncodable, Hashable {

    public var pk: UUID
    public var user: [String: AnyCodable]?
    public var action: EventActions
    public var app: String
    public var context: [String: AnyCodable]?
    public var clientIp: String?
    public var created: Date
    public var expires: Date?
    public var tenant: [String: AnyCodable]?

    public init(pk: UUID, user: [String: AnyCodable]? = nil, action: EventActions, app: String, context: [String: AnyCodable]? = nil, clientIp: String? = nil, created: Date, expires: Date? = nil, tenant: [String: AnyCodable]? = nil) {
        self.pk = pk
        self.user = user
        self.action = action
        self.app = app
        self.context = context
        self.clientIp = clientIp
        self.created = created
        self.expires = expires
        self.tenant = tenant
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pk
        case user
        case action
        case app
        case context
        case clientIp = "client_ip"
        case created
        case expires
        case tenant
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pk, forKey: .pk)
        try container.encodeIfPresent(user, forKey: .user)
        try container.encode(action, forKey: .action)
        try container.encode(app, forKey: .app)
        try container.encodeIfPresent(context, forKey: .context)
        try container.encodeIfPresent(clientIp, forKey: .clientIp)
        try container.encode(created, forKey: .created)
        try container.encodeIfPresent(expires, forKey: .expires)
        try container.encodeIfPresent(tenant, forKey: .tenant)
    }
}

