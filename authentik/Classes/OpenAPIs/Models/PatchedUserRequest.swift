//
// PatchedUserRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** User Serializer */
public struct PatchedUserRequest: Codable, JSONEncodable, Hashable {

    public var username: String?
    /** User's display name. */
    public var name: String?
    /** Designates whether this user should be treated as active. Unselect this instead of deleting accounts. */
    public var isActive: Bool?
    public var lastLogin: Date?
    public var groups: [UUID]?
    public var email: String?
    public var attributes: [String: AnyCodable]?
    public var path: String?
    public var type: UserTypeEnum?

    public init(username: String? = nil, name: String? = nil, isActive: Bool? = nil, lastLogin: Date? = nil, groups: [UUID]? = nil, email: String? = nil, attributes: [String: AnyCodable]? = nil, path: String? = nil, type: UserTypeEnum? = nil) {
        self.username = username
        self.name = name
        self.isActive = isActive
        self.lastLogin = lastLogin
        self.groups = groups
        self.email = email
        self.attributes = attributes
        self.path = path
        self.type = type
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case username
        case name
        case isActive = "is_active"
        case lastLogin = "last_login"
        case groups
        case email
        case attributes
        case path
        case type
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(username, forKey: .username)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(isActive, forKey: .isActive)
        try container.encodeIfPresent(lastLogin, forKey: .lastLogin)
        try container.encodeIfPresent(groups, forKey: .groups)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(attributes, forKey: .attributes)
        try container.encodeIfPresent(path, forKey: .path)
        try container.encodeIfPresent(type, forKey: .type)
    }
}

