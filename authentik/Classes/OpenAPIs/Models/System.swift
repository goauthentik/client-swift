//
// System.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Get system information. */
public struct System: Codable, JSONEncodable, Hashable {

    /** Get HTTP Request headers */
    public var httpHeaders: [String: String]
    /** Get HTTP host */
    public var httpHost: String
    /** Get HTTP Secure flag */
    public var httpIsSecure: Bool
    public var runtime: SystemRuntime
    /** Currently active tenant */
    public var tenant: String
    /** Current server time */
    public var serverTime: Date
    /** Get the FQDN configured on the embedded outpost */
    public var embeddedOutpostHost: String

    public init(httpHeaders: [String: String], httpHost: String, httpIsSecure: Bool, runtime: SystemRuntime, tenant: String, serverTime: Date, embeddedOutpostHost: String) {
        self.httpHeaders = httpHeaders
        self.httpHost = httpHost
        self.httpIsSecure = httpIsSecure
        self.runtime = runtime
        self.tenant = tenant
        self.serverTime = serverTime
        self.embeddedOutpostHost = embeddedOutpostHost
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case httpHeaders = "http_headers"
        case httpHost = "http_host"
        case httpIsSecure = "http_is_secure"
        case runtime
        case tenant
        case serverTime = "server_time"
        case embeddedOutpostHost = "embedded_outpost_host"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(httpHeaders, forKey: .httpHeaders)
        try container.encode(httpHost, forKey: .httpHost)
        try container.encode(httpIsSecure, forKey: .httpIsSecure)
        try container.encode(runtime, forKey: .runtime)
        try container.encode(tenant, forKey: .tenant)
        try container.encode(serverTime, forKey: .serverTime)
        try container.encode(embeddedOutpostHost, forKey: .embeddedOutpostHost)
    }
}

