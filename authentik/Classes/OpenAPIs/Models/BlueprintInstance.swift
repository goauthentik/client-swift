//
// BlueprintInstance.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Info about a single blueprint instance file */
public struct BlueprintInstance: Codable, JSONEncodable, Hashable {

    public var pk: UUID
    public var name: String
    public var path: String? = ""
    public var context: [String: AnyCodable]?
    public var lastApplied: Date
    public var lastAppliedHash: String
    public var status: BlueprintInstanceStatusEnum
    public var enabled: Bool?
    public var managedModels: [String]
    public var metadata: [String: AnyCodable]
    public var content: String?

    public init(pk: UUID, name: String, path: String? = "", context: [String: AnyCodable]? = nil, lastApplied: Date, lastAppliedHash: String, status: BlueprintInstanceStatusEnum, enabled: Bool? = nil, managedModels: [String], metadata: [String: AnyCodable], content: String? = nil) {
        self.pk = pk
        self.name = name
        self.path = path
        self.context = context
        self.lastApplied = lastApplied
        self.lastAppliedHash = lastAppliedHash
        self.status = status
        self.enabled = enabled
        self.managedModels = managedModels
        self.metadata = metadata
        self.content = content
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pk
        case name
        case path
        case context
        case lastApplied = "last_applied"
        case lastAppliedHash = "last_applied_hash"
        case status
        case enabled
        case managedModels = "managed_models"
        case metadata
        case content
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pk, forKey: .pk)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(path, forKey: .path)
        try container.encodeIfPresent(context, forKey: .context)
        try container.encode(lastApplied, forKey: .lastApplied)
        try container.encode(lastAppliedHash, forKey: .lastAppliedHash)
        try container.encode(status, forKey: .status)
        try container.encodeIfPresent(enabled, forKey: .enabled)
        try container.encode(managedModels, forKey: .managedModels)
        try container.encode(metadata, forKey: .metadata)
        try container.encodeIfPresent(content, forKey: .content)
    }
}

