//
// UserWriteStage.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** UserWriteStage Serializer */
public struct UserWriteStage: Codable, JSONEncodable, Hashable {

    public var pk: UUID
    public var name: String
    /** Get object type so that we know how to edit the object */
    public var component: String
    /** Return object's verbose_name */
    public var verboseName: String
    /** Return object's plural verbose_name */
    public var verboseNamePlural: String
    /** Return internal model name */
    public var metaModelName: String
    public var flowSet: [FlowSet]?
    public var userCreationMode: UserCreationModeEnum?
    /** When set, newly created users are inactive and cannot login. */
    public var createUsersAsInactive: Bool?
    /** Optionally add newly created users to this group. */
    public var createUsersGroup: UUID?
    public var userPathTemplate: String?

    public init(pk: UUID, name: String, component: String, verboseName: String, verboseNamePlural: String, metaModelName: String, flowSet: [FlowSet]? = nil, userCreationMode: UserCreationModeEnum? = nil, createUsersAsInactive: Bool? = nil, createUsersGroup: UUID? = nil, userPathTemplate: String? = nil) {
        self.pk = pk
        self.name = name
        self.component = component
        self.verboseName = verboseName
        self.verboseNamePlural = verboseNamePlural
        self.metaModelName = metaModelName
        self.flowSet = flowSet
        self.userCreationMode = userCreationMode
        self.createUsersAsInactive = createUsersAsInactive
        self.createUsersGroup = createUsersGroup
        self.userPathTemplate = userPathTemplate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pk
        case name
        case component
        case verboseName = "verbose_name"
        case verboseNamePlural = "verbose_name_plural"
        case metaModelName = "meta_model_name"
        case flowSet = "flow_set"
        case userCreationMode = "user_creation_mode"
        case createUsersAsInactive = "create_users_as_inactive"
        case createUsersGroup = "create_users_group"
        case userPathTemplate = "user_path_template"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pk, forKey: .pk)
        try container.encode(name, forKey: .name)
        try container.encode(component, forKey: .component)
        try container.encode(verboseName, forKey: .verboseName)
        try container.encode(verboseNamePlural, forKey: .verboseNamePlural)
        try container.encode(metaModelName, forKey: .metaModelName)
        try container.encodeIfPresent(flowSet, forKey: .flowSet)
        try container.encodeIfPresent(userCreationMode, forKey: .userCreationMode)
        try container.encodeIfPresent(createUsersAsInactive, forKey: .createUsersAsInactive)
        try container.encodeIfPresent(createUsersGroup, forKey: .createUsersGroup)
        try container.encodeIfPresent(userPathTemplate, forKey: .userPathTemplate)
    }
}

