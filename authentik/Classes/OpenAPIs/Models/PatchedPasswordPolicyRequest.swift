//
// PatchedPasswordPolicyRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Password Policy Serializer */
public struct PatchedPasswordPolicyRequest: Codable, JSONEncodable, Hashable {

    public var name: String?
    /** When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged. */
    public var executionLogging: Bool?
    /** Field key to check, field keys defined in Prompt stages are available. */
    public var passwordField: String?
    public var amountDigits: Int?
    public var amountUppercase: Int?
    public var amountLowercase: Int?
    public var amountSymbols: Int?
    public var lengthMin: Int?
    public var symbolCharset: String?
    public var errorMessage: String?
    public var checkStaticRules: Bool?
    public var checkHaveIBeenPwned: Bool?
    public var checkZxcvbn: Bool?
    /** How many times the password hash is allowed to be on haveibeenpwned */
    public var hibpAllowedCount: Int?
    /** If the zxcvbn score is equal or less than this value, the policy will fail. */
    public var zxcvbnScoreThreshold: Int?

    public init(name: String? = nil, executionLogging: Bool? = nil, passwordField: String? = nil, amountDigits: Int? = nil, amountUppercase: Int? = nil, amountLowercase: Int? = nil, amountSymbols: Int? = nil, lengthMin: Int? = nil, symbolCharset: String? = nil, errorMessage: String? = nil, checkStaticRules: Bool? = nil, checkHaveIBeenPwned: Bool? = nil, checkZxcvbn: Bool? = nil, hibpAllowedCount: Int? = nil, zxcvbnScoreThreshold: Int? = nil) {
        self.name = name
        self.executionLogging = executionLogging
        self.passwordField = passwordField
        self.amountDigits = amountDigits
        self.amountUppercase = amountUppercase
        self.amountLowercase = amountLowercase
        self.amountSymbols = amountSymbols
        self.lengthMin = lengthMin
        self.symbolCharset = symbolCharset
        self.errorMessage = errorMessage
        self.checkStaticRules = checkStaticRules
        self.checkHaveIBeenPwned = checkHaveIBeenPwned
        self.checkZxcvbn = checkZxcvbn
        self.hibpAllowedCount = hibpAllowedCount
        self.zxcvbnScoreThreshold = zxcvbnScoreThreshold
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case executionLogging = "execution_logging"
        case passwordField = "password_field"
        case amountDigits = "amount_digits"
        case amountUppercase = "amount_uppercase"
        case amountLowercase = "amount_lowercase"
        case amountSymbols = "amount_symbols"
        case lengthMin = "length_min"
        case symbolCharset = "symbol_charset"
        case errorMessage = "error_message"
        case checkStaticRules = "check_static_rules"
        case checkHaveIBeenPwned = "check_have_i_been_pwned"
        case checkZxcvbn = "check_zxcvbn"
        case hibpAllowedCount = "hibp_allowed_count"
        case zxcvbnScoreThreshold = "zxcvbn_score_threshold"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(executionLogging, forKey: .executionLogging)
        try container.encodeIfPresent(passwordField, forKey: .passwordField)
        try container.encodeIfPresent(amountDigits, forKey: .amountDigits)
        try container.encodeIfPresent(amountUppercase, forKey: .amountUppercase)
        try container.encodeIfPresent(amountLowercase, forKey: .amountLowercase)
        try container.encodeIfPresent(amountSymbols, forKey: .amountSymbols)
        try container.encodeIfPresent(lengthMin, forKey: .lengthMin)
        try container.encodeIfPresent(symbolCharset, forKey: .symbolCharset)
        try container.encodeIfPresent(errorMessage, forKey: .errorMessage)
        try container.encodeIfPresent(checkStaticRules, forKey: .checkStaticRules)
        try container.encodeIfPresent(checkHaveIBeenPwned, forKey: .checkHaveIBeenPwned)
        try container.encodeIfPresent(checkZxcvbn, forKey: .checkZxcvbn)
        try container.encodeIfPresent(hibpAllowedCount, forKey: .hibpAllowedCount)
        try container.encodeIfPresent(zxcvbnScoreThreshold, forKey: .zxcvbnScoreThreshold)
    }
}

