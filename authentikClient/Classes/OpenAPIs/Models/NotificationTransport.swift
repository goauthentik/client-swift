//
// NotificationTransport.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** NotificationTransport Serializer */
public struct NotificationTransport: Codable, JSONEncodable, Hashable {

    public var pk: UUID
    public var name: String
    public var mode: NotificationTransportModeEnum?
    /** Return selected mode with a UI Label */
    public var modeVerbose: String
    public var webhookUrl: String?
    public var webhookMapping: UUID?
    /** Only send notification once, for example when sending a webhook into a chat channel. */
    public var sendOnce: Bool?

    public init(pk: UUID, name: String, mode: NotificationTransportModeEnum? = nil, modeVerbose: String, webhookUrl: String? = nil, webhookMapping: UUID? = nil, sendOnce: Bool? = nil) {
        self.pk = pk
        self.name = name
        self.mode = mode
        self.modeVerbose = modeVerbose
        self.webhookUrl = webhookUrl
        self.webhookMapping = webhookMapping
        self.sendOnce = sendOnce
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pk
        case name
        case mode
        case modeVerbose = "mode_verbose"
        case webhookUrl = "webhook_url"
        case webhookMapping = "webhook_mapping"
        case sendOnce = "send_once"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pk, forKey: .pk)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(mode, forKey: .mode)
        try container.encode(modeVerbose, forKey: .modeVerbose)
        try container.encodeIfPresent(webhookUrl, forKey: .webhookUrl)
        try container.encodeIfPresent(webhookMapping, forKey: .webhookMapping)
        try container.encodeIfPresent(sendOnce, forKey: .sendOnce)
    }
}

