//
// SystemTask.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Serialize TaskInfo and TaskResult */
public struct SystemTask: Codable, JSONEncodable, Hashable {

    public var uuid: UUID
    public var name: String
    /** Get full name with UID */
    public var fullName: String
    public var uid: String?
    public var description: String
    public var startTimestamp: Date
    public var finishTimestamp: Date
    public var duration: Double
    public var status: SystemTaskStatusEnum
    public var messages: [String]

    public init(uuid: UUID, name: String, fullName: String, uid: String? = nil, description: String, startTimestamp: Date, finishTimestamp: Date, duration: Double, status: SystemTaskStatusEnum, messages: [String]) {
        self.uuid = uuid
        self.name = name
        self.fullName = fullName
        self.uid = uid
        self.description = description
        self.startTimestamp = startTimestamp
        self.finishTimestamp = finishTimestamp
        self.duration = duration
        self.status = status
        self.messages = messages
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case uuid
        case name
        case fullName = "full_name"
        case uid
        case description
        case startTimestamp = "start_timestamp"
        case finishTimestamp = "finish_timestamp"
        case duration
        case status
        case messages
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(uuid, forKey: .uuid)
        try container.encode(name, forKey: .name)
        try container.encode(fullName, forKey: .fullName)
        try container.encodeIfPresent(uid, forKey: .uid)
        try container.encode(description, forKey: .description)
        try container.encode(startTimestamp, forKey: .startTimestamp)
        try container.encode(finishTimestamp, forKey: .finishTimestamp)
        try container.encode(duration, forKey: .duration)
        try container.encode(status, forKey: .status)
        try container.encode(messages, forKey: .messages)
    }
}

