//
// OutpostHealth.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Outpost health status */
public struct OutpostHealth: Codable, JSONEncodable, Hashable {

    public var uid: String
    public var lastSeen: Date
    public var version: String
    public var versionShould: String
    public var versionOutdated: Bool
    public var buildHash: String
    public var buildHashShould: String
    public var hostname: String

    public init(uid: String, lastSeen: Date, version: String, versionShould: String, versionOutdated: Bool, buildHash: String, buildHashShould: String, hostname: String) {
        self.uid = uid
        self.lastSeen = lastSeen
        self.version = version
        self.versionShould = versionShould
        self.versionOutdated = versionOutdated
        self.buildHash = buildHash
        self.buildHashShould = buildHashShould
        self.hostname = hostname
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case uid
        case lastSeen = "last_seen"
        case version
        case versionShould = "version_should"
        case versionOutdated = "version_outdated"
        case buildHash = "build_hash"
        case buildHashShould = "build_hash_should"
        case hostname
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(uid, forKey: .uid)
        try container.encode(lastSeen, forKey: .lastSeen)
        try container.encode(version, forKey: .version)
        try container.encode(versionShould, forKey: .versionShould)
        try container.encode(versionOutdated, forKey: .versionOutdated)
        try container.encode(buildHash, forKey: .buildHash)
        try container.encode(buildHashShould, forKey: .buildHashShould)
        try container.encode(hostname, forKey: .hostname)
    }
}

