//
// LicenseSummary.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Serializer for license status */
public struct LicenseSummary: Codable, JSONEncodable, Hashable {

    public var internalUsers: Int
    public var externalUsers: Int
    public var valid: Bool
    public var showAdminWarning: Bool
    public var showUserWarning: Bool
    public var readOnly: Bool
    public var latestValid: Date
    public var hasLicense: Bool

    public init(internalUsers: Int, externalUsers: Int, valid: Bool, showAdminWarning: Bool, showUserWarning: Bool, readOnly: Bool, latestValid: Date, hasLicense: Bool) {
        self.internalUsers = internalUsers
        self.externalUsers = externalUsers
        self.valid = valid
        self.showAdminWarning = showAdminWarning
        self.showUserWarning = showUserWarning
        self.readOnly = readOnly
        self.latestValid = latestValid
        self.hasLicense = hasLicense
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case internalUsers = "internal_users"
        case externalUsers = "external_users"
        case valid
        case showAdminWarning = "show_admin_warning"
        case showUserWarning = "show_user_warning"
        case readOnly = "read_only"
        case latestValid = "latest_valid"
        case hasLicense = "has_license"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(internalUsers, forKey: .internalUsers)
        try container.encode(externalUsers, forKey: .externalUsers)
        try container.encode(valid, forKey: .valid)
        try container.encode(showAdminWarning, forKey: .showAdminWarning)
        try container.encode(showUserWarning, forKey: .showUserWarning)
        try container.encode(readOnly, forKey: .readOnly)
        try container.encode(latestValid, forKey: .latestValid)
        try container.encode(hasLicense, forKey: .hasLicense)
    }
}

