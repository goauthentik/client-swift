//
// PatchedSAMLProviderRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** SAMLProvider Serializer */
public struct PatchedSAMLProviderRequest: Codable, JSONEncodable, Hashable {

    public var name: String?
    /** Flow used for authentication when the associated application is accessed by an un-authenticated user. */
    public var authenticationFlow: UUID?
    /** Flow used when authorizing this provider. */
    public var authorizationFlow: UUID?
    public var propertyMappings: [UUID]?
    public var acsUrl: String?
    /** Value of the audience restriction field of the assertion. When left empty, no audience restriction will be added. */
    public var audience: String?
    /** Also known as EntityID */
    public var issuer: String?
    /** Assertion valid not before current time + this value (Format: hours=-1;minutes=-2;seconds=-3). */
    public var assertionValidNotBefore: String?
    /** Assertion not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3). */
    public var assertionValidNotOnOrAfter: String?
    /** Session not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3). */
    public var sessionValidNotOnOrAfter: String?
    /** Configure how the NameID value will be created. When left empty, the NameIDPolicy of the incoming request will be considered */
    public var nameIdMapping: UUID?
    public var digestAlgorithm: DigestAlgorithmEnum?
    public var signatureAlgorithm: SignatureAlgorithmEnum?
    /** Keypair used to sign outgoing Responses going to the Service Provider. */
    public var signingKp: UUID?
    /** When selected, incoming assertion's Signatures will be validated against this certificate. To allow unsigned Requests, leave on default. */
    public var verificationKp: UUID?
    /** This determines how authentik sends the response back to the Service Provider.  * `redirect` - Redirect * `post` - Post */
    public var spBinding: SpBindingEnum?
    /** Default relay_state value for IDP-initiated logins */
    public var defaultRelayState: String?

    public init(name: String? = nil, authenticationFlow: UUID? = nil, authorizationFlow: UUID? = nil, propertyMappings: [UUID]? = nil, acsUrl: String? = nil, audience: String? = nil, issuer: String? = nil, assertionValidNotBefore: String? = nil, assertionValidNotOnOrAfter: String? = nil, sessionValidNotOnOrAfter: String? = nil, nameIdMapping: UUID? = nil, digestAlgorithm: DigestAlgorithmEnum? = nil, signatureAlgorithm: SignatureAlgorithmEnum? = nil, signingKp: UUID? = nil, verificationKp: UUID? = nil, spBinding: SpBindingEnum? = nil, defaultRelayState: String? = nil) {
        self.name = name
        self.authenticationFlow = authenticationFlow
        self.authorizationFlow = authorizationFlow
        self.propertyMappings = propertyMappings
        self.acsUrl = acsUrl
        self.audience = audience
        self.issuer = issuer
        self.assertionValidNotBefore = assertionValidNotBefore
        self.assertionValidNotOnOrAfter = assertionValidNotOnOrAfter
        self.sessionValidNotOnOrAfter = sessionValidNotOnOrAfter
        self.nameIdMapping = nameIdMapping
        self.digestAlgorithm = digestAlgorithm
        self.signatureAlgorithm = signatureAlgorithm
        self.signingKp = signingKp
        self.verificationKp = verificationKp
        self.spBinding = spBinding
        self.defaultRelayState = defaultRelayState
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case authenticationFlow = "authentication_flow"
        case authorizationFlow = "authorization_flow"
        case propertyMappings = "property_mappings"
        case acsUrl = "acs_url"
        case audience
        case issuer
        case assertionValidNotBefore = "assertion_valid_not_before"
        case assertionValidNotOnOrAfter = "assertion_valid_not_on_or_after"
        case sessionValidNotOnOrAfter = "session_valid_not_on_or_after"
        case nameIdMapping = "name_id_mapping"
        case digestAlgorithm = "digest_algorithm"
        case signatureAlgorithm = "signature_algorithm"
        case signingKp = "signing_kp"
        case verificationKp = "verification_kp"
        case spBinding = "sp_binding"
        case defaultRelayState = "default_relay_state"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(authenticationFlow, forKey: .authenticationFlow)
        try container.encodeIfPresent(authorizationFlow, forKey: .authorizationFlow)
        try container.encodeIfPresent(propertyMappings, forKey: .propertyMappings)
        try container.encodeIfPresent(acsUrl, forKey: .acsUrl)
        try container.encodeIfPresent(audience, forKey: .audience)
        try container.encodeIfPresent(issuer, forKey: .issuer)
        try container.encodeIfPresent(assertionValidNotBefore, forKey: .assertionValidNotBefore)
        try container.encodeIfPresent(assertionValidNotOnOrAfter, forKey: .assertionValidNotOnOrAfter)
        try container.encodeIfPresent(sessionValidNotOnOrAfter, forKey: .sessionValidNotOnOrAfter)
        try container.encodeIfPresent(nameIdMapping, forKey: .nameIdMapping)
        try container.encodeIfPresent(digestAlgorithm, forKey: .digestAlgorithm)
        try container.encodeIfPresent(signatureAlgorithm, forKey: .signatureAlgorithm)
        try container.encodeIfPresent(signingKp, forKey: .signingKp)
        try container.encodeIfPresent(verificationKp, forKey: .verificationKp)
        try container.encodeIfPresent(spBinding, forKey: .spBinding)
        try container.encodeIfPresent(defaultRelayState, forKey: .defaultRelayState)
    }
}

