//
// PatchedAuthenticatorSMSStageRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** AuthenticatorSMSStage Serializer */
public struct PatchedAuthenticatorSMSStageRequest: Codable, JSONEncodable, Hashable {

    public var name: String?
    public var flowSet: [FlowSetRequest]?
    /** Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage. */
    public var configureFlow: UUID?
    public var friendlyName: String?
    public var provider: ProviderEnum?
    public var fromNumber: String?
    public var accountSid: String?
    public var auth: String?
    public var authPassword: String?
    public var authType: AuthTypeEnum?
    /** When enabled, the Phone number is only used during enrollment to verify the users authenticity. Only a hash of the phone number is saved to ensure it is not reused in the future. */
    public var verifyOnly: Bool?
    /** Optionally modify the payload being sent to custom providers. */
    public var mapping: UUID?

    public init(name: String? = nil, flowSet: [FlowSetRequest]? = nil, configureFlow: UUID? = nil, friendlyName: String? = nil, provider: ProviderEnum? = nil, fromNumber: String? = nil, accountSid: String? = nil, auth: String? = nil, authPassword: String? = nil, authType: AuthTypeEnum? = nil, verifyOnly: Bool? = nil, mapping: UUID? = nil) {
        self.name = name
        self.flowSet = flowSet
        self.configureFlow = configureFlow
        self.friendlyName = friendlyName
        self.provider = provider
        self.fromNumber = fromNumber
        self.accountSid = accountSid
        self.auth = auth
        self.authPassword = authPassword
        self.authType = authType
        self.verifyOnly = verifyOnly
        self.mapping = mapping
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case flowSet = "flow_set"
        case configureFlow = "configure_flow"
        case friendlyName = "friendly_name"
        case provider
        case fromNumber = "from_number"
        case accountSid = "account_sid"
        case auth
        case authPassword = "auth_password"
        case authType = "auth_type"
        case verifyOnly = "verify_only"
        case mapping
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(flowSet, forKey: .flowSet)
        try container.encodeIfPresent(configureFlow, forKey: .configureFlow)
        try container.encodeIfPresent(friendlyName, forKey: .friendlyName)
        try container.encodeIfPresent(provider, forKey: .provider)
        try container.encodeIfPresent(fromNumber, forKey: .fromNumber)
        try container.encodeIfPresent(accountSid, forKey: .accountSid)
        try container.encodeIfPresent(auth, forKey: .auth)
        try container.encodeIfPresent(authPassword, forKey: .authPassword)
        try container.encodeIfPresent(authType, forKey: .authType)
        try container.encodeIfPresent(verifyOnly, forKey: .verifyOnly)
        try container.encodeIfPresent(mapping, forKey: .mapping)
    }
}

