//
// FlowSet.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Stripped down flow serializer */
public struct FlowSet: Codable, JSONEncodable, Hashable {

    public var pk: UUID
    public var policybindingmodelPtrId: UUID
    public var name: String
    /** Visible in the URL. */
    public var slug: String
    /** Shown as the Title in Flow pages. */
    public var title: String
    /** Decides what this Flow is used for. For example, the Authentication flow is redirect to when an un-authenticated user visits authentik.  * `authentication` - Authentication * `authorization` - Authorization * `invalidation` - Invalidation * `enrollment` - Enrollment * `unenrollment` - Unrenollment * `recovery` - Recovery * `stage_configuration` - Stage Configuration */
    public var designation: FlowDesignationEnum
    /** Get the URL to the background image. If the name is /static or starts with http it is returned as-is */
    public var background: String
    public var policyEngineMode: PolicyEngineMode?
    /** Enable compatibility mode, increases compatibility with password managers on mobile devices. */
    public var compatibilityMode: Bool?
    /** Get export URL for flow */
    public var exportUrl: String
    public var layout: FlowLayoutEnum?
    /** Configure what should happen when a flow denies access to a user.  * `message_continue` - Message Continue * `message` - Message * `continue` - Continue */
    public var deniedAction: DeniedActionEnum?

    public init(pk: UUID, policybindingmodelPtrId: UUID, name: String, slug: String, title: String, designation: FlowDesignationEnum, background: String, policyEngineMode: PolicyEngineMode? = nil, compatibilityMode: Bool? = nil, exportUrl: String, layout: FlowLayoutEnum? = nil, deniedAction: DeniedActionEnum? = nil) {
        self.pk = pk
        self.policybindingmodelPtrId = policybindingmodelPtrId
        self.name = name
        self.slug = slug
        self.title = title
        self.designation = designation
        self.background = background
        self.policyEngineMode = policyEngineMode
        self.compatibilityMode = compatibilityMode
        self.exportUrl = exportUrl
        self.layout = layout
        self.deniedAction = deniedAction
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pk
        case policybindingmodelPtrId = "policybindingmodel_ptr_id"
        case name
        case slug
        case title
        case designation
        case background
        case policyEngineMode = "policy_engine_mode"
        case compatibilityMode = "compatibility_mode"
        case exportUrl = "export_url"
        case layout
        case deniedAction = "denied_action"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pk, forKey: .pk)
        try container.encode(policybindingmodelPtrId, forKey: .policybindingmodelPtrId)
        try container.encode(name, forKey: .name)
        try container.encode(slug, forKey: .slug)
        try container.encode(title, forKey: .title)
        try container.encode(designation, forKey: .designation)
        try container.encode(background, forKey: .background)
        try container.encodeIfPresent(policyEngineMode, forKey: .policyEngineMode)
        try container.encodeIfPresent(compatibilityMode, forKey: .compatibilityMode)
        try container.encode(exportUrl, forKey: .exportUrl)
        try container.encodeIfPresent(layout, forKey: .layout)
        try container.encodeIfPresent(deniedAction, forKey: .deniedAction)
    }
}

