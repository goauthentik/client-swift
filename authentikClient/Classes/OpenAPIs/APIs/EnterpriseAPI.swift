//
// EnterpriseAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class EnterpriseAPI {

    /**

     - parameter licenseRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func enterpriseLicenseCreate(licenseRequest: LicenseRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: License?, _ error: Error?) -> Void)) -> RequestTask {
        return enterpriseLicenseCreateWithRequestBuilder(licenseRequest: licenseRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /enterprise/license/
     - License Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter licenseRequest: (body)  
     - returns: RequestBuilder<License> 
     */
    open class func enterpriseLicenseCreateWithRequestBuilder(licenseRequest: LicenseRequest) -> RequestBuilder<License> {
        let localVariablePath = "/enterprise/license/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: licenseRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<License>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter licenseUuid: (path) A UUID string identifying this License. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func enterpriseLicenseDestroy(licenseUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return enterpriseLicenseDestroyWithRequestBuilder(licenseUuid: licenseUuid).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /enterprise/license/{license_uuid}/
     - License Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter licenseUuid: (path) A UUID string identifying this License. 
     - returns: RequestBuilder<Void> 
     */
    open class func enterpriseLicenseDestroyWithRequestBuilder(licenseUuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/enterprise/license/{license_uuid}/"
        let licenseUuidPreEscape = "\(APIHelper.mapValueToPathItem(licenseUuid))"
        let licenseUuidPostEscape = licenseUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{license_uuid}", with: licenseUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func enterpriseLicenseForecastRetrieve(apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: LicenseForecast?, _ error: Error?) -> Void)) -> RequestTask {
        return enterpriseLicenseForecastRetrieveWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /enterprise/license/forecast/
     - Forecast how many users will be required in a year
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - returns: RequestBuilder<LicenseForecast> 
     */
    open class func enterpriseLicenseForecastRetrieveWithRequestBuilder() -> RequestBuilder<LicenseForecast> {
        let localVariablePath = "/enterprise/license/forecast/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LicenseForecast>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func enterpriseLicenseGetInstallIdRetrieve(apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: InstallID?, _ error: Error?) -> Void)) -> RequestTask {
        return enterpriseLicenseGetInstallIdRetrieveWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /enterprise/license/get_install_id/
     - Get install_id
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - returns: RequestBuilder<InstallID> 
     */
    open class func enterpriseLicenseGetInstallIdRetrieveWithRequestBuilder() -> RequestBuilder<InstallID> {
        let localVariablePath = "/enterprise/license/get_install_id/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InstallID>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func enterpriseLicenseList(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedLicenseList?, _ error: Error?) -> Void)) -> RequestTask {
        return enterpriseLicenseListWithRequestBuilder(name: name, ordering: ordering, page: page, pageSize: pageSize, search: search).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /enterprise/license/
     - License Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - returns: RequestBuilder<PaginatedLicenseList> 
     */
    open class func enterpriseLicenseListWithRequestBuilder(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil) -> RequestBuilder<PaginatedLicenseList> {
        let localVariablePath = "/enterprise/license/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedLicenseList>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter licenseUuid: (path) A UUID string identifying this License. 
     - parameter patchedLicenseRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func enterpriseLicensePartialUpdate(licenseUuid: UUID, patchedLicenseRequest: PatchedLicenseRequest? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: License?, _ error: Error?) -> Void)) -> RequestTask {
        return enterpriseLicensePartialUpdateWithRequestBuilder(licenseUuid: licenseUuid, patchedLicenseRequest: patchedLicenseRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /enterprise/license/{license_uuid}/
     - License Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter licenseUuid: (path) A UUID string identifying this License. 
     - parameter patchedLicenseRequest: (body)  (optional)
     - returns: RequestBuilder<License> 
     */
    open class func enterpriseLicensePartialUpdateWithRequestBuilder(licenseUuid: UUID, patchedLicenseRequest: PatchedLicenseRequest? = nil) -> RequestBuilder<License> {
        var localVariablePath = "/enterprise/license/{license_uuid}/"
        let licenseUuidPreEscape = "\(APIHelper.mapValueToPathItem(licenseUuid))"
        let licenseUuidPostEscape = licenseUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{license_uuid}", with: licenseUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedLicenseRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<License>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter licenseUuid: (path) A UUID string identifying this License. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func enterpriseLicenseRetrieve(licenseUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: License?, _ error: Error?) -> Void)) -> RequestTask {
        return enterpriseLicenseRetrieveWithRequestBuilder(licenseUuid: licenseUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /enterprise/license/{license_uuid}/
     - License Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter licenseUuid: (path) A UUID string identifying this License. 
     - returns: RequestBuilder<License> 
     */
    open class func enterpriseLicenseRetrieveWithRequestBuilder(licenseUuid: UUID) -> RequestBuilder<License> {
        var localVariablePath = "/enterprise/license/{license_uuid}/"
        let licenseUuidPreEscape = "\(APIHelper.mapValueToPathItem(licenseUuid))"
        let licenseUuidPostEscape = licenseUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{license_uuid}", with: licenseUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<License>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func enterpriseLicenseSummaryRetrieve(apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: LicenseSummary?, _ error: Error?) -> Void)) -> RequestTask {
        return enterpriseLicenseSummaryRetrieveWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /enterprise/license/summary/
     - Get the total license status
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - returns: RequestBuilder<LicenseSummary> 
     */
    open class func enterpriseLicenseSummaryRetrieveWithRequestBuilder() -> RequestBuilder<LicenseSummary> {
        let localVariablePath = "/enterprise/license/summary/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LicenseSummary>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter licenseUuid: (path) A UUID string identifying this License. 
     - parameter licenseRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func enterpriseLicenseUpdate(licenseUuid: UUID, licenseRequest: LicenseRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: License?, _ error: Error?) -> Void)) -> RequestTask {
        return enterpriseLicenseUpdateWithRequestBuilder(licenseUuid: licenseUuid, licenseRequest: licenseRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /enterprise/license/{license_uuid}/
     - License Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter licenseUuid: (path) A UUID string identifying this License. 
     - parameter licenseRequest: (body)  
     - returns: RequestBuilder<License> 
     */
    open class func enterpriseLicenseUpdateWithRequestBuilder(licenseUuid: UUID, licenseRequest: LicenseRequest) -> RequestBuilder<License> {
        var localVariablePath = "/enterprise/license/{license_uuid}/"
        let licenseUuidPreEscape = "\(APIHelper.mapValueToPathItem(licenseUuid))"
        let licenseUuidPostEscape = licenseUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{license_uuid}", with: licenseUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: licenseRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<License>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter licenseUuid: (path) A UUID string identifying this License. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func enterpriseLicenseUsedByList(licenseUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: [UsedBy]?, _ error: Error?) -> Void)) -> RequestTask {
        return enterpriseLicenseUsedByListWithRequestBuilder(licenseUuid: licenseUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /enterprise/license/{license_uuid}/used_by/
     - Get a list of all objects that use this object
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter licenseUuid: (path) A UUID string identifying this License. 
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func enterpriseLicenseUsedByListWithRequestBuilder(licenseUuid: UUID) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/enterprise/license/{license_uuid}/used_by/"
        let licenseUuidPreEscape = "\(APIHelper.mapValueToPathItem(licenseUuid))"
        let licenseUuidPostEscape = licenseUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{license_uuid}", with: licenseUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
