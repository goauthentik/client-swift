//
// ProvidersAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ProvidersAPI {

    /**

     - parameter id: (path) A unique integer value identifying this provider. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func providersAllDestroy(id: Int, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return providersAllDestroyWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /providers/all/{id}/
     - Provider Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this provider. 
     - returns: RequestBuilder<Void> 
     */
    open class func providersAllDestroyWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/providers/all/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter applicationIsnull: (query)  (optional)
     - parameter backchannelOnly: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func providersAllList(applicationIsnull: Bool? = nil, backchannelOnly: Bool? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedProviderList?, _ error: Error?) -> Void)) -> RequestTask {
        return providersAllListWithRequestBuilder(applicationIsnull: applicationIsnull, backchannelOnly: backchannelOnly, ordering: ordering, page: page, pageSize: pageSize, search: search).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /providers/all/
     - Provider Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter applicationIsnull: (query)  (optional)
     - parameter backchannelOnly: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - returns: RequestBuilder<PaginatedProviderList> 
     */
    open class func providersAllListWithRequestBuilder(applicationIsnull: Bool? = nil, backchannelOnly: Bool? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil) -> RequestBuilder<PaginatedProviderList> {
        let localVariablePath = "/providers/all/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "application__isnull": (wrappedValue: applicationIsnull?.encodeToJSON(), isExplode: true),
            "backchannel_only": (wrappedValue: backchannelOnly?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedProviderList>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this provider. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func providersAllRetrieve(id: Int, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Provider?, _ error: Error?) -> Void)) -> RequestTask {
        return providersAllRetrieveWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /providers/all/{id}/
     - Provider Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this provider. 
     - returns: RequestBuilder<Provider> 
     */
    open class func providersAllRetrieveWithRequestBuilder(id: Int) -> RequestBuilder<Provider> {
        var localVariablePath = "/providers/all/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Provider>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func providersAllTypesList(apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: [TypeCreate]?, _ error: Error?) -> Void)) -> RequestTask {
        return providersAllTypesListWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /providers/all/types/
     - Get all creatable provider types
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - returns: RequestBuilder<[TypeCreate]> 
     */
    open class func providersAllTypesListWithRequestBuilder() -> RequestBuilder<[TypeCreate]> {
        let localVariablePath = "/providers/all/types/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[TypeCreate]>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this provider. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func providersAllUsedByList(id: Int, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: [UsedBy]?, _ error: Error?) -> Void)) -> RequestTask {
        return providersAllUsedByListWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /providers/all/{id}/used_by/
     - Get a list of all objects that use this object
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this provider. 
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func providersAllUsedByListWithRequestBuilder(id: Int) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/providers/all/{id}/used_by/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter lDAPProviderRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func providersLdapCreate(lDAPProviderRequest: LDAPProviderRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: LDAPProvider?, _ error: Error?) -> Void)) -> RequestTask {
        return providersLdapCreateWithRequestBuilder(lDAPProviderRequest: lDAPProviderRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /providers/ldap/
     - LDAPProvider Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter lDAPProviderRequest: (body)  
     - returns: RequestBuilder<LDAPProvider> 
     */
    open class func providersLdapCreateWithRequestBuilder(lDAPProviderRequest: LDAPProviderRequest) -> RequestBuilder<LDAPProvider> {
        let localVariablePath = "/providers/ldap/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: lDAPProviderRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LDAPProvider>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this LDAP Provider. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func providersLdapDestroy(id: Int, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return providersLdapDestroyWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /providers/ldap/{id}/
     - LDAPProvider Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this LDAP Provider. 
     - returns: RequestBuilder<Void> 
     */
    open class func providersLdapDestroyWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/providers/ldap/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter applicationIsnull: (query)  (optional)
     - parameter authorizationFlowSlugIexact: (query)  (optional)
     - parameter baseDnIexact: (query)  (optional)
     - parameter certificateKpUuidIexact: (query)  (optional)
     - parameter certificateNameIexact: (query)  (optional)
     - parameter gidStartNumberIexact: (query)  (optional)
     - parameter nameIexact: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter searchGroupGroupUuidIexact: (query)  (optional)
     - parameter searchGroupNameIexact: (query)  (optional)
     - parameter tlsServerNameIexact: (query)  (optional)
     - parameter uidStartNumberIexact: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func providersLdapList(applicationIsnull: Bool? = nil, authorizationFlowSlugIexact: String? = nil, baseDnIexact: String? = nil, certificateKpUuidIexact: UUID? = nil, certificateNameIexact: String? = nil, gidStartNumberIexact: Int? = nil, nameIexact: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, searchGroupGroupUuidIexact: UUID? = nil, searchGroupNameIexact: String? = nil, tlsServerNameIexact: String? = nil, uidStartNumberIexact: Int? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedLDAPProviderList?, _ error: Error?) -> Void)) -> RequestTask {
        return providersLdapListWithRequestBuilder(applicationIsnull: applicationIsnull, authorizationFlowSlugIexact: authorizationFlowSlugIexact, baseDnIexact: baseDnIexact, certificateKpUuidIexact: certificateKpUuidIexact, certificateNameIexact: certificateNameIexact, gidStartNumberIexact: gidStartNumberIexact, nameIexact: nameIexact, ordering: ordering, page: page, pageSize: pageSize, search: search, searchGroupGroupUuidIexact: searchGroupGroupUuidIexact, searchGroupNameIexact: searchGroupNameIexact, tlsServerNameIexact: tlsServerNameIexact, uidStartNumberIexact: uidStartNumberIexact).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /providers/ldap/
     - LDAPProvider Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter applicationIsnull: (query)  (optional)
     - parameter authorizationFlowSlugIexact: (query)  (optional)
     - parameter baseDnIexact: (query)  (optional)
     - parameter certificateKpUuidIexact: (query)  (optional)
     - parameter certificateNameIexact: (query)  (optional)
     - parameter gidStartNumberIexact: (query)  (optional)
     - parameter nameIexact: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter searchGroupGroupUuidIexact: (query)  (optional)
     - parameter searchGroupNameIexact: (query)  (optional)
     - parameter tlsServerNameIexact: (query)  (optional)
     - parameter uidStartNumberIexact: (query)  (optional)
     - returns: RequestBuilder<PaginatedLDAPProviderList> 
     */
    open class func providersLdapListWithRequestBuilder(applicationIsnull: Bool? = nil, authorizationFlowSlugIexact: String? = nil, baseDnIexact: String? = nil, certificateKpUuidIexact: UUID? = nil, certificateNameIexact: String? = nil, gidStartNumberIexact: Int? = nil, nameIexact: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, searchGroupGroupUuidIexact: UUID? = nil, searchGroupNameIexact: String? = nil, tlsServerNameIexact: String? = nil, uidStartNumberIexact: Int? = nil) -> RequestBuilder<PaginatedLDAPProviderList> {
        let localVariablePath = "/providers/ldap/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "application__isnull": (wrappedValue: applicationIsnull?.encodeToJSON(), isExplode: true),
            "authorization_flow__slug__iexact": (wrappedValue: authorizationFlowSlugIexact?.encodeToJSON(), isExplode: true),
            "base_dn__iexact": (wrappedValue: baseDnIexact?.encodeToJSON(), isExplode: true),
            "certificate__kp_uuid__iexact": (wrappedValue: certificateKpUuidIexact?.encodeToJSON(), isExplode: true),
            "certificate__name__iexact": (wrappedValue: certificateNameIexact?.encodeToJSON(), isExplode: true),
            "gid_start_number__iexact": (wrappedValue: gidStartNumberIexact?.encodeToJSON(), isExplode: true),
            "name__iexact": (wrappedValue: nameIexact?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
            "search_group__group_uuid__iexact": (wrappedValue: searchGroupGroupUuidIexact?.encodeToJSON(), isExplode: true),
            "search_group__name__iexact": (wrappedValue: searchGroupNameIexact?.encodeToJSON(), isExplode: true),
            "tls_server_name__iexact": (wrappedValue: tlsServerNameIexact?.encodeToJSON(), isExplode: true),
            "uid_start_number__iexact": (wrappedValue: uidStartNumberIexact?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedLDAPProviderList>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this LDAP Provider. 
     - parameter patchedLDAPProviderRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func providersLdapPartialUpdate(id: Int, patchedLDAPProviderRequest: PatchedLDAPProviderRequest? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: LDAPProvider?, _ error: Error?) -> Void)) -> RequestTask {
        return providersLdapPartialUpdateWithRequestBuilder(id: id, patchedLDAPProviderRequest: patchedLDAPProviderRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /providers/ldap/{id}/
     - LDAPProvider Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this LDAP Provider. 
     - parameter patchedLDAPProviderRequest: (body)  (optional)
     - returns: RequestBuilder<LDAPProvider> 
     */
    open class func providersLdapPartialUpdateWithRequestBuilder(id: Int, patchedLDAPProviderRequest: PatchedLDAPProviderRequest? = nil) -> RequestBuilder<LDAPProvider> {
        var localVariablePath = "/providers/ldap/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedLDAPProviderRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LDAPProvider>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this LDAP Provider. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func providersLdapRetrieve(id: Int, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: LDAPProvider?, _ error: Error?) -> Void)) -> RequestTask {
        return providersLdapRetrieveWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /providers/ldap/{id}/
     - LDAPProvider Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this LDAP Provider. 
     - returns: RequestBuilder<LDAPProvider> 
     */
    open class func providersLdapRetrieveWithRequestBuilder(id: Int) -> RequestBuilder<LDAPProvider> {
        var localVariablePath = "/providers/ldap/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LDAPProvider>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this LDAP Provider. 
     - parameter lDAPProviderRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func providersLdapUpdate(id: Int, lDAPProviderRequest: LDAPProviderRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: LDAPProvider?, _ error: Error?) -> Void)) -> RequestTask {
        return providersLdapUpdateWithRequestBuilder(id: id, lDAPProviderRequest: lDAPProviderRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /providers/ldap/{id}/
     - LDAPProvider Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this LDAP Provider. 
     - parameter lDAPProviderRequest: (body)  
     - returns: RequestBuilder<LDAPProvider> 
     */
    open class func providersLdapUpdateWithRequestBuilder(id: Int, lDAPProviderRequest: LDAPProviderRequest) -> RequestBuilder<LDAPProvider> {
        var localVariablePath = "/providers/ldap/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: lDAPProviderRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LDAPProvider>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this LDAP Provider. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func providersLdapUsedByList(id: Int, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: [UsedBy]?, _ error: Error?) -> Void)) -> RequestTask {
        return providersLdapUsedByListWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /providers/ldap/{id}/used_by/
     - Get a list of all objects that use this object
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this LDAP Provider. 
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func providersLdapUsedByListWithRequestBuilder(id: Int) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/providers/ldap/{id}/used_by/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter oAuth2ProviderRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func providersOauth2Create(oAuth2ProviderRequest: OAuth2ProviderRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: OAuth2Provider?, _ error: Error?) -> Void)) -> RequestTask {
        return providersOauth2CreateWithRequestBuilder(oAuth2ProviderRequest: oAuth2ProviderRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /providers/oauth2/
     - OAuth2Provider Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter oAuth2ProviderRequest: (body)  
     - returns: RequestBuilder<OAuth2Provider> 
     */
    open class func providersOauth2CreateWithRequestBuilder(oAuth2ProviderRequest: OAuth2ProviderRequest) -> RequestBuilder<OAuth2Provider> {
        let localVariablePath = "/providers/oauth2/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: oAuth2ProviderRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OAuth2Provider>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this OAuth2/OpenID Provider. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func providersOauth2Destroy(id: Int, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return providersOauth2DestroyWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /providers/oauth2/{id}/
     - OAuth2Provider Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this OAuth2/OpenID Provider. 
     - returns: RequestBuilder<Void> 
     */
    open class func providersOauth2DestroyWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/providers/oauth2/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter clientType
     */
    public enum ClientType_providersOauth2List: String, CaseIterable {
        case confidential = "confidential"
        case _public = "public"
    }

    /**
     * enum for parameter issuerMode
     */
    public enum IssuerMode_providersOauth2List: String, CaseIterable {
        case global = "global"
        case perProvider = "per_provider"
    }

    /**
     * enum for parameter subMode
     */
    public enum SubMode_providersOauth2List: String, CaseIterable {
        case hashedUserId = "hashed_user_id"
        case userEmail = "user_email"
        case userId = "user_id"
        case userUpn = "user_upn"
        case userUsername = "user_username"
        case userUuid = "user_uuid"
    }

    /**

     - parameter accessCodeValidity: (query)  (optional)
     - parameter accessTokenValidity: (query)  (optional)
     - parameter application: (query)  (optional)
     - parameter authorizationFlow: (query)  (optional)
     - parameter clientId: (query)  (optional)
     - parameter clientType: (query) Confidential clients are capable of maintaining the confidentiality of their credentials. Public clients are incapable  * &#x60;confidential&#x60; - Confidential * &#x60;public&#x60; - Public (optional)
     - parameter includeClaimsInIdToken: (query)  (optional)
     - parameter issuerMode: (query) Configure how the issuer field of the ID Token should be filled.  * &#x60;global&#x60; - Same identifier is used for all providers * &#x60;per_provider&#x60; - Each provider has a different issuer, based on the application slug. (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter propertyMappings: (query)  (optional)
     - parameter redirectUris: (query)  (optional)
     - parameter refreshTokenValidity: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter signingKey: (query)  (optional)
     - parameter subMode: (query) Configure what data should be used as unique User Identifier. For most cases, the default should be fine.  * &#x60;hashed_user_id&#x60; - Based on the Hashed User ID * &#x60;user_id&#x60; - Based on user ID * &#x60;user_uuid&#x60; - Based on user UUID * &#x60;user_username&#x60; - Based on the username * &#x60;user_email&#x60; - Based on the User&#39;s Email. This is recommended over the UPN method. * &#x60;user_upn&#x60; - Based on the User&#39;s UPN, only works if user has a &#39;upn&#39; attribute set. Use this method only if you have different UPN and Mail domains. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func providersOauth2List(accessCodeValidity: String? = nil, accessTokenValidity: String? = nil, application: UUID? = nil, authorizationFlow: UUID? = nil, clientId: String? = nil, clientType: ClientType_providersOauth2List? = nil, includeClaimsInIdToken: Bool? = nil, issuerMode: IssuerMode_providersOauth2List? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, propertyMappings: [UUID]? = nil, redirectUris: String? = nil, refreshTokenValidity: String? = nil, search: String? = nil, signingKey: UUID? = nil, subMode: SubMode_providersOauth2List? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedOAuth2ProviderList?, _ error: Error?) -> Void)) -> RequestTask {
        return providersOauth2ListWithRequestBuilder(accessCodeValidity: accessCodeValidity, accessTokenValidity: accessTokenValidity, application: application, authorizationFlow: authorizationFlow, clientId: clientId, clientType: clientType, includeClaimsInIdToken: includeClaimsInIdToken, issuerMode: issuerMode, name: name, ordering: ordering, page: page, pageSize: pageSize, propertyMappings: propertyMappings, redirectUris: redirectUris, refreshTokenValidity: refreshTokenValidity, search: search, signingKey: signingKey, subMode: subMode).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /providers/oauth2/
     - OAuth2Provider Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter accessCodeValidity: (query)  (optional)
     - parameter accessTokenValidity: (query)  (optional)
     - parameter application: (query)  (optional)
     - parameter authorizationFlow: (query)  (optional)
     - parameter clientId: (query)  (optional)
     - parameter clientType: (query) Confidential clients are capable of maintaining the confidentiality of their credentials. Public clients are incapable  * &#x60;confidential&#x60; - Confidential * &#x60;public&#x60; - Public (optional)
     - parameter includeClaimsInIdToken: (query)  (optional)
     - parameter issuerMode: (query) Configure how the issuer field of the ID Token should be filled.  * &#x60;global&#x60; - Same identifier is used for all providers * &#x60;per_provider&#x60; - Each provider has a different issuer, based on the application slug. (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter propertyMappings: (query)  (optional)
     - parameter redirectUris: (query)  (optional)
     - parameter refreshTokenValidity: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter signingKey: (query)  (optional)
     - parameter subMode: (query) Configure what data should be used as unique User Identifier. For most cases, the default should be fine.  * &#x60;hashed_user_id&#x60; - Based on the Hashed User ID * &#x60;user_id&#x60; - Based on user ID * &#x60;user_uuid&#x60; - Based on user UUID * &#x60;user_username&#x60; - Based on the username * &#x60;user_email&#x60; - Based on the User&#39;s Email. This is recommended over the UPN method. * &#x60;user_upn&#x60; - Based on the User&#39;s UPN, only works if user has a &#39;upn&#39; attribute set. Use this method only if you have different UPN and Mail domains. (optional)
     - returns: RequestBuilder<PaginatedOAuth2ProviderList> 
     */
    open class func providersOauth2ListWithRequestBuilder(accessCodeValidity: String? = nil, accessTokenValidity: String? = nil, application: UUID? = nil, authorizationFlow: UUID? = nil, clientId: String? = nil, clientType: ClientType_providersOauth2List? = nil, includeClaimsInIdToken: Bool? = nil, issuerMode: IssuerMode_providersOauth2List? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, propertyMappings: [UUID]? = nil, redirectUris: String? = nil, refreshTokenValidity: String? = nil, search: String? = nil, signingKey: UUID? = nil, subMode: SubMode_providersOauth2List? = nil) -> RequestBuilder<PaginatedOAuth2ProviderList> {
        let localVariablePath = "/providers/oauth2/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_code_validity": (wrappedValue: accessCodeValidity?.encodeToJSON(), isExplode: true),
            "access_token_validity": (wrappedValue: accessTokenValidity?.encodeToJSON(), isExplode: true),
            "application": (wrappedValue: application?.encodeToJSON(), isExplode: true),
            "authorization_flow": (wrappedValue: authorizationFlow?.encodeToJSON(), isExplode: true),
            "client_id": (wrappedValue: clientId?.encodeToJSON(), isExplode: true),
            "client_type": (wrappedValue: clientType?.encodeToJSON(), isExplode: true),
            "include_claims_in_id_token": (wrappedValue: includeClaimsInIdToken?.encodeToJSON(), isExplode: true),
            "issuer_mode": (wrappedValue: issuerMode?.encodeToJSON(), isExplode: true),
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "property_mappings": (wrappedValue: propertyMappings?.encodeToJSON(), isExplode: true),
            "redirect_uris": (wrappedValue: redirectUris?.encodeToJSON(), isExplode: true),
            "refresh_token_validity": (wrappedValue: refreshTokenValidity?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
            "signing_key": (wrappedValue: signingKey?.encodeToJSON(), isExplode: true),
            "sub_mode": (wrappedValue: subMode?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedOAuth2ProviderList>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this OAuth2/OpenID Provider. 
     - parameter patchedOAuth2ProviderRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func providersOauth2PartialUpdate(id: Int, patchedOAuth2ProviderRequest: PatchedOAuth2ProviderRequest? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: OAuth2Provider?, _ error: Error?) -> Void)) -> RequestTask {
        return providersOauth2PartialUpdateWithRequestBuilder(id: id, patchedOAuth2ProviderRequest: patchedOAuth2ProviderRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /providers/oauth2/{id}/
     - OAuth2Provider Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this OAuth2/OpenID Provider. 
     - parameter patchedOAuth2ProviderRequest: (body)  (optional)
     - returns: RequestBuilder<OAuth2Provider> 
     */
    open class func providersOauth2PartialUpdateWithRequestBuilder(id: Int, patchedOAuth2ProviderRequest: PatchedOAuth2ProviderRequest? = nil) -> RequestBuilder<OAuth2Provider> {
        var localVariablePath = "/providers/oauth2/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedOAuth2ProviderRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OAuth2Provider>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this OAuth2/OpenID Provider. 
     - parameter forUser: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func providersOauth2PreviewUserRetrieve(id: Int, forUser: Int? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PropertyMappingPreview?, _ error: Error?) -> Void)) -> RequestTask {
        return providersOauth2PreviewUserRetrieveWithRequestBuilder(id: id, forUser: forUser).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /providers/oauth2/{id}/preview_user/
     - Preview user data for provider
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this OAuth2/OpenID Provider. 
     - parameter forUser: (query)  (optional)
     - returns: RequestBuilder<PropertyMappingPreview> 
     */
    open class func providersOauth2PreviewUserRetrieveWithRequestBuilder(id: Int, forUser: Int? = nil) -> RequestBuilder<PropertyMappingPreview> {
        var localVariablePath = "/providers/oauth2/{id}/preview_user/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "for_user": (wrappedValue: forUser?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PropertyMappingPreview>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this OAuth2/OpenID Provider. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func providersOauth2Retrieve(id: Int, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: OAuth2Provider?, _ error: Error?) -> Void)) -> RequestTask {
        return providersOauth2RetrieveWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /providers/oauth2/{id}/
     - OAuth2Provider Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this OAuth2/OpenID Provider. 
     - returns: RequestBuilder<OAuth2Provider> 
     */
    open class func providersOauth2RetrieveWithRequestBuilder(id: Int) -> RequestBuilder<OAuth2Provider> {
        var localVariablePath = "/providers/oauth2/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OAuth2Provider>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this OAuth2/OpenID Provider. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func providersOauth2SetupUrlsRetrieve(id: Int, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: OAuth2ProviderSetupURLs?, _ error: Error?) -> Void)) -> RequestTask {
        return providersOauth2SetupUrlsRetrieveWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /providers/oauth2/{id}/setup_urls/
     - Get Providers setup URLs
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this OAuth2/OpenID Provider. 
     - returns: RequestBuilder<OAuth2ProviderSetupURLs> 
     */
    open class func providersOauth2SetupUrlsRetrieveWithRequestBuilder(id: Int) -> RequestBuilder<OAuth2ProviderSetupURLs> {
        var localVariablePath = "/providers/oauth2/{id}/setup_urls/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OAuth2ProviderSetupURLs>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this OAuth2/OpenID Provider. 
     - parameter oAuth2ProviderRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func providersOauth2Update(id: Int, oAuth2ProviderRequest: OAuth2ProviderRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: OAuth2Provider?, _ error: Error?) -> Void)) -> RequestTask {
        return providersOauth2UpdateWithRequestBuilder(id: id, oAuth2ProviderRequest: oAuth2ProviderRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /providers/oauth2/{id}/
     - OAuth2Provider Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this OAuth2/OpenID Provider. 
     - parameter oAuth2ProviderRequest: (body)  
     - returns: RequestBuilder<OAuth2Provider> 
     */
    open class func providersOauth2UpdateWithRequestBuilder(id: Int, oAuth2ProviderRequest: OAuth2ProviderRequest) -> RequestBuilder<OAuth2Provider> {
        var localVariablePath = "/providers/oauth2/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: oAuth2ProviderRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OAuth2Provider>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this OAuth2/OpenID Provider. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func providersOauth2UsedByList(id: Int, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: [UsedBy]?, _ error: Error?) -> Void)) -> RequestTask {
        return providersOauth2UsedByListWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /providers/oauth2/{id}/used_by/
     - Get a list of all objects that use this object
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this OAuth2/OpenID Provider. 
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func providersOauth2UsedByListWithRequestBuilder(id: Int) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/providers/oauth2/{id}/used_by/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter proxyProviderRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func providersProxyCreate(proxyProviderRequest: ProxyProviderRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: ProxyProvider?, _ error: Error?) -> Void)) -> RequestTask {
        return providersProxyCreateWithRequestBuilder(proxyProviderRequest: proxyProviderRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /providers/proxy/
     - ProxyProvider Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter proxyProviderRequest: (body)  
     - returns: RequestBuilder<ProxyProvider> 
     */
    open class func providersProxyCreateWithRequestBuilder(proxyProviderRequest: ProxyProviderRequest) -> RequestBuilder<ProxyProvider> {
        let localVariablePath = "/providers/proxy/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: proxyProviderRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProxyProvider>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Proxy Provider. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func providersProxyDestroy(id: Int, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return providersProxyDestroyWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /providers/proxy/{id}/
     - ProxyProvider Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Proxy Provider. 
     - returns: RequestBuilder<Void> 
     */
    open class func providersProxyDestroyWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/providers/proxy/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter applicationIsnull: (query)  (optional)
     - parameter authorizationFlowSlugIexact: (query)  (optional)
     - parameter basicAuthEnabledIexact: (query)  (optional)
     - parameter basicAuthPasswordAttributeIexact: (query)  (optional)
     - parameter basicAuthUserAttributeIexact: (query)  (optional)
     - parameter certificateKpUuidIexact: (query)  (optional)
     - parameter certificateNameIexact: (query)  (optional)
     - parameter cookieDomainIexact: (query)  (optional)
     - parameter externalHostIexact: (query)  (optional)
     - parameter internalHostIexact: (query)  (optional)
     - parameter internalHostSslValidationIexact: (query)  (optional)
     - parameter modeIexact: (query)  (optional)
     - parameter nameIexact: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter propertyMappingsIexact: (query)  (optional)
     - parameter redirectUrisIexact: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter skipPathRegexIexact: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func providersProxyList(applicationIsnull: Bool? = nil, authorizationFlowSlugIexact: String? = nil, basicAuthEnabledIexact: Bool? = nil, basicAuthPasswordAttributeIexact: String? = nil, basicAuthUserAttributeIexact: String? = nil, certificateKpUuidIexact: UUID? = nil, certificateNameIexact: String? = nil, cookieDomainIexact: String? = nil, externalHostIexact: String? = nil, internalHostIexact: String? = nil, internalHostSslValidationIexact: Bool? = nil, modeIexact: String? = nil, nameIexact: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, propertyMappingsIexact: [UUID]? = nil, redirectUrisIexact: String? = nil, search: String? = nil, skipPathRegexIexact: String? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedProxyProviderList?, _ error: Error?) -> Void)) -> RequestTask {
        return providersProxyListWithRequestBuilder(applicationIsnull: applicationIsnull, authorizationFlowSlugIexact: authorizationFlowSlugIexact, basicAuthEnabledIexact: basicAuthEnabledIexact, basicAuthPasswordAttributeIexact: basicAuthPasswordAttributeIexact, basicAuthUserAttributeIexact: basicAuthUserAttributeIexact, certificateKpUuidIexact: certificateKpUuidIexact, certificateNameIexact: certificateNameIexact, cookieDomainIexact: cookieDomainIexact, externalHostIexact: externalHostIexact, internalHostIexact: internalHostIexact, internalHostSslValidationIexact: internalHostSslValidationIexact, modeIexact: modeIexact, nameIexact: nameIexact, ordering: ordering, page: page, pageSize: pageSize, propertyMappingsIexact: propertyMappingsIexact, redirectUrisIexact: redirectUrisIexact, search: search, skipPathRegexIexact: skipPathRegexIexact).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /providers/proxy/
     - ProxyProvider Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter applicationIsnull: (query)  (optional)
     - parameter authorizationFlowSlugIexact: (query)  (optional)
     - parameter basicAuthEnabledIexact: (query)  (optional)
     - parameter basicAuthPasswordAttributeIexact: (query)  (optional)
     - parameter basicAuthUserAttributeIexact: (query)  (optional)
     - parameter certificateKpUuidIexact: (query)  (optional)
     - parameter certificateNameIexact: (query)  (optional)
     - parameter cookieDomainIexact: (query)  (optional)
     - parameter externalHostIexact: (query)  (optional)
     - parameter internalHostIexact: (query)  (optional)
     - parameter internalHostSslValidationIexact: (query)  (optional)
     - parameter modeIexact: (query)  (optional)
     - parameter nameIexact: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter propertyMappingsIexact: (query)  (optional)
     - parameter redirectUrisIexact: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter skipPathRegexIexact: (query)  (optional)
     - returns: RequestBuilder<PaginatedProxyProviderList> 
     */
    open class func providersProxyListWithRequestBuilder(applicationIsnull: Bool? = nil, authorizationFlowSlugIexact: String? = nil, basicAuthEnabledIexact: Bool? = nil, basicAuthPasswordAttributeIexact: String? = nil, basicAuthUserAttributeIexact: String? = nil, certificateKpUuidIexact: UUID? = nil, certificateNameIexact: String? = nil, cookieDomainIexact: String? = nil, externalHostIexact: String? = nil, internalHostIexact: String? = nil, internalHostSslValidationIexact: Bool? = nil, modeIexact: String? = nil, nameIexact: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, propertyMappingsIexact: [UUID]? = nil, redirectUrisIexact: String? = nil, search: String? = nil, skipPathRegexIexact: String? = nil) -> RequestBuilder<PaginatedProxyProviderList> {
        let localVariablePath = "/providers/proxy/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "application__isnull": (wrappedValue: applicationIsnull?.encodeToJSON(), isExplode: true),
            "authorization_flow__slug__iexact": (wrappedValue: authorizationFlowSlugIexact?.encodeToJSON(), isExplode: true),
            "basic_auth_enabled__iexact": (wrappedValue: basicAuthEnabledIexact?.encodeToJSON(), isExplode: true),
            "basic_auth_password_attribute__iexact": (wrappedValue: basicAuthPasswordAttributeIexact?.encodeToJSON(), isExplode: true),
            "basic_auth_user_attribute__iexact": (wrappedValue: basicAuthUserAttributeIexact?.encodeToJSON(), isExplode: true),
            "certificate__kp_uuid__iexact": (wrappedValue: certificateKpUuidIexact?.encodeToJSON(), isExplode: true),
            "certificate__name__iexact": (wrappedValue: certificateNameIexact?.encodeToJSON(), isExplode: true),
            "cookie_domain__iexact": (wrappedValue: cookieDomainIexact?.encodeToJSON(), isExplode: true),
            "external_host__iexact": (wrappedValue: externalHostIexact?.encodeToJSON(), isExplode: true),
            "internal_host__iexact": (wrappedValue: internalHostIexact?.encodeToJSON(), isExplode: true),
            "internal_host_ssl_validation__iexact": (wrappedValue: internalHostSslValidationIexact?.encodeToJSON(), isExplode: true),
            "mode__iexact": (wrappedValue: modeIexact?.encodeToJSON(), isExplode: true),
            "name__iexact": (wrappedValue: nameIexact?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "property_mappings__iexact": (wrappedValue: propertyMappingsIexact?.encodeToJSON(), isExplode: true),
            "redirect_uris__iexact": (wrappedValue: redirectUrisIexact?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
            "skip_path_regex__iexact": (wrappedValue: skipPathRegexIexact?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedProxyProviderList>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Proxy Provider. 
     - parameter patchedProxyProviderRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func providersProxyPartialUpdate(id: Int, patchedProxyProviderRequest: PatchedProxyProviderRequest? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: ProxyProvider?, _ error: Error?) -> Void)) -> RequestTask {
        return providersProxyPartialUpdateWithRequestBuilder(id: id, patchedProxyProviderRequest: patchedProxyProviderRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /providers/proxy/{id}/
     - ProxyProvider Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Proxy Provider. 
     - parameter patchedProxyProviderRequest: (body)  (optional)
     - returns: RequestBuilder<ProxyProvider> 
     */
    open class func providersProxyPartialUpdateWithRequestBuilder(id: Int, patchedProxyProviderRequest: PatchedProxyProviderRequest? = nil) -> RequestBuilder<ProxyProvider> {
        var localVariablePath = "/providers/proxy/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedProxyProviderRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProxyProvider>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Proxy Provider. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func providersProxyRetrieve(id: Int, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: ProxyProvider?, _ error: Error?) -> Void)) -> RequestTask {
        return providersProxyRetrieveWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /providers/proxy/{id}/
     - ProxyProvider Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Proxy Provider. 
     - returns: RequestBuilder<ProxyProvider> 
     */
    open class func providersProxyRetrieveWithRequestBuilder(id: Int) -> RequestBuilder<ProxyProvider> {
        var localVariablePath = "/providers/proxy/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProxyProvider>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Proxy Provider. 
     - parameter proxyProviderRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func providersProxyUpdate(id: Int, proxyProviderRequest: ProxyProviderRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: ProxyProvider?, _ error: Error?) -> Void)) -> RequestTask {
        return providersProxyUpdateWithRequestBuilder(id: id, proxyProviderRequest: proxyProviderRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /providers/proxy/{id}/
     - ProxyProvider Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Proxy Provider. 
     - parameter proxyProviderRequest: (body)  
     - returns: RequestBuilder<ProxyProvider> 
     */
    open class func providersProxyUpdateWithRequestBuilder(id: Int, proxyProviderRequest: ProxyProviderRequest) -> RequestBuilder<ProxyProvider> {
        var localVariablePath = "/providers/proxy/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: proxyProviderRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProxyProvider>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Proxy Provider. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func providersProxyUsedByList(id: Int, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: [UsedBy]?, _ error: Error?) -> Void)) -> RequestTask {
        return providersProxyUsedByListWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /providers/proxy/{id}/used_by/
     - Get a list of all objects that use this object
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Proxy Provider. 
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func providersProxyUsedByListWithRequestBuilder(id: Int) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/providers/proxy/{id}/used_by/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter rACProviderRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func providersRacCreate(rACProviderRequest: RACProviderRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: RACProvider?, _ error: Error?) -> Void)) -> RequestTask {
        return providersRacCreateWithRequestBuilder(rACProviderRequest: rACProviderRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /providers/rac/
     - RACProvider Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter rACProviderRequest: (body)  
     - returns: RequestBuilder<RACProvider> 
     */
    open class func providersRacCreateWithRequestBuilder(rACProviderRequest: RACProviderRequest) -> RequestBuilder<RACProvider> {
        let localVariablePath = "/providers/rac/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: rACProviderRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RACProvider>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this RAC Provider. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func providersRacDestroy(id: Int, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return providersRacDestroyWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /providers/rac/{id}/
     - RACProvider Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this RAC Provider. 
     - returns: RequestBuilder<Void> 
     */
    open class func providersRacDestroyWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/providers/rac/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter applicationIsnull: (query)  (optional)
     - parameter nameIexact: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func providersRacList(applicationIsnull: Bool? = nil, nameIexact: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedRACProviderList?, _ error: Error?) -> Void)) -> RequestTask {
        return providersRacListWithRequestBuilder(applicationIsnull: applicationIsnull, nameIexact: nameIexact, ordering: ordering, page: page, pageSize: pageSize, search: search).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /providers/rac/
     - RACProvider Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter applicationIsnull: (query)  (optional)
     - parameter nameIexact: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - returns: RequestBuilder<PaginatedRACProviderList> 
     */
    open class func providersRacListWithRequestBuilder(applicationIsnull: Bool? = nil, nameIexact: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil) -> RequestBuilder<PaginatedRACProviderList> {
        let localVariablePath = "/providers/rac/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "application__isnull": (wrappedValue: applicationIsnull?.encodeToJSON(), isExplode: true),
            "name__iexact": (wrappedValue: nameIexact?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedRACProviderList>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this RAC Provider. 
     - parameter patchedRACProviderRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func providersRacPartialUpdate(id: Int, patchedRACProviderRequest: PatchedRACProviderRequest? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: RACProvider?, _ error: Error?) -> Void)) -> RequestTask {
        return providersRacPartialUpdateWithRequestBuilder(id: id, patchedRACProviderRequest: patchedRACProviderRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /providers/rac/{id}/
     - RACProvider Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this RAC Provider. 
     - parameter patchedRACProviderRequest: (body)  (optional)
     - returns: RequestBuilder<RACProvider> 
     */
    open class func providersRacPartialUpdateWithRequestBuilder(id: Int, patchedRACProviderRequest: PatchedRACProviderRequest? = nil) -> RequestBuilder<RACProvider> {
        var localVariablePath = "/providers/rac/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedRACProviderRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RACProvider>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this RAC Provider. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func providersRacRetrieve(id: Int, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: RACProvider?, _ error: Error?) -> Void)) -> RequestTask {
        return providersRacRetrieveWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /providers/rac/{id}/
     - RACProvider Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this RAC Provider. 
     - returns: RequestBuilder<RACProvider> 
     */
    open class func providersRacRetrieveWithRequestBuilder(id: Int) -> RequestBuilder<RACProvider> {
        var localVariablePath = "/providers/rac/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RACProvider>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this RAC Provider. 
     - parameter rACProviderRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func providersRacUpdate(id: Int, rACProviderRequest: RACProviderRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: RACProvider?, _ error: Error?) -> Void)) -> RequestTask {
        return providersRacUpdateWithRequestBuilder(id: id, rACProviderRequest: rACProviderRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /providers/rac/{id}/
     - RACProvider Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this RAC Provider. 
     - parameter rACProviderRequest: (body)  
     - returns: RequestBuilder<RACProvider> 
     */
    open class func providersRacUpdateWithRequestBuilder(id: Int, rACProviderRequest: RACProviderRequest) -> RequestBuilder<RACProvider> {
        var localVariablePath = "/providers/rac/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: rACProviderRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RACProvider>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this RAC Provider. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func providersRacUsedByList(id: Int, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: [UsedBy]?, _ error: Error?) -> Void)) -> RequestTask {
        return providersRacUsedByListWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /providers/rac/{id}/used_by/
     - Get a list of all objects that use this object
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this RAC Provider. 
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func providersRacUsedByListWithRequestBuilder(id: Int) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/providers/rac/{id}/used_by/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter radiusProviderRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func providersRadiusCreate(radiusProviderRequest: RadiusProviderRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: RadiusProvider?, _ error: Error?) -> Void)) -> RequestTask {
        return providersRadiusCreateWithRequestBuilder(radiusProviderRequest: radiusProviderRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /providers/radius/
     - RadiusProvider Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter radiusProviderRequest: (body)  
     - returns: RequestBuilder<RadiusProvider> 
     */
    open class func providersRadiusCreateWithRequestBuilder(radiusProviderRequest: RadiusProviderRequest) -> RequestBuilder<RadiusProvider> {
        let localVariablePath = "/providers/radius/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: radiusProviderRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RadiusProvider>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Radius Provider. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func providersRadiusDestroy(id: Int, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return providersRadiusDestroyWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /providers/radius/{id}/
     - RadiusProvider Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Radius Provider. 
     - returns: RequestBuilder<Void> 
     */
    open class func providersRadiusDestroyWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/providers/radius/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter applicationIsnull: (query)  (optional)
     - parameter authorizationFlowSlugIexact: (query)  (optional)
     - parameter clientNetworksIexact: (query)  (optional)
     - parameter nameIexact: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func providersRadiusList(applicationIsnull: Bool? = nil, authorizationFlowSlugIexact: String? = nil, clientNetworksIexact: String? = nil, nameIexact: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedRadiusProviderList?, _ error: Error?) -> Void)) -> RequestTask {
        return providersRadiusListWithRequestBuilder(applicationIsnull: applicationIsnull, authorizationFlowSlugIexact: authorizationFlowSlugIexact, clientNetworksIexact: clientNetworksIexact, nameIexact: nameIexact, ordering: ordering, page: page, pageSize: pageSize, search: search).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /providers/radius/
     - RadiusProvider Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter applicationIsnull: (query)  (optional)
     - parameter authorizationFlowSlugIexact: (query)  (optional)
     - parameter clientNetworksIexact: (query)  (optional)
     - parameter nameIexact: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - returns: RequestBuilder<PaginatedRadiusProviderList> 
     */
    open class func providersRadiusListWithRequestBuilder(applicationIsnull: Bool? = nil, authorizationFlowSlugIexact: String? = nil, clientNetworksIexact: String? = nil, nameIexact: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil) -> RequestBuilder<PaginatedRadiusProviderList> {
        let localVariablePath = "/providers/radius/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "application__isnull": (wrappedValue: applicationIsnull?.encodeToJSON(), isExplode: true),
            "authorization_flow__slug__iexact": (wrappedValue: authorizationFlowSlugIexact?.encodeToJSON(), isExplode: true),
            "client_networks__iexact": (wrappedValue: clientNetworksIexact?.encodeToJSON(), isExplode: true),
            "name__iexact": (wrappedValue: nameIexact?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedRadiusProviderList>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Radius Provider. 
     - parameter patchedRadiusProviderRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func providersRadiusPartialUpdate(id: Int, patchedRadiusProviderRequest: PatchedRadiusProviderRequest? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: RadiusProvider?, _ error: Error?) -> Void)) -> RequestTask {
        return providersRadiusPartialUpdateWithRequestBuilder(id: id, patchedRadiusProviderRequest: patchedRadiusProviderRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /providers/radius/{id}/
     - RadiusProvider Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Radius Provider. 
     - parameter patchedRadiusProviderRequest: (body)  (optional)
     - returns: RequestBuilder<RadiusProvider> 
     */
    open class func providersRadiusPartialUpdateWithRequestBuilder(id: Int, patchedRadiusProviderRequest: PatchedRadiusProviderRequest? = nil) -> RequestBuilder<RadiusProvider> {
        var localVariablePath = "/providers/radius/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedRadiusProviderRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RadiusProvider>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Radius Provider. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func providersRadiusRetrieve(id: Int, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: RadiusProvider?, _ error: Error?) -> Void)) -> RequestTask {
        return providersRadiusRetrieveWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /providers/radius/{id}/
     - RadiusProvider Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Radius Provider. 
     - returns: RequestBuilder<RadiusProvider> 
     */
    open class func providersRadiusRetrieveWithRequestBuilder(id: Int) -> RequestBuilder<RadiusProvider> {
        var localVariablePath = "/providers/radius/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RadiusProvider>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Radius Provider. 
     - parameter radiusProviderRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func providersRadiusUpdate(id: Int, radiusProviderRequest: RadiusProviderRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: RadiusProvider?, _ error: Error?) -> Void)) -> RequestTask {
        return providersRadiusUpdateWithRequestBuilder(id: id, radiusProviderRequest: radiusProviderRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /providers/radius/{id}/
     - RadiusProvider Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Radius Provider. 
     - parameter radiusProviderRequest: (body)  
     - returns: RequestBuilder<RadiusProvider> 
     */
    open class func providersRadiusUpdateWithRequestBuilder(id: Int, radiusProviderRequest: RadiusProviderRequest) -> RequestBuilder<RadiusProvider> {
        var localVariablePath = "/providers/radius/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: radiusProviderRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RadiusProvider>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Radius Provider. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func providersRadiusUsedByList(id: Int, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: [UsedBy]?, _ error: Error?) -> Void)) -> RequestTask {
        return providersRadiusUsedByListWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /providers/radius/{id}/used_by/
     - Get a list of all objects that use this object
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Radius Provider. 
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func providersRadiusUsedByListWithRequestBuilder(id: Int) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/providers/radius/{id}/used_by/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter sAMLProviderRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func providersSamlCreate(sAMLProviderRequest: SAMLProviderRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: SAMLProvider?, _ error: Error?) -> Void)) -> RequestTask {
        return providersSamlCreateWithRequestBuilder(sAMLProviderRequest: sAMLProviderRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /providers/saml/
     - SAMLProvider Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter sAMLProviderRequest: (body)  
     - returns: RequestBuilder<SAMLProvider> 
     */
    open class func providersSamlCreateWithRequestBuilder(sAMLProviderRequest: SAMLProviderRequest) -> RequestBuilder<SAMLProvider> {
        let localVariablePath = "/providers/saml/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sAMLProviderRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SAMLProvider>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this SAML Provider. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func providersSamlDestroy(id: Int, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return providersSamlDestroyWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /providers/saml/{id}/
     - SAMLProvider Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this SAML Provider. 
     - returns: RequestBuilder<Void> 
     */
    open class func providersSamlDestroyWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/providers/saml/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter name: (form)  
     - parameter authorizationFlow: (form)  
     - parameter file: (form)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func providersSamlImportMetadataCreate(name: String, authorizationFlow: UUID, file: URL, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return providersSamlImportMetadataCreateWithRequestBuilder(name: name, authorizationFlow: authorizationFlow, file: file).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /providers/saml/import_metadata/
     - Create provider from SAML Metadata
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter name: (form)  
     - parameter authorizationFlow: (form)  
     - parameter file: (form)  
     - returns: RequestBuilder<Void> 
     */
    open class func providersSamlImportMetadataCreateWithRequestBuilder(name: String, authorizationFlow: UUID, file: URL) -> RequestBuilder<Void> {
        let localVariablePath = "/providers/saml/import_metadata/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "name": name.encodeToJSON(),
            "authorization_flow": authorizationFlow.encodeToJSON(),
            "file": file.encodeToJSON(),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "multipart/form-data",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter digestAlgorithm
     */
    public enum DigestAlgorithm_providersSamlList: String, CaseIterable {
        case _200009xmldsigHashSha1 = "http://www.w3.org/2000/09/xmldsig#sha1"
        case _200104xmldsigMoreHashSha384 = "http://www.w3.org/2001/04/xmldsig-more#sha384"
        case _200104xmlencHashSha256 = "http://www.w3.org/2001/04/xmlenc#sha256"
        case _200104xmlencHashSha512 = "http://www.w3.org/2001/04/xmlenc#sha512"
    }

    /**
     * enum for parameter signatureAlgorithm
     */
    public enum SignatureAlgorithm_providersSamlList: String, CaseIterable {
        case _200009xmldsigHashDsaSha1 = "http://www.w3.org/2000/09/xmldsig#dsa-sha1"
        case _200009xmldsigHashRsaSha1 = "http://www.w3.org/2000/09/xmldsig#rsa-sha1"
        case _200104xmldsigMoreHashRsaSha256 = "http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"
        case _200104xmldsigMoreHashRsaSha384 = "http://www.w3.org/2001/04/xmldsig-more#rsa-sha384"
        case _200104xmldsigMoreHashRsaSha512 = "http://www.w3.org/2001/04/xmldsig-more#rsa-sha512"
    }

    /**
     * enum for parameter spBinding
     */
    public enum SpBinding_providersSamlList: String, CaseIterable {
        case post = "post"
        case redirect = "redirect"
    }

    /**

     - parameter acsUrl: (query)  (optional)
     - parameter assertionValidNotBefore: (query)  (optional)
     - parameter assertionValidNotOnOrAfter: (query)  (optional)
     - parameter audience: (query)  (optional)
     - parameter authenticationFlow: (query)  (optional)
     - parameter authorizationFlow: (query)  (optional)
     - parameter backchannelApplication: (query)  (optional)
     - parameter defaultRelayState: (query)  (optional)
     - parameter digestAlgorithm: (query) * &#x60;http://www.w3.org/2000/09/xmldsig#sha1&#x60; - SHA1 * &#x60;http://www.w3.org/2001/04/xmlenc#sha256&#x60; - SHA256 * &#x60;http://www.w3.org/2001/04/xmldsig-more#sha384&#x60; - SHA384 * &#x60;http://www.w3.org/2001/04/xmlenc#sha512&#x60; - SHA512 (optional)
     - parameter isBackchannel: (query)  (optional)
     - parameter issuer: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter nameIdMapping: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter propertyMappings: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter sessionValidNotOnOrAfter: (query)  (optional)
     - parameter signatureAlgorithm: (query) * &#x60;http://www.w3.org/2000/09/xmldsig#rsa-sha1&#x60; - RSA-SHA1 * &#x60;http://www.w3.org/2001/04/xmldsig-more#rsa-sha256&#x60; - RSA-SHA256 * &#x60;http://www.w3.org/2001/04/xmldsig-more#rsa-sha384&#x60; - RSA-SHA384 * &#x60;http://www.w3.org/2001/04/xmldsig-more#rsa-sha512&#x60; - RSA-SHA512 * &#x60;http://www.w3.org/2000/09/xmldsig#dsa-sha1&#x60; - DSA-SHA1 (optional)
     - parameter signingKp: (query)  (optional)
     - parameter spBinding: (query) This determines how authentik sends the response back to the Service Provider.  * &#x60;redirect&#x60; - Redirect * &#x60;post&#x60; - Post (optional)
     - parameter verificationKp: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func providersSamlList(acsUrl: String? = nil, assertionValidNotBefore: String? = nil, assertionValidNotOnOrAfter: String? = nil, audience: String? = nil, authenticationFlow: UUID? = nil, authorizationFlow: UUID? = nil, backchannelApplication: UUID? = nil, defaultRelayState: String? = nil, digestAlgorithm: DigestAlgorithm_providersSamlList? = nil, isBackchannel: Bool? = nil, issuer: String? = nil, name: String? = nil, nameIdMapping: UUID? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, propertyMappings: [UUID]? = nil, search: String? = nil, sessionValidNotOnOrAfter: String? = nil, signatureAlgorithm: SignatureAlgorithm_providersSamlList? = nil, signingKp: UUID? = nil, spBinding: SpBinding_providersSamlList? = nil, verificationKp: UUID? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedSAMLProviderList?, _ error: Error?) -> Void)) -> RequestTask {
        return providersSamlListWithRequestBuilder(acsUrl: acsUrl, assertionValidNotBefore: assertionValidNotBefore, assertionValidNotOnOrAfter: assertionValidNotOnOrAfter, audience: audience, authenticationFlow: authenticationFlow, authorizationFlow: authorizationFlow, backchannelApplication: backchannelApplication, defaultRelayState: defaultRelayState, digestAlgorithm: digestAlgorithm, isBackchannel: isBackchannel, issuer: issuer, name: name, nameIdMapping: nameIdMapping, ordering: ordering, page: page, pageSize: pageSize, propertyMappings: propertyMappings, search: search, sessionValidNotOnOrAfter: sessionValidNotOnOrAfter, signatureAlgorithm: signatureAlgorithm, signingKp: signingKp, spBinding: spBinding, verificationKp: verificationKp).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /providers/saml/
     - SAMLProvider Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter acsUrl: (query)  (optional)
     - parameter assertionValidNotBefore: (query)  (optional)
     - parameter assertionValidNotOnOrAfter: (query)  (optional)
     - parameter audience: (query)  (optional)
     - parameter authenticationFlow: (query)  (optional)
     - parameter authorizationFlow: (query)  (optional)
     - parameter backchannelApplication: (query)  (optional)
     - parameter defaultRelayState: (query)  (optional)
     - parameter digestAlgorithm: (query) * &#x60;http://www.w3.org/2000/09/xmldsig#sha1&#x60; - SHA1 * &#x60;http://www.w3.org/2001/04/xmlenc#sha256&#x60; - SHA256 * &#x60;http://www.w3.org/2001/04/xmldsig-more#sha384&#x60; - SHA384 * &#x60;http://www.w3.org/2001/04/xmlenc#sha512&#x60; - SHA512 (optional)
     - parameter isBackchannel: (query)  (optional)
     - parameter issuer: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter nameIdMapping: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter propertyMappings: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter sessionValidNotOnOrAfter: (query)  (optional)
     - parameter signatureAlgorithm: (query) * &#x60;http://www.w3.org/2000/09/xmldsig#rsa-sha1&#x60; - RSA-SHA1 * &#x60;http://www.w3.org/2001/04/xmldsig-more#rsa-sha256&#x60; - RSA-SHA256 * &#x60;http://www.w3.org/2001/04/xmldsig-more#rsa-sha384&#x60; - RSA-SHA384 * &#x60;http://www.w3.org/2001/04/xmldsig-more#rsa-sha512&#x60; - RSA-SHA512 * &#x60;http://www.w3.org/2000/09/xmldsig#dsa-sha1&#x60; - DSA-SHA1 (optional)
     - parameter signingKp: (query)  (optional)
     - parameter spBinding: (query) This determines how authentik sends the response back to the Service Provider.  * &#x60;redirect&#x60; - Redirect * &#x60;post&#x60; - Post (optional)
     - parameter verificationKp: (query)  (optional)
     - returns: RequestBuilder<PaginatedSAMLProviderList> 
     */
    open class func providersSamlListWithRequestBuilder(acsUrl: String? = nil, assertionValidNotBefore: String? = nil, assertionValidNotOnOrAfter: String? = nil, audience: String? = nil, authenticationFlow: UUID? = nil, authorizationFlow: UUID? = nil, backchannelApplication: UUID? = nil, defaultRelayState: String? = nil, digestAlgorithm: DigestAlgorithm_providersSamlList? = nil, isBackchannel: Bool? = nil, issuer: String? = nil, name: String? = nil, nameIdMapping: UUID? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, propertyMappings: [UUID]? = nil, search: String? = nil, sessionValidNotOnOrAfter: String? = nil, signatureAlgorithm: SignatureAlgorithm_providersSamlList? = nil, signingKp: UUID? = nil, spBinding: SpBinding_providersSamlList? = nil, verificationKp: UUID? = nil) -> RequestBuilder<PaginatedSAMLProviderList> {
        let localVariablePath = "/providers/saml/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "acs_url": (wrappedValue: acsUrl?.encodeToJSON(), isExplode: true),
            "assertion_valid_not_before": (wrappedValue: assertionValidNotBefore?.encodeToJSON(), isExplode: true),
            "assertion_valid_not_on_or_after": (wrappedValue: assertionValidNotOnOrAfter?.encodeToJSON(), isExplode: true),
            "audience": (wrappedValue: audience?.encodeToJSON(), isExplode: true),
            "authentication_flow": (wrappedValue: authenticationFlow?.encodeToJSON(), isExplode: true),
            "authorization_flow": (wrappedValue: authorizationFlow?.encodeToJSON(), isExplode: true),
            "backchannel_application": (wrappedValue: backchannelApplication?.encodeToJSON(), isExplode: true),
            "default_relay_state": (wrappedValue: defaultRelayState?.encodeToJSON(), isExplode: true),
            "digest_algorithm": (wrappedValue: digestAlgorithm?.encodeToJSON(), isExplode: true),
            "is_backchannel": (wrappedValue: isBackchannel?.encodeToJSON(), isExplode: true),
            "issuer": (wrappedValue: issuer?.encodeToJSON(), isExplode: true),
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "name_id_mapping": (wrappedValue: nameIdMapping?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "property_mappings": (wrappedValue: propertyMappings?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
            "session_valid_not_on_or_after": (wrappedValue: sessionValidNotOnOrAfter?.encodeToJSON(), isExplode: true),
            "signature_algorithm": (wrappedValue: signatureAlgorithm?.encodeToJSON(), isExplode: true),
            "signing_kp": (wrappedValue: signingKp?.encodeToJSON(), isExplode: true),
            "sp_binding": (wrappedValue: spBinding?.encodeToJSON(), isExplode: true),
            "verification_kp": (wrappedValue: verificationKp?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedSAMLProviderList>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter forceBinding
     */
    public enum ForceBinding_providersSamlMetadataRetrieve: String, CaseIterable {
        case post = "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST"
        case redirect = "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect"
    }

    /**

     - parameter id: (path) A unique integer value identifying this SAML Provider. 
     - parameter download: (query)  (optional)
     - parameter forceBinding: (query) Optionally force the metadata to only include one binding. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func providersSamlMetadataRetrieve(id: Int, download: Bool? = nil, forceBinding: ForceBinding_providersSamlMetadataRetrieve? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: SAMLMetadata?, _ error: Error?) -> Void)) -> RequestTask {
        return providersSamlMetadataRetrieveWithRequestBuilder(id: id, download: download, forceBinding: forceBinding).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /providers/saml/{id}/metadata/
     - Return metadata as XML string
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this SAML Provider. 
     - parameter download: (query)  (optional)
     - parameter forceBinding: (query) Optionally force the metadata to only include one binding. (optional)
     - returns: RequestBuilder<SAMLMetadata> 
     */
    open class func providersSamlMetadataRetrieveWithRequestBuilder(id: Int, download: Bool? = nil, forceBinding: ForceBinding_providersSamlMetadataRetrieve? = nil) -> RequestBuilder<SAMLMetadata> {
        var localVariablePath = "/providers/saml/{id}/metadata/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "download": (wrappedValue: download?.encodeToJSON(), isExplode: true),
            "force_binding": (wrappedValue: forceBinding?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SAMLMetadata>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this SAML Provider. 
     - parameter patchedSAMLProviderRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func providersSamlPartialUpdate(id: Int, patchedSAMLProviderRequest: PatchedSAMLProviderRequest? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: SAMLProvider?, _ error: Error?) -> Void)) -> RequestTask {
        return providersSamlPartialUpdateWithRequestBuilder(id: id, patchedSAMLProviderRequest: patchedSAMLProviderRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /providers/saml/{id}/
     - SAMLProvider Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this SAML Provider. 
     - parameter patchedSAMLProviderRequest: (body)  (optional)
     - returns: RequestBuilder<SAMLProvider> 
     */
    open class func providersSamlPartialUpdateWithRequestBuilder(id: Int, patchedSAMLProviderRequest: PatchedSAMLProviderRequest? = nil) -> RequestBuilder<SAMLProvider> {
        var localVariablePath = "/providers/saml/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedSAMLProviderRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SAMLProvider>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this SAML Provider. 
     - parameter forUser: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func providersSamlPreviewUserRetrieve(id: Int, forUser: Int? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PropertyMappingPreview?, _ error: Error?) -> Void)) -> RequestTask {
        return providersSamlPreviewUserRetrieveWithRequestBuilder(id: id, forUser: forUser).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /providers/saml/{id}/preview_user/
     - Preview user data for provider
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this SAML Provider. 
     - parameter forUser: (query)  (optional)
     - returns: RequestBuilder<PropertyMappingPreview> 
     */
    open class func providersSamlPreviewUserRetrieveWithRequestBuilder(id: Int, forUser: Int? = nil) -> RequestBuilder<PropertyMappingPreview> {
        var localVariablePath = "/providers/saml/{id}/preview_user/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "for_user": (wrappedValue: forUser?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PropertyMappingPreview>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this SAML Provider. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func providersSamlRetrieve(id: Int, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: SAMLProvider?, _ error: Error?) -> Void)) -> RequestTask {
        return providersSamlRetrieveWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /providers/saml/{id}/
     - SAMLProvider Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this SAML Provider. 
     - returns: RequestBuilder<SAMLProvider> 
     */
    open class func providersSamlRetrieveWithRequestBuilder(id: Int) -> RequestBuilder<SAMLProvider> {
        var localVariablePath = "/providers/saml/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SAMLProvider>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this SAML Provider. 
     - parameter sAMLProviderRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func providersSamlUpdate(id: Int, sAMLProviderRequest: SAMLProviderRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: SAMLProvider?, _ error: Error?) -> Void)) -> RequestTask {
        return providersSamlUpdateWithRequestBuilder(id: id, sAMLProviderRequest: sAMLProviderRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /providers/saml/{id}/
     - SAMLProvider Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this SAML Provider. 
     - parameter sAMLProviderRequest: (body)  
     - returns: RequestBuilder<SAMLProvider> 
     */
    open class func providersSamlUpdateWithRequestBuilder(id: Int, sAMLProviderRequest: SAMLProviderRequest) -> RequestBuilder<SAMLProvider> {
        var localVariablePath = "/providers/saml/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sAMLProviderRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SAMLProvider>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this SAML Provider. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func providersSamlUsedByList(id: Int, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: [UsedBy]?, _ error: Error?) -> Void)) -> RequestTask {
        return providersSamlUsedByListWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /providers/saml/{id}/used_by/
     - Get a list of all objects that use this object
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this SAML Provider. 
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func providersSamlUsedByListWithRequestBuilder(id: Int) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/providers/saml/{id}/used_by/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter sCIMProviderRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func providersScimCreate(sCIMProviderRequest: SCIMProviderRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: SCIMProvider?, _ error: Error?) -> Void)) -> RequestTask {
        return providersScimCreateWithRequestBuilder(sCIMProviderRequest: sCIMProviderRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /providers/scim/
     - SCIMProvider Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter sCIMProviderRequest: (body)  
     - returns: RequestBuilder<SCIMProvider> 
     */
    open class func providersScimCreateWithRequestBuilder(sCIMProviderRequest: SCIMProviderRequest) -> RequestBuilder<SCIMProvider> {
        let localVariablePath = "/providers/scim/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sCIMProviderRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SCIMProvider>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this SCIM Provider. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func providersScimDestroy(id: Int, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return providersScimDestroyWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /providers/scim/{id}/
     - SCIMProvider Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this SCIM Provider. 
     - returns: RequestBuilder<Void> 
     */
    open class func providersScimDestroyWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/providers/scim/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter excludeUsersServiceAccount: (query)  (optional)
     - parameter filterGroup: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter url: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func providersScimList(excludeUsersServiceAccount: Bool? = nil, filterGroup: UUID? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, url: String? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedSCIMProviderList?, _ error: Error?) -> Void)) -> RequestTask {
        return providersScimListWithRequestBuilder(excludeUsersServiceAccount: excludeUsersServiceAccount, filterGroup: filterGroup, name: name, ordering: ordering, page: page, pageSize: pageSize, search: search, url: url).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /providers/scim/
     - SCIMProvider Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter excludeUsersServiceAccount: (query)  (optional)
     - parameter filterGroup: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter url: (query)  (optional)
     - returns: RequestBuilder<PaginatedSCIMProviderList> 
     */
    open class func providersScimListWithRequestBuilder(excludeUsersServiceAccount: Bool? = nil, filterGroup: UUID? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, url: String? = nil) -> RequestBuilder<PaginatedSCIMProviderList> {
        let localVariablePath = "/providers/scim/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "exclude_users_service_account": (wrappedValue: excludeUsersServiceAccount?.encodeToJSON(), isExplode: true),
            "filter_group": (wrappedValue: filterGroup?.encodeToJSON(), isExplode: true),
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
            "url": (wrappedValue: url?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedSCIMProviderList>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this SCIM Provider. 
     - parameter patchedSCIMProviderRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func providersScimPartialUpdate(id: Int, patchedSCIMProviderRequest: PatchedSCIMProviderRequest? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: SCIMProvider?, _ error: Error?) -> Void)) -> RequestTask {
        return providersScimPartialUpdateWithRequestBuilder(id: id, patchedSCIMProviderRequest: patchedSCIMProviderRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /providers/scim/{id}/
     - SCIMProvider Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this SCIM Provider. 
     - parameter patchedSCIMProviderRequest: (body)  (optional)
     - returns: RequestBuilder<SCIMProvider> 
     */
    open class func providersScimPartialUpdateWithRequestBuilder(id: Int, patchedSCIMProviderRequest: PatchedSCIMProviderRequest? = nil) -> RequestBuilder<SCIMProvider> {
        var localVariablePath = "/providers/scim/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedSCIMProviderRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SCIMProvider>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this SCIM Provider. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func providersScimRetrieve(id: Int, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: SCIMProvider?, _ error: Error?) -> Void)) -> RequestTask {
        return providersScimRetrieveWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /providers/scim/{id}/
     - SCIMProvider Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this SCIM Provider. 
     - returns: RequestBuilder<SCIMProvider> 
     */
    open class func providersScimRetrieveWithRequestBuilder(id: Int) -> RequestBuilder<SCIMProvider> {
        var localVariablePath = "/providers/scim/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SCIMProvider>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this SCIM Provider. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func providersScimSyncStatusRetrieve(id: Int, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: SCIMSyncStatus?, _ error: Error?) -> Void)) -> RequestTask {
        return providersScimSyncStatusRetrieveWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /providers/scim/{id}/sync_status/
     - Get provider's sync status
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this SCIM Provider. 
     - returns: RequestBuilder<SCIMSyncStatus> 
     */
    open class func providersScimSyncStatusRetrieveWithRequestBuilder(id: Int) -> RequestBuilder<SCIMSyncStatus> {
        var localVariablePath = "/providers/scim/{id}/sync_status/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SCIMSyncStatus>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this SCIM Provider. 
     - parameter sCIMProviderRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func providersScimUpdate(id: Int, sCIMProviderRequest: SCIMProviderRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: SCIMProvider?, _ error: Error?) -> Void)) -> RequestTask {
        return providersScimUpdateWithRequestBuilder(id: id, sCIMProviderRequest: sCIMProviderRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /providers/scim/{id}/
     - SCIMProvider Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this SCIM Provider. 
     - parameter sCIMProviderRequest: (body)  
     - returns: RequestBuilder<SCIMProvider> 
     */
    open class func providersScimUpdateWithRequestBuilder(id: Int, sCIMProviderRequest: SCIMProviderRequest) -> RequestBuilder<SCIMProvider> {
        var localVariablePath = "/providers/scim/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sCIMProviderRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SCIMProvider>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this SCIM Provider. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func providersScimUsedByList(id: Int, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: [UsedBy]?, _ error: Error?) -> Void)) -> RequestTask {
        return providersScimUsedByListWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /providers/scim/{id}/used_by/
     - Get a list of all objects that use this object
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this SCIM Provider. 
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func providersScimUsedByListWithRequestBuilder(id: Int) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/providers/scim/{id}/used_by/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
