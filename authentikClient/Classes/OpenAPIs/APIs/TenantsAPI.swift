//
// TenantsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class TenantsAPI {

    /**

     - parameter domainRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func tenantsDomainsCreate(domainRequest: DomainRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Domain?, _ error: Error?) -> Void)) -> RequestTask {
        return tenantsDomainsCreateWithRequestBuilder(domainRequest: domainRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /tenants/domains/
     - Domain ViewSet
     - parameter domainRequest: (body)  
     - returns: RequestBuilder<Domain> 
     */
    open class func tenantsDomainsCreateWithRequestBuilder(domainRequest: DomainRequest) -> RequestBuilder<Domain> {
        let localVariablePath = "/tenants/domains/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: domainRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Domain>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Domain. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func tenantsDomainsDestroy(id: Int, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return tenantsDomainsDestroyWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /tenants/domains/{id}/
     - Domain ViewSet
     - parameter id: (path) A unique integer value identifying this Domain. 
     - returns: RequestBuilder<Void> 
     */
    open class func tenantsDomainsDestroyWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/tenants/domains/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func tenantsDomainsList(ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedDomainList?, _ error: Error?) -> Void)) -> RequestTask {
        return tenantsDomainsListWithRequestBuilder(ordering: ordering, page: page, pageSize: pageSize, search: search).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /tenants/domains/
     - Domain ViewSet
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - returns: RequestBuilder<PaginatedDomainList> 
     */
    open class func tenantsDomainsListWithRequestBuilder(ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil) -> RequestBuilder<PaginatedDomainList> {
        let localVariablePath = "/tenants/domains/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedDomainList>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Domain. 
     - parameter patchedDomainRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func tenantsDomainsPartialUpdate(id: Int, patchedDomainRequest: PatchedDomainRequest? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Domain?, _ error: Error?) -> Void)) -> RequestTask {
        return tenantsDomainsPartialUpdateWithRequestBuilder(id: id, patchedDomainRequest: patchedDomainRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /tenants/domains/{id}/
     - Domain ViewSet
     - parameter id: (path) A unique integer value identifying this Domain. 
     - parameter patchedDomainRequest: (body)  (optional)
     - returns: RequestBuilder<Domain> 
     */
    open class func tenantsDomainsPartialUpdateWithRequestBuilder(id: Int, patchedDomainRequest: PatchedDomainRequest? = nil) -> RequestBuilder<Domain> {
        var localVariablePath = "/tenants/domains/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedDomainRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Domain>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Domain. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func tenantsDomainsRetrieve(id: Int, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Domain?, _ error: Error?) -> Void)) -> RequestTask {
        return tenantsDomainsRetrieveWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /tenants/domains/{id}/
     - Domain ViewSet
     - parameter id: (path) A unique integer value identifying this Domain. 
     - returns: RequestBuilder<Domain> 
     */
    open class func tenantsDomainsRetrieveWithRequestBuilder(id: Int) -> RequestBuilder<Domain> {
        var localVariablePath = "/tenants/domains/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Domain>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Domain. 
     - parameter domainRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func tenantsDomainsUpdate(id: Int, domainRequest: DomainRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Domain?, _ error: Error?) -> Void)) -> RequestTask {
        return tenantsDomainsUpdateWithRequestBuilder(id: id, domainRequest: domainRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /tenants/domains/{id}/
     - Domain ViewSet
     - parameter id: (path) A unique integer value identifying this Domain. 
     - parameter domainRequest: (body)  
     - returns: RequestBuilder<Domain> 
     */
    open class func tenantsDomainsUpdateWithRequestBuilder(id: Int, domainRequest: DomainRequest) -> RequestBuilder<Domain> {
        var localVariablePath = "/tenants/domains/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: domainRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Domain>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter tenantRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func tenantsTenantsCreate(tenantRequest: TenantRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Tenant?, _ error: Error?) -> Void)) -> RequestTask {
        return tenantsTenantsCreateWithRequestBuilder(tenantRequest: tenantRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /tenants/tenants/
     - Tenant Viewset
     - parameter tenantRequest: (body)  
     - returns: RequestBuilder<Tenant> 
     */
    open class func tenantsTenantsCreateWithRequestBuilder(tenantRequest: TenantRequest) -> RequestBuilder<Tenant> {
        let localVariablePath = "/tenants/tenants/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: tenantRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Tenant>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter tenantUuid: (path) A UUID string identifying this Tenant. 
     - parameter tenantAdminGroupRequestRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func tenantsTenantsCreateAdminGroupCreate(tenantUuid: UUID, tenantAdminGroupRequestRequest: TenantAdminGroupRequestRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return tenantsTenantsCreateAdminGroupCreateWithRequestBuilder(tenantUuid: tenantUuid, tenantAdminGroupRequestRequest: tenantAdminGroupRequestRequest).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /tenants/tenants/{tenant_uuid}/create_admin_group/
     - Create admin group and add user to it.
     - parameter tenantUuid: (path) A UUID string identifying this Tenant. 
     - parameter tenantAdminGroupRequestRequest: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func tenantsTenantsCreateAdminGroupCreateWithRequestBuilder(tenantUuid: UUID, tenantAdminGroupRequestRequest: TenantAdminGroupRequestRequest) -> RequestBuilder<Void> {
        var localVariablePath = "/tenants/tenants/{tenant_uuid}/create_admin_group/"
        let tenantUuidPreEscape = "\(APIHelper.mapValueToPathItem(tenantUuid))"
        let tenantUuidPostEscape = tenantUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{tenant_uuid}", with: tenantUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: tenantAdminGroupRequestRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter tenantUuid: (path) A UUID string identifying this Tenant. 
     - parameter tenantRecoveryKeyRequestRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func tenantsTenantsCreateRecoveryKeyCreate(tenantUuid: UUID, tenantRecoveryKeyRequestRequest: TenantRecoveryKeyRequestRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: TenantRecoveryKeyResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return tenantsTenantsCreateRecoveryKeyCreateWithRequestBuilder(tenantUuid: tenantUuid, tenantRecoveryKeyRequestRequest: tenantRecoveryKeyRequestRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /tenants/tenants/{tenant_uuid}/create_recovery_key/
     - Create recovery key for user.
     - parameter tenantUuid: (path) A UUID string identifying this Tenant. 
     - parameter tenantRecoveryKeyRequestRequest: (body)  
     - returns: RequestBuilder<TenantRecoveryKeyResponse> 
     */
    open class func tenantsTenantsCreateRecoveryKeyCreateWithRequestBuilder(tenantUuid: UUID, tenantRecoveryKeyRequestRequest: TenantRecoveryKeyRequestRequest) -> RequestBuilder<TenantRecoveryKeyResponse> {
        var localVariablePath = "/tenants/tenants/{tenant_uuid}/create_recovery_key/"
        let tenantUuidPreEscape = "\(APIHelper.mapValueToPathItem(tenantUuid))"
        let tenantUuidPostEscape = tenantUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{tenant_uuid}", with: tenantUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: tenantRecoveryKeyRequestRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TenantRecoveryKeyResponse>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter tenantUuid: (path) A UUID string identifying this Tenant. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func tenantsTenantsDestroy(tenantUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return tenantsTenantsDestroyWithRequestBuilder(tenantUuid: tenantUuid).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /tenants/tenants/{tenant_uuid}/
     - Tenant Viewset
     - parameter tenantUuid: (path) A UUID string identifying this Tenant. 
     - returns: RequestBuilder<Void> 
     */
    open class func tenantsTenantsDestroyWithRequestBuilder(tenantUuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/tenants/tenants/{tenant_uuid}/"
        let tenantUuidPreEscape = "\(APIHelper.mapValueToPathItem(tenantUuid))"
        let tenantUuidPostEscape = tenantUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{tenant_uuid}", with: tenantUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func tenantsTenantsList(ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedTenantList?, _ error: Error?) -> Void)) -> RequestTask {
        return tenantsTenantsListWithRequestBuilder(ordering: ordering, page: page, pageSize: pageSize, search: search).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /tenants/tenants/
     - Tenant Viewset
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - returns: RequestBuilder<PaginatedTenantList> 
     */
    open class func tenantsTenantsListWithRequestBuilder(ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil) -> RequestBuilder<PaginatedTenantList> {
        let localVariablePath = "/tenants/tenants/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedTenantList>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter tenantUuid: (path) A UUID string identifying this Tenant. 
     - parameter patchedTenantRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func tenantsTenantsPartialUpdate(tenantUuid: UUID, patchedTenantRequest: PatchedTenantRequest? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Tenant?, _ error: Error?) -> Void)) -> RequestTask {
        return tenantsTenantsPartialUpdateWithRequestBuilder(tenantUuid: tenantUuid, patchedTenantRequest: patchedTenantRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /tenants/tenants/{tenant_uuid}/
     - Tenant Viewset
     - parameter tenantUuid: (path) A UUID string identifying this Tenant. 
     - parameter patchedTenantRequest: (body)  (optional)
     - returns: RequestBuilder<Tenant> 
     */
    open class func tenantsTenantsPartialUpdateWithRequestBuilder(tenantUuid: UUID, patchedTenantRequest: PatchedTenantRequest? = nil) -> RequestBuilder<Tenant> {
        var localVariablePath = "/tenants/tenants/{tenant_uuid}/"
        let tenantUuidPreEscape = "\(APIHelper.mapValueToPathItem(tenantUuid))"
        let tenantUuidPostEscape = tenantUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{tenant_uuid}", with: tenantUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedTenantRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Tenant>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter tenantUuid: (path) A UUID string identifying this Tenant. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func tenantsTenantsRetrieve(tenantUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Tenant?, _ error: Error?) -> Void)) -> RequestTask {
        return tenantsTenantsRetrieveWithRequestBuilder(tenantUuid: tenantUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /tenants/tenants/{tenant_uuid}/
     - Tenant Viewset
     - parameter tenantUuid: (path) A UUID string identifying this Tenant. 
     - returns: RequestBuilder<Tenant> 
     */
    open class func tenantsTenantsRetrieveWithRequestBuilder(tenantUuid: UUID) -> RequestBuilder<Tenant> {
        var localVariablePath = "/tenants/tenants/{tenant_uuid}/"
        let tenantUuidPreEscape = "\(APIHelper.mapValueToPathItem(tenantUuid))"
        let tenantUuidPostEscape = tenantUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{tenant_uuid}", with: tenantUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Tenant>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter tenantUuid: (path) A UUID string identifying this Tenant. 
     - parameter tenantRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func tenantsTenantsUpdate(tenantUuid: UUID, tenantRequest: TenantRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Tenant?, _ error: Error?) -> Void)) -> RequestTask {
        return tenantsTenantsUpdateWithRequestBuilder(tenantUuid: tenantUuid, tenantRequest: tenantRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /tenants/tenants/{tenant_uuid}/
     - Tenant Viewset
     - parameter tenantUuid: (path) A UUID string identifying this Tenant. 
     - parameter tenantRequest: (body)  
     - returns: RequestBuilder<Tenant> 
     */
    open class func tenantsTenantsUpdateWithRequestBuilder(tenantUuid: UUID, tenantRequest: TenantRequest) -> RequestBuilder<Tenant> {
        var localVariablePath = "/tenants/tenants/{tenant_uuid}/"
        let tenantUuidPreEscape = "\(APIHelper.mapValueToPathItem(tenantUuid))"
        let tenantUuidPostEscape = tenantUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{tenant_uuid}", with: tenantUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: tenantRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Tenant>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
