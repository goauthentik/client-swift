//
// AuthenticatorsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class AuthenticatorsAPI {

    /**

     - parameter user: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsAdminAllList(user: Int? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: [Device]?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsAdminAllListWithRequestBuilder(user: user).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /authenticators/admin/all/
     - Get all devices for current user
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter user: (query)  (optional)
     - returns: RequestBuilder<[Device]> 
     */
    open class func authenticatorsAdminAllListWithRequestBuilder(user: Int? = nil) -> RequestBuilder<[Device]> {
        let localVariablePath = "/authenticators/admin/all/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "user": (wrappedValue: user?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[Device]>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter duoDeviceRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsAdminDuoCreate(duoDeviceRequest: DuoDeviceRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: DuoDevice?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsAdminDuoCreateWithRequestBuilder(duoDeviceRequest: duoDeviceRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /authenticators/admin/duo/
     - Viewset for Duo authenticator devices (for admins)
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter duoDeviceRequest: (body)  
     - returns: RequestBuilder<DuoDevice> 
     */
    open class func authenticatorsAdminDuoCreateWithRequestBuilder(duoDeviceRequest: DuoDeviceRequest) -> RequestBuilder<DuoDevice> {
        let localVariablePath = "/authenticators/admin/duo/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: duoDeviceRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DuoDevice>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Duo Device. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsAdminDuoDestroy(id: Int, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsAdminDuoDestroyWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /authenticators/admin/duo/{id}/
     - Viewset for Duo authenticator devices (for admins)
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Duo Device. 
     - returns: RequestBuilder<Void> 
     */
    open class func authenticatorsAdminDuoDestroyWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/authenticators/admin/duo/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsAdminDuoList(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedDuoDeviceList?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsAdminDuoListWithRequestBuilder(name: name, ordering: ordering, page: page, pageSize: pageSize, search: search).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /authenticators/admin/duo/
     - Viewset for Duo authenticator devices (for admins)
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - returns: RequestBuilder<PaginatedDuoDeviceList> 
     */
    open class func authenticatorsAdminDuoListWithRequestBuilder(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil) -> RequestBuilder<PaginatedDuoDeviceList> {
        let localVariablePath = "/authenticators/admin/duo/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedDuoDeviceList>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Duo Device. 
     - parameter patchedDuoDeviceRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsAdminDuoPartialUpdate(id: Int, patchedDuoDeviceRequest: PatchedDuoDeviceRequest? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: DuoDevice?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsAdminDuoPartialUpdateWithRequestBuilder(id: id, patchedDuoDeviceRequest: patchedDuoDeviceRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /authenticators/admin/duo/{id}/
     - Viewset for Duo authenticator devices (for admins)
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Duo Device. 
     - parameter patchedDuoDeviceRequest: (body)  (optional)
     - returns: RequestBuilder<DuoDevice> 
     */
    open class func authenticatorsAdminDuoPartialUpdateWithRequestBuilder(id: Int, patchedDuoDeviceRequest: PatchedDuoDeviceRequest? = nil) -> RequestBuilder<DuoDevice> {
        var localVariablePath = "/authenticators/admin/duo/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedDuoDeviceRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DuoDevice>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Duo Device. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsAdminDuoRetrieve(id: Int, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: DuoDevice?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsAdminDuoRetrieveWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /authenticators/admin/duo/{id}/
     - Viewset for Duo authenticator devices (for admins)
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Duo Device. 
     - returns: RequestBuilder<DuoDevice> 
     */
    open class func authenticatorsAdminDuoRetrieveWithRequestBuilder(id: Int) -> RequestBuilder<DuoDevice> {
        var localVariablePath = "/authenticators/admin/duo/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DuoDevice>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Duo Device. 
     - parameter duoDeviceRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsAdminDuoUpdate(id: Int, duoDeviceRequest: DuoDeviceRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: DuoDevice?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsAdminDuoUpdateWithRequestBuilder(id: id, duoDeviceRequest: duoDeviceRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /authenticators/admin/duo/{id}/
     - Viewset for Duo authenticator devices (for admins)
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Duo Device. 
     - parameter duoDeviceRequest: (body)  
     - returns: RequestBuilder<DuoDevice> 
     */
    open class func authenticatorsAdminDuoUpdateWithRequestBuilder(id: Int, duoDeviceRequest: DuoDeviceRequest) -> RequestBuilder<DuoDevice> {
        var localVariablePath = "/authenticators/admin/duo/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: duoDeviceRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DuoDevice>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter mobileDeviceRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsAdminMobileCreate(mobileDeviceRequest: MobileDeviceRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: MobileDevice?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsAdminMobileCreateWithRequestBuilder(mobileDeviceRequest: mobileDeviceRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /authenticators/admin/mobile/
     - Viewset for Mobile authenticator devices (for admins)
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter mobileDeviceRequest: (body)  
     - returns: RequestBuilder<MobileDevice> 
     */
    open class func authenticatorsAdminMobileCreateWithRequestBuilder(mobileDeviceRequest: MobileDeviceRequest) -> RequestBuilder<MobileDevice> {
        let localVariablePath = "/authenticators/admin/mobile/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: mobileDeviceRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MobileDevice>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter uuid: (path) A UUID string identifying this Mobile Device. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsAdminMobileDestroy(uuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsAdminMobileDestroyWithRequestBuilder(uuid: uuid).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /authenticators/admin/mobile/{uuid}/
     - Viewset for Mobile authenticator devices (for admins)
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter uuid: (path) A UUID string identifying this Mobile Device. 
     - returns: RequestBuilder<Void> 
     */
    open class func authenticatorsAdminMobileDestroyWithRequestBuilder(uuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/authenticators/admin/mobile/{uuid}/"
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsAdminMobileList(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedMobileDeviceList?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsAdminMobileListWithRequestBuilder(name: name, ordering: ordering, page: page, pageSize: pageSize, search: search).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /authenticators/admin/mobile/
     - Viewset for Mobile authenticator devices (for admins)
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - returns: RequestBuilder<PaginatedMobileDeviceList> 
     */
    open class func authenticatorsAdminMobileListWithRequestBuilder(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil) -> RequestBuilder<PaginatedMobileDeviceList> {
        let localVariablePath = "/authenticators/admin/mobile/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedMobileDeviceList>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter uuid: (path) A UUID string identifying this Mobile Device. 
     - parameter patchedMobileDeviceRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsAdminMobilePartialUpdate(uuid: UUID, patchedMobileDeviceRequest: PatchedMobileDeviceRequest? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: MobileDevice?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsAdminMobilePartialUpdateWithRequestBuilder(uuid: uuid, patchedMobileDeviceRequest: patchedMobileDeviceRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /authenticators/admin/mobile/{uuid}/
     - Viewset for Mobile authenticator devices (for admins)
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter uuid: (path) A UUID string identifying this Mobile Device. 
     - parameter patchedMobileDeviceRequest: (body)  (optional)
     - returns: RequestBuilder<MobileDevice> 
     */
    open class func authenticatorsAdminMobilePartialUpdateWithRequestBuilder(uuid: UUID, patchedMobileDeviceRequest: PatchedMobileDeviceRequest? = nil) -> RequestBuilder<MobileDevice> {
        var localVariablePath = "/authenticators/admin/mobile/{uuid}/"
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedMobileDeviceRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MobileDevice>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter uuid: (path) A UUID string identifying this Mobile Device. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsAdminMobileRetrieve(uuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: MobileDevice?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsAdminMobileRetrieveWithRequestBuilder(uuid: uuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /authenticators/admin/mobile/{uuid}/
     - Viewset for Mobile authenticator devices (for admins)
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter uuid: (path) A UUID string identifying this Mobile Device. 
     - returns: RequestBuilder<MobileDevice> 
     */
    open class func authenticatorsAdminMobileRetrieveWithRequestBuilder(uuid: UUID) -> RequestBuilder<MobileDevice> {
        var localVariablePath = "/authenticators/admin/mobile/{uuid}/"
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MobileDevice>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter uuid: (path) A UUID string identifying this Mobile Device. 
     - parameter mobileDeviceRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsAdminMobileUpdate(uuid: UUID, mobileDeviceRequest: MobileDeviceRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: MobileDevice?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsAdminMobileUpdateWithRequestBuilder(uuid: uuid, mobileDeviceRequest: mobileDeviceRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /authenticators/admin/mobile/{uuid}/
     - Viewset for Mobile authenticator devices (for admins)
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter uuid: (path) A UUID string identifying this Mobile Device. 
     - parameter mobileDeviceRequest: (body)  
     - returns: RequestBuilder<MobileDevice> 
     */
    open class func authenticatorsAdminMobileUpdateWithRequestBuilder(uuid: UUID, mobileDeviceRequest: MobileDeviceRequest) -> RequestBuilder<MobileDevice> {
        var localVariablePath = "/authenticators/admin/mobile/{uuid}/"
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: mobileDeviceRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MobileDevice>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter sMSDeviceRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsAdminSmsCreate(sMSDeviceRequest: SMSDeviceRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: SMSDevice?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsAdminSmsCreateWithRequestBuilder(sMSDeviceRequest: sMSDeviceRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /authenticators/admin/sms/
     - Viewset for sms authenticator devices (for admins)
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter sMSDeviceRequest: (body)  
     - returns: RequestBuilder<SMSDevice> 
     */
    open class func authenticatorsAdminSmsCreateWithRequestBuilder(sMSDeviceRequest: SMSDeviceRequest) -> RequestBuilder<SMSDevice> {
        let localVariablePath = "/authenticators/admin/sms/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sMSDeviceRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SMSDevice>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this SMS Device. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsAdminSmsDestroy(id: Int, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsAdminSmsDestroyWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /authenticators/admin/sms/{id}/
     - Viewset for sms authenticator devices (for admins)
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this SMS Device. 
     - returns: RequestBuilder<Void> 
     */
    open class func authenticatorsAdminSmsDestroyWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/authenticators/admin/sms/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsAdminSmsList(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedSMSDeviceList?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsAdminSmsListWithRequestBuilder(name: name, ordering: ordering, page: page, pageSize: pageSize, search: search).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /authenticators/admin/sms/
     - Viewset for sms authenticator devices (for admins)
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - returns: RequestBuilder<PaginatedSMSDeviceList> 
     */
    open class func authenticatorsAdminSmsListWithRequestBuilder(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil) -> RequestBuilder<PaginatedSMSDeviceList> {
        let localVariablePath = "/authenticators/admin/sms/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedSMSDeviceList>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this SMS Device. 
     - parameter patchedSMSDeviceRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsAdminSmsPartialUpdate(id: Int, patchedSMSDeviceRequest: PatchedSMSDeviceRequest? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: SMSDevice?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsAdminSmsPartialUpdateWithRequestBuilder(id: id, patchedSMSDeviceRequest: patchedSMSDeviceRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /authenticators/admin/sms/{id}/
     - Viewset for sms authenticator devices (for admins)
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this SMS Device. 
     - parameter patchedSMSDeviceRequest: (body)  (optional)
     - returns: RequestBuilder<SMSDevice> 
     */
    open class func authenticatorsAdminSmsPartialUpdateWithRequestBuilder(id: Int, patchedSMSDeviceRequest: PatchedSMSDeviceRequest? = nil) -> RequestBuilder<SMSDevice> {
        var localVariablePath = "/authenticators/admin/sms/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedSMSDeviceRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SMSDevice>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this SMS Device. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsAdminSmsRetrieve(id: Int, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: SMSDevice?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsAdminSmsRetrieveWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /authenticators/admin/sms/{id}/
     - Viewset for sms authenticator devices (for admins)
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this SMS Device. 
     - returns: RequestBuilder<SMSDevice> 
     */
    open class func authenticatorsAdminSmsRetrieveWithRequestBuilder(id: Int) -> RequestBuilder<SMSDevice> {
        var localVariablePath = "/authenticators/admin/sms/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SMSDevice>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this SMS Device. 
     - parameter sMSDeviceRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsAdminSmsUpdate(id: Int, sMSDeviceRequest: SMSDeviceRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: SMSDevice?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsAdminSmsUpdateWithRequestBuilder(id: id, sMSDeviceRequest: sMSDeviceRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /authenticators/admin/sms/{id}/
     - Viewset for sms authenticator devices (for admins)
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this SMS Device. 
     - parameter sMSDeviceRequest: (body)  
     - returns: RequestBuilder<SMSDevice> 
     */
    open class func authenticatorsAdminSmsUpdateWithRequestBuilder(id: Int, sMSDeviceRequest: SMSDeviceRequest) -> RequestBuilder<SMSDevice> {
        var localVariablePath = "/authenticators/admin/sms/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sMSDeviceRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SMSDevice>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter staticDeviceRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsAdminStaticCreate(staticDeviceRequest: StaticDeviceRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: StaticDevice?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsAdminStaticCreateWithRequestBuilder(staticDeviceRequest: staticDeviceRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /authenticators/admin/static/
     - Viewset for static authenticator devices (for admins)
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter staticDeviceRequest: (body)  
     - returns: RequestBuilder<StaticDevice> 
     */
    open class func authenticatorsAdminStaticCreateWithRequestBuilder(staticDeviceRequest: StaticDeviceRequest) -> RequestBuilder<StaticDevice> {
        let localVariablePath = "/authenticators/admin/static/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: staticDeviceRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<StaticDevice>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Static Device. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsAdminStaticDestroy(id: Int, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsAdminStaticDestroyWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /authenticators/admin/static/{id}/
     - Viewset for static authenticator devices (for admins)
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Static Device. 
     - returns: RequestBuilder<Void> 
     */
    open class func authenticatorsAdminStaticDestroyWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/authenticators/admin/static/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsAdminStaticList(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedStaticDeviceList?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsAdminStaticListWithRequestBuilder(name: name, ordering: ordering, page: page, pageSize: pageSize, search: search).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /authenticators/admin/static/
     - Viewset for static authenticator devices (for admins)
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - returns: RequestBuilder<PaginatedStaticDeviceList> 
     */
    open class func authenticatorsAdminStaticListWithRequestBuilder(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil) -> RequestBuilder<PaginatedStaticDeviceList> {
        let localVariablePath = "/authenticators/admin/static/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedStaticDeviceList>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Static Device. 
     - parameter patchedStaticDeviceRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsAdminStaticPartialUpdate(id: Int, patchedStaticDeviceRequest: PatchedStaticDeviceRequest? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: StaticDevice?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsAdminStaticPartialUpdateWithRequestBuilder(id: id, patchedStaticDeviceRequest: patchedStaticDeviceRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /authenticators/admin/static/{id}/
     - Viewset for static authenticator devices (for admins)
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Static Device. 
     - parameter patchedStaticDeviceRequest: (body)  (optional)
     - returns: RequestBuilder<StaticDevice> 
     */
    open class func authenticatorsAdminStaticPartialUpdateWithRequestBuilder(id: Int, patchedStaticDeviceRequest: PatchedStaticDeviceRequest? = nil) -> RequestBuilder<StaticDevice> {
        var localVariablePath = "/authenticators/admin/static/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedStaticDeviceRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<StaticDevice>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Static Device. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsAdminStaticRetrieve(id: Int, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: StaticDevice?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsAdminStaticRetrieveWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /authenticators/admin/static/{id}/
     - Viewset for static authenticator devices (for admins)
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Static Device. 
     - returns: RequestBuilder<StaticDevice> 
     */
    open class func authenticatorsAdminStaticRetrieveWithRequestBuilder(id: Int) -> RequestBuilder<StaticDevice> {
        var localVariablePath = "/authenticators/admin/static/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<StaticDevice>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Static Device. 
     - parameter staticDeviceRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsAdminStaticUpdate(id: Int, staticDeviceRequest: StaticDeviceRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: StaticDevice?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsAdminStaticUpdateWithRequestBuilder(id: id, staticDeviceRequest: staticDeviceRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /authenticators/admin/static/{id}/
     - Viewset for static authenticator devices (for admins)
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Static Device. 
     - parameter staticDeviceRequest: (body)  
     - returns: RequestBuilder<StaticDevice> 
     */
    open class func authenticatorsAdminStaticUpdateWithRequestBuilder(id: Int, staticDeviceRequest: StaticDeviceRequest) -> RequestBuilder<StaticDevice> {
        var localVariablePath = "/authenticators/admin/static/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: staticDeviceRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<StaticDevice>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter tOTPDeviceRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsAdminTotpCreate(tOTPDeviceRequest: TOTPDeviceRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: TOTPDevice?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsAdminTotpCreateWithRequestBuilder(tOTPDeviceRequest: tOTPDeviceRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /authenticators/admin/totp/
     - Viewset for totp authenticator devices (for admins)
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter tOTPDeviceRequest: (body)  
     - returns: RequestBuilder<TOTPDevice> 
     */
    open class func authenticatorsAdminTotpCreateWithRequestBuilder(tOTPDeviceRequest: TOTPDeviceRequest) -> RequestBuilder<TOTPDevice> {
        let localVariablePath = "/authenticators/admin/totp/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: tOTPDeviceRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TOTPDevice>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this TOTP Device. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsAdminTotpDestroy(id: Int, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsAdminTotpDestroyWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /authenticators/admin/totp/{id}/
     - Viewset for totp authenticator devices (for admins)
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this TOTP Device. 
     - returns: RequestBuilder<Void> 
     */
    open class func authenticatorsAdminTotpDestroyWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/authenticators/admin/totp/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsAdminTotpList(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedTOTPDeviceList?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsAdminTotpListWithRequestBuilder(name: name, ordering: ordering, page: page, pageSize: pageSize, search: search).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /authenticators/admin/totp/
     - Viewset for totp authenticator devices (for admins)
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - returns: RequestBuilder<PaginatedTOTPDeviceList> 
     */
    open class func authenticatorsAdminTotpListWithRequestBuilder(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil) -> RequestBuilder<PaginatedTOTPDeviceList> {
        let localVariablePath = "/authenticators/admin/totp/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedTOTPDeviceList>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this TOTP Device. 
     - parameter patchedTOTPDeviceRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsAdminTotpPartialUpdate(id: Int, patchedTOTPDeviceRequest: PatchedTOTPDeviceRequest? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: TOTPDevice?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsAdminTotpPartialUpdateWithRequestBuilder(id: id, patchedTOTPDeviceRequest: patchedTOTPDeviceRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /authenticators/admin/totp/{id}/
     - Viewset for totp authenticator devices (for admins)
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this TOTP Device. 
     - parameter patchedTOTPDeviceRequest: (body)  (optional)
     - returns: RequestBuilder<TOTPDevice> 
     */
    open class func authenticatorsAdminTotpPartialUpdateWithRequestBuilder(id: Int, patchedTOTPDeviceRequest: PatchedTOTPDeviceRequest? = nil) -> RequestBuilder<TOTPDevice> {
        var localVariablePath = "/authenticators/admin/totp/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedTOTPDeviceRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TOTPDevice>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this TOTP Device. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsAdminTotpRetrieve(id: Int, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: TOTPDevice?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsAdminTotpRetrieveWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /authenticators/admin/totp/{id}/
     - Viewset for totp authenticator devices (for admins)
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this TOTP Device. 
     - returns: RequestBuilder<TOTPDevice> 
     */
    open class func authenticatorsAdminTotpRetrieveWithRequestBuilder(id: Int) -> RequestBuilder<TOTPDevice> {
        var localVariablePath = "/authenticators/admin/totp/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TOTPDevice>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this TOTP Device. 
     - parameter tOTPDeviceRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsAdminTotpUpdate(id: Int, tOTPDeviceRequest: TOTPDeviceRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: TOTPDevice?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsAdminTotpUpdateWithRequestBuilder(id: id, tOTPDeviceRequest: tOTPDeviceRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /authenticators/admin/totp/{id}/
     - Viewset for totp authenticator devices (for admins)
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this TOTP Device. 
     - parameter tOTPDeviceRequest: (body)  
     - returns: RequestBuilder<TOTPDevice> 
     */
    open class func authenticatorsAdminTotpUpdateWithRequestBuilder(id: Int, tOTPDeviceRequest: TOTPDeviceRequest) -> RequestBuilder<TOTPDevice> {
        var localVariablePath = "/authenticators/admin/totp/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: tOTPDeviceRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TOTPDevice>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter webAuthnDeviceRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsAdminWebauthnCreate(webAuthnDeviceRequest: WebAuthnDeviceRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: WebAuthnDevice?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsAdminWebauthnCreateWithRequestBuilder(webAuthnDeviceRequest: webAuthnDeviceRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /authenticators/admin/webauthn/
     - Viewset for WebAuthn authenticator devices (for admins)
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter webAuthnDeviceRequest: (body)  
     - returns: RequestBuilder<WebAuthnDevice> 
     */
    open class func authenticatorsAdminWebauthnCreateWithRequestBuilder(webAuthnDeviceRequest: WebAuthnDeviceRequest) -> RequestBuilder<WebAuthnDevice> {
        let localVariablePath = "/authenticators/admin/webauthn/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: webAuthnDeviceRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WebAuthnDevice>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this WebAuthn Device. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsAdminWebauthnDestroy(id: Int, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsAdminWebauthnDestroyWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /authenticators/admin/webauthn/{id}/
     - Viewset for WebAuthn authenticator devices (for admins)
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this WebAuthn Device. 
     - returns: RequestBuilder<Void> 
     */
    open class func authenticatorsAdminWebauthnDestroyWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/authenticators/admin/webauthn/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsAdminWebauthnList(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedWebAuthnDeviceList?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsAdminWebauthnListWithRequestBuilder(name: name, ordering: ordering, page: page, pageSize: pageSize, search: search).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /authenticators/admin/webauthn/
     - Viewset for WebAuthn authenticator devices (for admins)
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - returns: RequestBuilder<PaginatedWebAuthnDeviceList> 
     */
    open class func authenticatorsAdminWebauthnListWithRequestBuilder(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil) -> RequestBuilder<PaginatedWebAuthnDeviceList> {
        let localVariablePath = "/authenticators/admin/webauthn/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedWebAuthnDeviceList>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this WebAuthn Device. 
     - parameter patchedWebAuthnDeviceRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsAdminWebauthnPartialUpdate(id: Int, patchedWebAuthnDeviceRequest: PatchedWebAuthnDeviceRequest? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: WebAuthnDevice?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsAdminWebauthnPartialUpdateWithRequestBuilder(id: id, patchedWebAuthnDeviceRequest: patchedWebAuthnDeviceRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /authenticators/admin/webauthn/{id}/
     - Viewset for WebAuthn authenticator devices (for admins)
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this WebAuthn Device. 
     - parameter patchedWebAuthnDeviceRequest: (body)  (optional)
     - returns: RequestBuilder<WebAuthnDevice> 
     */
    open class func authenticatorsAdminWebauthnPartialUpdateWithRequestBuilder(id: Int, patchedWebAuthnDeviceRequest: PatchedWebAuthnDeviceRequest? = nil) -> RequestBuilder<WebAuthnDevice> {
        var localVariablePath = "/authenticators/admin/webauthn/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedWebAuthnDeviceRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WebAuthnDevice>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this WebAuthn Device. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsAdminWebauthnRetrieve(id: Int, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: WebAuthnDevice?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsAdminWebauthnRetrieveWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /authenticators/admin/webauthn/{id}/
     - Viewset for WebAuthn authenticator devices (for admins)
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this WebAuthn Device. 
     - returns: RequestBuilder<WebAuthnDevice> 
     */
    open class func authenticatorsAdminWebauthnRetrieveWithRequestBuilder(id: Int) -> RequestBuilder<WebAuthnDevice> {
        var localVariablePath = "/authenticators/admin/webauthn/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WebAuthnDevice>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this WebAuthn Device. 
     - parameter webAuthnDeviceRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsAdminWebauthnUpdate(id: Int, webAuthnDeviceRequest: WebAuthnDeviceRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: WebAuthnDevice?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsAdminWebauthnUpdateWithRequestBuilder(id: id, webAuthnDeviceRequest: webAuthnDeviceRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /authenticators/admin/webauthn/{id}/
     - Viewset for WebAuthn authenticator devices (for admins)
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this WebAuthn Device. 
     - parameter webAuthnDeviceRequest: (body)  
     - returns: RequestBuilder<WebAuthnDevice> 
     */
    open class func authenticatorsAdminWebauthnUpdateWithRequestBuilder(id: Int, webAuthnDeviceRequest: WebAuthnDeviceRequest) -> RequestBuilder<WebAuthnDevice> {
        var localVariablePath = "/authenticators/admin/webauthn/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: webAuthnDeviceRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WebAuthnDevice>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsAllList(apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: [Device]?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsAllListWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /authenticators/all/
     - Get all devices for current user
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - returns: RequestBuilder<[Device]> 
     */
    open class func authenticatorsAllListWithRequestBuilder() -> RequestBuilder<[Device]> {
        let localVariablePath = "/authenticators/all/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[Device]>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Duo Device. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsDuoDestroy(id: Int, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsDuoDestroyWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /authenticators/duo/{id}/
     - Viewset for Duo authenticator devices
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Duo Device. 
     - returns: RequestBuilder<Void> 
     */
    open class func authenticatorsDuoDestroyWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/authenticators/duo/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsDuoList(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedDuoDeviceList?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsDuoListWithRequestBuilder(name: name, ordering: ordering, page: page, pageSize: pageSize, search: search).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /authenticators/duo/
     - Viewset for Duo authenticator devices
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - returns: RequestBuilder<PaginatedDuoDeviceList> 
     */
    open class func authenticatorsDuoListWithRequestBuilder(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil) -> RequestBuilder<PaginatedDuoDeviceList> {
        let localVariablePath = "/authenticators/duo/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedDuoDeviceList>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Duo Device. 
     - parameter patchedDuoDeviceRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsDuoPartialUpdate(id: Int, patchedDuoDeviceRequest: PatchedDuoDeviceRequest? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: DuoDevice?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsDuoPartialUpdateWithRequestBuilder(id: id, patchedDuoDeviceRequest: patchedDuoDeviceRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /authenticators/duo/{id}/
     - Viewset for Duo authenticator devices
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Duo Device. 
     - parameter patchedDuoDeviceRequest: (body)  (optional)
     - returns: RequestBuilder<DuoDevice> 
     */
    open class func authenticatorsDuoPartialUpdateWithRequestBuilder(id: Int, patchedDuoDeviceRequest: PatchedDuoDeviceRequest? = nil) -> RequestBuilder<DuoDevice> {
        var localVariablePath = "/authenticators/duo/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedDuoDeviceRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DuoDevice>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Duo Device. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsDuoRetrieve(id: Int, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: DuoDevice?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsDuoRetrieveWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /authenticators/duo/{id}/
     - Viewset for Duo authenticator devices
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Duo Device. 
     - returns: RequestBuilder<DuoDevice> 
     */
    open class func authenticatorsDuoRetrieveWithRequestBuilder(id: Int) -> RequestBuilder<DuoDevice> {
        var localVariablePath = "/authenticators/duo/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DuoDevice>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Duo Device. 
     - parameter duoDeviceRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsDuoUpdate(id: Int, duoDeviceRequest: DuoDeviceRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: DuoDevice?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsDuoUpdateWithRequestBuilder(id: id, duoDeviceRequest: duoDeviceRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /authenticators/duo/{id}/
     - Viewset for Duo authenticator devices
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Duo Device. 
     - parameter duoDeviceRequest: (body)  
     - returns: RequestBuilder<DuoDevice> 
     */
    open class func authenticatorsDuoUpdateWithRequestBuilder(id: Int, duoDeviceRequest: DuoDeviceRequest) -> RequestBuilder<DuoDevice> {
        var localVariablePath = "/authenticators/duo/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: duoDeviceRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DuoDevice>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Duo Device. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsDuoUsedByList(id: Int, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: [UsedBy]?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsDuoUsedByListWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /authenticators/duo/{id}/used_by/
     - Get a list of all objects that use this object
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Duo Device. 
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func authenticatorsDuoUsedByListWithRequestBuilder(id: Int) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/authenticators/duo/{id}/used_by/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter uuid: (path) A UUID string identifying this Mobile Device. 
     - parameter mobileDeviceCheckInRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsMobileCheckInCreate(uuid: UUID, mobileDeviceCheckInRequest: MobileDeviceCheckInRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsMobileCheckInCreateWithRequestBuilder(uuid: uuid, mobileDeviceCheckInRequest: mobileDeviceCheckInRequest).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /authenticators/mobile/{uuid}/check_in/
     - Check in data about a device
     - API Key:
       - type: apiKey Authorization 
       - name: mobile_device_token
     - parameter uuid: (path) A UUID string identifying this Mobile Device. 
     - parameter mobileDeviceCheckInRequest: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func authenticatorsMobileCheckInCreateWithRequestBuilder(uuid: UUID, mobileDeviceCheckInRequest: MobileDeviceCheckInRequest) -> RequestBuilder<Void> {
        var localVariablePath = "/authenticators/mobile/{uuid}/check_in/"
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: mobileDeviceCheckInRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter uuid: (path) A UUID string identifying this Mobile Device. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsMobileDestroy(uuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsMobileDestroyWithRequestBuilder(uuid: uuid).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /authenticators/mobile/{uuid}/
     - Viewset for Mobile authenticator devices
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter uuid: (path) A UUID string identifying this Mobile Device. 
     - returns: RequestBuilder<Void> 
     */
    open class func authenticatorsMobileDestroyWithRequestBuilder(uuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/authenticators/mobile/{uuid}/"
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter uuid: (path) A UUID string identifying this Mobile Device. 
     - parameter mobileDeviceEnrollmentRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsMobileEnrollmentCallbackCreate(uuid: UUID, mobileDeviceEnrollmentRequest: MobileDeviceEnrollmentRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: MobileDeviceEnrollmentCallback?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsMobileEnrollmentCallbackCreateWithRequestBuilder(uuid: uuid, mobileDeviceEnrollmentRequest: mobileDeviceEnrollmentRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /authenticators/mobile/{uuid}/enrollment_callback/
     - Enrollment callback
     - API Key:
       - type: apiKey Authorization 
       - name: mobile_device_token
     - parameter uuid: (path) A UUID string identifying this Mobile Device. 
     - parameter mobileDeviceEnrollmentRequest: (body)  
     - returns: RequestBuilder<MobileDeviceEnrollmentCallback> 
     */
    open class func authenticatorsMobileEnrollmentCallbackCreateWithRequestBuilder(uuid: UUID, mobileDeviceEnrollmentRequest: MobileDeviceEnrollmentRequest) -> RequestBuilder<MobileDeviceEnrollmentCallback> {
        var localVariablePath = "/authenticators/mobile/{uuid}/enrollment_callback/"
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: mobileDeviceEnrollmentRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MobileDeviceEnrollmentCallback>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter uuid: (path) A UUID string identifying this Mobile Device. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsMobileEnrollmentStatusCreate(uuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: MobileDeviceEnrollmentStatus?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsMobileEnrollmentStatusCreateWithRequestBuilder(uuid: uuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /authenticators/mobile/{uuid}/enrollment_status/
     - Check device enrollment status
     - API Key:
       - type: apiKey Authorization 
       - name: mobile_device_token
     - parameter uuid: (path) A UUID string identifying this Mobile Device. 
     - returns: RequestBuilder<MobileDeviceEnrollmentStatus> 
     */
    open class func authenticatorsMobileEnrollmentStatusCreateWithRequestBuilder(uuid: UUID) -> RequestBuilder<MobileDeviceEnrollmentStatus> {
        var localVariablePath = "/authenticators/mobile/{uuid}/enrollment_status/"
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MobileDeviceEnrollmentStatus>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsMobileList(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedMobileDeviceList?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsMobileListWithRequestBuilder(name: name, ordering: ordering, page: page, pageSize: pageSize, search: search).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /authenticators/mobile/
     - Viewset for Mobile authenticator devices
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - returns: RequestBuilder<PaginatedMobileDeviceList> 
     */
    open class func authenticatorsMobileListWithRequestBuilder(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil) -> RequestBuilder<PaginatedMobileDeviceList> {
        let localVariablePath = "/authenticators/mobile/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedMobileDeviceList>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter uuid: (path) A UUID string identifying this Mobile Device. 
     - parameter patchedMobileDeviceRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsMobilePartialUpdate(uuid: UUID, patchedMobileDeviceRequest: PatchedMobileDeviceRequest? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: MobileDevice?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsMobilePartialUpdateWithRequestBuilder(uuid: uuid, patchedMobileDeviceRequest: patchedMobileDeviceRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /authenticators/mobile/{uuid}/
     - Viewset for Mobile authenticator devices
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter uuid: (path) A UUID string identifying this Mobile Device. 
     - parameter patchedMobileDeviceRequest: (body)  (optional)
     - returns: RequestBuilder<MobileDevice> 
     */
    open class func authenticatorsMobilePartialUpdateWithRequestBuilder(uuid: UUID, patchedMobileDeviceRequest: PatchedMobileDeviceRequest? = nil) -> RequestBuilder<MobileDevice> {
        var localVariablePath = "/authenticators/mobile/{uuid}/"
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedMobileDeviceRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MobileDevice>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter uuid: (path) A UUID string identifying this Mobile Device. 
     - parameter mobileDeviceResponseRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsMobileReceiveResponseCreate(uuid: UUID, mobileDeviceResponseRequest: MobileDeviceResponseRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsMobileReceiveResponseCreateWithRequestBuilder(uuid: uuid, mobileDeviceResponseRequest: mobileDeviceResponseRequest).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /authenticators/mobile/{uuid}/receive_response/
     - Get response from notification on phone
     - API Key:
       - type: apiKey Authorization 
       - name: mobile_device_token
     - parameter uuid: (path) A UUID string identifying this Mobile Device. 
     - parameter mobileDeviceResponseRequest: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func authenticatorsMobileReceiveResponseCreateWithRequestBuilder(uuid: UUID, mobileDeviceResponseRequest: MobileDeviceResponseRequest) -> RequestBuilder<Void> {
        var localVariablePath = "/authenticators/mobile/{uuid}/receive_response/"
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: mobileDeviceResponseRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter uuid: (path) A UUID string identifying this Mobile Device. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsMobileRetrieve(uuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: MobileDevice?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsMobileRetrieveWithRequestBuilder(uuid: uuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /authenticators/mobile/{uuid}/
     - Viewset for Mobile authenticator devices
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter uuid: (path) A UUID string identifying this Mobile Device. 
     - returns: RequestBuilder<MobileDevice> 
     */
    open class func authenticatorsMobileRetrieveWithRequestBuilder(uuid: UUID) -> RequestBuilder<MobileDevice> {
        var localVariablePath = "/authenticators/mobile/{uuid}/"
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MobileDevice>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter uuid: (path) A UUID string identifying this Mobile Device. 
     - parameter mobileDeviceRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsMobileUpdate(uuid: UUID, mobileDeviceRequest: MobileDeviceRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: MobileDevice?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsMobileUpdateWithRequestBuilder(uuid: uuid, mobileDeviceRequest: mobileDeviceRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /authenticators/mobile/{uuid}/
     - Viewset for Mobile authenticator devices
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter uuid: (path) A UUID string identifying this Mobile Device. 
     - parameter mobileDeviceRequest: (body)  
     - returns: RequestBuilder<MobileDevice> 
     */
    open class func authenticatorsMobileUpdateWithRequestBuilder(uuid: UUID, mobileDeviceRequest: MobileDeviceRequest) -> RequestBuilder<MobileDevice> {
        var localVariablePath = "/authenticators/mobile/{uuid}/"
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: mobileDeviceRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MobileDevice>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter uuid: (path) A UUID string identifying this Mobile Device. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsMobileUsedByList(uuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: [UsedBy]?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsMobileUsedByListWithRequestBuilder(uuid: uuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /authenticators/mobile/{uuid}/used_by/
     - Get a list of all objects that use this object
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter uuid: (path) A UUID string identifying this Mobile Device. 
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func authenticatorsMobileUsedByListWithRequestBuilder(uuid: UUID) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/authenticators/mobile/{uuid}/used_by/"
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this SMS Device. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsSmsDestroy(id: Int, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsSmsDestroyWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /authenticators/sms/{id}/
     - Viewset for sms authenticator devices
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this SMS Device. 
     - returns: RequestBuilder<Void> 
     */
    open class func authenticatorsSmsDestroyWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/authenticators/sms/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsSmsList(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedSMSDeviceList?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsSmsListWithRequestBuilder(name: name, ordering: ordering, page: page, pageSize: pageSize, search: search).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /authenticators/sms/
     - Viewset for sms authenticator devices
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - returns: RequestBuilder<PaginatedSMSDeviceList> 
     */
    open class func authenticatorsSmsListWithRequestBuilder(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil) -> RequestBuilder<PaginatedSMSDeviceList> {
        let localVariablePath = "/authenticators/sms/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedSMSDeviceList>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this SMS Device. 
     - parameter patchedSMSDeviceRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsSmsPartialUpdate(id: Int, patchedSMSDeviceRequest: PatchedSMSDeviceRequest? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: SMSDevice?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsSmsPartialUpdateWithRequestBuilder(id: id, patchedSMSDeviceRequest: patchedSMSDeviceRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /authenticators/sms/{id}/
     - Viewset for sms authenticator devices
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this SMS Device. 
     - parameter patchedSMSDeviceRequest: (body)  (optional)
     - returns: RequestBuilder<SMSDevice> 
     */
    open class func authenticatorsSmsPartialUpdateWithRequestBuilder(id: Int, patchedSMSDeviceRequest: PatchedSMSDeviceRequest? = nil) -> RequestBuilder<SMSDevice> {
        var localVariablePath = "/authenticators/sms/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedSMSDeviceRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SMSDevice>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this SMS Device. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsSmsRetrieve(id: Int, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: SMSDevice?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsSmsRetrieveWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /authenticators/sms/{id}/
     - Viewset for sms authenticator devices
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this SMS Device. 
     - returns: RequestBuilder<SMSDevice> 
     */
    open class func authenticatorsSmsRetrieveWithRequestBuilder(id: Int) -> RequestBuilder<SMSDevice> {
        var localVariablePath = "/authenticators/sms/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SMSDevice>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this SMS Device. 
     - parameter sMSDeviceRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsSmsUpdate(id: Int, sMSDeviceRequest: SMSDeviceRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: SMSDevice?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsSmsUpdateWithRequestBuilder(id: id, sMSDeviceRequest: sMSDeviceRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /authenticators/sms/{id}/
     - Viewset for sms authenticator devices
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this SMS Device. 
     - parameter sMSDeviceRequest: (body)  
     - returns: RequestBuilder<SMSDevice> 
     */
    open class func authenticatorsSmsUpdateWithRequestBuilder(id: Int, sMSDeviceRequest: SMSDeviceRequest) -> RequestBuilder<SMSDevice> {
        var localVariablePath = "/authenticators/sms/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sMSDeviceRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SMSDevice>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this SMS Device. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsSmsUsedByList(id: Int, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: [UsedBy]?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsSmsUsedByListWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /authenticators/sms/{id}/used_by/
     - Get a list of all objects that use this object
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this SMS Device. 
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func authenticatorsSmsUsedByListWithRequestBuilder(id: Int) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/authenticators/sms/{id}/used_by/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Static Device. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsStaticDestroy(id: Int, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsStaticDestroyWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /authenticators/static/{id}/
     - Viewset for static authenticator devices
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Static Device. 
     - returns: RequestBuilder<Void> 
     */
    open class func authenticatorsStaticDestroyWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/authenticators/static/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsStaticList(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedStaticDeviceList?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsStaticListWithRequestBuilder(name: name, ordering: ordering, page: page, pageSize: pageSize, search: search).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /authenticators/static/
     - Viewset for static authenticator devices
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - returns: RequestBuilder<PaginatedStaticDeviceList> 
     */
    open class func authenticatorsStaticListWithRequestBuilder(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil) -> RequestBuilder<PaginatedStaticDeviceList> {
        let localVariablePath = "/authenticators/static/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedStaticDeviceList>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Static Device. 
     - parameter patchedStaticDeviceRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsStaticPartialUpdate(id: Int, patchedStaticDeviceRequest: PatchedStaticDeviceRequest? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: StaticDevice?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsStaticPartialUpdateWithRequestBuilder(id: id, patchedStaticDeviceRequest: patchedStaticDeviceRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /authenticators/static/{id}/
     - Viewset for static authenticator devices
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Static Device. 
     - parameter patchedStaticDeviceRequest: (body)  (optional)
     - returns: RequestBuilder<StaticDevice> 
     */
    open class func authenticatorsStaticPartialUpdateWithRequestBuilder(id: Int, patchedStaticDeviceRequest: PatchedStaticDeviceRequest? = nil) -> RequestBuilder<StaticDevice> {
        var localVariablePath = "/authenticators/static/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedStaticDeviceRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<StaticDevice>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Static Device. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsStaticRetrieve(id: Int, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: StaticDevice?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsStaticRetrieveWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /authenticators/static/{id}/
     - Viewset for static authenticator devices
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Static Device. 
     - returns: RequestBuilder<StaticDevice> 
     */
    open class func authenticatorsStaticRetrieveWithRequestBuilder(id: Int) -> RequestBuilder<StaticDevice> {
        var localVariablePath = "/authenticators/static/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<StaticDevice>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Static Device. 
     - parameter staticDeviceRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsStaticUpdate(id: Int, staticDeviceRequest: StaticDeviceRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: StaticDevice?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsStaticUpdateWithRequestBuilder(id: id, staticDeviceRequest: staticDeviceRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /authenticators/static/{id}/
     - Viewset for static authenticator devices
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Static Device. 
     - parameter staticDeviceRequest: (body)  
     - returns: RequestBuilder<StaticDevice> 
     */
    open class func authenticatorsStaticUpdateWithRequestBuilder(id: Int, staticDeviceRequest: StaticDeviceRequest) -> RequestBuilder<StaticDevice> {
        var localVariablePath = "/authenticators/static/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: staticDeviceRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<StaticDevice>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Static Device. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsStaticUsedByList(id: Int, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: [UsedBy]?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsStaticUsedByListWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /authenticators/static/{id}/used_by/
     - Get a list of all objects that use this object
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this Static Device. 
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func authenticatorsStaticUsedByListWithRequestBuilder(id: Int) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/authenticators/static/{id}/used_by/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this TOTP Device. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsTotpDestroy(id: Int, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsTotpDestroyWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /authenticators/totp/{id}/
     - Viewset for totp authenticator devices
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this TOTP Device. 
     - returns: RequestBuilder<Void> 
     */
    open class func authenticatorsTotpDestroyWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/authenticators/totp/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsTotpList(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedTOTPDeviceList?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsTotpListWithRequestBuilder(name: name, ordering: ordering, page: page, pageSize: pageSize, search: search).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /authenticators/totp/
     - Viewset for totp authenticator devices
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - returns: RequestBuilder<PaginatedTOTPDeviceList> 
     */
    open class func authenticatorsTotpListWithRequestBuilder(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil) -> RequestBuilder<PaginatedTOTPDeviceList> {
        let localVariablePath = "/authenticators/totp/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedTOTPDeviceList>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this TOTP Device. 
     - parameter patchedTOTPDeviceRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsTotpPartialUpdate(id: Int, patchedTOTPDeviceRequest: PatchedTOTPDeviceRequest? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: TOTPDevice?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsTotpPartialUpdateWithRequestBuilder(id: id, patchedTOTPDeviceRequest: patchedTOTPDeviceRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /authenticators/totp/{id}/
     - Viewset for totp authenticator devices
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this TOTP Device. 
     - parameter patchedTOTPDeviceRequest: (body)  (optional)
     - returns: RequestBuilder<TOTPDevice> 
     */
    open class func authenticatorsTotpPartialUpdateWithRequestBuilder(id: Int, patchedTOTPDeviceRequest: PatchedTOTPDeviceRequest? = nil) -> RequestBuilder<TOTPDevice> {
        var localVariablePath = "/authenticators/totp/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedTOTPDeviceRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TOTPDevice>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this TOTP Device. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsTotpRetrieve(id: Int, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: TOTPDevice?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsTotpRetrieveWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /authenticators/totp/{id}/
     - Viewset for totp authenticator devices
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this TOTP Device. 
     - returns: RequestBuilder<TOTPDevice> 
     */
    open class func authenticatorsTotpRetrieveWithRequestBuilder(id: Int) -> RequestBuilder<TOTPDevice> {
        var localVariablePath = "/authenticators/totp/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TOTPDevice>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this TOTP Device. 
     - parameter tOTPDeviceRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsTotpUpdate(id: Int, tOTPDeviceRequest: TOTPDeviceRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: TOTPDevice?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsTotpUpdateWithRequestBuilder(id: id, tOTPDeviceRequest: tOTPDeviceRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /authenticators/totp/{id}/
     - Viewset for totp authenticator devices
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this TOTP Device. 
     - parameter tOTPDeviceRequest: (body)  
     - returns: RequestBuilder<TOTPDevice> 
     */
    open class func authenticatorsTotpUpdateWithRequestBuilder(id: Int, tOTPDeviceRequest: TOTPDeviceRequest) -> RequestBuilder<TOTPDevice> {
        var localVariablePath = "/authenticators/totp/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: tOTPDeviceRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TOTPDevice>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this TOTP Device. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsTotpUsedByList(id: Int, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: [UsedBy]?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsTotpUsedByListWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /authenticators/totp/{id}/used_by/
     - Get a list of all objects that use this object
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this TOTP Device. 
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func authenticatorsTotpUsedByListWithRequestBuilder(id: Int) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/authenticators/totp/{id}/used_by/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this WebAuthn Device. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsWebauthnDestroy(id: Int, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsWebauthnDestroyWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /authenticators/webauthn/{id}/
     - Viewset for WebAuthn authenticator devices
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this WebAuthn Device. 
     - returns: RequestBuilder<Void> 
     */
    open class func authenticatorsWebauthnDestroyWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/authenticators/webauthn/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsWebauthnList(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedWebAuthnDeviceList?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsWebauthnListWithRequestBuilder(name: name, ordering: ordering, page: page, pageSize: pageSize, search: search).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /authenticators/webauthn/
     - Viewset for WebAuthn authenticator devices
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - returns: RequestBuilder<PaginatedWebAuthnDeviceList> 
     */
    open class func authenticatorsWebauthnListWithRequestBuilder(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil) -> RequestBuilder<PaginatedWebAuthnDeviceList> {
        let localVariablePath = "/authenticators/webauthn/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedWebAuthnDeviceList>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this WebAuthn Device. 
     - parameter patchedWebAuthnDeviceRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsWebauthnPartialUpdate(id: Int, patchedWebAuthnDeviceRequest: PatchedWebAuthnDeviceRequest? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: WebAuthnDevice?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsWebauthnPartialUpdateWithRequestBuilder(id: id, patchedWebAuthnDeviceRequest: patchedWebAuthnDeviceRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /authenticators/webauthn/{id}/
     - Viewset for WebAuthn authenticator devices
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this WebAuthn Device. 
     - parameter patchedWebAuthnDeviceRequest: (body)  (optional)
     - returns: RequestBuilder<WebAuthnDevice> 
     */
    open class func authenticatorsWebauthnPartialUpdateWithRequestBuilder(id: Int, patchedWebAuthnDeviceRequest: PatchedWebAuthnDeviceRequest? = nil) -> RequestBuilder<WebAuthnDevice> {
        var localVariablePath = "/authenticators/webauthn/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedWebAuthnDeviceRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WebAuthnDevice>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this WebAuthn Device. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsWebauthnRetrieve(id: Int, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: WebAuthnDevice?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsWebauthnRetrieveWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /authenticators/webauthn/{id}/
     - Viewset for WebAuthn authenticator devices
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this WebAuthn Device. 
     - returns: RequestBuilder<WebAuthnDevice> 
     */
    open class func authenticatorsWebauthnRetrieveWithRequestBuilder(id: Int) -> RequestBuilder<WebAuthnDevice> {
        var localVariablePath = "/authenticators/webauthn/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WebAuthnDevice>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this WebAuthn Device. 
     - parameter webAuthnDeviceRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsWebauthnUpdate(id: Int, webAuthnDeviceRequest: WebAuthnDeviceRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: WebAuthnDevice?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsWebauthnUpdateWithRequestBuilder(id: id, webAuthnDeviceRequest: webAuthnDeviceRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /authenticators/webauthn/{id}/
     - Viewset for WebAuthn authenticator devices
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this WebAuthn Device. 
     - parameter webAuthnDeviceRequest: (body)  
     - returns: RequestBuilder<WebAuthnDevice> 
     */
    open class func authenticatorsWebauthnUpdateWithRequestBuilder(id: Int, webAuthnDeviceRequest: WebAuthnDeviceRequest) -> RequestBuilder<WebAuthnDevice> {
        var localVariablePath = "/authenticators/webauthn/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: webAuthnDeviceRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WebAuthnDevice>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this WebAuthn Device. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticatorsWebauthnUsedByList(id: Int, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: [UsedBy]?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticatorsWebauthnUsedByListWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /authenticators/webauthn/{id}/used_by/
     - Get a list of all objects that use this object
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter id: (path) A unique integer value identifying this WebAuthn Device. 
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func authenticatorsWebauthnUsedByListWithRequestBuilder(id: Int) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/authenticators/webauthn/{id}/used_by/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
