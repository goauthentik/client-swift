//
// CryptoAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class CryptoAPI {

    /**

     - parameter certificateKeyPairRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func cryptoCertificatekeypairsCreate(certificateKeyPairRequest: CertificateKeyPairRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: CertificateKeyPair?, _ error: Error?) -> Void)) -> RequestTask {
        return cryptoCertificatekeypairsCreateWithRequestBuilder(certificateKeyPairRequest: certificateKeyPairRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /crypto/certificatekeypairs/
     - CertificateKeyPair Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter certificateKeyPairRequest: (body)  
     - returns: RequestBuilder<CertificateKeyPair> 
     */
    open class func cryptoCertificatekeypairsCreateWithRequestBuilder(certificateKeyPairRequest: CertificateKeyPairRequest) -> RequestBuilder<CertificateKeyPair> {
        let localVariablePath = "/crypto/certificatekeypairs/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: certificateKeyPairRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CertificateKeyPair>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter kpUuid: (path) A UUID string identifying this Certificate-Key Pair. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func cryptoCertificatekeypairsDestroy(kpUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return cryptoCertificatekeypairsDestroyWithRequestBuilder(kpUuid: kpUuid).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /crypto/certificatekeypairs/{kp_uuid}/
     - CertificateKeyPair Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter kpUuid: (path) A UUID string identifying this Certificate-Key Pair. 
     - returns: RequestBuilder<Void> 
     */
    open class func cryptoCertificatekeypairsDestroyWithRequestBuilder(kpUuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/crypto/certificatekeypairs/{kp_uuid}/"
        let kpUuidPreEscape = "\(APIHelper.mapValueToPathItem(kpUuid))"
        let kpUuidPostEscape = kpUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{kp_uuid}", with: kpUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter certificateGenerationRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func cryptoCertificatekeypairsGenerateCreate(certificateGenerationRequest: CertificateGenerationRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: CertificateKeyPair?, _ error: Error?) -> Void)) -> RequestTask {
        return cryptoCertificatekeypairsGenerateCreateWithRequestBuilder(certificateGenerationRequest: certificateGenerationRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /crypto/certificatekeypairs/generate/
     - Generate a new, self-signed certificate-key pair
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter certificateGenerationRequest: (body)  
     - returns: RequestBuilder<CertificateKeyPair> 
     */
    open class func cryptoCertificatekeypairsGenerateCreateWithRequestBuilder(certificateGenerationRequest: CertificateGenerationRequest) -> RequestBuilder<CertificateKeyPair> {
        let localVariablePath = "/crypto/certificatekeypairs/generate/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: certificateGenerationRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CertificateKeyPair>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter hasKey: (query) Only return certificate-key pairs with keys (optional)
     - parameter includeDetails: (query)  (optional, default to true)
     - parameter managed: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func cryptoCertificatekeypairsList(hasKey: Bool? = nil, includeDetails: Bool? = nil, managed: String? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedCertificateKeyPairList?, _ error: Error?) -> Void)) -> RequestTask {
        return cryptoCertificatekeypairsListWithRequestBuilder(hasKey: hasKey, includeDetails: includeDetails, managed: managed, name: name, ordering: ordering, page: page, pageSize: pageSize, search: search).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /crypto/certificatekeypairs/
     - CertificateKeyPair Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter hasKey: (query) Only return certificate-key pairs with keys (optional)
     - parameter includeDetails: (query)  (optional, default to true)
     - parameter managed: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - returns: RequestBuilder<PaginatedCertificateKeyPairList> 
     */
    open class func cryptoCertificatekeypairsListWithRequestBuilder(hasKey: Bool? = nil, includeDetails: Bool? = nil, managed: String? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil) -> RequestBuilder<PaginatedCertificateKeyPairList> {
        let localVariablePath = "/crypto/certificatekeypairs/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "has_key": (wrappedValue: hasKey?.encodeToJSON(), isExplode: true),
            "include_details": (wrappedValue: includeDetails?.encodeToJSON(), isExplode: true),
            "managed": (wrappedValue: managed?.encodeToJSON(), isExplode: true),
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedCertificateKeyPairList>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter kpUuid: (path) A UUID string identifying this Certificate-Key Pair. 
     - parameter patchedCertificateKeyPairRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func cryptoCertificatekeypairsPartialUpdate(kpUuid: UUID, patchedCertificateKeyPairRequest: PatchedCertificateKeyPairRequest? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: CertificateKeyPair?, _ error: Error?) -> Void)) -> RequestTask {
        return cryptoCertificatekeypairsPartialUpdateWithRequestBuilder(kpUuid: kpUuid, patchedCertificateKeyPairRequest: patchedCertificateKeyPairRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /crypto/certificatekeypairs/{kp_uuid}/
     - CertificateKeyPair Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter kpUuid: (path) A UUID string identifying this Certificate-Key Pair. 
     - parameter patchedCertificateKeyPairRequest: (body)  (optional)
     - returns: RequestBuilder<CertificateKeyPair> 
     */
    open class func cryptoCertificatekeypairsPartialUpdateWithRequestBuilder(kpUuid: UUID, patchedCertificateKeyPairRequest: PatchedCertificateKeyPairRequest? = nil) -> RequestBuilder<CertificateKeyPair> {
        var localVariablePath = "/crypto/certificatekeypairs/{kp_uuid}/"
        let kpUuidPreEscape = "\(APIHelper.mapValueToPathItem(kpUuid))"
        let kpUuidPostEscape = kpUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{kp_uuid}", with: kpUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedCertificateKeyPairRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CertificateKeyPair>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter kpUuid: (path) A UUID string identifying this Certificate-Key Pair. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func cryptoCertificatekeypairsRetrieve(kpUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: CertificateKeyPair?, _ error: Error?) -> Void)) -> RequestTask {
        return cryptoCertificatekeypairsRetrieveWithRequestBuilder(kpUuid: kpUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /crypto/certificatekeypairs/{kp_uuid}/
     - CertificateKeyPair Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter kpUuid: (path) A UUID string identifying this Certificate-Key Pair. 
     - returns: RequestBuilder<CertificateKeyPair> 
     */
    open class func cryptoCertificatekeypairsRetrieveWithRequestBuilder(kpUuid: UUID) -> RequestBuilder<CertificateKeyPair> {
        var localVariablePath = "/crypto/certificatekeypairs/{kp_uuid}/"
        let kpUuidPreEscape = "\(APIHelper.mapValueToPathItem(kpUuid))"
        let kpUuidPostEscape = kpUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{kp_uuid}", with: kpUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CertificateKeyPair>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter kpUuid: (path) A UUID string identifying this Certificate-Key Pair. 
     - parameter certificateKeyPairRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func cryptoCertificatekeypairsUpdate(kpUuid: UUID, certificateKeyPairRequest: CertificateKeyPairRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: CertificateKeyPair?, _ error: Error?) -> Void)) -> RequestTask {
        return cryptoCertificatekeypairsUpdateWithRequestBuilder(kpUuid: kpUuid, certificateKeyPairRequest: certificateKeyPairRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /crypto/certificatekeypairs/{kp_uuid}/
     - CertificateKeyPair Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter kpUuid: (path) A UUID string identifying this Certificate-Key Pair. 
     - parameter certificateKeyPairRequest: (body)  
     - returns: RequestBuilder<CertificateKeyPair> 
     */
    open class func cryptoCertificatekeypairsUpdateWithRequestBuilder(kpUuid: UUID, certificateKeyPairRequest: CertificateKeyPairRequest) -> RequestBuilder<CertificateKeyPair> {
        var localVariablePath = "/crypto/certificatekeypairs/{kp_uuid}/"
        let kpUuidPreEscape = "\(APIHelper.mapValueToPathItem(kpUuid))"
        let kpUuidPostEscape = kpUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{kp_uuid}", with: kpUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: certificateKeyPairRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CertificateKeyPair>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter kpUuid: (path) A UUID string identifying this Certificate-Key Pair. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func cryptoCertificatekeypairsUsedByList(kpUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: [UsedBy]?, _ error: Error?) -> Void)) -> RequestTask {
        return cryptoCertificatekeypairsUsedByListWithRequestBuilder(kpUuid: kpUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /crypto/certificatekeypairs/{kp_uuid}/used_by/
     - Get a list of all objects that use this object
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter kpUuid: (path) A UUID string identifying this Certificate-Key Pair. 
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func cryptoCertificatekeypairsUsedByListWithRequestBuilder(kpUuid: UUID) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/crypto/certificatekeypairs/{kp_uuid}/used_by/"
        let kpUuidPreEscape = "\(APIHelper.mapValueToPathItem(kpUuid))"
        let kpUuidPostEscape = kpUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{kp_uuid}", with: kpUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter kpUuid: (path) A UUID string identifying this Certificate-Key Pair. 
     - parameter download: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func cryptoCertificatekeypairsViewCertificateRetrieve(kpUuid: UUID, download: Bool? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: CertificateData?, _ error: Error?) -> Void)) -> RequestTask {
        return cryptoCertificatekeypairsViewCertificateRetrieveWithRequestBuilder(kpUuid: kpUuid, download: download).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /crypto/certificatekeypairs/{kp_uuid}/view_certificate/
     - Return certificate-key pairs certificate and log access
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter kpUuid: (path) A UUID string identifying this Certificate-Key Pair. 
     - parameter download: (query)  (optional)
     - returns: RequestBuilder<CertificateData> 
     */
    open class func cryptoCertificatekeypairsViewCertificateRetrieveWithRequestBuilder(kpUuid: UUID, download: Bool? = nil) -> RequestBuilder<CertificateData> {
        var localVariablePath = "/crypto/certificatekeypairs/{kp_uuid}/view_certificate/"
        let kpUuidPreEscape = "\(APIHelper.mapValueToPathItem(kpUuid))"
        let kpUuidPostEscape = kpUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{kp_uuid}", with: kpUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "download": (wrappedValue: download?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CertificateData>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter kpUuid: (path) A UUID string identifying this Certificate-Key Pair. 
     - parameter download: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func cryptoCertificatekeypairsViewPrivateKeyRetrieve(kpUuid: UUID, download: Bool? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: CertificateData?, _ error: Error?) -> Void)) -> RequestTask {
        return cryptoCertificatekeypairsViewPrivateKeyRetrieveWithRequestBuilder(kpUuid: kpUuid, download: download).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /crypto/certificatekeypairs/{kp_uuid}/view_private_key/
     - Return certificate-key pairs private key and log access
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter kpUuid: (path) A UUID string identifying this Certificate-Key Pair. 
     - parameter download: (query)  (optional)
     - returns: RequestBuilder<CertificateData> 
     */
    open class func cryptoCertificatekeypairsViewPrivateKeyRetrieveWithRequestBuilder(kpUuid: UUID, download: Bool? = nil) -> RequestBuilder<CertificateData> {
        var localVariablePath = "/crypto/certificatekeypairs/{kp_uuid}/view_private_key/"
        let kpUuidPreEscape = "\(APIHelper.mapValueToPathItem(kpUuid))"
        let kpUuidPostEscape = kpUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{kp_uuid}", with: kpUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "download": (wrappedValue: download?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CertificateData>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
