//
// StagesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class StagesAPI {

    /**

     - parameter stageUuid: (path) A UUID string identifying this stage. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesAllDestroy(stageUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesAllDestroyWithRequestBuilder(stageUuid: stageUuid).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /stages/all/{stage_uuid}/
     - Stage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this stage. 
     - returns: RequestBuilder<Void> 
     */
    open class func stagesAllDestroyWithRequestBuilder(stageUuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/stages/all/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesAllList(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedStageList?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesAllListWithRequestBuilder(name: name, ordering: ordering, page: page, pageSize: pageSize, search: search).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/all/
     - Stage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - returns: RequestBuilder<PaginatedStageList> 
     */
    open class func stagesAllListWithRequestBuilder(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil) -> RequestBuilder<PaginatedStageList> {
        let localVariablePath = "/stages/all/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedStageList>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this stage. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesAllRetrieve(stageUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Stage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesAllRetrieveWithRequestBuilder(stageUuid: stageUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/all/{stage_uuid}/
     - Stage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this stage. 
     - returns: RequestBuilder<Stage> 
     */
    open class func stagesAllRetrieveWithRequestBuilder(stageUuid: UUID) -> RequestBuilder<Stage> {
        var localVariablePath = "/stages/all/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Stage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesAllTypesList(apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: [TypeCreate]?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesAllTypesListWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/all/types/
     - Get all creatable stage types
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - returns: RequestBuilder<[TypeCreate]> 
     */
    open class func stagesAllTypesListWithRequestBuilder() -> RequestBuilder<[TypeCreate]> {
        let localVariablePath = "/stages/all/types/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[TypeCreate]>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this stage. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesAllUsedByList(stageUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: [UsedBy]?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesAllUsedByListWithRequestBuilder(stageUuid: stageUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/all/{stage_uuid}/used_by/
     - Get a list of all objects that use this object
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this stage. 
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func stagesAllUsedByListWithRequestBuilder(stageUuid: UUID) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/stages/all/{stage_uuid}/used_by/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesAllUserSettingsList(apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: [UserSetting]?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesAllUserSettingsListWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/all/user_settings/
     - Get all stages the user can configure
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - returns: RequestBuilder<[UserSetting]> 
     */
    open class func stagesAllUserSettingsListWithRequestBuilder() -> RequestBuilder<[UserSetting]> {
        let localVariablePath = "/stages/all/user_settings/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UserSetting]>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter authenticatorDuoStageRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesAuthenticatorDuoCreate(authenticatorDuoStageRequest: AuthenticatorDuoStageRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: AuthenticatorDuoStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesAuthenticatorDuoCreateWithRequestBuilder(authenticatorDuoStageRequest: authenticatorDuoStageRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /stages/authenticator/duo/
     - AuthenticatorDuoStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter authenticatorDuoStageRequest: (body)  
     - returns: RequestBuilder<AuthenticatorDuoStage> 
     */
    open class func stagesAuthenticatorDuoCreateWithRequestBuilder(authenticatorDuoStageRequest: AuthenticatorDuoStageRequest) -> RequestBuilder<AuthenticatorDuoStage> {
        let localVariablePath = "/stages/authenticator/duo/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: authenticatorDuoStageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthenticatorDuoStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Duo Authenticator Setup Stage. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesAuthenticatorDuoDestroy(stageUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesAuthenticatorDuoDestroyWithRequestBuilder(stageUuid: stageUuid).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /stages/authenticator/duo/{stage_uuid}/
     - AuthenticatorDuoStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Duo Authenticator Setup Stage. 
     - returns: RequestBuilder<Void> 
     */
    open class func stagesAuthenticatorDuoDestroyWithRequestBuilder(stageUuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/stages/authenticator/duo/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Duo Authenticator Setup Stage. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesAuthenticatorDuoEnrollmentStatusCreate(stageUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: DuoDeviceEnrollmentStatus?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesAuthenticatorDuoEnrollmentStatusCreateWithRequestBuilder(stageUuid: stageUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /stages/authenticator/duo/{stage_uuid}/enrollment_status/
     - Check enrollment status of user details in current session
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Duo Authenticator Setup Stage. 
     - returns: RequestBuilder<DuoDeviceEnrollmentStatus> 
     */
    open class func stagesAuthenticatorDuoEnrollmentStatusCreateWithRequestBuilder(stageUuid: UUID) -> RequestBuilder<DuoDeviceEnrollmentStatus> {
        var localVariablePath = "/stages/authenticator/duo/{stage_uuid}/enrollment_status/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DuoDeviceEnrollmentStatus>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Duo Authenticator Setup Stage. 
     - parameter authenticatorDuoStageManualDeviceImportRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesAuthenticatorDuoImportDeviceManualCreate(stageUuid: UUID, authenticatorDuoStageManualDeviceImportRequest: AuthenticatorDuoStageManualDeviceImportRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesAuthenticatorDuoImportDeviceManualCreateWithRequestBuilder(stageUuid: stageUuid, authenticatorDuoStageManualDeviceImportRequest: authenticatorDuoStageManualDeviceImportRequest).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /stages/authenticator/duo/{stage_uuid}/import_device_manual/
     - Import duo devices into authentik
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Duo Authenticator Setup Stage. 
     - parameter authenticatorDuoStageManualDeviceImportRequest: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func stagesAuthenticatorDuoImportDeviceManualCreateWithRequestBuilder(stageUuid: UUID, authenticatorDuoStageManualDeviceImportRequest: AuthenticatorDuoStageManualDeviceImportRequest) -> RequestBuilder<Void> {
        var localVariablePath = "/stages/authenticator/duo/{stage_uuid}/import_device_manual/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: authenticatorDuoStageManualDeviceImportRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Duo Authenticator Setup Stage. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesAuthenticatorDuoImportDevicesAutomaticCreate(stageUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: AuthenticatorDuoStageDeviceImportResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesAuthenticatorDuoImportDevicesAutomaticCreateWithRequestBuilder(stageUuid: stageUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /stages/authenticator/duo/{stage_uuid}/import_devices_automatic/
     - Import duo devices into authentik
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Duo Authenticator Setup Stage. 
     - returns: RequestBuilder<AuthenticatorDuoStageDeviceImportResponse> 
     */
    open class func stagesAuthenticatorDuoImportDevicesAutomaticCreateWithRequestBuilder(stageUuid: UUID) -> RequestBuilder<AuthenticatorDuoStageDeviceImportResponse> {
        var localVariablePath = "/stages/authenticator/duo/{stage_uuid}/import_devices_automatic/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthenticatorDuoStageDeviceImportResponse>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter apiHostname: (query)  (optional)
     - parameter clientId: (query)  (optional)
     - parameter configureFlow: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesAuthenticatorDuoList(apiHostname: String? = nil, clientId: String? = nil, configureFlow: UUID? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedAuthenticatorDuoStageList?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesAuthenticatorDuoListWithRequestBuilder(apiHostname: apiHostname, clientId: clientId, configureFlow: configureFlow, name: name, ordering: ordering, page: page, pageSize: pageSize, search: search).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/authenticator/duo/
     - AuthenticatorDuoStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter apiHostname: (query)  (optional)
     - parameter clientId: (query)  (optional)
     - parameter configureFlow: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - returns: RequestBuilder<PaginatedAuthenticatorDuoStageList> 
     */
    open class func stagesAuthenticatorDuoListWithRequestBuilder(apiHostname: String? = nil, clientId: String? = nil, configureFlow: UUID? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil) -> RequestBuilder<PaginatedAuthenticatorDuoStageList> {
        let localVariablePath = "/stages/authenticator/duo/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "api_hostname": (wrappedValue: apiHostname?.encodeToJSON(), isExplode: true),
            "client_id": (wrappedValue: clientId?.encodeToJSON(), isExplode: true),
            "configure_flow": (wrappedValue: configureFlow?.encodeToJSON(), isExplode: true),
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedAuthenticatorDuoStageList>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Duo Authenticator Setup Stage. 
     - parameter patchedAuthenticatorDuoStageRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesAuthenticatorDuoPartialUpdate(stageUuid: UUID, patchedAuthenticatorDuoStageRequest: PatchedAuthenticatorDuoStageRequest? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: AuthenticatorDuoStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesAuthenticatorDuoPartialUpdateWithRequestBuilder(stageUuid: stageUuid, patchedAuthenticatorDuoStageRequest: patchedAuthenticatorDuoStageRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /stages/authenticator/duo/{stage_uuid}/
     - AuthenticatorDuoStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Duo Authenticator Setup Stage. 
     - parameter patchedAuthenticatorDuoStageRequest: (body)  (optional)
     - returns: RequestBuilder<AuthenticatorDuoStage> 
     */
    open class func stagesAuthenticatorDuoPartialUpdateWithRequestBuilder(stageUuid: UUID, patchedAuthenticatorDuoStageRequest: PatchedAuthenticatorDuoStageRequest? = nil) -> RequestBuilder<AuthenticatorDuoStage> {
        var localVariablePath = "/stages/authenticator/duo/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedAuthenticatorDuoStageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthenticatorDuoStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Duo Authenticator Setup Stage. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesAuthenticatorDuoRetrieve(stageUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: AuthenticatorDuoStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesAuthenticatorDuoRetrieveWithRequestBuilder(stageUuid: stageUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/authenticator/duo/{stage_uuid}/
     - AuthenticatorDuoStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Duo Authenticator Setup Stage. 
     - returns: RequestBuilder<AuthenticatorDuoStage> 
     */
    open class func stagesAuthenticatorDuoRetrieveWithRequestBuilder(stageUuid: UUID) -> RequestBuilder<AuthenticatorDuoStage> {
        var localVariablePath = "/stages/authenticator/duo/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthenticatorDuoStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Duo Authenticator Setup Stage. 
     - parameter authenticatorDuoStageRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesAuthenticatorDuoUpdate(stageUuid: UUID, authenticatorDuoStageRequest: AuthenticatorDuoStageRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: AuthenticatorDuoStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesAuthenticatorDuoUpdateWithRequestBuilder(stageUuid: stageUuid, authenticatorDuoStageRequest: authenticatorDuoStageRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /stages/authenticator/duo/{stage_uuid}/
     - AuthenticatorDuoStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Duo Authenticator Setup Stage. 
     - parameter authenticatorDuoStageRequest: (body)  
     - returns: RequestBuilder<AuthenticatorDuoStage> 
     */
    open class func stagesAuthenticatorDuoUpdateWithRequestBuilder(stageUuid: UUID, authenticatorDuoStageRequest: AuthenticatorDuoStageRequest) -> RequestBuilder<AuthenticatorDuoStage> {
        var localVariablePath = "/stages/authenticator/duo/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: authenticatorDuoStageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthenticatorDuoStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Duo Authenticator Setup Stage. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesAuthenticatorDuoUsedByList(stageUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: [UsedBy]?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesAuthenticatorDuoUsedByListWithRequestBuilder(stageUuid: stageUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/authenticator/duo/{stage_uuid}/used_by/
     - Get a list of all objects that use this object
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Duo Authenticator Setup Stage. 
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func stagesAuthenticatorDuoUsedByListWithRequestBuilder(stageUuid: UUID) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/stages/authenticator/duo/{stage_uuid}/used_by/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter authenticatorSMSStageRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesAuthenticatorSmsCreate(authenticatorSMSStageRequest: AuthenticatorSMSStageRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: AuthenticatorSMSStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesAuthenticatorSmsCreateWithRequestBuilder(authenticatorSMSStageRequest: authenticatorSMSStageRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /stages/authenticator/sms/
     - AuthenticatorSMSStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter authenticatorSMSStageRequest: (body)  
     - returns: RequestBuilder<AuthenticatorSMSStage> 
     */
    open class func stagesAuthenticatorSmsCreateWithRequestBuilder(authenticatorSMSStageRequest: AuthenticatorSMSStageRequest) -> RequestBuilder<AuthenticatorSMSStage> {
        let localVariablePath = "/stages/authenticator/sms/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: authenticatorSMSStageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthenticatorSMSStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this SMS Authenticator Setup Stage. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesAuthenticatorSmsDestroy(stageUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesAuthenticatorSmsDestroyWithRequestBuilder(stageUuid: stageUuid).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /stages/authenticator/sms/{stage_uuid}/
     - AuthenticatorSMSStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this SMS Authenticator Setup Stage. 
     - returns: RequestBuilder<Void> 
     */
    open class func stagesAuthenticatorSmsDestroyWithRequestBuilder(stageUuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/stages/authenticator/sms/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter authType
     */
    public enum AuthType_stagesAuthenticatorSmsList: String, CaseIterable {
        case basic = "basic"
        case bearer = "bearer"
    }

    /**
     * enum for parameter provider
     */
    public enum Provider_stagesAuthenticatorSmsList: String, CaseIterable {
        case generic = "generic"
        case twilio = "twilio"
    }

    /**

     - parameter accountSid: (query)  (optional)
     - parameter auth: (query)  (optional)
     - parameter authPassword: (query)  (optional)
     - parameter authType: (query) * &#x60;basic&#x60; - Basic * &#x60;bearer&#x60; - Bearer (optional)
     - parameter configureFlow: (query)  (optional)
     - parameter friendlyName: (query)  (optional)
     - parameter fromNumber: (query)  (optional)
     - parameter mapping: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter provider: (query) * &#x60;twilio&#x60; - Twilio * &#x60;generic&#x60; - Generic (optional)
     - parameter search: (query) A search term. (optional)
     - parameter stageUuid: (query)  (optional)
     - parameter verifyOnly: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesAuthenticatorSmsList(accountSid: String? = nil, auth: String? = nil, authPassword: String? = nil, authType: AuthType_stagesAuthenticatorSmsList? = nil, configureFlow: UUID? = nil, friendlyName: String? = nil, fromNumber: String? = nil, mapping: UUID? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, provider: Provider_stagesAuthenticatorSmsList? = nil, search: String? = nil, stageUuid: UUID? = nil, verifyOnly: Bool? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedAuthenticatorSMSStageList?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesAuthenticatorSmsListWithRequestBuilder(accountSid: accountSid, auth: auth, authPassword: authPassword, authType: authType, configureFlow: configureFlow, friendlyName: friendlyName, fromNumber: fromNumber, mapping: mapping, name: name, ordering: ordering, page: page, pageSize: pageSize, provider: provider, search: search, stageUuid: stageUuid, verifyOnly: verifyOnly).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/authenticator/sms/
     - AuthenticatorSMSStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter accountSid: (query)  (optional)
     - parameter auth: (query)  (optional)
     - parameter authPassword: (query)  (optional)
     - parameter authType: (query) * &#x60;basic&#x60; - Basic * &#x60;bearer&#x60; - Bearer (optional)
     - parameter configureFlow: (query)  (optional)
     - parameter friendlyName: (query)  (optional)
     - parameter fromNumber: (query)  (optional)
     - parameter mapping: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter provider: (query) * &#x60;twilio&#x60; - Twilio * &#x60;generic&#x60; - Generic (optional)
     - parameter search: (query) A search term. (optional)
     - parameter stageUuid: (query)  (optional)
     - parameter verifyOnly: (query)  (optional)
     - returns: RequestBuilder<PaginatedAuthenticatorSMSStageList> 
     */
    open class func stagesAuthenticatorSmsListWithRequestBuilder(accountSid: String? = nil, auth: String? = nil, authPassword: String? = nil, authType: AuthType_stagesAuthenticatorSmsList? = nil, configureFlow: UUID? = nil, friendlyName: String? = nil, fromNumber: String? = nil, mapping: UUID? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, provider: Provider_stagesAuthenticatorSmsList? = nil, search: String? = nil, stageUuid: UUID? = nil, verifyOnly: Bool? = nil) -> RequestBuilder<PaginatedAuthenticatorSMSStageList> {
        let localVariablePath = "/stages/authenticator/sms/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "account_sid": (wrappedValue: accountSid?.encodeToJSON(), isExplode: true),
            "auth": (wrappedValue: auth?.encodeToJSON(), isExplode: true),
            "auth_password": (wrappedValue: authPassword?.encodeToJSON(), isExplode: true),
            "auth_type": (wrappedValue: authType?.encodeToJSON(), isExplode: true),
            "configure_flow": (wrappedValue: configureFlow?.encodeToJSON(), isExplode: true),
            "friendly_name": (wrappedValue: friendlyName?.encodeToJSON(), isExplode: true),
            "from_number": (wrappedValue: fromNumber?.encodeToJSON(), isExplode: true),
            "mapping": (wrappedValue: mapping?.encodeToJSON(), isExplode: true),
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "provider": (wrappedValue: provider?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
            "stage_uuid": (wrappedValue: stageUuid?.encodeToJSON(), isExplode: true),
            "verify_only": (wrappedValue: verifyOnly?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedAuthenticatorSMSStageList>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this SMS Authenticator Setup Stage. 
     - parameter patchedAuthenticatorSMSStageRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesAuthenticatorSmsPartialUpdate(stageUuid: UUID, patchedAuthenticatorSMSStageRequest: PatchedAuthenticatorSMSStageRequest? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: AuthenticatorSMSStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesAuthenticatorSmsPartialUpdateWithRequestBuilder(stageUuid: stageUuid, patchedAuthenticatorSMSStageRequest: patchedAuthenticatorSMSStageRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /stages/authenticator/sms/{stage_uuid}/
     - AuthenticatorSMSStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this SMS Authenticator Setup Stage. 
     - parameter patchedAuthenticatorSMSStageRequest: (body)  (optional)
     - returns: RequestBuilder<AuthenticatorSMSStage> 
     */
    open class func stagesAuthenticatorSmsPartialUpdateWithRequestBuilder(stageUuid: UUID, patchedAuthenticatorSMSStageRequest: PatchedAuthenticatorSMSStageRequest? = nil) -> RequestBuilder<AuthenticatorSMSStage> {
        var localVariablePath = "/stages/authenticator/sms/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedAuthenticatorSMSStageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthenticatorSMSStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this SMS Authenticator Setup Stage. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesAuthenticatorSmsRetrieve(stageUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: AuthenticatorSMSStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesAuthenticatorSmsRetrieveWithRequestBuilder(stageUuid: stageUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/authenticator/sms/{stage_uuid}/
     - AuthenticatorSMSStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this SMS Authenticator Setup Stage. 
     - returns: RequestBuilder<AuthenticatorSMSStage> 
     */
    open class func stagesAuthenticatorSmsRetrieveWithRequestBuilder(stageUuid: UUID) -> RequestBuilder<AuthenticatorSMSStage> {
        var localVariablePath = "/stages/authenticator/sms/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthenticatorSMSStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this SMS Authenticator Setup Stage. 
     - parameter authenticatorSMSStageRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesAuthenticatorSmsUpdate(stageUuid: UUID, authenticatorSMSStageRequest: AuthenticatorSMSStageRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: AuthenticatorSMSStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesAuthenticatorSmsUpdateWithRequestBuilder(stageUuid: stageUuid, authenticatorSMSStageRequest: authenticatorSMSStageRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /stages/authenticator/sms/{stage_uuid}/
     - AuthenticatorSMSStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this SMS Authenticator Setup Stage. 
     - parameter authenticatorSMSStageRequest: (body)  
     - returns: RequestBuilder<AuthenticatorSMSStage> 
     */
    open class func stagesAuthenticatorSmsUpdateWithRequestBuilder(stageUuid: UUID, authenticatorSMSStageRequest: AuthenticatorSMSStageRequest) -> RequestBuilder<AuthenticatorSMSStage> {
        var localVariablePath = "/stages/authenticator/sms/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: authenticatorSMSStageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthenticatorSMSStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this SMS Authenticator Setup Stage. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesAuthenticatorSmsUsedByList(stageUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: [UsedBy]?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesAuthenticatorSmsUsedByListWithRequestBuilder(stageUuid: stageUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/authenticator/sms/{stage_uuid}/used_by/
     - Get a list of all objects that use this object
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this SMS Authenticator Setup Stage. 
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func stagesAuthenticatorSmsUsedByListWithRequestBuilder(stageUuid: UUID) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/stages/authenticator/sms/{stage_uuid}/used_by/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter authenticatorStaticStageRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesAuthenticatorStaticCreate(authenticatorStaticStageRequest: AuthenticatorStaticStageRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: AuthenticatorStaticStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesAuthenticatorStaticCreateWithRequestBuilder(authenticatorStaticStageRequest: authenticatorStaticStageRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /stages/authenticator/static/
     - AuthenticatorStaticStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter authenticatorStaticStageRequest: (body)  
     - returns: RequestBuilder<AuthenticatorStaticStage> 
     */
    open class func stagesAuthenticatorStaticCreateWithRequestBuilder(authenticatorStaticStageRequest: AuthenticatorStaticStageRequest) -> RequestBuilder<AuthenticatorStaticStage> {
        let localVariablePath = "/stages/authenticator/static/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: authenticatorStaticStageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthenticatorStaticStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Static Authenticator Stage. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesAuthenticatorStaticDestroy(stageUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesAuthenticatorStaticDestroyWithRequestBuilder(stageUuid: stageUuid).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /stages/authenticator/static/{stage_uuid}/
     - AuthenticatorStaticStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Static Authenticator Stage. 
     - returns: RequestBuilder<Void> 
     */
    open class func stagesAuthenticatorStaticDestroyWithRequestBuilder(stageUuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/stages/authenticator/static/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter configureFlow: (query)  (optional)
     - parameter friendlyName: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter stageUuid: (query)  (optional)
     - parameter tokenCount: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesAuthenticatorStaticList(configureFlow: UUID? = nil, friendlyName: String? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, stageUuid: UUID? = nil, tokenCount: Int? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedAuthenticatorStaticStageList?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesAuthenticatorStaticListWithRequestBuilder(configureFlow: configureFlow, friendlyName: friendlyName, name: name, ordering: ordering, page: page, pageSize: pageSize, search: search, stageUuid: stageUuid, tokenCount: tokenCount).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/authenticator/static/
     - AuthenticatorStaticStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter configureFlow: (query)  (optional)
     - parameter friendlyName: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter stageUuid: (query)  (optional)
     - parameter tokenCount: (query)  (optional)
     - returns: RequestBuilder<PaginatedAuthenticatorStaticStageList> 
     */
    open class func stagesAuthenticatorStaticListWithRequestBuilder(configureFlow: UUID? = nil, friendlyName: String? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, stageUuid: UUID? = nil, tokenCount: Int? = nil) -> RequestBuilder<PaginatedAuthenticatorStaticStageList> {
        let localVariablePath = "/stages/authenticator/static/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "configure_flow": (wrappedValue: configureFlow?.encodeToJSON(), isExplode: true),
            "friendly_name": (wrappedValue: friendlyName?.encodeToJSON(), isExplode: true),
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
            "stage_uuid": (wrappedValue: stageUuid?.encodeToJSON(), isExplode: true),
            "token_count": (wrappedValue: tokenCount?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedAuthenticatorStaticStageList>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Static Authenticator Stage. 
     - parameter patchedAuthenticatorStaticStageRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesAuthenticatorStaticPartialUpdate(stageUuid: UUID, patchedAuthenticatorStaticStageRequest: PatchedAuthenticatorStaticStageRequest? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: AuthenticatorStaticStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesAuthenticatorStaticPartialUpdateWithRequestBuilder(stageUuid: stageUuid, patchedAuthenticatorStaticStageRequest: patchedAuthenticatorStaticStageRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /stages/authenticator/static/{stage_uuid}/
     - AuthenticatorStaticStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Static Authenticator Stage. 
     - parameter patchedAuthenticatorStaticStageRequest: (body)  (optional)
     - returns: RequestBuilder<AuthenticatorStaticStage> 
     */
    open class func stagesAuthenticatorStaticPartialUpdateWithRequestBuilder(stageUuid: UUID, patchedAuthenticatorStaticStageRequest: PatchedAuthenticatorStaticStageRequest? = nil) -> RequestBuilder<AuthenticatorStaticStage> {
        var localVariablePath = "/stages/authenticator/static/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedAuthenticatorStaticStageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthenticatorStaticStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Static Authenticator Stage. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesAuthenticatorStaticRetrieve(stageUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: AuthenticatorStaticStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesAuthenticatorStaticRetrieveWithRequestBuilder(stageUuid: stageUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/authenticator/static/{stage_uuid}/
     - AuthenticatorStaticStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Static Authenticator Stage. 
     - returns: RequestBuilder<AuthenticatorStaticStage> 
     */
    open class func stagesAuthenticatorStaticRetrieveWithRequestBuilder(stageUuid: UUID) -> RequestBuilder<AuthenticatorStaticStage> {
        var localVariablePath = "/stages/authenticator/static/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthenticatorStaticStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Static Authenticator Stage. 
     - parameter authenticatorStaticStageRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesAuthenticatorStaticUpdate(stageUuid: UUID, authenticatorStaticStageRequest: AuthenticatorStaticStageRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: AuthenticatorStaticStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesAuthenticatorStaticUpdateWithRequestBuilder(stageUuid: stageUuid, authenticatorStaticStageRequest: authenticatorStaticStageRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /stages/authenticator/static/{stage_uuid}/
     - AuthenticatorStaticStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Static Authenticator Stage. 
     - parameter authenticatorStaticStageRequest: (body)  
     - returns: RequestBuilder<AuthenticatorStaticStage> 
     */
    open class func stagesAuthenticatorStaticUpdateWithRequestBuilder(stageUuid: UUID, authenticatorStaticStageRequest: AuthenticatorStaticStageRequest) -> RequestBuilder<AuthenticatorStaticStage> {
        var localVariablePath = "/stages/authenticator/static/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: authenticatorStaticStageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthenticatorStaticStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Static Authenticator Stage. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesAuthenticatorStaticUsedByList(stageUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: [UsedBy]?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesAuthenticatorStaticUsedByListWithRequestBuilder(stageUuid: stageUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/authenticator/static/{stage_uuid}/used_by/
     - Get a list of all objects that use this object
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Static Authenticator Stage. 
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func stagesAuthenticatorStaticUsedByListWithRequestBuilder(stageUuid: UUID) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/stages/authenticator/static/{stage_uuid}/used_by/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter authenticatorTOTPStageRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesAuthenticatorTotpCreate(authenticatorTOTPStageRequest: AuthenticatorTOTPStageRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: AuthenticatorTOTPStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesAuthenticatorTotpCreateWithRequestBuilder(authenticatorTOTPStageRequest: authenticatorTOTPStageRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /stages/authenticator/totp/
     - AuthenticatorTOTPStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter authenticatorTOTPStageRequest: (body)  
     - returns: RequestBuilder<AuthenticatorTOTPStage> 
     */
    open class func stagesAuthenticatorTotpCreateWithRequestBuilder(authenticatorTOTPStageRequest: AuthenticatorTOTPStageRequest) -> RequestBuilder<AuthenticatorTOTPStage> {
        let localVariablePath = "/stages/authenticator/totp/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: authenticatorTOTPStageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthenticatorTOTPStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this TOTP Authenticator Setup Stage. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesAuthenticatorTotpDestroy(stageUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesAuthenticatorTotpDestroyWithRequestBuilder(stageUuid: stageUuid).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /stages/authenticator/totp/{stage_uuid}/
     - AuthenticatorTOTPStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this TOTP Authenticator Setup Stage. 
     - returns: RequestBuilder<Void> 
     */
    open class func stagesAuthenticatorTotpDestroyWithRequestBuilder(stageUuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/stages/authenticator/totp/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter digits
     */
    public enum Digits_stagesAuthenticatorTotpList: Int, CaseIterable {
        case _6 = 6
        case _8 = 8
    }

    /**

     - parameter configureFlow: (query)  (optional)
     - parameter digits: (query) * &#x60;6&#x60; - 6 digits, widely compatible * &#x60;8&#x60; - 8 digits, not compatible with apps like Google Authenticator (optional)
     - parameter friendlyName: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter stageUuid: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesAuthenticatorTotpList(configureFlow: UUID? = nil, digits: Digits_stagesAuthenticatorTotpList? = nil, friendlyName: String? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, stageUuid: UUID? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedAuthenticatorTOTPStageList?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesAuthenticatorTotpListWithRequestBuilder(configureFlow: configureFlow, digits: digits, friendlyName: friendlyName, name: name, ordering: ordering, page: page, pageSize: pageSize, search: search, stageUuid: stageUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/authenticator/totp/
     - AuthenticatorTOTPStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter configureFlow: (query)  (optional)
     - parameter digits: (query) * &#x60;6&#x60; - 6 digits, widely compatible * &#x60;8&#x60; - 8 digits, not compatible with apps like Google Authenticator (optional)
     - parameter friendlyName: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter stageUuid: (query)  (optional)
     - returns: RequestBuilder<PaginatedAuthenticatorTOTPStageList> 
     */
    open class func stagesAuthenticatorTotpListWithRequestBuilder(configureFlow: UUID? = nil, digits: Digits_stagesAuthenticatorTotpList? = nil, friendlyName: String? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, stageUuid: UUID? = nil) -> RequestBuilder<PaginatedAuthenticatorTOTPStageList> {
        let localVariablePath = "/stages/authenticator/totp/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "configure_flow": (wrappedValue: configureFlow?.encodeToJSON(), isExplode: true),
            "digits": (wrappedValue: digits?.encodeToJSON(), isExplode: true),
            "friendly_name": (wrappedValue: friendlyName?.encodeToJSON(), isExplode: true),
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
            "stage_uuid": (wrappedValue: stageUuid?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedAuthenticatorTOTPStageList>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this TOTP Authenticator Setup Stage. 
     - parameter patchedAuthenticatorTOTPStageRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesAuthenticatorTotpPartialUpdate(stageUuid: UUID, patchedAuthenticatorTOTPStageRequest: PatchedAuthenticatorTOTPStageRequest? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: AuthenticatorTOTPStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesAuthenticatorTotpPartialUpdateWithRequestBuilder(stageUuid: stageUuid, patchedAuthenticatorTOTPStageRequest: patchedAuthenticatorTOTPStageRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /stages/authenticator/totp/{stage_uuid}/
     - AuthenticatorTOTPStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this TOTP Authenticator Setup Stage. 
     - parameter patchedAuthenticatorTOTPStageRequest: (body)  (optional)
     - returns: RequestBuilder<AuthenticatorTOTPStage> 
     */
    open class func stagesAuthenticatorTotpPartialUpdateWithRequestBuilder(stageUuid: UUID, patchedAuthenticatorTOTPStageRequest: PatchedAuthenticatorTOTPStageRequest? = nil) -> RequestBuilder<AuthenticatorTOTPStage> {
        var localVariablePath = "/stages/authenticator/totp/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedAuthenticatorTOTPStageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthenticatorTOTPStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this TOTP Authenticator Setup Stage. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesAuthenticatorTotpRetrieve(stageUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: AuthenticatorTOTPStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesAuthenticatorTotpRetrieveWithRequestBuilder(stageUuid: stageUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/authenticator/totp/{stage_uuid}/
     - AuthenticatorTOTPStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this TOTP Authenticator Setup Stage. 
     - returns: RequestBuilder<AuthenticatorTOTPStage> 
     */
    open class func stagesAuthenticatorTotpRetrieveWithRequestBuilder(stageUuid: UUID) -> RequestBuilder<AuthenticatorTOTPStage> {
        var localVariablePath = "/stages/authenticator/totp/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthenticatorTOTPStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this TOTP Authenticator Setup Stage. 
     - parameter authenticatorTOTPStageRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesAuthenticatorTotpUpdate(stageUuid: UUID, authenticatorTOTPStageRequest: AuthenticatorTOTPStageRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: AuthenticatorTOTPStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesAuthenticatorTotpUpdateWithRequestBuilder(stageUuid: stageUuid, authenticatorTOTPStageRequest: authenticatorTOTPStageRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /stages/authenticator/totp/{stage_uuid}/
     - AuthenticatorTOTPStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this TOTP Authenticator Setup Stage. 
     - parameter authenticatorTOTPStageRequest: (body)  
     - returns: RequestBuilder<AuthenticatorTOTPStage> 
     */
    open class func stagesAuthenticatorTotpUpdateWithRequestBuilder(stageUuid: UUID, authenticatorTOTPStageRequest: AuthenticatorTOTPStageRequest) -> RequestBuilder<AuthenticatorTOTPStage> {
        var localVariablePath = "/stages/authenticator/totp/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: authenticatorTOTPStageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthenticatorTOTPStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this TOTP Authenticator Setup Stage. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesAuthenticatorTotpUsedByList(stageUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: [UsedBy]?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesAuthenticatorTotpUsedByListWithRequestBuilder(stageUuid: stageUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/authenticator/totp/{stage_uuid}/used_by/
     - Get a list of all objects that use this object
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this TOTP Authenticator Setup Stage. 
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func stagesAuthenticatorTotpUsedByListWithRequestBuilder(stageUuid: UUID) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/stages/authenticator/totp/{stage_uuid}/used_by/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter authenticatorValidateStageRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesAuthenticatorValidateCreate(authenticatorValidateStageRequest: AuthenticatorValidateStageRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: AuthenticatorValidateStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesAuthenticatorValidateCreateWithRequestBuilder(authenticatorValidateStageRequest: authenticatorValidateStageRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /stages/authenticator/validate/
     - AuthenticatorValidateStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter authenticatorValidateStageRequest: (body)  
     - returns: RequestBuilder<AuthenticatorValidateStage> 
     */
    open class func stagesAuthenticatorValidateCreateWithRequestBuilder(authenticatorValidateStageRequest: AuthenticatorValidateStageRequest) -> RequestBuilder<AuthenticatorValidateStage> {
        let localVariablePath = "/stages/authenticator/validate/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: authenticatorValidateStageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthenticatorValidateStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Authenticator Validation Stage. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesAuthenticatorValidateDestroy(stageUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesAuthenticatorValidateDestroyWithRequestBuilder(stageUuid: stageUuid).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /stages/authenticator/validate/{stage_uuid}/
     - AuthenticatorValidateStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Authenticator Validation Stage. 
     - returns: RequestBuilder<Void> 
     */
    open class func stagesAuthenticatorValidateDestroyWithRequestBuilder(stageUuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/stages/authenticator/validate/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter notConfiguredAction
     */
    public enum NotConfiguredAction_stagesAuthenticatorValidateList: String, CaseIterable {
        case configure = "configure"
        case deny = "deny"
        case skip = "skip"
    }

    /**

     - parameter configurationStages: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter notConfiguredAction: (query) * &#x60;skip&#x60; - Skip * &#x60;deny&#x60; - Deny * &#x60;configure&#x60; - Configure (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesAuthenticatorValidateList(configurationStages: [UUID]? = nil, name: String? = nil, notConfiguredAction: NotConfiguredAction_stagesAuthenticatorValidateList? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedAuthenticatorValidateStageList?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesAuthenticatorValidateListWithRequestBuilder(configurationStages: configurationStages, name: name, notConfiguredAction: notConfiguredAction, ordering: ordering, page: page, pageSize: pageSize, search: search).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/authenticator/validate/
     - AuthenticatorValidateStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter configurationStages: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter notConfiguredAction: (query) * &#x60;skip&#x60; - Skip * &#x60;deny&#x60; - Deny * &#x60;configure&#x60; - Configure (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - returns: RequestBuilder<PaginatedAuthenticatorValidateStageList> 
     */
    open class func stagesAuthenticatorValidateListWithRequestBuilder(configurationStages: [UUID]? = nil, name: String? = nil, notConfiguredAction: NotConfiguredAction_stagesAuthenticatorValidateList? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil) -> RequestBuilder<PaginatedAuthenticatorValidateStageList> {
        let localVariablePath = "/stages/authenticator/validate/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "configuration_stages": (wrappedValue: configurationStages?.encodeToJSON(), isExplode: true),
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "not_configured_action": (wrappedValue: notConfiguredAction?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedAuthenticatorValidateStageList>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Authenticator Validation Stage. 
     - parameter patchedAuthenticatorValidateStageRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesAuthenticatorValidatePartialUpdate(stageUuid: UUID, patchedAuthenticatorValidateStageRequest: PatchedAuthenticatorValidateStageRequest? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: AuthenticatorValidateStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesAuthenticatorValidatePartialUpdateWithRequestBuilder(stageUuid: stageUuid, patchedAuthenticatorValidateStageRequest: patchedAuthenticatorValidateStageRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /stages/authenticator/validate/{stage_uuid}/
     - AuthenticatorValidateStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Authenticator Validation Stage. 
     - parameter patchedAuthenticatorValidateStageRequest: (body)  (optional)
     - returns: RequestBuilder<AuthenticatorValidateStage> 
     */
    open class func stagesAuthenticatorValidatePartialUpdateWithRequestBuilder(stageUuid: UUID, patchedAuthenticatorValidateStageRequest: PatchedAuthenticatorValidateStageRequest? = nil) -> RequestBuilder<AuthenticatorValidateStage> {
        var localVariablePath = "/stages/authenticator/validate/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedAuthenticatorValidateStageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthenticatorValidateStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Authenticator Validation Stage. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesAuthenticatorValidateRetrieve(stageUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: AuthenticatorValidateStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesAuthenticatorValidateRetrieveWithRequestBuilder(stageUuid: stageUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/authenticator/validate/{stage_uuid}/
     - AuthenticatorValidateStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Authenticator Validation Stage. 
     - returns: RequestBuilder<AuthenticatorValidateStage> 
     */
    open class func stagesAuthenticatorValidateRetrieveWithRequestBuilder(stageUuid: UUID) -> RequestBuilder<AuthenticatorValidateStage> {
        var localVariablePath = "/stages/authenticator/validate/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthenticatorValidateStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Authenticator Validation Stage. 
     - parameter authenticatorValidateStageRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesAuthenticatorValidateUpdate(stageUuid: UUID, authenticatorValidateStageRequest: AuthenticatorValidateStageRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: AuthenticatorValidateStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesAuthenticatorValidateUpdateWithRequestBuilder(stageUuid: stageUuid, authenticatorValidateStageRequest: authenticatorValidateStageRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /stages/authenticator/validate/{stage_uuid}/
     - AuthenticatorValidateStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Authenticator Validation Stage. 
     - parameter authenticatorValidateStageRequest: (body)  
     - returns: RequestBuilder<AuthenticatorValidateStage> 
     */
    open class func stagesAuthenticatorValidateUpdateWithRequestBuilder(stageUuid: UUID, authenticatorValidateStageRequest: AuthenticatorValidateStageRequest) -> RequestBuilder<AuthenticatorValidateStage> {
        var localVariablePath = "/stages/authenticator/validate/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: authenticatorValidateStageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthenticatorValidateStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Authenticator Validation Stage. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesAuthenticatorValidateUsedByList(stageUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: [UsedBy]?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesAuthenticatorValidateUsedByListWithRequestBuilder(stageUuid: stageUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/authenticator/validate/{stage_uuid}/used_by/
     - Get a list of all objects that use this object
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Authenticator Validation Stage. 
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func stagesAuthenticatorValidateUsedByListWithRequestBuilder(stageUuid: UUID) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/stages/authenticator/validate/{stage_uuid}/used_by/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter authenticateWebAuthnStageRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesAuthenticatorWebauthnCreate(authenticateWebAuthnStageRequest: AuthenticateWebAuthnStageRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: AuthenticateWebAuthnStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesAuthenticatorWebauthnCreateWithRequestBuilder(authenticateWebAuthnStageRequest: authenticateWebAuthnStageRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /stages/authenticator/webauthn/
     - AuthenticateWebAuthnStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter authenticateWebAuthnStageRequest: (body)  
     - returns: RequestBuilder<AuthenticateWebAuthnStage> 
     */
    open class func stagesAuthenticatorWebauthnCreateWithRequestBuilder(authenticateWebAuthnStageRequest: AuthenticateWebAuthnStageRequest) -> RequestBuilder<AuthenticateWebAuthnStage> {
        let localVariablePath = "/stages/authenticator/webauthn/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: authenticateWebAuthnStageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthenticateWebAuthnStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this WebAuthn Authenticator Setup Stage. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesAuthenticatorWebauthnDestroy(stageUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesAuthenticatorWebauthnDestroyWithRequestBuilder(stageUuid: stageUuid).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /stages/authenticator/webauthn/{stage_uuid}/
     - AuthenticateWebAuthnStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this WebAuthn Authenticator Setup Stage. 
     - returns: RequestBuilder<Void> 
     */
    open class func stagesAuthenticatorWebauthnDestroyWithRequestBuilder(stageUuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/stages/authenticator/webauthn/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter authenticatorAttachment
     */
    public enum AuthenticatorAttachment_stagesAuthenticatorWebauthnList: String, CaseIterable {
        case crossPlatform = "cross-platform"
        case platform = "platform"
    }

    /**
     * enum for parameter residentKeyRequirement
     */
    public enum ResidentKeyRequirement_stagesAuthenticatorWebauthnList: String, CaseIterable {
        case discouraged = "discouraged"
        case preferred = "preferred"
        case _required = "required"
    }

    /**
     * enum for parameter userVerification
     */
    public enum UserVerification_stagesAuthenticatorWebauthnList: String, CaseIterable {
        case discouraged = "discouraged"
        case preferred = "preferred"
        case _required = "required"
    }

    /**

     - parameter authenticatorAttachment: (query) * &#x60;platform&#x60; - Platform * &#x60;cross-platform&#x60; - Cross Platform (optional)
     - parameter configureFlow: (query)  (optional)
     - parameter friendlyName: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter residentKeyRequirement: (query) * &#x60;discouraged&#x60; - Discouraged * &#x60;preferred&#x60; - Preferred * &#x60;required&#x60; - Required (optional)
     - parameter search: (query) A search term. (optional)
     - parameter stageUuid: (query)  (optional)
     - parameter userVerification: (query) * &#x60;required&#x60; - Required * &#x60;preferred&#x60; - Preferred * &#x60;discouraged&#x60; - Discouraged (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesAuthenticatorWebauthnList(authenticatorAttachment: AuthenticatorAttachment_stagesAuthenticatorWebauthnList? = nil, configureFlow: UUID? = nil, friendlyName: String? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, residentKeyRequirement: ResidentKeyRequirement_stagesAuthenticatorWebauthnList? = nil, search: String? = nil, stageUuid: UUID? = nil, userVerification: UserVerification_stagesAuthenticatorWebauthnList? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedAuthenticateWebAuthnStageList?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesAuthenticatorWebauthnListWithRequestBuilder(authenticatorAttachment: authenticatorAttachment, configureFlow: configureFlow, friendlyName: friendlyName, name: name, ordering: ordering, page: page, pageSize: pageSize, residentKeyRequirement: residentKeyRequirement, search: search, stageUuid: stageUuid, userVerification: userVerification).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/authenticator/webauthn/
     - AuthenticateWebAuthnStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter authenticatorAttachment: (query) * &#x60;platform&#x60; - Platform * &#x60;cross-platform&#x60; - Cross Platform (optional)
     - parameter configureFlow: (query)  (optional)
     - parameter friendlyName: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter residentKeyRequirement: (query) * &#x60;discouraged&#x60; - Discouraged * &#x60;preferred&#x60; - Preferred * &#x60;required&#x60; - Required (optional)
     - parameter search: (query) A search term. (optional)
     - parameter stageUuid: (query)  (optional)
     - parameter userVerification: (query) * &#x60;required&#x60; - Required * &#x60;preferred&#x60; - Preferred * &#x60;discouraged&#x60; - Discouraged (optional)
     - returns: RequestBuilder<PaginatedAuthenticateWebAuthnStageList> 
     */
    open class func stagesAuthenticatorWebauthnListWithRequestBuilder(authenticatorAttachment: AuthenticatorAttachment_stagesAuthenticatorWebauthnList? = nil, configureFlow: UUID? = nil, friendlyName: String? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, residentKeyRequirement: ResidentKeyRequirement_stagesAuthenticatorWebauthnList? = nil, search: String? = nil, stageUuid: UUID? = nil, userVerification: UserVerification_stagesAuthenticatorWebauthnList? = nil) -> RequestBuilder<PaginatedAuthenticateWebAuthnStageList> {
        let localVariablePath = "/stages/authenticator/webauthn/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "authenticator_attachment": (wrappedValue: authenticatorAttachment?.encodeToJSON(), isExplode: true),
            "configure_flow": (wrappedValue: configureFlow?.encodeToJSON(), isExplode: true),
            "friendly_name": (wrappedValue: friendlyName?.encodeToJSON(), isExplode: true),
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "resident_key_requirement": (wrappedValue: residentKeyRequirement?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
            "stage_uuid": (wrappedValue: stageUuid?.encodeToJSON(), isExplode: true),
            "user_verification": (wrappedValue: userVerification?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedAuthenticateWebAuthnStageList>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this WebAuthn Authenticator Setup Stage. 
     - parameter patchedAuthenticateWebAuthnStageRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesAuthenticatorWebauthnPartialUpdate(stageUuid: UUID, patchedAuthenticateWebAuthnStageRequest: PatchedAuthenticateWebAuthnStageRequest? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: AuthenticateWebAuthnStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesAuthenticatorWebauthnPartialUpdateWithRequestBuilder(stageUuid: stageUuid, patchedAuthenticateWebAuthnStageRequest: patchedAuthenticateWebAuthnStageRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /stages/authenticator/webauthn/{stage_uuid}/
     - AuthenticateWebAuthnStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this WebAuthn Authenticator Setup Stage. 
     - parameter patchedAuthenticateWebAuthnStageRequest: (body)  (optional)
     - returns: RequestBuilder<AuthenticateWebAuthnStage> 
     */
    open class func stagesAuthenticatorWebauthnPartialUpdateWithRequestBuilder(stageUuid: UUID, patchedAuthenticateWebAuthnStageRequest: PatchedAuthenticateWebAuthnStageRequest? = nil) -> RequestBuilder<AuthenticateWebAuthnStage> {
        var localVariablePath = "/stages/authenticator/webauthn/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedAuthenticateWebAuthnStageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthenticateWebAuthnStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this WebAuthn Authenticator Setup Stage. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesAuthenticatorWebauthnRetrieve(stageUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: AuthenticateWebAuthnStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesAuthenticatorWebauthnRetrieveWithRequestBuilder(stageUuid: stageUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/authenticator/webauthn/{stage_uuid}/
     - AuthenticateWebAuthnStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this WebAuthn Authenticator Setup Stage. 
     - returns: RequestBuilder<AuthenticateWebAuthnStage> 
     */
    open class func stagesAuthenticatorWebauthnRetrieveWithRequestBuilder(stageUuid: UUID) -> RequestBuilder<AuthenticateWebAuthnStage> {
        var localVariablePath = "/stages/authenticator/webauthn/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthenticateWebAuthnStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this WebAuthn Authenticator Setup Stage. 
     - parameter authenticateWebAuthnStageRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesAuthenticatorWebauthnUpdate(stageUuid: UUID, authenticateWebAuthnStageRequest: AuthenticateWebAuthnStageRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: AuthenticateWebAuthnStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesAuthenticatorWebauthnUpdateWithRequestBuilder(stageUuid: stageUuid, authenticateWebAuthnStageRequest: authenticateWebAuthnStageRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /stages/authenticator/webauthn/{stage_uuid}/
     - AuthenticateWebAuthnStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this WebAuthn Authenticator Setup Stage. 
     - parameter authenticateWebAuthnStageRequest: (body)  
     - returns: RequestBuilder<AuthenticateWebAuthnStage> 
     */
    open class func stagesAuthenticatorWebauthnUpdateWithRequestBuilder(stageUuid: UUID, authenticateWebAuthnStageRequest: AuthenticateWebAuthnStageRequest) -> RequestBuilder<AuthenticateWebAuthnStage> {
        var localVariablePath = "/stages/authenticator/webauthn/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: authenticateWebAuthnStageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthenticateWebAuthnStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this WebAuthn Authenticator Setup Stage. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesAuthenticatorWebauthnUsedByList(stageUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: [UsedBy]?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesAuthenticatorWebauthnUsedByListWithRequestBuilder(stageUuid: stageUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/authenticator/webauthn/{stage_uuid}/used_by/
     - Get a list of all objects that use this object
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this WebAuthn Authenticator Setup Stage. 
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func stagesAuthenticatorWebauthnUsedByListWithRequestBuilder(stageUuid: UUID) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/stages/authenticator/webauthn/{stage_uuid}/used_by/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter captchaStageRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesCaptchaCreate(captchaStageRequest: CaptchaStageRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: CaptchaStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesCaptchaCreateWithRequestBuilder(captchaStageRequest: captchaStageRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /stages/captcha/
     - CaptchaStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter captchaStageRequest: (body)  
     - returns: RequestBuilder<CaptchaStage> 
     */
    open class func stagesCaptchaCreateWithRequestBuilder(captchaStageRequest: CaptchaStageRequest) -> RequestBuilder<CaptchaStage> {
        let localVariablePath = "/stages/captcha/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: captchaStageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CaptchaStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Captcha Stage. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesCaptchaDestroy(stageUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesCaptchaDestroyWithRequestBuilder(stageUuid: stageUuid).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /stages/captcha/{stage_uuid}/
     - CaptchaStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Captcha Stage. 
     - returns: RequestBuilder<Void> 
     */
    open class func stagesCaptchaDestroyWithRequestBuilder(stageUuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/stages/captcha/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter publicKey: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesCaptchaList(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, publicKey: String? = nil, search: String? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedCaptchaStageList?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesCaptchaListWithRequestBuilder(name: name, ordering: ordering, page: page, pageSize: pageSize, publicKey: publicKey, search: search).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/captcha/
     - CaptchaStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter publicKey: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - returns: RequestBuilder<PaginatedCaptchaStageList> 
     */
    open class func stagesCaptchaListWithRequestBuilder(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, publicKey: String? = nil, search: String? = nil) -> RequestBuilder<PaginatedCaptchaStageList> {
        let localVariablePath = "/stages/captcha/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "public_key": (wrappedValue: publicKey?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedCaptchaStageList>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Captcha Stage. 
     - parameter patchedCaptchaStageRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesCaptchaPartialUpdate(stageUuid: UUID, patchedCaptchaStageRequest: PatchedCaptchaStageRequest? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: CaptchaStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesCaptchaPartialUpdateWithRequestBuilder(stageUuid: stageUuid, patchedCaptchaStageRequest: patchedCaptchaStageRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /stages/captcha/{stage_uuid}/
     - CaptchaStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Captcha Stage. 
     - parameter patchedCaptchaStageRequest: (body)  (optional)
     - returns: RequestBuilder<CaptchaStage> 
     */
    open class func stagesCaptchaPartialUpdateWithRequestBuilder(stageUuid: UUID, patchedCaptchaStageRequest: PatchedCaptchaStageRequest? = nil) -> RequestBuilder<CaptchaStage> {
        var localVariablePath = "/stages/captcha/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedCaptchaStageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CaptchaStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Captcha Stage. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesCaptchaRetrieve(stageUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: CaptchaStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesCaptchaRetrieveWithRequestBuilder(stageUuid: stageUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/captcha/{stage_uuid}/
     - CaptchaStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Captcha Stage. 
     - returns: RequestBuilder<CaptchaStage> 
     */
    open class func stagesCaptchaRetrieveWithRequestBuilder(stageUuid: UUID) -> RequestBuilder<CaptchaStage> {
        var localVariablePath = "/stages/captcha/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CaptchaStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Captcha Stage. 
     - parameter captchaStageRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesCaptchaUpdate(stageUuid: UUID, captchaStageRequest: CaptchaStageRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: CaptchaStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesCaptchaUpdateWithRequestBuilder(stageUuid: stageUuid, captchaStageRequest: captchaStageRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /stages/captcha/{stage_uuid}/
     - CaptchaStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Captcha Stage. 
     - parameter captchaStageRequest: (body)  
     - returns: RequestBuilder<CaptchaStage> 
     */
    open class func stagesCaptchaUpdateWithRequestBuilder(stageUuid: UUID, captchaStageRequest: CaptchaStageRequest) -> RequestBuilder<CaptchaStage> {
        var localVariablePath = "/stages/captcha/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: captchaStageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CaptchaStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Captcha Stage. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesCaptchaUsedByList(stageUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: [UsedBy]?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesCaptchaUsedByListWithRequestBuilder(stageUuid: stageUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/captcha/{stage_uuid}/used_by/
     - Get a list of all objects that use this object
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Captcha Stage. 
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func stagesCaptchaUsedByListWithRequestBuilder(stageUuid: UUID) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/stages/captcha/{stage_uuid}/used_by/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter consentStageRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesConsentCreate(consentStageRequest: ConsentStageRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: ConsentStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesConsentCreateWithRequestBuilder(consentStageRequest: consentStageRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /stages/consent/
     - ConsentStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter consentStageRequest: (body)  
     - returns: RequestBuilder<ConsentStage> 
     */
    open class func stagesConsentCreateWithRequestBuilder(consentStageRequest: ConsentStageRequest) -> RequestBuilder<ConsentStage> {
        let localVariablePath = "/stages/consent/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: consentStageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ConsentStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Consent Stage. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesConsentDestroy(stageUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesConsentDestroyWithRequestBuilder(stageUuid: stageUuid).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /stages/consent/{stage_uuid}/
     - ConsentStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Consent Stage. 
     - returns: RequestBuilder<Void> 
     */
    open class func stagesConsentDestroyWithRequestBuilder(stageUuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/stages/consent/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter mode
     */
    public enum Mode_stagesConsentList: String, CaseIterable {
        case alwaysRequire = "always_require"
        case expiring = "expiring"
        case permanent = "permanent"
    }

    /**

     - parameter consentExpireIn: (query)  (optional)
     - parameter mode: (query) * &#x60;always_require&#x60; - Always Require * &#x60;permanent&#x60; - Permanent * &#x60;expiring&#x60; - Expiring (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter stageUuid: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesConsentList(consentExpireIn: String? = nil, mode: Mode_stagesConsentList? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, stageUuid: UUID? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedConsentStageList?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesConsentListWithRequestBuilder(consentExpireIn: consentExpireIn, mode: mode, name: name, ordering: ordering, page: page, pageSize: pageSize, search: search, stageUuid: stageUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/consent/
     - ConsentStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter consentExpireIn: (query)  (optional)
     - parameter mode: (query) * &#x60;always_require&#x60; - Always Require * &#x60;permanent&#x60; - Permanent * &#x60;expiring&#x60; - Expiring (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter stageUuid: (query)  (optional)
     - returns: RequestBuilder<PaginatedConsentStageList> 
     */
    open class func stagesConsentListWithRequestBuilder(consentExpireIn: String? = nil, mode: Mode_stagesConsentList? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, stageUuid: UUID? = nil) -> RequestBuilder<PaginatedConsentStageList> {
        let localVariablePath = "/stages/consent/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "consent_expire_in": (wrappedValue: consentExpireIn?.encodeToJSON(), isExplode: true),
            "mode": (wrappedValue: mode?.encodeToJSON(), isExplode: true),
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
            "stage_uuid": (wrappedValue: stageUuid?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedConsentStageList>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Consent Stage. 
     - parameter patchedConsentStageRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesConsentPartialUpdate(stageUuid: UUID, patchedConsentStageRequest: PatchedConsentStageRequest? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: ConsentStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesConsentPartialUpdateWithRequestBuilder(stageUuid: stageUuid, patchedConsentStageRequest: patchedConsentStageRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /stages/consent/{stage_uuid}/
     - ConsentStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Consent Stage. 
     - parameter patchedConsentStageRequest: (body)  (optional)
     - returns: RequestBuilder<ConsentStage> 
     */
    open class func stagesConsentPartialUpdateWithRequestBuilder(stageUuid: UUID, patchedConsentStageRequest: PatchedConsentStageRequest? = nil) -> RequestBuilder<ConsentStage> {
        var localVariablePath = "/stages/consent/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedConsentStageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ConsentStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Consent Stage. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesConsentRetrieve(stageUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: ConsentStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesConsentRetrieveWithRequestBuilder(stageUuid: stageUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/consent/{stage_uuid}/
     - ConsentStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Consent Stage. 
     - returns: RequestBuilder<ConsentStage> 
     */
    open class func stagesConsentRetrieveWithRequestBuilder(stageUuid: UUID) -> RequestBuilder<ConsentStage> {
        var localVariablePath = "/stages/consent/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ConsentStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Consent Stage. 
     - parameter consentStageRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesConsentUpdate(stageUuid: UUID, consentStageRequest: ConsentStageRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: ConsentStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesConsentUpdateWithRequestBuilder(stageUuid: stageUuid, consentStageRequest: consentStageRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /stages/consent/{stage_uuid}/
     - ConsentStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Consent Stage. 
     - parameter consentStageRequest: (body)  
     - returns: RequestBuilder<ConsentStage> 
     */
    open class func stagesConsentUpdateWithRequestBuilder(stageUuid: UUID, consentStageRequest: ConsentStageRequest) -> RequestBuilder<ConsentStage> {
        var localVariablePath = "/stages/consent/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: consentStageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ConsentStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Consent Stage. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesConsentUsedByList(stageUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: [UsedBy]?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesConsentUsedByListWithRequestBuilder(stageUuid: stageUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/consent/{stage_uuid}/used_by/
     - Get a list of all objects that use this object
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Consent Stage. 
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func stagesConsentUsedByListWithRequestBuilder(stageUuid: UUID) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/stages/consent/{stage_uuid}/used_by/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter denyStageRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesDenyCreate(denyStageRequest: DenyStageRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: DenyStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesDenyCreateWithRequestBuilder(denyStageRequest: denyStageRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /stages/deny/
     - DenyStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter denyStageRequest: (body)  
     - returns: RequestBuilder<DenyStage> 
     */
    open class func stagesDenyCreateWithRequestBuilder(denyStageRequest: DenyStageRequest) -> RequestBuilder<DenyStage> {
        let localVariablePath = "/stages/deny/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: denyStageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DenyStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Deny Stage. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesDenyDestroy(stageUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesDenyDestroyWithRequestBuilder(stageUuid: stageUuid).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /stages/deny/{stage_uuid}/
     - DenyStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Deny Stage. 
     - returns: RequestBuilder<Void> 
     */
    open class func stagesDenyDestroyWithRequestBuilder(stageUuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/stages/deny/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter stageUuid: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesDenyList(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, stageUuid: UUID? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedDenyStageList?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesDenyListWithRequestBuilder(name: name, ordering: ordering, page: page, pageSize: pageSize, search: search, stageUuid: stageUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/deny/
     - DenyStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter stageUuid: (query)  (optional)
     - returns: RequestBuilder<PaginatedDenyStageList> 
     */
    open class func stagesDenyListWithRequestBuilder(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, stageUuid: UUID? = nil) -> RequestBuilder<PaginatedDenyStageList> {
        let localVariablePath = "/stages/deny/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
            "stage_uuid": (wrappedValue: stageUuid?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedDenyStageList>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Deny Stage. 
     - parameter patchedDenyStageRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesDenyPartialUpdate(stageUuid: UUID, patchedDenyStageRequest: PatchedDenyStageRequest? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: DenyStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesDenyPartialUpdateWithRequestBuilder(stageUuid: stageUuid, patchedDenyStageRequest: patchedDenyStageRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /stages/deny/{stage_uuid}/
     - DenyStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Deny Stage. 
     - parameter patchedDenyStageRequest: (body)  (optional)
     - returns: RequestBuilder<DenyStage> 
     */
    open class func stagesDenyPartialUpdateWithRequestBuilder(stageUuid: UUID, patchedDenyStageRequest: PatchedDenyStageRequest? = nil) -> RequestBuilder<DenyStage> {
        var localVariablePath = "/stages/deny/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedDenyStageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DenyStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Deny Stage. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesDenyRetrieve(stageUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: DenyStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesDenyRetrieveWithRequestBuilder(stageUuid: stageUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/deny/{stage_uuid}/
     - DenyStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Deny Stage. 
     - returns: RequestBuilder<DenyStage> 
     */
    open class func stagesDenyRetrieveWithRequestBuilder(stageUuid: UUID) -> RequestBuilder<DenyStage> {
        var localVariablePath = "/stages/deny/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DenyStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Deny Stage. 
     - parameter denyStageRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesDenyUpdate(stageUuid: UUID, denyStageRequest: DenyStageRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: DenyStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesDenyUpdateWithRequestBuilder(stageUuid: stageUuid, denyStageRequest: denyStageRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /stages/deny/{stage_uuid}/
     - DenyStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Deny Stage. 
     - parameter denyStageRequest: (body)  
     - returns: RequestBuilder<DenyStage> 
     */
    open class func stagesDenyUpdateWithRequestBuilder(stageUuid: UUID, denyStageRequest: DenyStageRequest) -> RequestBuilder<DenyStage> {
        var localVariablePath = "/stages/deny/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: denyStageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DenyStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Deny Stage. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesDenyUsedByList(stageUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: [UsedBy]?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesDenyUsedByListWithRequestBuilder(stageUuid: stageUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/deny/{stage_uuid}/used_by/
     - Get a list of all objects that use this object
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Deny Stage. 
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func stagesDenyUsedByListWithRequestBuilder(stageUuid: UUID) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/stages/deny/{stage_uuid}/used_by/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter dummyStageRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesDummyCreate(dummyStageRequest: DummyStageRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: DummyStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesDummyCreateWithRequestBuilder(dummyStageRequest: dummyStageRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /stages/dummy/
     - DummyStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter dummyStageRequest: (body)  
     - returns: RequestBuilder<DummyStage> 
     */
    open class func stagesDummyCreateWithRequestBuilder(dummyStageRequest: DummyStageRequest) -> RequestBuilder<DummyStage> {
        let localVariablePath = "/stages/dummy/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: dummyStageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DummyStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Dummy Stage. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesDummyDestroy(stageUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesDummyDestroyWithRequestBuilder(stageUuid: stageUuid).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /stages/dummy/{stage_uuid}/
     - DummyStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Dummy Stage. 
     - returns: RequestBuilder<Void> 
     */
    open class func stagesDummyDestroyWithRequestBuilder(stageUuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/stages/dummy/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter stageUuid: (query)  (optional)
     - parameter throwError: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesDummyList(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, stageUuid: UUID? = nil, throwError: Bool? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedDummyStageList?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesDummyListWithRequestBuilder(name: name, ordering: ordering, page: page, pageSize: pageSize, search: search, stageUuid: stageUuid, throwError: throwError).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/dummy/
     - DummyStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter stageUuid: (query)  (optional)
     - parameter throwError: (query)  (optional)
     - returns: RequestBuilder<PaginatedDummyStageList> 
     */
    open class func stagesDummyListWithRequestBuilder(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, stageUuid: UUID? = nil, throwError: Bool? = nil) -> RequestBuilder<PaginatedDummyStageList> {
        let localVariablePath = "/stages/dummy/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
            "stage_uuid": (wrappedValue: stageUuid?.encodeToJSON(), isExplode: true),
            "throw_error": (wrappedValue: throwError?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedDummyStageList>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Dummy Stage. 
     - parameter patchedDummyStageRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesDummyPartialUpdate(stageUuid: UUID, patchedDummyStageRequest: PatchedDummyStageRequest? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: DummyStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesDummyPartialUpdateWithRequestBuilder(stageUuid: stageUuid, patchedDummyStageRequest: patchedDummyStageRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /stages/dummy/{stage_uuid}/
     - DummyStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Dummy Stage. 
     - parameter patchedDummyStageRequest: (body)  (optional)
     - returns: RequestBuilder<DummyStage> 
     */
    open class func stagesDummyPartialUpdateWithRequestBuilder(stageUuid: UUID, patchedDummyStageRequest: PatchedDummyStageRequest? = nil) -> RequestBuilder<DummyStage> {
        var localVariablePath = "/stages/dummy/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedDummyStageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DummyStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Dummy Stage. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesDummyRetrieve(stageUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: DummyStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesDummyRetrieveWithRequestBuilder(stageUuid: stageUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/dummy/{stage_uuid}/
     - DummyStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Dummy Stage. 
     - returns: RequestBuilder<DummyStage> 
     */
    open class func stagesDummyRetrieveWithRequestBuilder(stageUuid: UUID) -> RequestBuilder<DummyStage> {
        var localVariablePath = "/stages/dummy/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DummyStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Dummy Stage. 
     - parameter dummyStageRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesDummyUpdate(stageUuid: UUID, dummyStageRequest: DummyStageRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: DummyStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesDummyUpdateWithRequestBuilder(stageUuid: stageUuid, dummyStageRequest: dummyStageRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /stages/dummy/{stage_uuid}/
     - DummyStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Dummy Stage. 
     - parameter dummyStageRequest: (body)  
     - returns: RequestBuilder<DummyStage> 
     */
    open class func stagesDummyUpdateWithRequestBuilder(stageUuid: UUID, dummyStageRequest: DummyStageRequest) -> RequestBuilder<DummyStage> {
        var localVariablePath = "/stages/dummy/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: dummyStageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DummyStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Dummy Stage. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesDummyUsedByList(stageUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: [UsedBy]?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesDummyUsedByListWithRequestBuilder(stageUuid: stageUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/dummy/{stage_uuid}/used_by/
     - Get a list of all objects that use this object
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Dummy Stage. 
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func stagesDummyUsedByListWithRequestBuilder(stageUuid: UUID) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/stages/dummy/{stage_uuid}/used_by/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter emailStageRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesEmailCreate(emailStageRequest: EmailStageRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: EmailStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesEmailCreateWithRequestBuilder(emailStageRequest: emailStageRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /stages/email/
     - EmailStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter emailStageRequest: (body)  
     - returns: RequestBuilder<EmailStage> 
     */
    open class func stagesEmailCreateWithRequestBuilder(emailStageRequest: EmailStageRequest) -> RequestBuilder<EmailStage> {
        let localVariablePath = "/stages/email/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: emailStageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EmailStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Email Stage. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesEmailDestroy(stageUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesEmailDestroyWithRequestBuilder(stageUuid: stageUuid).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /stages/email/{stage_uuid}/
     - EmailStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Email Stage. 
     - returns: RequestBuilder<Void> 
     */
    open class func stagesEmailDestroyWithRequestBuilder(stageUuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/stages/email/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter activateUserOnSuccess: (query)  (optional)
     - parameter fromAddress: (query)  (optional)
     - parameter host: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter port: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter subject: (query)  (optional)
     - parameter template: (query)  (optional)
     - parameter timeout: (query)  (optional)
     - parameter tokenExpiry: (query)  (optional)
     - parameter useGlobalSettings: (query)  (optional)
     - parameter useSsl: (query)  (optional)
     - parameter useTls: (query)  (optional)
     - parameter username: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesEmailList(activateUserOnSuccess: Bool? = nil, fromAddress: String? = nil, host: String? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, port: Int? = nil, search: String? = nil, subject: String? = nil, template: String? = nil, timeout: Int? = nil, tokenExpiry: Int? = nil, useGlobalSettings: Bool? = nil, useSsl: Bool? = nil, useTls: Bool? = nil, username: String? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedEmailStageList?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesEmailListWithRequestBuilder(activateUserOnSuccess: activateUserOnSuccess, fromAddress: fromAddress, host: host, name: name, ordering: ordering, page: page, pageSize: pageSize, port: port, search: search, subject: subject, template: template, timeout: timeout, tokenExpiry: tokenExpiry, useGlobalSettings: useGlobalSettings, useSsl: useSsl, useTls: useTls, username: username).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/email/
     - EmailStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter activateUserOnSuccess: (query)  (optional)
     - parameter fromAddress: (query)  (optional)
     - parameter host: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter port: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter subject: (query)  (optional)
     - parameter template: (query)  (optional)
     - parameter timeout: (query)  (optional)
     - parameter tokenExpiry: (query)  (optional)
     - parameter useGlobalSettings: (query)  (optional)
     - parameter useSsl: (query)  (optional)
     - parameter useTls: (query)  (optional)
     - parameter username: (query)  (optional)
     - returns: RequestBuilder<PaginatedEmailStageList> 
     */
    open class func stagesEmailListWithRequestBuilder(activateUserOnSuccess: Bool? = nil, fromAddress: String? = nil, host: String? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, port: Int? = nil, search: String? = nil, subject: String? = nil, template: String? = nil, timeout: Int? = nil, tokenExpiry: Int? = nil, useGlobalSettings: Bool? = nil, useSsl: Bool? = nil, useTls: Bool? = nil, username: String? = nil) -> RequestBuilder<PaginatedEmailStageList> {
        let localVariablePath = "/stages/email/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "activate_user_on_success": (wrappedValue: activateUserOnSuccess?.encodeToJSON(), isExplode: true),
            "from_address": (wrappedValue: fromAddress?.encodeToJSON(), isExplode: true),
            "host": (wrappedValue: host?.encodeToJSON(), isExplode: true),
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "port": (wrappedValue: port?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
            "subject": (wrappedValue: subject?.encodeToJSON(), isExplode: true),
            "template": (wrappedValue: template?.encodeToJSON(), isExplode: true),
            "timeout": (wrappedValue: timeout?.encodeToJSON(), isExplode: true),
            "token_expiry": (wrappedValue: tokenExpiry?.encodeToJSON(), isExplode: true),
            "use_global_settings": (wrappedValue: useGlobalSettings?.encodeToJSON(), isExplode: true),
            "use_ssl": (wrappedValue: useSsl?.encodeToJSON(), isExplode: true),
            "use_tls": (wrappedValue: useTls?.encodeToJSON(), isExplode: true),
            "username": (wrappedValue: username?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedEmailStageList>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Email Stage. 
     - parameter patchedEmailStageRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesEmailPartialUpdate(stageUuid: UUID, patchedEmailStageRequest: PatchedEmailStageRequest? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: EmailStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesEmailPartialUpdateWithRequestBuilder(stageUuid: stageUuid, patchedEmailStageRequest: patchedEmailStageRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /stages/email/{stage_uuid}/
     - EmailStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Email Stage. 
     - parameter patchedEmailStageRequest: (body)  (optional)
     - returns: RequestBuilder<EmailStage> 
     */
    open class func stagesEmailPartialUpdateWithRequestBuilder(stageUuid: UUID, patchedEmailStageRequest: PatchedEmailStageRequest? = nil) -> RequestBuilder<EmailStage> {
        var localVariablePath = "/stages/email/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedEmailStageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EmailStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Email Stage. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesEmailRetrieve(stageUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: EmailStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesEmailRetrieveWithRequestBuilder(stageUuid: stageUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/email/{stage_uuid}/
     - EmailStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Email Stage. 
     - returns: RequestBuilder<EmailStage> 
     */
    open class func stagesEmailRetrieveWithRequestBuilder(stageUuid: UUID) -> RequestBuilder<EmailStage> {
        var localVariablePath = "/stages/email/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EmailStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesEmailTemplatesList(apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: [TypeCreate]?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesEmailTemplatesListWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/email/templates/
     - Get all available templates, including custom templates
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - returns: RequestBuilder<[TypeCreate]> 
     */
    open class func stagesEmailTemplatesListWithRequestBuilder() -> RequestBuilder<[TypeCreate]> {
        let localVariablePath = "/stages/email/templates/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[TypeCreate]>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Email Stage. 
     - parameter emailStageRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesEmailUpdate(stageUuid: UUID, emailStageRequest: EmailStageRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: EmailStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesEmailUpdateWithRequestBuilder(stageUuid: stageUuid, emailStageRequest: emailStageRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /stages/email/{stage_uuid}/
     - EmailStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Email Stage. 
     - parameter emailStageRequest: (body)  
     - returns: RequestBuilder<EmailStage> 
     */
    open class func stagesEmailUpdateWithRequestBuilder(stageUuid: UUID, emailStageRequest: EmailStageRequest) -> RequestBuilder<EmailStage> {
        var localVariablePath = "/stages/email/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: emailStageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EmailStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Email Stage. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesEmailUsedByList(stageUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: [UsedBy]?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesEmailUsedByListWithRequestBuilder(stageUuid: stageUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/email/{stage_uuid}/used_by/
     - Get a list of all objects that use this object
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Email Stage. 
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func stagesEmailUsedByListWithRequestBuilder(stageUuid: UUID) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/stages/email/{stage_uuid}/used_by/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter identificationStageRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesIdentificationCreate(identificationStageRequest: IdentificationStageRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: IdentificationStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesIdentificationCreateWithRequestBuilder(identificationStageRequest: identificationStageRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /stages/identification/
     - IdentificationStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter identificationStageRequest: (body)  
     - returns: RequestBuilder<IdentificationStage> 
     */
    open class func stagesIdentificationCreateWithRequestBuilder(identificationStageRequest: IdentificationStageRequest) -> RequestBuilder<IdentificationStage> {
        let localVariablePath = "/stages/identification/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: identificationStageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<IdentificationStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Identification Stage. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesIdentificationDestroy(stageUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesIdentificationDestroyWithRequestBuilder(stageUuid: stageUuid).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /stages/identification/{stage_uuid}/
     - IdentificationStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Identification Stage. 
     - returns: RequestBuilder<Void> 
     */
    open class func stagesIdentificationDestroyWithRequestBuilder(stageUuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/stages/identification/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter caseInsensitiveMatching: (query)  (optional)
     - parameter enrollmentFlow: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter passwordStage: (query)  (optional)
     - parameter passwordlessFlow: (query)  (optional)
     - parameter recoveryFlow: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter showMatchedUser: (query)  (optional)
     - parameter showSourceLabels: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesIdentificationList(caseInsensitiveMatching: Bool? = nil, enrollmentFlow: UUID? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, passwordStage: UUID? = nil, passwordlessFlow: UUID? = nil, recoveryFlow: UUID? = nil, search: String? = nil, showMatchedUser: Bool? = nil, showSourceLabels: Bool? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedIdentificationStageList?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesIdentificationListWithRequestBuilder(caseInsensitiveMatching: caseInsensitiveMatching, enrollmentFlow: enrollmentFlow, name: name, ordering: ordering, page: page, pageSize: pageSize, passwordStage: passwordStage, passwordlessFlow: passwordlessFlow, recoveryFlow: recoveryFlow, search: search, showMatchedUser: showMatchedUser, showSourceLabels: showSourceLabels).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/identification/
     - IdentificationStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter caseInsensitiveMatching: (query)  (optional)
     - parameter enrollmentFlow: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter passwordStage: (query)  (optional)
     - parameter passwordlessFlow: (query)  (optional)
     - parameter recoveryFlow: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter showMatchedUser: (query)  (optional)
     - parameter showSourceLabels: (query)  (optional)
     - returns: RequestBuilder<PaginatedIdentificationStageList> 
     */
    open class func stagesIdentificationListWithRequestBuilder(caseInsensitiveMatching: Bool? = nil, enrollmentFlow: UUID? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, passwordStage: UUID? = nil, passwordlessFlow: UUID? = nil, recoveryFlow: UUID? = nil, search: String? = nil, showMatchedUser: Bool? = nil, showSourceLabels: Bool? = nil) -> RequestBuilder<PaginatedIdentificationStageList> {
        let localVariablePath = "/stages/identification/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "case_insensitive_matching": (wrappedValue: caseInsensitiveMatching?.encodeToJSON(), isExplode: true),
            "enrollment_flow": (wrappedValue: enrollmentFlow?.encodeToJSON(), isExplode: true),
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "password_stage": (wrappedValue: passwordStage?.encodeToJSON(), isExplode: true),
            "passwordless_flow": (wrappedValue: passwordlessFlow?.encodeToJSON(), isExplode: true),
            "recovery_flow": (wrappedValue: recoveryFlow?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
            "show_matched_user": (wrappedValue: showMatchedUser?.encodeToJSON(), isExplode: true),
            "show_source_labels": (wrappedValue: showSourceLabels?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedIdentificationStageList>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Identification Stage. 
     - parameter patchedIdentificationStageRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesIdentificationPartialUpdate(stageUuid: UUID, patchedIdentificationStageRequest: PatchedIdentificationStageRequest? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: IdentificationStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesIdentificationPartialUpdateWithRequestBuilder(stageUuid: stageUuid, patchedIdentificationStageRequest: patchedIdentificationStageRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /stages/identification/{stage_uuid}/
     - IdentificationStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Identification Stage. 
     - parameter patchedIdentificationStageRequest: (body)  (optional)
     - returns: RequestBuilder<IdentificationStage> 
     */
    open class func stagesIdentificationPartialUpdateWithRequestBuilder(stageUuid: UUID, patchedIdentificationStageRequest: PatchedIdentificationStageRequest? = nil) -> RequestBuilder<IdentificationStage> {
        var localVariablePath = "/stages/identification/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedIdentificationStageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<IdentificationStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Identification Stage. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesIdentificationRetrieve(stageUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: IdentificationStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesIdentificationRetrieveWithRequestBuilder(stageUuid: stageUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/identification/{stage_uuid}/
     - IdentificationStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Identification Stage. 
     - returns: RequestBuilder<IdentificationStage> 
     */
    open class func stagesIdentificationRetrieveWithRequestBuilder(stageUuid: UUID) -> RequestBuilder<IdentificationStage> {
        var localVariablePath = "/stages/identification/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<IdentificationStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Identification Stage. 
     - parameter identificationStageRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesIdentificationUpdate(stageUuid: UUID, identificationStageRequest: IdentificationStageRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: IdentificationStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesIdentificationUpdateWithRequestBuilder(stageUuid: stageUuid, identificationStageRequest: identificationStageRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /stages/identification/{stage_uuid}/
     - IdentificationStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Identification Stage. 
     - parameter identificationStageRequest: (body)  
     - returns: RequestBuilder<IdentificationStage> 
     */
    open class func stagesIdentificationUpdateWithRequestBuilder(stageUuid: UUID, identificationStageRequest: IdentificationStageRequest) -> RequestBuilder<IdentificationStage> {
        var localVariablePath = "/stages/identification/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: identificationStageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<IdentificationStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Identification Stage. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesIdentificationUsedByList(stageUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: [UsedBy]?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesIdentificationUsedByListWithRequestBuilder(stageUuid: stageUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/identification/{stage_uuid}/used_by/
     - Get a list of all objects that use this object
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Identification Stage. 
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func stagesIdentificationUsedByListWithRequestBuilder(stageUuid: UUID) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/stages/identification/{stage_uuid}/used_by/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter invitationRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesInvitationInvitationsCreate(invitationRequest: InvitationRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Invitation?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesInvitationInvitationsCreateWithRequestBuilder(invitationRequest: invitationRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /stages/invitation/invitations/
     - Invitation Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter invitationRequest: (body)  
     - returns: RequestBuilder<Invitation> 
     */
    open class func stagesInvitationInvitationsCreateWithRequestBuilder(invitationRequest: InvitationRequest) -> RequestBuilder<Invitation> {
        let localVariablePath = "/stages/invitation/invitations/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: invitationRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Invitation>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter inviteUuid: (path) A UUID string identifying this Invitation. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesInvitationInvitationsDestroy(inviteUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesInvitationInvitationsDestroyWithRequestBuilder(inviteUuid: inviteUuid).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /stages/invitation/invitations/{invite_uuid}/
     - Invitation Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter inviteUuid: (path) A UUID string identifying this Invitation. 
     - returns: RequestBuilder<Void> 
     */
    open class func stagesInvitationInvitationsDestroyWithRequestBuilder(inviteUuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/stages/invitation/invitations/{invite_uuid}/"
        let inviteUuidPreEscape = "\(APIHelper.mapValueToPathItem(inviteUuid))"
        let inviteUuidPostEscape = inviteUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{invite_uuid}", with: inviteUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter createdByUsername: (query)  (optional)
     - parameter expires: (query)  (optional)
     - parameter flowSlug: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesInvitationInvitationsList(createdByUsername: String? = nil, expires: Date? = nil, flowSlug: String? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedInvitationList?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesInvitationInvitationsListWithRequestBuilder(createdByUsername: createdByUsername, expires: expires, flowSlug: flowSlug, name: name, ordering: ordering, page: page, pageSize: pageSize, search: search).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/invitation/invitations/
     - Invitation Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter createdByUsername: (query)  (optional)
     - parameter expires: (query)  (optional)
     - parameter flowSlug: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - returns: RequestBuilder<PaginatedInvitationList> 
     */
    open class func stagesInvitationInvitationsListWithRequestBuilder(createdByUsername: String? = nil, expires: Date? = nil, flowSlug: String? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil) -> RequestBuilder<PaginatedInvitationList> {
        let localVariablePath = "/stages/invitation/invitations/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "created_by__username": (wrappedValue: createdByUsername?.encodeToJSON(), isExplode: true),
            "expires": (wrappedValue: expires?.encodeToJSON(), isExplode: true),
            "flow__slug": (wrappedValue: flowSlug?.encodeToJSON(), isExplode: true),
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedInvitationList>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter inviteUuid: (path) A UUID string identifying this Invitation. 
     - parameter patchedInvitationRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesInvitationInvitationsPartialUpdate(inviteUuid: UUID, patchedInvitationRequest: PatchedInvitationRequest? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Invitation?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesInvitationInvitationsPartialUpdateWithRequestBuilder(inviteUuid: inviteUuid, patchedInvitationRequest: patchedInvitationRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /stages/invitation/invitations/{invite_uuid}/
     - Invitation Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter inviteUuid: (path) A UUID string identifying this Invitation. 
     - parameter patchedInvitationRequest: (body)  (optional)
     - returns: RequestBuilder<Invitation> 
     */
    open class func stagesInvitationInvitationsPartialUpdateWithRequestBuilder(inviteUuid: UUID, patchedInvitationRequest: PatchedInvitationRequest? = nil) -> RequestBuilder<Invitation> {
        var localVariablePath = "/stages/invitation/invitations/{invite_uuid}/"
        let inviteUuidPreEscape = "\(APIHelper.mapValueToPathItem(inviteUuid))"
        let inviteUuidPostEscape = inviteUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{invite_uuid}", with: inviteUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedInvitationRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Invitation>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter inviteUuid: (path) A UUID string identifying this Invitation. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesInvitationInvitationsRetrieve(inviteUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Invitation?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesInvitationInvitationsRetrieveWithRequestBuilder(inviteUuid: inviteUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/invitation/invitations/{invite_uuid}/
     - Invitation Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter inviteUuid: (path) A UUID string identifying this Invitation. 
     - returns: RequestBuilder<Invitation> 
     */
    open class func stagesInvitationInvitationsRetrieveWithRequestBuilder(inviteUuid: UUID) -> RequestBuilder<Invitation> {
        var localVariablePath = "/stages/invitation/invitations/{invite_uuid}/"
        let inviteUuidPreEscape = "\(APIHelper.mapValueToPathItem(inviteUuid))"
        let inviteUuidPostEscape = inviteUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{invite_uuid}", with: inviteUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Invitation>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter inviteUuid: (path) A UUID string identifying this Invitation. 
     - parameter invitationRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesInvitationInvitationsUpdate(inviteUuid: UUID, invitationRequest: InvitationRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Invitation?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesInvitationInvitationsUpdateWithRequestBuilder(inviteUuid: inviteUuid, invitationRequest: invitationRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /stages/invitation/invitations/{invite_uuid}/
     - Invitation Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter inviteUuid: (path) A UUID string identifying this Invitation. 
     - parameter invitationRequest: (body)  
     - returns: RequestBuilder<Invitation> 
     */
    open class func stagesInvitationInvitationsUpdateWithRequestBuilder(inviteUuid: UUID, invitationRequest: InvitationRequest) -> RequestBuilder<Invitation> {
        var localVariablePath = "/stages/invitation/invitations/{invite_uuid}/"
        let inviteUuidPreEscape = "\(APIHelper.mapValueToPathItem(inviteUuid))"
        let inviteUuidPostEscape = inviteUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{invite_uuid}", with: inviteUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: invitationRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Invitation>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter inviteUuid: (path) A UUID string identifying this Invitation. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesInvitationInvitationsUsedByList(inviteUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: [UsedBy]?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesInvitationInvitationsUsedByListWithRequestBuilder(inviteUuid: inviteUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/invitation/invitations/{invite_uuid}/used_by/
     - Get a list of all objects that use this object
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter inviteUuid: (path) A UUID string identifying this Invitation. 
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func stagesInvitationInvitationsUsedByListWithRequestBuilder(inviteUuid: UUID) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/stages/invitation/invitations/{invite_uuid}/used_by/"
        let inviteUuidPreEscape = "\(APIHelper.mapValueToPathItem(inviteUuid))"
        let inviteUuidPostEscape = inviteUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{invite_uuid}", with: inviteUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter invitationStageRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesInvitationStagesCreate(invitationStageRequest: InvitationStageRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: InvitationStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesInvitationStagesCreateWithRequestBuilder(invitationStageRequest: invitationStageRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /stages/invitation/stages/
     - InvitationStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter invitationStageRequest: (body)  
     - returns: RequestBuilder<InvitationStage> 
     */
    open class func stagesInvitationStagesCreateWithRequestBuilder(invitationStageRequest: InvitationStageRequest) -> RequestBuilder<InvitationStage> {
        let localVariablePath = "/stages/invitation/stages/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: invitationStageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InvitationStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Invitation Stage. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesInvitationStagesDestroy(stageUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesInvitationStagesDestroyWithRequestBuilder(stageUuid: stageUuid).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /stages/invitation/stages/{stage_uuid}/
     - InvitationStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Invitation Stage. 
     - returns: RequestBuilder<Void> 
     */
    open class func stagesInvitationStagesDestroyWithRequestBuilder(stageUuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/stages/invitation/stages/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter continueFlowWithoutInvitation: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter noFlows: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter stageUuid: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesInvitationStagesList(continueFlowWithoutInvitation: Bool? = nil, name: String? = nil, noFlows: Bool? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, stageUuid: UUID? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedInvitationStageList?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesInvitationStagesListWithRequestBuilder(continueFlowWithoutInvitation: continueFlowWithoutInvitation, name: name, noFlows: noFlows, ordering: ordering, page: page, pageSize: pageSize, search: search, stageUuid: stageUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/invitation/stages/
     - InvitationStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter continueFlowWithoutInvitation: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter noFlows: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter stageUuid: (query)  (optional)
     - returns: RequestBuilder<PaginatedInvitationStageList> 
     */
    open class func stagesInvitationStagesListWithRequestBuilder(continueFlowWithoutInvitation: Bool? = nil, name: String? = nil, noFlows: Bool? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, stageUuid: UUID? = nil) -> RequestBuilder<PaginatedInvitationStageList> {
        let localVariablePath = "/stages/invitation/stages/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "continue_flow_without_invitation": (wrappedValue: continueFlowWithoutInvitation?.encodeToJSON(), isExplode: true),
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "no_flows": (wrappedValue: noFlows?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
            "stage_uuid": (wrappedValue: stageUuid?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedInvitationStageList>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Invitation Stage. 
     - parameter patchedInvitationStageRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesInvitationStagesPartialUpdate(stageUuid: UUID, patchedInvitationStageRequest: PatchedInvitationStageRequest? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: InvitationStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesInvitationStagesPartialUpdateWithRequestBuilder(stageUuid: stageUuid, patchedInvitationStageRequest: patchedInvitationStageRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /stages/invitation/stages/{stage_uuid}/
     - InvitationStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Invitation Stage. 
     - parameter patchedInvitationStageRequest: (body)  (optional)
     - returns: RequestBuilder<InvitationStage> 
     */
    open class func stagesInvitationStagesPartialUpdateWithRequestBuilder(stageUuid: UUID, patchedInvitationStageRequest: PatchedInvitationStageRequest? = nil) -> RequestBuilder<InvitationStage> {
        var localVariablePath = "/stages/invitation/stages/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedInvitationStageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InvitationStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Invitation Stage. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesInvitationStagesRetrieve(stageUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: InvitationStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesInvitationStagesRetrieveWithRequestBuilder(stageUuid: stageUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/invitation/stages/{stage_uuid}/
     - InvitationStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Invitation Stage. 
     - returns: RequestBuilder<InvitationStage> 
     */
    open class func stagesInvitationStagesRetrieveWithRequestBuilder(stageUuid: UUID) -> RequestBuilder<InvitationStage> {
        var localVariablePath = "/stages/invitation/stages/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InvitationStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Invitation Stage. 
     - parameter invitationStageRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesInvitationStagesUpdate(stageUuid: UUID, invitationStageRequest: InvitationStageRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: InvitationStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesInvitationStagesUpdateWithRequestBuilder(stageUuid: stageUuid, invitationStageRequest: invitationStageRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /stages/invitation/stages/{stage_uuid}/
     - InvitationStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Invitation Stage. 
     - parameter invitationStageRequest: (body)  
     - returns: RequestBuilder<InvitationStage> 
     */
    open class func stagesInvitationStagesUpdateWithRequestBuilder(stageUuid: UUID, invitationStageRequest: InvitationStageRequest) -> RequestBuilder<InvitationStage> {
        var localVariablePath = "/stages/invitation/stages/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: invitationStageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InvitationStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Invitation Stage. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesInvitationStagesUsedByList(stageUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: [UsedBy]?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesInvitationStagesUsedByListWithRequestBuilder(stageUuid: stageUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/invitation/stages/{stage_uuid}/used_by/
     - Get a list of all objects that use this object
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Invitation Stage. 
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func stagesInvitationStagesUsedByListWithRequestBuilder(stageUuid: UUID) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/stages/invitation/stages/{stage_uuid}/used_by/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter passwordStageRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesPasswordCreate(passwordStageRequest: PasswordStageRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PasswordStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesPasswordCreateWithRequestBuilder(passwordStageRequest: passwordStageRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /stages/password/
     - PasswordStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter passwordStageRequest: (body)  
     - returns: RequestBuilder<PasswordStage> 
     */
    open class func stagesPasswordCreateWithRequestBuilder(passwordStageRequest: PasswordStageRequest) -> RequestBuilder<PasswordStage> {
        let localVariablePath = "/stages/password/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: passwordStageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PasswordStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Password Stage. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesPasswordDestroy(stageUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesPasswordDestroyWithRequestBuilder(stageUuid: stageUuid).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /stages/password/{stage_uuid}/
     - PasswordStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Password Stage. 
     - returns: RequestBuilder<Void> 
     */
    open class func stagesPasswordDestroyWithRequestBuilder(stageUuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/stages/password/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter configureFlow: (query)  (optional)
     - parameter failedAttemptsBeforeCancel: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesPasswordList(configureFlow: UUID? = nil, failedAttemptsBeforeCancel: Int? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedPasswordStageList?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesPasswordListWithRequestBuilder(configureFlow: configureFlow, failedAttemptsBeforeCancel: failedAttemptsBeforeCancel, name: name, ordering: ordering, page: page, pageSize: pageSize, search: search).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/password/
     - PasswordStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter configureFlow: (query)  (optional)
     - parameter failedAttemptsBeforeCancel: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - returns: RequestBuilder<PaginatedPasswordStageList> 
     */
    open class func stagesPasswordListWithRequestBuilder(configureFlow: UUID? = nil, failedAttemptsBeforeCancel: Int? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil) -> RequestBuilder<PaginatedPasswordStageList> {
        let localVariablePath = "/stages/password/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "configure_flow": (wrappedValue: configureFlow?.encodeToJSON(), isExplode: true),
            "failed_attempts_before_cancel": (wrappedValue: failedAttemptsBeforeCancel?.encodeToJSON(), isExplode: true),
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedPasswordStageList>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Password Stage. 
     - parameter patchedPasswordStageRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesPasswordPartialUpdate(stageUuid: UUID, patchedPasswordStageRequest: PatchedPasswordStageRequest? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PasswordStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesPasswordPartialUpdateWithRequestBuilder(stageUuid: stageUuid, patchedPasswordStageRequest: patchedPasswordStageRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /stages/password/{stage_uuid}/
     - PasswordStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Password Stage. 
     - parameter patchedPasswordStageRequest: (body)  (optional)
     - returns: RequestBuilder<PasswordStage> 
     */
    open class func stagesPasswordPartialUpdateWithRequestBuilder(stageUuid: UUID, patchedPasswordStageRequest: PatchedPasswordStageRequest? = nil) -> RequestBuilder<PasswordStage> {
        var localVariablePath = "/stages/password/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedPasswordStageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PasswordStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Password Stage. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesPasswordRetrieve(stageUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PasswordStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesPasswordRetrieveWithRequestBuilder(stageUuid: stageUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/password/{stage_uuid}/
     - PasswordStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Password Stage. 
     - returns: RequestBuilder<PasswordStage> 
     */
    open class func stagesPasswordRetrieveWithRequestBuilder(stageUuid: UUID) -> RequestBuilder<PasswordStage> {
        var localVariablePath = "/stages/password/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PasswordStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Password Stage. 
     - parameter passwordStageRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesPasswordUpdate(stageUuid: UUID, passwordStageRequest: PasswordStageRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PasswordStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesPasswordUpdateWithRequestBuilder(stageUuid: stageUuid, passwordStageRequest: passwordStageRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /stages/password/{stage_uuid}/
     - PasswordStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Password Stage. 
     - parameter passwordStageRequest: (body)  
     - returns: RequestBuilder<PasswordStage> 
     */
    open class func stagesPasswordUpdateWithRequestBuilder(stageUuid: UUID, passwordStageRequest: PasswordStageRequest) -> RequestBuilder<PasswordStage> {
        var localVariablePath = "/stages/password/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: passwordStageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PasswordStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Password Stage. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesPasswordUsedByList(stageUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: [UsedBy]?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesPasswordUsedByListWithRequestBuilder(stageUuid: stageUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/password/{stage_uuid}/used_by/
     - Get a list of all objects that use this object
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Password Stage. 
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func stagesPasswordUsedByListWithRequestBuilder(stageUuid: UUID) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/stages/password/{stage_uuid}/used_by/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter promptRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesPromptPromptsCreate(promptRequest: PromptRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Prompt?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesPromptPromptsCreateWithRequestBuilder(promptRequest: promptRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /stages/prompt/prompts/
     - Prompt Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter promptRequest: (body)  
     - returns: RequestBuilder<Prompt> 
     */
    open class func stagesPromptPromptsCreateWithRequestBuilder(promptRequest: PromptRequest) -> RequestBuilder<Prompt> {
        let localVariablePath = "/stages/prompt/prompts/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: promptRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Prompt>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter promptUuid: (path) A UUID string identifying this Prompt. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesPromptPromptsDestroy(promptUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesPromptPromptsDestroyWithRequestBuilder(promptUuid: promptUuid).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /stages/prompt/prompts/{prompt_uuid}/
     - Prompt Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter promptUuid: (path) A UUID string identifying this Prompt. 
     - returns: RequestBuilder<Void> 
     */
    open class func stagesPromptPromptsDestroyWithRequestBuilder(promptUuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/stages/prompt/prompts/{prompt_uuid}/"
        let promptUuidPreEscape = "\(APIHelper.mapValueToPathItem(promptUuid))"
        let promptUuidPostEscape = promptUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{prompt_uuid}", with: promptUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_stagesPromptPromptsList: String, CaseIterable {
        case akLocale = "ak-locale"
        case checkbox = "checkbox"
        case date = "date"
        case dateTime = "date-time"
        case dropdown = "dropdown"
        case email = "email"
        case file = "file"
        case hidden = "hidden"
        case number = "number"
        case password = "password"
        case radioButtonGroup = "radio-button-group"
        case separator = "separator"
        case _static = "static"
        case text = "text"
        case textArea = "text_area"
        case textAreaReadOnly = "text_area_read_only"
        case textReadOnly = "text_read_only"
        case username = "username"
    }

    /**

     - parameter fieldKey: (query)  (optional)
     - parameter label: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter placeholder: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter type: (query) * &#x60;text&#x60; - Text: Simple Text input * &#x60;text_area&#x60; - Text area: Multiline Text Input. * &#x60;text_read_only&#x60; - Text (read-only): Simple Text input, but cannot be edited. * &#x60;text_area_read_only&#x60; - Text area (read-only): Multiline Text input, but cannot be edited. * &#x60;username&#x60; - Username: Same as Text input, but checks for and prevents duplicate usernames. * &#x60;email&#x60; - Email: Text field with Email type. * &#x60;password&#x60; - Password: Masked input, multiple inputs of this type on the same prompt need to be identical. * &#x60;number&#x60; - Number * &#x60;checkbox&#x60; - Checkbox * &#x60;radio-button-group&#x60; - Fixed choice field rendered as a group of radio buttons. * &#x60;dropdown&#x60; - Fixed choice field rendered as a dropdown. * &#x60;date&#x60; - Date * &#x60;date-time&#x60; - Date Time * &#x60;file&#x60; - File: File upload for arbitrary files. File content will be available in flow context as data-URI * &#x60;separator&#x60; - Separator: Static Separator Line * &#x60;hidden&#x60; - Hidden: Hidden field, can be used to insert data into form. * &#x60;static&#x60; - Static: Static value, displayed as-is. * &#x60;ak-locale&#x60; - authentik: Selection of locales authentik supports (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesPromptPromptsList(fieldKey: String? = nil, label: String? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, placeholder: String? = nil, search: String? = nil, type: ModelType_stagesPromptPromptsList? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedPromptList?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesPromptPromptsListWithRequestBuilder(fieldKey: fieldKey, label: label, name: name, ordering: ordering, page: page, pageSize: pageSize, placeholder: placeholder, search: search, type: type).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/prompt/prompts/
     - Prompt Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter fieldKey: (query)  (optional)
     - parameter label: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter placeholder: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter type: (query) * &#x60;text&#x60; - Text: Simple Text input * &#x60;text_area&#x60; - Text area: Multiline Text Input. * &#x60;text_read_only&#x60; - Text (read-only): Simple Text input, but cannot be edited. * &#x60;text_area_read_only&#x60; - Text area (read-only): Multiline Text input, but cannot be edited. * &#x60;username&#x60; - Username: Same as Text input, but checks for and prevents duplicate usernames. * &#x60;email&#x60; - Email: Text field with Email type. * &#x60;password&#x60; - Password: Masked input, multiple inputs of this type on the same prompt need to be identical. * &#x60;number&#x60; - Number * &#x60;checkbox&#x60; - Checkbox * &#x60;radio-button-group&#x60; - Fixed choice field rendered as a group of radio buttons. * &#x60;dropdown&#x60; - Fixed choice field rendered as a dropdown. * &#x60;date&#x60; - Date * &#x60;date-time&#x60; - Date Time * &#x60;file&#x60; - File: File upload for arbitrary files. File content will be available in flow context as data-URI * &#x60;separator&#x60; - Separator: Static Separator Line * &#x60;hidden&#x60; - Hidden: Hidden field, can be used to insert data into form. * &#x60;static&#x60; - Static: Static value, displayed as-is. * &#x60;ak-locale&#x60; - authentik: Selection of locales authentik supports (optional)
     - returns: RequestBuilder<PaginatedPromptList> 
     */
    open class func stagesPromptPromptsListWithRequestBuilder(fieldKey: String? = nil, label: String? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, placeholder: String? = nil, search: String? = nil, type: ModelType_stagesPromptPromptsList? = nil) -> RequestBuilder<PaginatedPromptList> {
        let localVariablePath = "/stages/prompt/prompts/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "field_key": (wrappedValue: fieldKey?.encodeToJSON(), isExplode: true),
            "label": (wrappedValue: label?.encodeToJSON(), isExplode: true),
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "placeholder": (wrappedValue: placeholder?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
            "type": (wrappedValue: type?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedPromptList>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter promptUuid: (path) A UUID string identifying this Prompt. 
     - parameter patchedPromptRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesPromptPromptsPartialUpdate(promptUuid: UUID, patchedPromptRequest: PatchedPromptRequest? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Prompt?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesPromptPromptsPartialUpdateWithRequestBuilder(promptUuid: promptUuid, patchedPromptRequest: patchedPromptRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /stages/prompt/prompts/{prompt_uuid}/
     - Prompt Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter promptUuid: (path) A UUID string identifying this Prompt. 
     - parameter patchedPromptRequest: (body)  (optional)
     - returns: RequestBuilder<Prompt> 
     */
    open class func stagesPromptPromptsPartialUpdateWithRequestBuilder(promptUuid: UUID, patchedPromptRequest: PatchedPromptRequest? = nil) -> RequestBuilder<Prompt> {
        var localVariablePath = "/stages/prompt/prompts/{prompt_uuid}/"
        let promptUuidPreEscape = "\(APIHelper.mapValueToPathItem(promptUuid))"
        let promptUuidPostEscape = promptUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{prompt_uuid}", with: promptUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedPromptRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Prompt>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter promptRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesPromptPromptsPreviewCreate(promptRequest: PromptRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PromptChallenge?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesPromptPromptsPreviewCreateWithRequestBuilder(promptRequest: promptRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /stages/prompt/prompts/preview/
     - Preview a prompt as a challenge, just like a flow would receive
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter promptRequest: (body)  
     - returns: RequestBuilder<PromptChallenge> 
     */
    open class func stagesPromptPromptsPreviewCreateWithRequestBuilder(promptRequest: PromptRequest) -> RequestBuilder<PromptChallenge> {
        let localVariablePath = "/stages/prompt/prompts/preview/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: promptRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PromptChallenge>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter promptUuid: (path) A UUID string identifying this Prompt. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesPromptPromptsRetrieve(promptUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Prompt?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesPromptPromptsRetrieveWithRequestBuilder(promptUuid: promptUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/prompt/prompts/{prompt_uuid}/
     - Prompt Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter promptUuid: (path) A UUID string identifying this Prompt. 
     - returns: RequestBuilder<Prompt> 
     */
    open class func stagesPromptPromptsRetrieveWithRequestBuilder(promptUuid: UUID) -> RequestBuilder<Prompt> {
        var localVariablePath = "/stages/prompt/prompts/{prompt_uuid}/"
        let promptUuidPreEscape = "\(APIHelper.mapValueToPathItem(promptUuid))"
        let promptUuidPostEscape = promptUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{prompt_uuid}", with: promptUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Prompt>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter promptUuid: (path) A UUID string identifying this Prompt. 
     - parameter promptRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesPromptPromptsUpdate(promptUuid: UUID, promptRequest: PromptRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Prompt?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesPromptPromptsUpdateWithRequestBuilder(promptUuid: promptUuid, promptRequest: promptRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /stages/prompt/prompts/{prompt_uuid}/
     - Prompt Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter promptUuid: (path) A UUID string identifying this Prompt. 
     - parameter promptRequest: (body)  
     - returns: RequestBuilder<Prompt> 
     */
    open class func stagesPromptPromptsUpdateWithRequestBuilder(promptUuid: UUID, promptRequest: PromptRequest) -> RequestBuilder<Prompt> {
        var localVariablePath = "/stages/prompt/prompts/{prompt_uuid}/"
        let promptUuidPreEscape = "\(APIHelper.mapValueToPathItem(promptUuid))"
        let promptUuidPostEscape = promptUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{prompt_uuid}", with: promptUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: promptRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Prompt>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter promptUuid: (path) A UUID string identifying this Prompt. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesPromptPromptsUsedByList(promptUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: [UsedBy]?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesPromptPromptsUsedByListWithRequestBuilder(promptUuid: promptUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/prompt/prompts/{prompt_uuid}/used_by/
     - Get a list of all objects that use this object
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter promptUuid: (path) A UUID string identifying this Prompt. 
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func stagesPromptPromptsUsedByListWithRequestBuilder(promptUuid: UUID) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/stages/prompt/prompts/{prompt_uuid}/used_by/"
        let promptUuidPreEscape = "\(APIHelper.mapValueToPathItem(promptUuid))"
        let promptUuidPostEscape = promptUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{prompt_uuid}", with: promptUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter promptStageRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesPromptStagesCreate(promptStageRequest: PromptStageRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PromptStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesPromptStagesCreateWithRequestBuilder(promptStageRequest: promptStageRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /stages/prompt/stages/
     - PromptStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter promptStageRequest: (body)  
     - returns: RequestBuilder<PromptStage> 
     */
    open class func stagesPromptStagesCreateWithRequestBuilder(promptStageRequest: PromptStageRequest) -> RequestBuilder<PromptStage> {
        let localVariablePath = "/stages/prompt/stages/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: promptStageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PromptStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Prompt Stage. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesPromptStagesDestroy(stageUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesPromptStagesDestroyWithRequestBuilder(stageUuid: stageUuid).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /stages/prompt/stages/{stage_uuid}/
     - PromptStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Prompt Stage. 
     - returns: RequestBuilder<Void> 
     */
    open class func stagesPromptStagesDestroyWithRequestBuilder(stageUuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/stages/prompt/stages/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter fields: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter stageUuid: (query)  (optional)
     - parameter validationPolicies: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesPromptStagesList(fields: [UUID]? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, stageUuid: UUID? = nil, validationPolicies: [UUID]? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedPromptStageList?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesPromptStagesListWithRequestBuilder(fields: fields, name: name, ordering: ordering, page: page, pageSize: pageSize, search: search, stageUuid: stageUuid, validationPolicies: validationPolicies).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/prompt/stages/
     - PromptStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter fields: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter stageUuid: (query)  (optional)
     - parameter validationPolicies: (query)  (optional)
     - returns: RequestBuilder<PaginatedPromptStageList> 
     */
    open class func stagesPromptStagesListWithRequestBuilder(fields: [UUID]? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, stageUuid: UUID? = nil, validationPolicies: [UUID]? = nil) -> RequestBuilder<PaginatedPromptStageList> {
        let localVariablePath = "/stages/prompt/stages/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields": (wrappedValue: fields?.encodeToJSON(), isExplode: true),
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
            "stage_uuid": (wrappedValue: stageUuid?.encodeToJSON(), isExplode: true),
            "validation_policies": (wrappedValue: validationPolicies?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedPromptStageList>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Prompt Stage. 
     - parameter patchedPromptStageRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesPromptStagesPartialUpdate(stageUuid: UUID, patchedPromptStageRequest: PatchedPromptStageRequest? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PromptStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesPromptStagesPartialUpdateWithRequestBuilder(stageUuid: stageUuid, patchedPromptStageRequest: patchedPromptStageRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /stages/prompt/stages/{stage_uuid}/
     - PromptStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Prompt Stage. 
     - parameter patchedPromptStageRequest: (body)  (optional)
     - returns: RequestBuilder<PromptStage> 
     */
    open class func stagesPromptStagesPartialUpdateWithRequestBuilder(stageUuid: UUID, patchedPromptStageRequest: PatchedPromptStageRequest? = nil) -> RequestBuilder<PromptStage> {
        var localVariablePath = "/stages/prompt/stages/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedPromptStageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PromptStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Prompt Stage. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesPromptStagesRetrieve(stageUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PromptStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesPromptStagesRetrieveWithRequestBuilder(stageUuid: stageUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/prompt/stages/{stage_uuid}/
     - PromptStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Prompt Stage. 
     - returns: RequestBuilder<PromptStage> 
     */
    open class func stagesPromptStagesRetrieveWithRequestBuilder(stageUuid: UUID) -> RequestBuilder<PromptStage> {
        var localVariablePath = "/stages/prompt/stages/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PromptStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Prompt Stage. 
     - parameter promptStageRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesPromptStagesUpdate(stageUuid: UUID, promptStageRequest: PromptStageRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PromptStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesPromptStagesUpdateWithRequestBuilder(stageUuid: stageUuid, promptStageRequest: promptStageRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /stages/prompt/stages/{stage_uuid}/
     - PromptStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Prompt Stage. 
     - parameter promptStageRequest: (body)  
     - returns: RequestBuilder<PromptStage> 
     */
    open class func stagesPromptStagesUpdateWithRequestBuilder(stageUuid: UUID, promptStageRequest: PromptStageRequest) -> RequestBuilder<PromptStage> {
        var localVariablePath = "/stages/prompt/stages/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: promptStageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PromptStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this Prompt Stage. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesPromptStagesUsedByList(stageUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: [UsedBy]?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesPromptStagesUsedByListWithRequestBuilder(stageUuid: stageUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/prompt/stages/{stage_uuid}/used_by/
     - Get a list of all objects that use this object
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this Prompt Stage. 
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func stagesPromptStagesUsedByListWithRequestBuilder(stageUuid: UUID) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/stages/prompt/stages/{stage_uuid}/used_by/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter userDeleteStageRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesUserDeleteCreate(userDeleteStageRequest: UserDeleteStageRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: UserDeleteStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesUserDeleteCreateWithRequestBuilder(userDeleteStageRequest: userDeleteStageRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /stages/user_delete/
     - UserDeleteStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter userDeleteStageRequest: (body)  
     - returns: RequestBuilder<UserDeleteStage> 
     */
    open class func stagesUserDeleteCreateWithRequestBuilder(userDeleteStageRequest: UserDeleteStageRequest) -> RequestBuilder<UserDeleteStage> {
        let localVariablePath = "/stages/user_delete/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userDeleteStageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserDeleteStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this User Delete Stage. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesUserDeleteDestroy(stageUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesUserDeleteDestroyWithRequestBuilder(stageUuid: stageUuid).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /stages/user_delete/{stage_uuid}/
     - UserDeleteStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this User Delete Stage. 
     - returns: RequestBuilder<Void> 
     */
    open class func stagesUserDeleteDestroyWithRequestBuilder(stageUuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/stages/user_delete/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter stageUuid: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesUserDeleteList(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, stageUuid: UUID? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedUserDeleteStageList?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesUserDeleteListWithRequestBuilder(name: name, ordering: ordering, page: page, pageSize: pageSize, search: search, stageUuid: stageUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/user_delete/
     - UserDeleteStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter stageUuid: (query)  (optional)
     - returns: RequestBuilder<PaginatedUserDeleteStageList> 
     */
    open class func stagesUserDeleteListWithRequestBuilder(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, stageUuid: UUID? = nil) -> RequestBuilder<PaginatedUserDeleteStageList> {
        let localVariablePath = "/stages/user_delete/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
            "stage_uuid": (wrappedValue: stageUuid?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedUserDeleteStageList>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this User Delete Stage. 
     - parameter patchedUserDeleteStageRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesUserDeletePartialUpdate(stageUuid: UUID, patchedUserDeleteStageRequest: PatchedUserDeleteStageRequest? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: UserDeleteStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesUserDeletePartialUpdateWithRequestBuilder(stageUuid: stageUuid, patchedUserDeleteStageRequest: patchedUserDeleteStageRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /stages/user_delete/{stage_uuid}/
     - UserDeleteStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this User Delete Stage. 
     - parameter patchedUserDeleteStageRequest: (body)  (optional)
     - returns: RequestBuilder<UserDeleteStage> 
     */
    open class func stagesUserDeletePartialUpdateWithRequestBuilder(stageUuid: UUID, patchedUserDeleteStageRequest: PatchedUserDeleteStageRequest? = nil) -> RequestBuilder<UserDeleteStage> {
        var localVariablePath = "/stages/user_delete/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedUserDeleteStageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserDeleteStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this User Delete Stage. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesUserDeleteRetrieve(stageUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: UserDeleteStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesUserDeleteRetrieveWithRequestBuilder(stageUuid: stageUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/user_delete/{stage_uuid}/
     - UserDeleteStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this User Delete Stage. 
     - returns: RequestBuilder<UserDeleteStage> 
     */
    open class func stagesUserDeleteRetrieveWithRequestBuilder(stageUuid: UUID) -> RequestBuilder<UserDeleteStage> {
        var localVariablePath = "/stages/user_delete/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserDeleteStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this User Delete Stage. 
     - parameter userDeleteStageRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesUserDeleteUpdate(stageUuid: UUID, userDeleteStageRequest: UserDeleteStageRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: UserDeleteStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesUserDeleteUpdateWithRequestBuilder(stageUuid: stageUuid, userDeleteStageRequest: userDeleteStageRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /stages/user_delete/{stage_uuid}/
     - UserDeleteStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this User Delete Stage. 
     - parameter userDeleteStageRequest: (body)  
     - returns: RequestBuilder<UserDeleteStage> 
     */
    open class func stagesUserDeleteUpdateWithRequestBuilder(stageUuid: UUID, userDeleteStageRequest: UserDeleteStageRequest) -> RequestBuilder<UserDeleteStage> {
        var localVariablePath = "/stages/user_delete/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userDeleteStageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserDeleteStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this User Delete Stage. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesUserDeleteUsedByList(stageUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: [UsedBy]?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesUserDeleteUsedByListWithRequestBuilder(stageUuid: stageUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/user_delete/{stage_uuid}/used_by/
     - Get a list of all objects that use this object
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this User Delete Stage. 
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func stagesUserDeleteUsedByListWithRequestBuilder(stageUuid: UUID) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/stages/user_delete/{stage_uuid}/used_by/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter userLoginStageRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesUserLoginCreate(userLoginStageRequest: UserLoginStageRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: UserLoginStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesUserLoginCreateWithRequestBuilder(userLoginStageRequest: userLoginStageRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /stages/user_login/
     - UserLoginStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter userLoginStageRequest: (body)  
     - returns: RequestBuilder<UserLoginStage> 
     */
    open class func stagesUserLoginCreateWithRequestBuilder(userLoginStageRequest: UserLoginStageRequest) -> RequestBuilder<UserLoginStage> {
        let localVariablePath = "/stages/user_login/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userLoginStageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserLoginStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this User Login Stage. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesUserLoginDestroy(stageUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesUserLoginDestroyWithRequestBuilder(stageUuid: stageUuid).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /stages/user_login/{stage_uuid}/
     - UserLoginStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this User Login Stage. 
     - returns: RequestBuilder<Void> 
     */
    open class func stagesUserLoginDestroyWithRequestBuilder(stageUuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/stages/user_login/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter rememberMeOffset: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter sessionDuration: (query)  (optional)
     - parameter stageUuid: (query)  (optional)
     - parameter terminateOtherSessions: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesUserLoginList(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, rememberMeOffset: String? = nil, search: String? = nil, sessionDuration: String? = nil, stageUuid: UUID? = nil, terminateOtherSessions: Bool? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedUserLoginStageList?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesUserLoginListWithRequestBuilder(name: name, ordering: ordering, page: page, pageSize: pageSize, rememberMeOffset: rememberMeOffset, search: search, sessionDuration: sessionDuration, stageUuid: stageUuid, terminateOtherSessions: terminateOtherSessions).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/user_login/
     - UserLoginStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter rememberMeOffset: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter sessionDuration: (query)  (optional)
     - parameter stageUuid: (query)  (optional)
     - parameter terminateOtherSessions: (query)  (optional)
     - returns: RequestBuilder<PaginatedUserLoginStageList> 
     */
    open class func stagesUserLoginListWithRequestBuilder(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, rememberMeOffset: String? = nil, search: String? = nil, sessionDuration: String? = nil, stageUuid: UUID? = nil, terminateOtherSessions: Bool? = nil) -> RequestBuilder<PaginatedUserLoginStageList> {
        let localVariablePath = "/stages/user_login/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "remember_me_offset": (wrappedValue: rememberMeOffset?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
            "session_duration": (wrappedValue: sessionDuration?.encodeToJSON(), isExplode: true),
            "stage_uuid": (wrappedValue: stageUuid?.encodeToJSON(), isExplode: true),
            "terminate_other_sessions": (wrappedValue: terminateOtherSessions?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedUserLoginStageList>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this User Login Stage. 
     - parameter patchedUserLoginStageRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesUserLoginPartialUpdate(stageUuid: UUID, patchedUserLoginStageRequest: PatchedUserLoginStageRequest? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: UserLoginStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesUserLoginPartialUpdateWithRequestBuilder(stageUuid: stageUuid, patchedUserLoginStageRequest: patchedUserLoginStageRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /stages/user_login/{stage_uuid}/
     - UserLoginStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this User Login Stage. 
     - parameter patchedUserLoginStageRequest: (body)  (optional)
     - returns: RequestBuilder<UserLoginStage> 
     */
    open class func stagesUserLoginPartialUpdateWithRequestBuilder(stageUuid: UUID, patchedUserLoginStageRequest: PatchedUserLoginStageRequest? = nil) -> RequestBuilder<UserLoginStage> {
        var localVariablePath = "/stages/user_login/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedUserLoginStageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserLoginStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this User Login Stage. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesUserLoginRetrieve(stageUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: UserLoginStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesUserLoginRetrieveWithRequestBuilder(stageUuid: stageUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/user_login/{stage_uuid}/
     - UserLoginStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this User Login Stage. 
     - returns: RequestBuilder<UserLoginStage> 
     */
    open class func stagesUserLoginRetrieveWithRequestBuilder(stageUuid: UUID) -> RequestBuilder<UserLoginStage> {
        var localVariablePath = "/stages/user_login/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserLoginStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this User Login Stage. 
     - parameter userLoginStageRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesUserLoginUpdate(stageUuid: UUID, userLoginStageRequest: UserLoginStageRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: UserLoginStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesUserLoginUpdateWithRequestBuilder(stageUuid: stageUuid, userLoginStageRequest: userLoginStageRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /stages/user_login/{stage_uuid}/
     - UserLoginStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this User Login Stage. 
     - parameter userLoginStageRequest: (body)  
     - returns: RequestBuilder<UserLoginStage> 
     */
    open class func stagesUserLoginUpdateWithRequestBuilder(stageUuid: UUID, userLoginStageRequest: UserLoginStageRequest) -> RequestBuilder<UserLoginStage> {
        var localVariablePath = "/stages/user_login/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userLoginStageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserLoginStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this User Login Stage. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesUserLoginUsedByList(stageUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: [UsedBy]?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesUserLoginUsedByListWithRequestBuilder(stageUuid: stageUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/user_login/{stage_uuid}/used_by/
     - Get a list of all objects that use this object
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this User Login Stage. 
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func stagesUserLoginUsedByListWithRequestBuilder(stageUuid: UUID) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/stages/user_login/{stage_uuid}/used_by/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter userLogoutStageRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesUserLogoutCreate(userLogoutStageRequest: UserLogoutStageRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: UserLogoutStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesUserLogoutCreateWithRequestBuilder(userLogoutStageRequest: userLogoutStageRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /stages/user_logout/
     - UserLogoutStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter userLogoutStageRequest: (body)  
     - returns: RequestBuilder<UserLogoutStage> 
     */
    open class func stagesUserLogoutCreateWithRequestBuilder(userLogoutStageRequest: UserLogoutStageRequest) -> RequestBuilder<UserLogoutStage> {
        let localVariablePath = "/stages/user_logout/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userLogoutStageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserLogoutStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this User Logout Stage. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesUserLogoutDestroy(stageUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesUserLogoutDestroyWithRequestBuilder(stageUuid: stageUuid).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /stages/user_logout/{stage_uuid}/
     - UserLogoutStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this User Logout Stage. 
     - returns: RequestBuilder<Void> 
     */
    open class func stagesUserLogoutDestroyWithRequestBuilder(stageUuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/stages/user_logout/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter stageUuid: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesUserLogoutList(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, stageUuid: UUID? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedUserLogoutStageList?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesUserLogoutListWithRequestBuilder(name: name, ordering: ordering, page: page, pageSize: pageSize, search: search, stageUuid: stageUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/user_logout/
     - UserLogoutStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter stageUuid: (query)  (optional)
     - returns: RequestBuilder<PaginatedUserLogoutStageList> 
     */
    open class func stagesUserLogoutListWithRequestBuilder(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, stageUuid: UUID? = nil) -> RequestBuilder<PaginatedUserLogoutStageList> {
        let localVariablePath = "/stages/user_logout/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
            "stage_uuid": (wrappedValue: stageUuid?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedUserLogoutStageList>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this User Logout Stage. 
     - parameter patchedUserLogoutStageRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesUserLogoutPartialUpdate(stageUuid: UUID, patchedUserLogoutStageRequest: PatchedUserLogoutStageRequest? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: UserLogoutStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesUserLogoutPartialUpdateWithRequestBuilder(stageUuid: stageUuid, patchedUserLogoutStageRequest: patchedUserLogoutStageRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /stages/user_logout/{stage_uuid}/
     - UserLogoutStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this User Logout Stage. 
     - parameter patchedUserLogoutStageRequest: (body)  (optional)
     - returns: RequestBuilder<UserLogoutStage> 
     */
    open class func stagesUserLogoutPartialUpdateWithRequestBuilder(stageUuid: UUID, patchedUserLogoutStageRequest: PatchedUserLogoutStageRequest? = nil) -> RequestBuilder<UserLogoutStage> {
        var localVariablePath = "/stages/user_logout/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedUserLogoutStageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserLogoutStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this User Logout Stage. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesUserLogoutRetrieve(stageUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: UserLogoutStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesUserLogoutRetrieveWithRequestBuilder(stageUuid: stageUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/user_logout/{stage_uuid}/
     - UserLogoutStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this User Logout Stage. 
     - returns: RequestBuilder<UserLogoutStage> 
     */
    open class func stagesUserLogoutRetrieveWithRequestBuilder(stageUuid: UUID) -> RequestBuilder<UserLogoutStage> {
        var localVariablePath = "/stages/user_logout/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserLogoutStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this User Logout Stage. 
     - parameter userLogoutStageRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesUserLogoutUpdate(stageUuid: UUID, userLogoutStageRequest: UserLogoutStageRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: UserLogoutStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesUserLogoutUpdateWithRequestBuilder(stageUuid: stageUuid, userLogoutStageRequest: userLogoutStageRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /stages/user_logout/{stage_uuid}/
     - UserLogoutStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this User Logout Stage. 
     - parameter userLogoutStageRequest: (body)  
     - returns: RequestBuilder<UserLogoutStage> 
     */
    open class func stagesUserLogoutUpdateWithRequestBuilder(stageUuid: UUID, userLogoutStageRequest: UserLogoutStageRequest) -> RequestBuilder<UserLogoutStage> {
        var localVariablePath = "/stages/user_logout/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userLogoutStageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserLogoutStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this User Logout Stage. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesUserLogoutUsedByList(stageUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: [UsedBy]?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesUserLogoutUsedByListWithRequestBuilder(stageUuid: stageUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/user_logout/{stage_uuid}/used_by/
     - Get a list of all objects that use this object
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this User Logout Stage. 
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func stagesUserLogoutUsedByListWithRequestBuilder(stageUuid: UUID) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/stages/user_logout/{stage_uuid}/used_by/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter userWriteStageRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesUserWriteCreate(userWriteStageRequest: UserWriteStageRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: UserWriteStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesUserWriteCreateWithRequestBuilder(userWriteStageRequest: userWriteStageRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /stages/user_write/
     - UserWriteStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter userWriteStageRequest: (body)  
     - returns: RequestBuilder<UserWriteStage> 
     */
    open class func stagesUserWriteCreateWithRequestBuilder(userWriteStageRequest: UserWriteStageRequest) -> RequestBuilder<UserWriteStage> {
        let localVariablePath = "/stages/user_write/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userWriteStageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserWriteStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this User Write Stage. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesUserWriteDestroy(stageUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesUserWriteDestroyWithRequestBuilder(stageUuid: stageUuid).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /stages/user_write/{stage_uuid}/
     - UserWriteStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this User Write Stage. 
     - returns: RequestBuilder<Void> 
     */
    open class func stagesUserWriteDestroyWithRequestBuilder(stageUuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/stages/user_write/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter userCreationMode
     */
    public enum UserCreationMode_stagesUserWriteList: String, CaseIterable {
        case alwaysCreate = "always_create"
        case createWhenRequired = "create_when_required"
        case neverCreate = "never_create"
    }

    /**

     - parameter createUsersAsInactive: (query)  (optional)
     - parameter createUsersGroup: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter stageUuid: (query)  (optional)
     - parameter userCreationMode: (query) * &#x60;never_create&#x60; - Never Create * &#x60;create_when_required&#x60; - Create When Required * &#x60;always_create&#x60; - Always Create (optional)
     - parameter userPathTemplate: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesUserWriteList(createUsersAsInactive: Bool? = nil, createUsersGroup: UUID? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, stageUuid: UUID? = nil, userCreationMode: UserCreationMode_stagesUserWriteList? = nil, userPathTemplate: String? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedUserWriteStageList?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesUserWriteListWithRequestBuilder(createUsersAsInactive: createUsersAsInactive, createUsersGroup: createUsersGroup, name: name, ordering: ordering, page: page, pageSize: pageSize, search: search, stageUuid: stageUuid, userCreationMode: userCreationMode, userPathTemplate: userPathTemplate).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/user_write/
     - UserWriteStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter createUsersAsInactive: (query)  (optional)
     - parameter createUsersGroup: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter stageUuid: (query)  (optional)
     - parameter userCreationMode: (query) * &#x60;never_create&#x60; - Never Create * &#x60;create_when_required&#x60; - Create When Required * &#x60;always_create&#x60; - Always Create (optional)
     - parameter userPathTemplate: (query)  (optional)
     - returns: RequestBuilder<PaginatedUserWriteStageList> 
     */
    open class func stagesUserWriteListWithRequestBuilder(createUsersAsInactive: Bool? = nil, createUsersGroup: UUID? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, stageUuid: UUID? = nil, userCreationMode: UserCreationMode_stagesUserWriteList? = nil, userPathTemplate: String? = nil) -> RequestBuilder<PaginatedUserWriteStageList> {
        let localVariablePath = "/stages/user_write/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "create_users_as_inactive": (wrappedValue: createUsersAsInactive?.encodeToJSON(), isExplode: true),
            "create_users_group": (wrappedValue: createUsersGroup?.encodeToJSON(), isExplode: true),
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
            "stage_uuid": (wrappedValue: stageUuid?.encodeToJSON(), isExplode: true),
            "user_creation_mode": (wrappedValue: userCreationMode?.encodeToJSON(), isExplode: true),
            "user_path_template": (wrappedValue: userPathTemplate?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedUserWriteStageList>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this User Write Stage. 
     - parameter patchedUserWriteStageRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesUserWritePartialUpdate(stageUuid: UUID, patchedUserWriteStageRequest: PatchedUserWriteStageRequest? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: UserWriteStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesUserWritePartialUpdateWithRequestBuilder(stageUuid: stageUuid, patchedUserWriteStageRequest: patchedUserWriteStageRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /stages/user_write/{stage_uuid}/
     - UserWriteStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this User Write Stage. 
     - parameter patchedUserWriteStageRequest: (body)  (optional)
     - returns: RequestBuilder<UserWriteStage> 
     */
    open class func stagesUserWritePartialUpdateWithRequestBuilder(stageUuid: UUID, patchedUserWriteStageRequest: PatchedUserWriteStageRequest? = nil) -> RequestBuilder<UserWriteStage> {
        var localVariablePath = "/stages/user_write/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedUserWriteStageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserWriteStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this User Write Stage. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesUserWriteRetrieve(stageUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: UserWriteStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesUserWriteRetrieveWithRequestBuilder(stageUuid: stageUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/user_write/{stage_uuid}/
     - UserWriteStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this User Write Stage. 
     - returns: RequestBuilder<UserWriteStage> 
     */
    open class func stagesUserWriteRetrieveWithRequestBuilder(stageUuid: UUID) -> RequestBuilder<UserWriteStage> {
        var localVariablePath = "/stages/user_write/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserWriteStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this User Write Stage. 
     - parameter userWriteStageRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesUserWriteUpdate(stageUuid: UUID, userWriteStageRequest: UserWriteStageRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: UserWriteStage?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesUserWriteUpdateWithRequestBuilder(stageUuid: stageUuid, userWriteStageRequest: userWriteStageRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /stages/user_write/{stage_uuid}/
     - UserWriteStage Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this User Write Stage. 
     - parameter userWriteStageRequest: (body)  
     - returns: RequestBuilder<UserWriteStage> 
     */
    open class func stagesUserWriteUpdateWithRequestBuilder(stageUuid: UUID, userWriteStageRequest: UserWriteStageRequest) -> RequestBuilder<UserWriteStage> {
        var localVariablePath = "/stages/user_write/{stage_uuid}/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userWriteStageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserWriteStage>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter stageUuid: (path) A UUID string identifying this User Write Stage. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stagesUserWriteUsedByList(stageUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: [UsedBy]?, _ error: Error?) -> Void)) -> RequestTask {
        return stagesUserWriteUsedByListWithRequestBuilder(stageUuid: stageUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /stages/user_write/{stage_uuid}/used_by/
     - Get a list of all objects that use this object
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter stageUuid: (path) A UUID string identifying this User Write Stage. 
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func stagesUserWriteUsedByListWithRequestBuilder(stageUuid: UUID) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/stages/user_write/{stage_uuid}/used_by/"
        let stageUuidPreEscape = "\(APIHelper.mapValueToPathItem(stageUuid))"
        let stageUuidPostEscape = stageUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stage_uuid}", with: stageUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
