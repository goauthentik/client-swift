//
// PoliciesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class PoliciesAPI {

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func policiesAllCacheClearCreate(apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return policiesAllCacheClearCreateWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /policies/all/cache_clear/
     - Clear policy cache
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - returns: RequestBuilder<Void> 
     */
    open class func policiesAllCacheClearCreateWithRequestBuilder() -> RequestBuilder<Void> {
        let localVariablePath = "/policies/all/cache_clear/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func policiesAllCacheInfoRetrieve(apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Cache?, _ error: Error?) -> Void)) -> RequestTask {
        return policiesAllCacheInfoRetrieveWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /policies/all/cache_info/
     - Info about cached policies
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - returns: RequestBuilder<Cache> 
     */
    open class func policiesAllCacheInfoRetrieveWithRequestBuilder() -> RequestBuilder<Cache> {
        let localVariablePath = "/policies/all/cache_info/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Cache>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Policy. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func policiesAllDestroy(policyUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return policiesAllDestroyWithRequestBuilder(policyUuid: policyUuid).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /policies/all/{policy_uuid}/
     - Policy Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Policy. 
     - returns: RequestBuilder<Void> 
     */
    open class func policiesAllDestroyWithRequestBuilder(policyUuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/policies/all/{policy_uuid}/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter bindingsIsnull: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter promptstageIsnull: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func policiesAllList(bindingsIsnull: Bool? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, promptstageIsnull: Bool? = nil, search: String? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedPolicyList?, _ error: Error?) -> Void)) -> RequestTask {
        return policiesAllListWithRequestBuilder(bindingsIsnull: bindingsIsnull, ordering: ordering, page: page, pageSize: pageSize, promptstageIsnull: promptstageIsnull, search: search).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /policies/all/
     - Policy Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter bindingsIsnull: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter promptstageIsnull: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - returns: RequestBuilder<PaginatedPolicyList> 
     */
    open class func policiesAllListWithRequestBuilder(bindingsIsnull: Bool? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, promptstageIsnull: Bool? = nil, search: String? = nil) -> RequestBuilder<PaginatedPolicyList> {
        let localVariablePath = "/policies/all/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "bindings__isnull": (wrappedValue: bindingsIsnull?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "promptstage__isnull": (wrappedValue: promptstageIsnull?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedPolicyList>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Policy. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func policiesAllRetrieve(policyUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Policy?, _ error: Error?) -> Void)) -> RequestTask {
        return policiesAllRetrieveWithRequestBuilder(policyUuid: policyUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /policies/all/{policy_uuid}/
     - Policy Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Policy. 
     - returns: RequestBuilder<Policy> 
     */
    open class func policiesAllRetrieveWithRequestBuilder(policyUuid: UUID) -> RequestBuilder<Policy> {
        var localVariablePath = "/policies/all/{policy_uuid}/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Policy>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Policy. 
     - parameter policyTestRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func policiesAllTestCreate(policyUuid: UUID, policyTestRequest: PolicyTestRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PolicyTestResult?, _ error: Error?) -> Void)) -> RequestTask {
        return policiesAllTestCreateWithRequestBuilder(policyUuid: policyUuid, policyTestRequest: policyTestRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /policies/all/{policy_uuid}/test/
     - Test policy
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Policy. 
     - parameter policyTestRequest: (body)  
     - returns: RequestBuilder<PolicyTestResult> 
     */
    open class func policiesAllTestCreateWithRequestBuilder(policyUuid: UUID, policyTestRequest: PolicyTestRequest) -> RequestBuilder<PolicyTestResult> {
        var localVariablePath = "/policies/all/{policy_uuid}/test/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: policyTestRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PolicyTestResult>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func policiesAllTypesList(apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: [TypeCreate]?, _ error: Error?) -> Void)) -> RequestTask {
        return policiesAllTypesListWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /policies/all/types/
     - Get all creatable policy types
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - returns: RequestBuilder<[TypeCreate]> 
     */
    open class func policiesAllTypesListWithRequestBuilder() -> RequestBuilder<[TypeCreate]> {
        let localVariablePath = "/policies/all/types/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[TypeCreate]>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Policy. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func policiesAllUsedByList(policyUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: [UsedBy]?, _ error: Error?) -> Void)) -> RequestTask {
        return policiesAllUsedByListWithRequestBuilder(policyUuid: policyUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /policies/all/{policy_uuid}/used_by/
     - Get a list of all objects that use this object
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Policy. 
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func policiesAllUsedByListWithRequestBuilder(policyUuid: UUID) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/policies/all/{policy_uuid}/used_by/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter policyBindingRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func policiesBindingsCreate(policyBindingRequest: PolicyBindingRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PolicyBinding?, _ error: Error?) -> Void)) -> RequestTask {
        return policiesBindingsCreateWithRequestBuilder(policyBindingRequest: policyBindingRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /policies/bindings/
     - PolicyBinding Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter policyBindingRequest: (body)  
     - returns: RequestBuilder<PolicyBinding> 
     */
    open class func policiesBindingsCreateWithRequestBuilder(policyBindingRequest: PolicyBindingRequest) -> RequestBuilder<PolicyBinding> {
        let localVariablePath = "/policies/bindings/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: policyBindingRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PolicyBinding>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter policyBindingUuid: (path) A UUID string identifying this Policy Binding. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func policiesBindingsDestroy(policyBindingUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return policiesBindingsDestroyWithRequestBuilder(policyBindingUuid: policyBindingUuid).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /policies/bindings/{policy_binding_uuid}/
     - PolicyBinding Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter policyBindingUuid: (path) A UUID string identifying this Policy Binding. 
     - returns: RequestBuilder<Void> 
     */
    open class func policiesBindingsDestroyWithRequestBuilder(policyBindingUuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/policies/bindings/{policy_binding_uuid}/"
        let policyBindingUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyBindingUuid))"
        let policyBindingUuidPostEscape = policyBindingUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_binding_uuid}", with: policyBindingUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter enabled: (query)  (optional)
     - parameter order: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter policy: (query)  (optional)
     - parameter policyIsnull: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter target: (query)  (optional)
     - parameter targetIn: (query)  (optional)
     - parameter timeout: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func policiesBindingsList(enabled: Bool? = nil, order: Int? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, policy: UUID? = nil, policyIsnull: Bool? = nil, search: String? = nil, target: UUID? = nil, targetIn: [UUID]? = nil, timeout: Int? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedPolicyBindingList?, _ error: Error?) -> Void)) -> RequestTask {
        return policiesBindingsListWithRequestBuilder(enabled: enabled, order: order, ordering: ordering, page: page, pageSize: pageSize, policy: policy, policyIsnull: policyIsnull, search: search, target: target, targetIn: targetIn, timeout: timeout).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /policies/bindings/
     - PolicyBinding Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter enabled: (query)  (optional)
     - parameter order: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter policy: (query)  (optional)
     - parameter policyIsnull: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter target: (query)  (optional)
     - parameter targetIn: (query)  (optional)
     - parameter timeout: (query)  (optional)
     - returns: RequestBuilder<PaginatedPolicyBindingList> 
     */
    open class func policiesBindingsListWithRequestBuilder(enabled: Bool? = nil, order: Int? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, policy: UUID? = nil, policyIsnull: Bool? = nil, search: String? = nil, target: UUID? = nil, targetIn: [UUID]? = nil, timeout: Int? = nil) -> RequestBuilder<PaginatedPolicyBindingList> {
        let localVariablePath = "/policies/bindings/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "enabled": (wrappedValue: enabled?.encodeToJSON(), isExplode: true),
            "order": (wrappedValue: order?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "policy": (wrappedValue: policy?.encodeToJSON(), isExplode: true),
            "policy__isnull": (wrappedValue: policyIsnull?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
            "target": (wrappedValue: target?.encodeToJSON(), isExplode: true),
            "target_in": (wrappedValue: targetIn?.encodeToJSON(), isExplode: true),
            "timeout": (wrappedValue: timeout?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedPolicyBindingList>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter policyBindingUuid: (path) A UUID string identifying this Policy Binding. 
     - parameter patchedPolicyBindingRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func policiesBindingsPartialUpdate(policyBindingUuid: UUID, patchedPolicyBindingRequest: PatchedPolicyBindingRequest? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PolicyBinding?, _ error: Error?) -> Void)) -> RequestTask {
        return policiesBindingsPartialUpdateWithRequestBuilder(policyBindingUuid: policyBindingUuid, patchedPolicyBindingRequest: patchedPolicyBindingRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /policies/bindings/{policy_binding_uuid}/
     - PolicyBinding Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter policyBindingUuid: (path) A UUID string identifying this Policy Binding. 
     - parameter patchedPolicyBindingRequest: (body)  (optional)
     - returns: RequestBuilder<PolicyBinding> 
     */
    open class func policiesBindingsPartialUpdateWithRequestBuilder(policyBindingUuid: UUID, patchedPolicyBindingRequest: PatchedPolicyBindingRequest? = nil) -> RequestBuilder<PolicyBinding> {
        var localVariablePath = "/policies/bindings/{policy_binding_uuid}/"
        let policyBindingUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyBindingUuid))"
        let policyBindingUuidPostEscape = policyBindingUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_binding_uuid}", with: policyBindingUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedPolicyBindingRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PolicyBinding>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter policyBindingUuid: (path) A UUID string identifying this Policy Binding. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func policiesBindingsRetrieve(policyBindingUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PolicyBinding?, _ error: Error?) -> Void)) -> RequestTask {
        return policiesBindingsRetrieveWithRequestBuilder(policyBindingUuid: policyBindingUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /policies/bindings/{policy_binding_uuid}/
     - PolicyBinding Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter policyBindingUuid: (path) A UUID string identifying this Policy Binding. 
     - returns: RequestBuilder<PolicyBinding> 
     */
    open class func policiesBindingsRetrieveWithRequestBuilder(policyBindingUuid: UUID) -> RequestBuilder<PolicyBinding> {
        var localVariablePath = "/policies/bindings/{policy_binding_uuid}/"
        let policyBindingUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyBindingUuid))"
        let policyBindingUuidPostEscape = policyBindingUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_binding_uuid}", with: policyBindingUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PolicyBinding>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter policyBindingUuid: (path) A UUID string identifying this Policy Binding. 
     - parameter policyBindingRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func policiesBindingsUpdate(policyBindingUuid: UUID, policyBindingRequest: PolicyBindingRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PolicyBinding?, _ error: Error?) -> Void)) -> RequestTask {
        return policiesBindingsUpdateWithRequestBuilder(policyBindingUuid: policyBindingUuid, policyBindingRequest: policyBindingRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /policies/bindings/{policy_binding_uuid}/
     - PolicyBinding Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter policyBindingUuid: (path) A UUID string identifying this Policy Binding. 
     - parameter policyBindingRequest: (body)  
     - returns: RequestBuilder<PolicyBinding> 
     */
    open class func policiesBindingsUpdateWithRequestBuilder(policyBindingUuid: UUID, policyBindingRequest: PolicyBindingRequest) -> RequestBuilder<PolicyBinding> {
        var localVariablePath = "/policies/bindings/{policy_binding_uuid}/"
        let policyBindingUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyBindingUuid))"
        let policyBindingUuidPostEscape = policyBindingUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_binding_uuid}", with: policyBindingUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: policyBindingRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PolicyBinding>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter policyBindingUuid: (path) A UUID string identifying this Policy Binding. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func policiesBindingsUsedByList(policyBindingUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: [UsedBy]?, _ error: Error?) -> Void)) -> RequestTask {
        return policiesBindingsUsedByListWithRequestBuilder(policyBindingUuid: policyBindingUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /policies/bindings/{policy_binding_uuid}/used_by/
     - Get a list of all objects that use this object
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter policyBindingUuid: (path) A UUID string identifying this Policy Binding. 
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func policiesBindingsUsedByListWithRequestBuilder(policyBindingUuid: UUID) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/policies/bindings/{policy_binding_uuid}/used_by/"
        let policyBindingUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyBindingUuid))"
        let policyBindingUuidPostEscape = policyBindingUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_binding_uuid}", with: policyBindingUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter dummyPolicyRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func policiesDummyCreate(dummyPolicyRequest: DummyPolicyRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: DummyPolicy?, _ error: Error?) -> Void)) -> RequestTask {
        return policiesDummyCreateWithRequestBuilder(dummyPolicyRequest: dummyPolicyRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /policies/dummy/
     - Dummy Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter dummyPolicyRequest: (body)  
     - returns: RequestBuilder<DummyPolicy> 
     */
    open class func policiesDummyCreateWithRequestBuilder(dummyPolicyRequest: DummyPolicyRequest) -> RequestBuilder<DummyPolicy> {
        let localVariablePath = "/policies/dummy/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: dummyPolicyRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DummyPolicy>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Dummy Policy. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func policiesDummyDestroy(policyUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return policiesDummyDestroyWithRequestBuilder(policyUuid: policyUuid).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /policies/dummy/{policy_uuid}/
     - Dummy Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Dummy Policy. 
     - returns: RequestBuilder<Void> 
     */
    open class func policiesDummyDestroyWithRequestBuilder(policyUuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/policies/dummy/{policy_uuid}/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter created: (query)  (optional)
     - parameter executionLogging: (query)  (optional)
     - parameter lastUpdated: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter policyUuid: (query)  (optional)
     - parameter result: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter waitMax: (query)  (optional)
     - parameter waitMin: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func policiesDummyList(created: Date? = nil, executionLogging: Bool? = nil, lastUpdated: Date? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, policyUuid: UUID? = nil, result: Bool? = nil, search: String? = nil, waitMax: Int? = nil, waitMin: Int? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedDummyPolicyList?, _ error: Error?) -> Void)) -> RequestTask {
        return policiesDummyListWithRequestBuilder(created: created, executionLogging: executionLogging, lastUpdated: lastUpdated, name: name, ordering: ordering, page: page, pageSize: pageSize, policyUuid: policyUuid, result: result, search: search, waitMax: waitMax, waitMin: waitMin).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /policies/dummy/
     - Dummy Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter created: (query)  (optional)
     - parameter executionLogging: (query)  (optional)
     - parameter lastUpdated: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter policyUuid: (query)  (optional)
     - parameter result: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter waitMax: (query)  (optional)
     - parameter waitMin: (query)  (optional)
     - returns: RequestBuilder<PaginatedDummyPolicyList> 
     */
    open class func policiesDummyListWithRequestBuilder(created: Date? = nil, executionLogging: Bool? = nil, lastUpdated: Date? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, policyUuid: UUID? = nil, result: Bool? = nil, search: String? = nil, waitMax: Int? = nil, waitMin: Int? = nil) -> RequestBuilder<PaginatedDummyPolicyList> {
        let localVariablePath = "/policies/dummy/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "created": (wrappedValue: created?.encodeToJSON(), isExplode: true),
            "execution_logging": (wrappedValue: executionLogging?.encodeToJSON(), isExplode: true),
            "last_updated": (wrappedValue: lastUpdated?.encodeToJSON(), isExplode: true),
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "policy_uuid": (wrappedValue: policyUuid?.encodeToJSON(), isExplode: true),
            "result": (wrappedValue: result?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
            "wait_max": (wrappedValue: waitMax?.encodeToJSON(), isExplode: true),
            "wait_min": (wrappedValue: waitMin?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedDummyPolicyList>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Dummy Policy. 
     - parameter patchedDummyPolicyRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func policiesDummyPartialUpdate(policyUuid: UUID, patchedDummyPolicyRequest: PatchedDummyPolicyRequest? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: DummyPolicy?, _ error: Error?) -> Void)) -> RequestTask {
        return policiesDummyPartialUpdateWithRequestBuilder(policyUuid: policyUuid, patchedDummyPolicyRequest: patchedDummyPolicyRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /policies/dummy/{policy_uuid}/
     - Dummy Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Dummy Policy. 
     - parameter patchedDummyPolicyRequest: (body)  (optional)
     - returns: RequestBuilder<DummyPolicy> 
     */
    open class func policiesDummyPartialUpdateWithRequestBuilder(policyUuid: UUID, patchedDummyPolicyRequest: PatchedDummyPolicyRequest? = nil) -> RequestBuilder<DummyPolicy> {
        var localVariablePath = "/policies/dummy/{policy_uuid}/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedDummyPolicyRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DummyPolicy>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Dummy Policy. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func policiesDummyRetrieve(policyUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: DummyPolicy?, _ error: Error?) -> Void)) -> RequestTask {
        return policiesDummyRetrieveWithRequestBuilder(policyUuid: policyUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /policies/dummy/{policy_uuid}/
     - Dummy Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Dummy Policy. 
     - returns: RequestBuilder<DummyPolicy> 
     */
    open class func policiesDummyRetrieveWithRequestBuilder(policyUuid: UUID) -> RequestBuilder<DummyPolicy> {
        var localVariablePath = "/policies/dummy/{policy_uuid}/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DummyPolicy>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Dummy Policy. 
     - parameter dummyPolicyRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func policiesDummyUpdate(policyUuid: UUID, dummyPolicyRequest: DummyPolicyRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: DummyPolicy?, _ error: Error?) -> Void)) -> RequestTask {
        return policiesDummyUpdateWithRequestBuilder(policyUuid: policyUuid, dummyPolicyRequest: dummyPolicyRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /policies/dummy/{policy_uuid}/
     - Dummy Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Dummy Policy. 
     - parameter dummyPolicyRequest: (body)  
     - returns: RequestBuilder<DummyPolicy> 
     */
    open class func policiesDummyUpdateWithRequestBuilder(policyUuid: UUID, dummyPolicyRequest: DummyPolicyRequest) -> RequestBuilder<DummyPolicy> {
        var localVariablePath = "/policies/dummy/{policy_uuid}/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: dummyPolicyRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DummyPolicy>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Dummy Policy. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func policiesDummyUsedByList(policyUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: [UsedBy]?, _ error: Error?) -> Void)) -> RequestTask {
        return policiesDummyUsedByListWithRequestBuilder(policyUuid: policyUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /policies/dummy/{policy_uuid}/used_by/
     - Get a list of all objects that use this object
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Dummy Policy. 
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func policiesDummyUsedByListWithRequestBuilder(policyUuid: UUID) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/policies/dummy/{policy_uuid}/used_by/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter eventMatcherPolicyRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func policiesEventMatcherCreate(eventMatcherPolicyRequest: EventMatcherPolicyRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: EventMatcherPolicy?, _ error: Error?) -> Void)) -> RequestTask {
        return policiesEventMatcherCreateWithRequestBuilder(eventMatcherPolicyRequest: eventMatcherPolicyRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /policies/event_matcher/
     - Event Matcher Policy Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter eventMatcherPolicyRequest: (body)  
     - returns: RequestBuilder<EventMatcherPolicy> 
     */
    open class func policiesEventMatcherCreateWithRequestBuilder(eventMatcherPolicyRequest: EventMatcherPolicyRequest) -> RequestBuilder<EventMatcherPolicy> {
        let localVariablePath = "/policies/event_matcher/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: eventMatcherPolicyRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EventMatcherPolicy>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Event Matcher Policy. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func policiesEventMatcherDestroy(policyUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return policiesEventMatcherDestroyWithRequestBuilder(policyUuid: policyUuid).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /policies/event_matcher/{policy_uuid}/
     - Event Matcher Policy Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Event Matcher Policy. 
     - returns: RequestBuilder<Void> 
     */
    open class func policiesEventMatcherDestroyWithRequestBuilder(policyUuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/policies/event_matcher/{policy_uuid}/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter action
     */
    public enum Action_policiesEventMatcherList: String, CaseIterable {
        case authorizeApplication = "authorize_application"
        case configurationError = "configuration_error"
        case custom = "custom_"
        case emailSent = "email_sent"
        case flowExecution = "flow_execution"
        case impersonationEnded = "impersonation_ended"
        case impersonationStarted = "impersonation_started"
        case invitationUsed = "invitation_used"
        case login = "login"
        case loginFailed = "login_failed"
        case logout = "logout"
        case modelCreated = "model_created"
        case modelDeleted = "model_deleted"
        case modelUpdated = "model_updated"
        case passwordSet = "password_set"
        case policyException = "policy_exception"
        case policyExecution = "policy_execution"
        case propertyMappingException = "property_mapping_exception"
        case secretRotate = "secret_rotate"
        case secretView = "secret_view"
        case sourceLinked = "source_linked"
        case suspiciousRequest = "suspicious_request"
        case systemException = "system_exception"
        case systemTaskException = "system_task_exception"
        case systemTaskExecution = "system_task_execution"
        case updateAvailable = "update_available"
        case userWrite = "user_write"
    }

    /**

     - parameter action: (query) Match created events with this action type. When left empty, all action types will be matched.  * &#x60;login&#x60; - Login * &#x60;login_failed&#x60; - Login Failed * &#x60;logout&#x60; - Logout * &#x60;user_write&#x60; - User Write * &#x60;suspicious_request&#x60; - Suspicious Request * &#x60;password_set&#x60; - Password Set * &#x60;secret_view&#x60; - Secret View * &#x60;secret_rotate&#x60; - Secret Rotate * &#x60;invitation_used&#x60; - Invite Used * &#x60;authorize_application&#x60; - Authorize Application * &#x60;source_linked&#x60; - Source Linked * &#x60;impersonation_started&#x60; - Impersonation Started * &#x60;impersonation_ended&#x60; - Impersonation Ended * &#x60;flow_execution&#x60; - Flow Execution * &#x60;policy_execution&#x60; - Policy Execution * &#x60;policy_exception&#x60; - Policy Exception * &#x60;property_mapping_exception&#x60; - Property Mapping Exception * &#x60;system_task_execution&#x60; - System Task Execution * &#x60;system_task_exception&#x60; - System Task Exception * &#x60;system_exception&#x60; - System Exception * &#x60;configuration_error&#x60; - Configuration Error * &#x60;model_created&#x60; - Model Created * &#x60;model_updated&#x60; - Model Updated * &#x60;model_deleted&#x60; - Model Deleted * &#x60;email_sent&#x60; - Email Sent * &#x60;update_available&#x60; - Update Available * &#x60;custom_&#x60; - Custom Prefix (optional)
     - parameter app: (query)  (optional)
     - parameter clientIp: (query)  (optional)
     - parameter created: (query)  (optional)
     - parameter executionLogging: (query)  (optional)
     - parameter lastUpdated: (query)  (optional)
     - parameter model: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter policyUuid: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func policiesEventMatcherList(action: Action_policiesEventMatcherList? = nil, app: String? = nil, clientIp: String? = nil, created: Date? = nil, executionLogging: Bool? = nil, lastUpdated: Date? = nil, model: String? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, policyUuid: UUID? = nil, search: String? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedEventMatcherPolicyList?, _ error: Error?) -> Void)) -> RequestTask {
        return policiesEventMatcherListWithRequestBuilder(action: action, app: app, clientIp: clientIp, created: created, executionLogging: executionLogging, lastUpdated: lastUpdated, model: model, name: name, ordering: ordering, page: page, pageSize: pageSize, policyUuid: policyUuid, search: search).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /policies/event_matcher/
     - Event Matcher Policy Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter action: (query) Match created events with this action type. When left empty, all action types will be matched.  * &#x60;login&#x60; - Login * &#x60;login_failed&#x60; - Login Failed * &#x60;logout&#x60; - Logout * &#x60;user_write&#x60; - User Write * &#x60;suspicious_request&#x60; - Suspicious Request * &#x60;password_set&#x60; - Password Set * &#x60;secret_view&#x60; - Secret View * &#x60;secret_rotate&#x60; - Secret Rotate * &#x60;invitation_used&#x60; - Invite Used * &#x60;authorize_application&#x60; - Authorize Application * &#x60;source_linked&#x60; - Source Linked * &#x60;impersonation_started&#x60; - Impersonation Started * &#x60;impersonation_ended&#x60; - Impersonation Ended * &#x60;flow_execution&#x60; - Flow Execution * &#x60;policy_execution&#x60; - Policy Execution * &#x60;policy_exception&#x60; - Policy Exception * &#x60;property_mapping_exception&#x60; - Property Mapping Exception * &#x60;system_task_execution&#x60; - System Task Execution * &#x60;system_task_exception&#x60; - System Task Exception * &#x60;system_exception&#x60; - System Exception * &#x60;configuration_error&#x60; - Configuration Error * &#x60;model_created&#x60; - Model Created * &#x60;model_updated&#x60; - Model Updated * &#x60;model_deleted&#x60; - Model Deleted * &#x60;email_sent&#x60; - Email Sent * &#x60;update_available&#x60; - Update Available * &#x60;custom_&#x60; - Custom Prefix (optional)
     - parameter app: (query)  (optional)
     - parameter clientIp: (query)  (optional)
     - parameter created: (query)  (optional)
     - parameter executionLogging: (query)  (optional)
     - parameter lastUpdated: (query)  (optional)
     - parameter model: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter policyUuid: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - returns: RequestBuilder<PaginatedEventMatcherPolicyList> 
     */
    open class func policiesEventMatcherListWithRequestBuilder(action: Action_policiesEventMatcherList? = nil, app: String? = nil, clientIp: String? = nil, created: Date? = nil, executionLogging: Bool? = nil, lastUpdated: Date? = nil, model: String? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, policyUuid: UUID? = nil, search: String? = nil) -> RequestBuilder<PaginatedEventMatcherPolicyList> {
        let localVariablePath = "/policies/event_matcher/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "action": (wrappedValue: action?.encodeToJSON(), isExplode: true),
            "app": (wrappedValue: app?.encodeToJSON(), isExplode: true),
            "client_ip": (wrappedValue: clientIp?.encodeToJSON(), isExplode: true),
            "created": (wrappedValue: created?.encodeToJSON(), isExplode: true),
            "execution_logging": (wrappedValue: executionLogging?.encodeToJSON(), isExplode: true),
            "last_updated": (wrappedValue: lastUpdated?.encodeToJSON(), isExplode: true),
            "model": (wrappedValue: model?.encodeToJSON(), isExplode: true),
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "policy_uuid": (wrappedValue: policyUuid?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedEventMatcherPolicyList>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Event Matcher Policy. 
     - parameter patchedEventMatcherPolicyRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func policiesEventMatcherPartialUpdate(policyUuid: UUID, patchedEventMatcherPolicyRequest: PatchedEventMatcherPolicyRequest? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: EventMatcherPolicy?, _ error: Error?) -> Void)) -> RequestTask {
        return policiesEventMatcherPartialUpdateWithRequestBuilder(policyUuid: policyUuid, patchedEventMatcherPolicyRequest: patchedEventMatcherPolicyRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /policies/event_matcher/{policy_uuid}/
     - Event Matcher Policy Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Event Matcher Policy. 
     - parameter patchedEventMatcherPolicyRequest: (body)  (optional)
     - returns: RequestBuilder<EventMatcherPolicy> 
     */
    open class func policiesEventMatcherPartialUpdateWithRequestBuilder(policyUuid: UUID, patchedEventMatcherPolicyRequest: PatchedEventMatcherPolicyRequest? = nil) -> RequestBuilder<EventMatcherPolicy> {
        var localVariablePath = "/policies/event_matcher/{policy_uuid}/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedEventMatcherPolicyRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EventMatcherPolicy>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Event Matcher Policy. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func policiesEventMatcherRetrieve(policyUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: EventMatcherPolicy?, _ error: Error?) -> Void)) -> RequestTask {
        return policiesEventMatcherRetrieveWithRequestBuilder(policyUuid: policyUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /policies/event_matcher/{policy_uuid}/
     - Event Matcher Policy Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Event Matcher Policy. 
     - returns: RequestBuilder<EventMatcherPolicy> 
     */
    open class func policiesEventMatcherRetrieveWithRequestBuilder(policyUuid: UUID) -> RequestBuilder<EventMatcherPolicy> {
        var localVariablePath = "/policies/event_matcher/{policy_uuid}/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EventMatcherPolicy>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Event Matcher Policy. 
     - parameter eventMatcherPolicyRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func policiesEventMatcherUpdate(policyUuid: UUID, eventMatcherPolicyRequest: EventMatcherPolicyRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: EventMatcherPolicy?, _ error: Error?) -> Void)) -> RequestTask {
        return policiesEventMatcherUpdateWithRequestBuilder(policyUuid: policyUuid, eventMatcherPolicyRequest: eventMatcherPolicyRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /policies/event_matcher/{policy_uuid}/
     - Event Matcher Policy Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Event Matcher Policy. 
     - parameter eventMatcherPolicyRequest: (body)  
     - returns: RequestBuilder<EventMatcherPolicy> 
     */
    open class func policiesEventMatcherUpdateWithRequestBuilder(policyUuid: UUID, eventMatcherPolicyRequest: EventMatcherPolicyRequest) -> RequestBuilder<EventMatcherPolicy> {
        var localVariablePath = "/policies/event_matcher/{policy_uuid}/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: eventMatcherPolicyRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EventMatcherPolicy>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Event Matcher Policy. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func policiesEventMatcherUsedByList(policyUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: [UsedBy]?, _ error: Error?) -> Void)) -> RequestTask {
        return policiesEventMatcherUsedByListWithRequestBuilder(policyUuid: policyUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /policies/event_matcher/{policy_uuid}/used_by/
     - Get a list of all objects that use this object
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Event Matcher Policy. 
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func policiesEventMatcherUsedByListWithRequestBuilder(policyUuid: UUID) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/policies/event_matcher/{policy_uuid}/used_by/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter expressionPolicyRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func policiesExpressionCreate(expressionPolicyRequest: ExpressionPolicyRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: ExpressionPolicy?, _ error: Error?) -> Void)) -> RequestTask {
        return policiesExpressionCreateWithRequestBuilder(expressionPolicyRequest: expressionPolicyRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /policies/expression/
     - Source Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter expressionPolicyRequest: (body)  
     - returns: RequestBuilder<ExpressionPolicy> 
     */
    open class func policiesExpressionCreateWithRequestBuilder(expressionPolicyRequest: ExpressionPolicyRequest) -> RequestBuilder<ExpressionPolicy> {
        let localVariablePath = "/policies/expression/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: expressionPolicyRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ExpressionPolicy>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Expression Policy. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func policiesExpressionDestroy(policyUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return policiesExpressionDestroyWithRequestBuilder(policyUuid: policyUuid).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /policies/expression/{policy_uuid}/
     - Source Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Expression Policy. 
     - returns: RequestBuilder<Void> 
     */
    open class func policiesExpressionDestroyWithRequestBuilder(policyUuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/policies/expression/{policy_uuid}/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter created: (query)  (optional)
     - parameter executionLogging: (query)  (optional)
     - parameter expression: (query)  (optional)
     - parameter lastUpdated: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter policyUuid: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func policiesExpressionList(created: Date? = nil, executionLogging: Bool? = nil, expression: String? = nil, lastUpdated: Date? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, policyUuid: UUID? = nil, search: String? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedExpressionPolicyList?, _ error: Error?) -> Void)) -> RequestTask {
        return policiesExpressionListWithRequestBuilder(created: created, executionLogging: executionLogging, expression: expression, lastUpdated: lastUpdated, name: name, ordering: ordering, page: page, pageSize: pageSize, policyUuid: policyUuid, search: search).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /policies/expression/
     - Source Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter created: (query)  (optional)
     - parameter executionLogging: (query)  (optional)
     - parameter expression: (query)  (optional)
     - parameter lastUpdated: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter policyUuid: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - returns: RequestBuilder<PaginatedExpressionPolicyList> 
     */
    open class func policiesExpressionListWithRequestBuilder(created: Date? = nil, executionLogging: Bool? = nil, expression: String? = nil, lastUpdated: Date? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, policyUuid: UUID? = nil, search: String? = nil) -> RequestBuilder<PaginatedExpressionPolicyList> {
        let localVariablePath = "/policies/expression/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "created": (wrappedValue: created?.encodeToJSON(), isExplode: true),
            "execution_logging": (wrappedValue: executionLogging?.encodeToJSON(), isExplode: true),
            "expression": (wrappedValue: expression?.encodeToJSON(), isExplode: true),
            "last_updated": (wrappedValue: lastUpdated?.encodeToJSON(), isExplode: true),
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "policy_uuid": (wrappedValue: policyUuid?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedExpressionPolicyList>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Expression Policy. 
     - parameter patchedExpressionPolicyRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func policiesExpressionPartialUpdate(policyUuid: UUID, patchedExpressionPolicyRequest: PatchedExpressionPolicyRequest? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: ExpressionPolicy?, _ error: Error?) -> Void)) -> RequestTask {
        return policiesExpressionPartialUpdateWithRequestBuilder(policyUuid: policyUuid, patchedExpressionPolicyRequest: patchedExpressionPolicyRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /policies/expression/{policy_uuid}/
     - Source Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Expression Policy. 
     - parameter patchedExpressionPolicyRequest: (body)  (optional)
     - returns: RequestBuilder<ExpressionPolicy> 
     */
    open class func policiesExpressionPartialUpdateWithRequestBuilder(policyUuid: UUID, patchedExpressionPolicyRequest: PatchedExpressionPolicyRequest? = nil) -> RequestBuilder<ExpressionPolicy> {
        var localVariablePath = "/policies/expression/{policy_uuid}/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedExpressionPolicyRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ExpressionPolicy>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Expression Policy. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func policiesExpressionRetrieve(policyUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: ExpressionPolicy?, _ error: Error?) -> Void)) -> RequestTask {
        return policiesExpressionRetrieveWithRequestBuilder(policyUuid: policyUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /policies/expression/{policy_uuid}/
     - Source Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Expression Policy. 
     - returns: RequestBuilder<ExpressionPolicy> 
     */
    open class func policiesExpressionRetrieveWithRequestBuilder(policyUuid: UUID) -> RequestBuilder<ExpressionPolicy> {
        var localVariablePath = "/policies/expression/{policy_uuid}/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ExpressionPolicy>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Expression Policy. 
     - parameter expressionPolicyRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func policiesExpressionUpdate(policyUuid: UUID, expressionPolicyRequest: ExpressionPolicyRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: ExpressionPolicy?, _ error: Error?) -> Void)) -> RequestTask {
        return policiesExpressionUpdateWithRequestBuilder(policyUuid: policyUuid, expressionPolicyRequest: expressionPolicyRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /policies/expression/{policy_uuid}/
     - Source Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Expression Policy. 
     - parameter expressionPolicyRequest: (body)  
     - returns: RequestBuilder<ExpressionPolicy> 
     */
    open class func policiesExpressionUpdateWithRequestBuilder(policyUuid: UUID, expressionPolicyRequest: ExpressionPolicyRequest) -> RequestBuilder<ExpressionPolicy> {
        var localVariablePath = "/policies/expression/{policy_uuid}/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: expressionPolicyRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ExpressionPolicy>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Expression Policy. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func policiesExpressionUsedByList(policyUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: [UsedBy]?, _ error: Error?) -> Void)) -> RequestTask {
        return policiesExpressionUsedByListWithRequestBuilder(policyUuid: policyUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /policies/expression/{policy_uuid}/used_by/
     - Get a list of all objects that use this object
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Expression Policy. 
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func policiesExpressionUsedByListWithRequestBuilder(policyUuid: UUID) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/policies/expression/{policy_uuid}/used_by/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter passwordPolicyRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func policiesPasswordCreate(passwordPolicyRequest: PasswordPolicyRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PasswordPolicy?, _ error: Error?) -> Void)) -> RequestTask {
        return policiesPasswordCreateWithRequestBuilder(passwordPolicyRequest: passwordPolicyRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /policies/password/
     - Password Policy Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter passwordPolicyRequest: (body)  
     - returns: RequestBuilder<PasswordPolicy> 
     */
    open class func policiesPasswordCreateWithRequestBuilder(passwordPolicyRequest: PasswordPolicyRequest) -> RequestBuilder<PasswordPolicy> {
        let localVariablePath = "/policies/password/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: passwordPolicyRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PasswordPolicy>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Password Policy. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func policiesPasswordDestroy(policyUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return policiesPasswordDestroyWithRequestBuilder(policyUuid: policyUuid).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /policies/password/{policy_uuid}/
     - Password Policy Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Password Policy. 
     - returns: RequestBuilder<Void> 
     */
    open class func policiesPasswordDestroyWithRequestBuilder(policyUuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/policies/password/{policy_uuid}/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter passwordExpiryPolicyRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func policiesPasswordExpiryCreate(passwordExpiryPolicyRequest: PasswordExpiryPolicyRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PasswordExpiryPolicy?, _ error: Error?) -> Void)) -> RequestTask {
        return policiesPasswordExpiryCreateWithRequestBuilder(passwordExpiryPolicyRequest: passwordExpiryPolicyRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /policies/password_expiry/
     - Password Expiry Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter passwordExpiryPolicyRequest: (body)  
     - returns: RequestBuilder<PasswordExpiryPolicy> 
     */
    open class func policiesPasswordExpiryCreateWithRequestBuilder(passwordExpiryPolicyRequest: PasswordExpiryPolicyRequest) -> RequestBuilder<PasswordExpiryPolicy> {
        let localVariablePath = "/policies/password_expiry/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: passwordExpiryPolicyRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PasswordExpiryPolicy>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Password Expiry Policy. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func policiesPasswordExpiryDestroy(policyUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return policiesPasswordExpiryDestroyWithRequestBuilder(policyUuid: policyUuid).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /policies/password_expiry/{policy_uuid}/
     - Password Expiry Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Password Expiry Policy. 
     - returns: RequestBuilder<Void> 
     */
    open class func policiesPasswordExpiryDestroyWithRequestBuilder(policyUuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/policies/password_expiry/{policy_uuid}/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter created: (query)  (optional)
     - parameter days: (query)  (optional)
     - parameter denyOnly: (query)  (optional)
     - parameter executionLogging: (query)  (optional)
     - parameter lastUpdated: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter policyUuid: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func policiesPasswordExpiryList(created: Date? = nil, days: Int? = nil, denyOnly: Bool? = nil, executionLogging: Bool? = nil, lastUpdated: Date? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, policyUuid: UUID? = nil, search: String? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedPasswordExpiryPolicyList?, _ error: Error?) -> Void)) -> RequestTask {
        return policiesPasswordExpiryListWithRequestBuilder(created: created, days: days, denyOnly: denyOnly, executionLogging: executionLogging, lastUpdated: lastUpdated, name: name, ordering: ordering, page: page, pageSize: pageSize, policyUuid: policyUuid, search: search).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /policies/password_expiry/
     - Password Expiry Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter created: (query)  (optional)
     - parameter days: (query)  (optional)
     - parameter denyOnly: (query)  (optional)
     - parameter executionLogging: (query)  (optional)
     - parameter lastUpdated: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter policyUuid: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - returns: RequestBuilder<PaginatedPasswordExpiryPolicyList> 
     */
    open class func policiesPasswordExpiryListWithRequestBuilder(created: Date? = nil, days: Int? = nil, denyOnly: Bool? = nil, executionLogging: Bool? = nil, lastUpdated: Date? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, policyUuid: UUID? = nil, search: String? = nil) -> RequestBuilder<PaginatedPasswordExpiryPolicyList> {
        let localVariablePath = "/policies/password_expiry/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "created": (wrappedValue: created?.encodeToJSON(), isExplode: true),
            "days": (wrappedValue: days?.encodeToJSON(), isExplode: true),
            "deny_only": (wrappedValue: denyOnly?.encodeToJSON(), isExplode: true),
            "execution_logging": (wrappedValue: executionLogging?.encodeToJSON(), isExplode: true),
            "last_updated": (wrappedValue: lastUpdated?.encodeToJSON(), isExplode: true),
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "policy_uuid": (wrappedValue: policyUuid?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedPasswordExpiryPolicyList>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Password Expiry Policy. 
     - parameter patchedPasswordExpiryPolicyRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func policiesPasswordExpiryPartialUpdate(policyUuid: UUID, patchedPasswordExpiryPolicyRequest: PatchedPasswordExpiryPolicyRequest? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PasswordExpiryPolicy?, _ error: Error?) -> Void)) -> RequestTask {
        return policiesPasswordExpiryPartialUpdateWithRequestBuilder(policyUuid: policyUuid, patchedPasswordExpiryPolicyRequest: patchedPasswordExpiryPolicyRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /policies/password_expiry/{policy_uuid}/
     - Password Expiry Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Password Expiry Policy. 
     - parameter patchedPasswordExpiryPolicyRequest: (body)  (optional)
     - returns: RequestBuilder<PasswordExpiryPolicy> 
     */
    open class func policiesPasswordExpiryPartialUpdateWithRequestBuilder(policyUuid: UUID, patchedPasswordExpiryPolicyRequest: PatchedPasswordExpiryPolicyRequest? = nil) -> RequestBuilder<PasswordExpiryPolicy> {
        var localVariablePath = "/policies/password_expiry/{policy_uuid}/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedPasswordExpiryPolicyRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PasswordExpiryPolicy>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Password Expiry Policy. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func policiesPasswordExpiryRetrieve(policyUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PasswordExpiryPolicy?, _ error: Error?) -> Void)) -> RequestTask {
        return policiesPasswordExpiryRetrieveWithRequestBuilder(policyUuid: policyUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /policies/password_expiry/{policy_uuid}/
     - Password Expiry Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Password Expiry Policy. 
     - returns: RequestBuilder<PasswordExpiryPolicy> 
     */
    open class func policiesPasswordExpiryRetrieveWithRequestBuilder(policyUuid: UUID) -> RequestBuilder<PasswordExpiryPolicy> {
        var localVariablePath = "/policies/password_expiry/{policy_uuid}/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PasswordExpiryPolicy>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Password Expiry Policy. 
     - parameter passwordExpiryPolicyRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func policiesPasswordExpiryUpdate(policyUuid: UUID, passwordExpiryPolicyRequest: PasswordExpiryPolicyRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PasswordExpiryPolicy?, _ error: Error?) -> Void)) -> RequestTask {
        return policiesPasswordExpiryUpdateWithRequestBuilder(policyUuid: policyUuid, passwordExpiryPolicyRequest: passwordExpiryPolicyRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /policies/password_expiry/{policy_uuid}/
     - Password Expiry Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Password Expiry Policy. 
     - parameter passwordExpiryPolicyRequest: (body)  
     - returns: RequestBuilder<PasswordExpiryPolicy> 
     */
    open class func policiesPasswordExpiryUpdateWithRequestBuilder(policyUuid: UUID, passwordExpiryPolicyRequest: PasswordExpiryPolicyRequest) -> RequestBuilder<PasswordExpiryPolicy> {
        var localVariablePath = "/policies/password_expiry/{policy_uuid}/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: passwordExpiryPolicyRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PasswordExpiryPolicy>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Password Expiry Policy. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func policiesPasswordExpiryUsedByList(policyUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: [UsedBy]?, _ error: Error?) -> Void)) -> RequestTask {
        return policiesPasswordExpiryUsedByListWithRequestBuilder(policyUuid: policyUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /policies/password_expiry/{policy_uuid}/used_by/
     - Get a list of all objects that use this object
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Password Expiry Policy. 
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func policiesPasswordExpiryUsedByListWithRequestBuilder(policyUuid: UUID) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/policies/password_expiry/{policy_uuid}/used_by/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter amountDigits: (query)  (optional)
     - parameter amountLowercase: (query)  (optional)
     - parameter amountSymbols: (query)  (optional)
     - parameter amountUppercase: (query)  (optional)
     - parameter checkHaveIBeenPwned: (query)  (optional)
     - parameter checkStaticRules: (query)  (optional)
     - parameter checkZxcvbn: (query)  (optional)
     - parameter created: (query)  (optional)
     - parameter errorMessage: (query)  (optional)
     - parameter executionLogging: (query)  (optional)
     - parameter hibpAllowedCount: (query)  (optional)
     - parameter lastUpdated: (query)  (optional)
     - parameter lengthMin: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter passwordField: (query)  (optional)
     - parameter policyUuid: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter symbolCharset: (query)  (optional)
     - parameter zxcvbnScoreThreshold: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func policiesPasswordList(amountDigits: Int? = nil, amountLowercase: Int? = nil, amountSymbols: Int? = nil, amountUppercase: Int? = nil, checkHaveIBeenPwned: Bool? = nil, checkStaticRules: Bool? = nil, checkZxcvbn: Bool? = nil, created: Date? = nil, errorMessage: String? = nil, executionLogging: Bool? = nil, hibpAllowedCount: Int? = nil, lastUpdated: Date? = nil, lengthMin: Int? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, passwordField: String? = nil, policyUuid: UUID? = nil, search: String? = nil, symbolCharset: String? = nil, zxcvbnScoreThreshold: Int? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedPasswordPolicyList?, _ error: Error?) -> Void)) -> RequestTask {
        return policiesPasswordListWithRequestBuilder(amountDigits: amountDigits, amountLowercase: amountLowercase, amountSymbols: amountSymbols, amountUppercase: amountUppercase, checkHaveIBeenPwned: checkHaveIBeenPwned, checkStaticRules: checkStaticRules, checkZxcvbn: checkZxcvbn, created: created, errorMessage: errorMessage, executionLogging: executionLogging, hibpAllowedCount: hibpAllowedCount, lastUpdated: lastUpdated, lengthMin: lengthMin, name: name, ordering: ordering, page: page, pageSize: pageSize, passwordField: passwordField, policyUuid: policyUuid, search: search, symbolCharset: symbolCharset, zxcvbnScoreThreshold: zxcvbnScoreThreshold).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /policies/password/
     - Password Policy Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter amountDigits: (query)  (optional)
     - parameter amountLowercase: (query)  (optional)
     - parameter amountSymbols: (query)  (optional)
     - parameter amountUppercase: (query)  (optional)
     - parameter checkHaveIBeenPwned: (query)  (optional)
     - parameter checkStaticRules: (query)  (optional)
     - parameter checkZxcvbn: (query)  (optional)
     - parameter created: (query)  (optional)
     - parameter errorMessage: (query)  (optional)
     - parameter executionLogging: (query)  (optional)
     - parameter hibpAllowedCount: (query)  (optional)
     - parameter lastUpdated: (query)  (optional)
     - parameter lengthMin: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter passwordField: (query)  (optional)
     - parameter policyUuid: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter symbolCharset: (query)  (optional)
     - parameter zxcvbnScoreThreshold: (query)  (optional)
     - returns: RequestBuilder<PaginatedPasswordPolicyList> 
     */
    open class func policiesPasswordListWithRequestBuilder(amountDigits: Int? = nil, amountLowercase: Int? = nil, amountSymbols: Int? = nil, amountUppercase: Int? = nil, checkHaveIBeenPwned: Bool? = nil, checkStaticRules: Bool? = nil, checkZxcvbn: Bool? = nil, created: Date? = nil, errorMessage: String? = nil, executionLogging: Bool? = nil, hibpAllowedCount: Int? = nil, lastUpdated: Date? = nil, lengthMin: Int? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, passwordField: String? = nil, policyUuid: UUID? = nil, search: String? = nil, symbolCharset: String? = nil, zxcvbnScoreThreshold: Int? = nil) -> RequestBuilder<PaginatedPasswordPolicyList> {
        let localVariablePath = "/policies/password/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "amount_digits": (wrappedValue: amountDigits?.encodeToJSON(), isExplode: true),
            "amount_lowercase": (wrappedValue: amountLowercase?.encodeToJSON(), isExplode: true),
            "amount_symbols": (wrappedValue: amountSymbols?.encodeToJSON(), isExplode: true),
            "amount_uppercase": (wrappedValue: amountUppercase?.encodeToJSON(), isExplode: true),
            "check_have_i_been_pwned": (wrappedValue: checkHaveIBeenPwned?.encodeToJSON(), isExplode: true),
            "check_static_rules": (wrappedValue: checkStaticRules?.encodeToJSON(), isExplode: true),
            "check_zxcvbn": (wrappedValue: checkZxcvbn?.encodeToJSON(), isExplode: true),
            "created": (wrappedValue: created?.encodeToJSON(), isExplode: true),
            "error_message": (wrappedValue: errorMessage?.encodeToJSON(), isExplode: true),
            "execution_logging": (wrappedValue: executionLogging?.encodeToJSON(), isExplode: true),
            "hibp_allowed_count": (wrappedValue: hibpAllowedCount?.encodeToJSON(), isExplode: true),
            "last_updated": (wrappedValue: lastUpdated?.encodeToJSON(), isExplode: true),
            "length_min": (wrappedValue: lengthMin?.encodeToJSON(), isExplode: true),
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "password_field": (wrappedValue: passwordField?.encodeToJSON(), isExplode: true),
            "policy_uuid": (wrappedValue: policyUuid?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
            "symbol_charset": (wrappedValue: symbolCharset?.encodeToJSON(), isExplode: true),
            "zxcvbn_score_threshold": (wrappedValue: zxcvbnScoreThreshold?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedPasswordPolicyList>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Password Policy. 
     - parameter patchedPasswordPolicyRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func policiesPasswordPartialUpdate(policyUuid: UUID, patchedPasswordPolicyRequest: PatchedPasswordPolicyRequest? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PasswordPolicy?, _ error: Error?) -> Void)) -> RequestTask {
        return policiesPasswordPartialUpdateWithRequestBuilder(policyUuid: policyUuid, patchedPasswordPolicyRequest: patchedPasswordPolicyRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /policies/password/{policy_uuid}/
     - Password Policy Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Password Policy. 
     - parameter patchedPasswordPolicyRequest: (body)  (optional)
     - returns: RequestBuilder<PasswordPolicy> 
     */
    open class func policiesPasswordPartialUpdateWithRequestBuilder(policyUuid: UUID, patchedPasswordPolicyRequest: PatchedPasswordPolicyRequest? = nil) -> RequestBuilder<PasswordPolicy> {
        var localVariablePath = "/policies/password/{policy_uuid}/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedPasswordPolicyRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PasswordPolicy>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Password Policy. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func policiesPasswordRetrieve(policyUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PasswordPolicy?, _ error: Error?) -> Void)) -> RequestTask {
        return policiesPasswordRetrieveWithRequestBuilder(policyUuid: policyUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /policies/password/{policy_uuid}/
     - Password Policy Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Password Policy. 
     - returns: RequestBuilder<PasswordPolicy> 
     */
    open class func policiesPasswordRetrieveWithRequestBuilder(policyUuid: UUID) -> RequestBuilder<PasswordPolicy> {
        var localVariablePath = "/policies/password/{policy_uuid}/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PasswordPolicy>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Password Policy. 
     - parameter passwordPolicyRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func policiesPasswordUpdate(policyUuid: UUID, passwordPolicyRequest: PasswordPolicyRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PasswordPolicy?, _ error: Error?) -> Void)) -> RequestTask {
        return policiesPasswordUpdateWithRequestBuilder(policyUuid: policyUuid, passwordPolicyRequest: passwordPolicyRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /policies/password/{policy_uuid}/
     - Password Policy Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Password Policy. 
     - parameter passwordPolicyRequest: (body)  
     - returns: RequestBuilder<PasswordPolicy> 
     */
    open class func policiesPasswordUpdateWithRequestBuilder(policyUuid: UUID, passwordPolicyRequest: PasswordPolicyRequest) -> RequestBuilder<PasswordPolicy> {
        var localVariablePath = "/policies/password/{policy_uuid}/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: passwordPolicyRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PasswordPolicy>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Password Policy. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func policiesPasswordUsedByList(policyUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: [UsedBy]?, _ error: Error?) -> Void)) -> RequestTask {
        return policiesPasswordUsedByListWithRequestBuilder(policyUuid: policyUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /policies/password/{policy_uuid}/used_by/
     - Get a list of all objects that use this object
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Password Policy. 
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func policiesPasswordUsedByListWithRequestBuilder(policyUuid: UUID) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/policies/password/{policy_uuid}/used_by/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter reputationPolicyRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func policiesReputationCreate(reputationPolicyRequest: ReputationPolicyRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: ReputationPolicy?, _ error: Error?) -> Void)) -> RequestTask {
        return policiesReputationCreateWithRequestBuilder(reputationPolicyRequest: reputationPolicyRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /policies/reputation/
     - Reputation Policy Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter reputationPolicyRequest: (body)  
     - returns: RequestBuilder<ReputationPolicy> 
     */
    open class func policiesReputationCreateWithRequestBuilder(reputationPolicyRequest: ReputationPolicyRequest) -> RequestBuilder<ReputationPolicy> {
        let localVariablePath = "/policies/reputation/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: reputationPolicyRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ReputationPolicy>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Reputation Policy. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func policiesReputationDestroy(policyUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return policiesReputationDestroyWithRequestBuilder(policyUuid: policyUuid).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /policies/reputation/{policy_uuid}/
     - Reputation Policy Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Reputation Policy. 
     - returns: RequestBuilder<Void> 
     */
    open class func policiesReputationDestroyWithRequestBuilder(policyUuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/policies/reputation/{policy_uuid}/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter checkIp: (query)  (optional)
     - parameter checkUsername: (query)  (optional)
     - parameter created: (query)  (optional)
     - parameter executionLogging: (query)  (optional)
     - parameter lastUpdated: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter policyUuid: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter threshold: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func policiesReputationList(checkIp: Bool? = nil, checkUsername: Bool? = nil, created: Date? = nil, executionLogging: Bool? = nil, lastUpdated: Date? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, policyUuid: UUID? = nil, search: String? = nil, threshold: Int? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedReputationPolicyList?, _ error: Error?) -> Void)) -> RequestTask {
        return policiesReputationListWithRequestBuilder(checkIp: checkIp, checkUsername: checkUsername, created: created, executionLogging: executionLogging, lastUpdated: lastUpdated, name: name, ordering: ordering, page: page, pageSize: pageSize, policyUuid: policyUuid, search: search, threshold: threshold).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /policies/reputation/
     - Reputation Policy Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter checkIp: (query)  (optional)
     - parameter checkUsername: (query)  (optional)
     - parameter created: (query)  (optional)
     - parameter executionLogging: (query)  (optional)
     - parameter lastUpdated: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter policyUuid: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter threshold: (query)  (optional)
     - returns: RequestBuilder<PaginatedReputationPolicyList> 
     */
    open class func policiesReputationListWithRequestBuilder(checkIp: Bool? = nil, checkUsername: Bool? = nil, created: Date? = nil, executionLogging: Bool? = nil, lastUpdated: Date? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, policyUuid: UUID? = nil, search: String? = nil, threshold: Int? = nil) -> RequestBuilder<PaginatedReputationPolicyList> {
        let localVariablePath = "/policies/reputation/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "check_ip": (wrappedValue: checkIp?.encodeToJSON(), isExplode: true),
            "check_username": (wrappedValue: checkUsername?.encodeToJSON(), isExplode: true),
            "created": (wrappedValue: created?.encodeToJSON(), isExplode: true),
            "execution_logging": (wrappedValue: executionLogging?.encodeToJSON(), isExplode: true),
            "last_updated": (wrappedValue: lastUpdated?.encodeToJSON(), isExplode: true),
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "policy_uuid": (wrappedValue: policyUuid?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
            "threshold": (wrappedValue: threshold?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedReputationPolicyList>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Reputation Policy. 
     - parameter patchedReputationPolicyRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func policiesReputationPartialUpdate(policyUuid: UUID, patchedReputationPolicyRequest: PatchedReputationPolicyRequest? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: ReputationPolicy?, _ error: Error?) -> Void)) -> RequestTask {
        return policiesReputationPartialUpdateWithRequestBuilder(policyUuid: policyUuid, patchedReputationPolicyRequest: patchedReputationPolicyRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /policies/reputation/{policy_uuid}/
     - Reputation Policy Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Reputation Policy. 
     - parameter patchedReputationPolicyRequest: (body)  (optional)
     - returns: RequestBuilder<ReputationPolicy> 
     */
    open class func policiesReputationPartialUpdateWithRequestBuilder(policyUuid: UUID, patchedReputationPolicyRequest: PatchedReputationPolicyRequest? = nil) -> RequestBuilder<ReputationPolicy> {
        var localVariablePath = "/policies/reputation/{policy_uuid}/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedReputationPolicyRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ReputationPolicy>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Reputation Policy. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func policiesReputationRetrieve(policyUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: ReputationPolicy?, _ error: Error?) -> Void)) -> RequestTask {
        return policiesReputationRetrieveWithRequestBuilder(policyUuid: policyUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /policies/reputation/{policy_uuid}/
     - Reputation Policy Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Reputation Policy. 
     - returns: RequestBuilder<ReputationPolicy> 
     */
    open class func policiesReputationRetrieveWithRequestBuilder(policyUuid: UUID) -> RequestBuilder<ReputationPolicy> {
        var localVariablePath = "/policies/reputation/{policy_uuid}/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ReputationPolicy>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter reputationUuid: (path) A UUID string identifying this Reputation Score. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func policiesReputationScoresDestroy(reputationUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return policiesReputationScoresDestroyWithRequestBuilder(reputationUuid: reputationUuid).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /policies/reputation/scores/{reputation_uuid}/
     - Reputation Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter reputationUuid: (path) A UUID string identifying this Reputation Score. 
     - returns: RequestBuilder<Void> 
     */
    open class func policiesReputationScoresDestroyWithRequestBuilder(reputationUuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/policies/reputation/scores/{reputation_uuid}/"
        let reputationUuidPreEscape = "\(APIHelper.mapValueToPathItem(reputationUuid))"
        let reputationUuidPostEscape = reputationUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{reputation_uuid}", with: reputationUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter identifier: (query)  (optional)
     - parameter ip: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter score: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func policiesReputationScoresList(identifier: String? = nil, ip: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, score: Int? = nil, search: String? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedReputationList?, _ error: Error?) -> Void)) -> RequestTask {
        return policiesReputationScoresListWithRequestBuilder(identifier: identifier, ip: ip, ordering: ordering, page: page, pageSize: pageSize, score: score, search: search).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /policies/reputation/scores/
     - Reputation Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter identifier: (query)  (optional)
     - parameter ip: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter score: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - returns: RequestBuilder<PaginatedReputationList> 
     */
    open class func policiesReputationScoresListWithRequestBuilder(identifier: String? = nil, ip: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, score: Int? = nil, search: String? = nil) -> RequestBuilder<PaginatedReputationList> {
        let localVariablePath = "/policies/reputation/scores/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "identifier": (wrappedValue: identifier?.encodeToJSON(), isExplode: true),
            "ip": (wrappedValue: ip?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "score": (wrappedValue: score?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedReputationList>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter reputationUuid: (path) A UUID string identifying this Reputation Score. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func policiesReputationScoresRetrieve(reputationUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Reputation?, _ error: Error?) -> Void)) -> RequestTask {
        return policiesReputationScoresRetrieveWithRequestBuilder(reputationUuid: reputationUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /policies/reputation/scores/{reputation_uuid}/
     - Reputation Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter reputationUuid: (path) A UUID string identifying this Reputation Score. 
     - returns: RequestBuilder<Reputation> 
     */
    open class func policiesReputationScoresRetrieveWithRequestBuilder(reputationUuid: UUID) -> RequestBuilder<Reputation> {
        var localVariablePath = "/policies/reputation/scores/{reputation_uuid}/"
        let reputationUuidPreEscape = "\(APIHelper.mapValueToPathItem(reputationUuid))"
        let reputationUuidPostEscape = reputationUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{reputation_uuid}", with: reputationUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Reputation>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter reputationUuid: (path) A UUID string identifying this Reputation Score. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func policiesReputationScoresUsedByList(reputationUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: [UsedBy]?, _ error: Error?) -> Void)) -> RequestTask {
        return policiesReputationScoresUsedByListWithRequestBuilder(reputationUuid: reputationUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /policies/reputation/scores/{reputation_uuid}/used_by/
     - Get a list of all objects that use this object
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter reputationUuid: (path) A UUID string identifying this Reputation Score. 
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func policiesReputationScoresUsedByListWithRequestBuilder(reputationUuid: UUID) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/policies/reputation/scores/{reputation_uuid}/used_by/"
        let reputationUuidPreEscape = "\(APIHelper.mapValueToPathItem(reputationUuid))"
        let reputationUuidPostEscape = reputationUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{reputation_uuid}", with: reputationUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Reputation Policy. 
     - parameter reputationPolicyRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func policiesReputationUpdate(policyUuid: UUID, reputationPolicyRequest: ReputationPolicyRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: ReputationPolicy?, _ error: Error?) -> Void)) -> RequestTask {
        return policiesReputationUpdateWithRequestBuilder(policyUuid: policyUuid, reputationPolicyRequest: reputationPolicyRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /policies/reputation/{policy_uuid}/
     - Reputation Policy Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Reputation Policy. 
     - parameter reputationPolicyRequest: (body)  
     - returns: RequestBuilder<ReputationPolicy> 
     */
    open class func policiesReputationUpdateWithRequestBuilder(policyUuid: UUID, reputationPolicyRequest: ReputationPolicyRequest) -> RequestBuilder<ReputationPolicy> {
        var localVariablePath = "/policies/reputation/{policy_uuid}/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: reputationPolicyRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ReputationPolicy>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter policyUuid: (path) A UUID string identifying this Reputation Policy. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func policiesReputationUsedByList(policyUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: [UsedBy]?, _ error: Error?) -> Void)) -> RequestTask {
        return policiesReputationUsedByListWithRequestBuilder(policyUuid: policyUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /policies/reputation/{policy_uuid}/used_by/
     - Get a list of all objects that use this object
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter policyUuid: (path) A UUID string identifying this Reputation Policy. 
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func policiesReputationUsedByListWithRequestBuilder(policyUuid: UUID) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/policies/reputation/{policy_uuid}/used_by/"
        let policyUuidPreEscape = "\(APIHelper.mapValueToPathItem(policyUuid))"
        let policyUuidPostEscape = policyUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{policy_uuid}", with: policyUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
