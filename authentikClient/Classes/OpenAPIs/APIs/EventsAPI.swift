//
// EventsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class EventsAPI {

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func eventsEventsActionsList(apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: [TypeCreate]?, _ error: Error?) -> Void)) -> RequestTask {
        return eventsEventsActionsListWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /events/events/actions/
     - Get all actions
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - returns: RequestBuilder<[TypeCreate]> 
     */
    open class func eventsEventsActionsListWithRequestBuilder() -> RequestBuilder<[TypeCreate]> {
        let localVariablePath = "/events/events/actions/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[TypeCreate]>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter eventRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func eventsEventsCreate(eventRequest: EventRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Event?, _ error: Error?) -> Void)) -> RequestTask {
        return eventsEventsCreateWithRequestBuilder(eventRequest: eventRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /events/events/
     - Event Read-Only Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter eventRequest: (body)  
     - returns: RequestBuilder<Event> 
     */
    open class func eventsEventsCreateWithRequestBuilder(eventRequest: EventRequest) -> RequestBuilder<Event> {
        let localVariablePath = "/events/events/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: eventRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Event>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter eventUuid: (path) A UUID string identifying this Event. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func eventsEventsDestroy(eventUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return eventsEventsDestroyWithRequestBuilder(eventUuid: eventUuid).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /events/events/{event_uuid}/
     - Event Read-Only Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter eventUuid: (path) A UUID string identifying this Event. 
     - returns: RequestBuilder<Void> 
     */
    open class func eventsEventsDestroyWithRequestBuilder(eventUuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/events/events/{event_uuid}/"
        let eventUuidPreEscape = "\(APIHelper.mapValueToPathItem(eventUuid))"
        let eventUuidPostEscape = eventUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{event_uuid}", with: eventUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter action: (query)  (optional)
     - parameter clientIp: (query)  (optional)
     - parameter contextAuthorizedApp: (query) Context Authorized application (optional)
     - parameter contextModelApp: (query) Context Model App (optional)
     - parameter contextModelName: (query) Context Model Name (optional)
     - parameter contextModelPk: (query) Context Model Primary Key (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter tenantName: (query) Tenant name (optional)
     - parameter username: (query) Username (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func eventsEventsList(action: String? = nil, clientIp: String? = nil, contextAuthorizedApp: String? = nil, contextModelApp: String? = nil, contextModelName: String? = nil, contextModelPk: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, tenantName: String? = nil, username: String? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedEventList?, _ error: Error?) -> Void)) -> RequestTask {
        return eventsEventsListWithRequestBuilder(action: action, clientIp: clientIp, contextAuthorizedApp: contextAuthorizedApp, contextModelApp: contextModelApp, contextModelName: contextModelName, contextModelPk: contextModelPk, ordering: ordering, page: page, pageSize: pageSize, search: search, tenantName: tenantName, username: username).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /events/events/
     - Event Read-Only Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter action: (query)  (optional)
     - parameter clientIp: (query)  (optional)
     - parameter contextAuthorizedApp: (query) Context Authorized application (optional)
     - parameter contextModelApp: (query) Context Model App (optional)
     - parameter contextModelName: (query) Context Model Name (optional)
     - parameter contextModelPk: (query) Context Model Primary Key (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter tenantName: (query) Tenant name (optional)
     - parameter username: (query) Username (optional)
     - returns: RequestBuilder<PaginatedEventList> 
     */
    open class func eventsEventsListWithRequestBuilder(action: String? = nil, clientIp: String? = nil, contextAuthorizedApp: String? = nil, contextModelApp: String? = nil, contextModelName: String? = nil, contextModelPk: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, tenantName: String? = nil, username: String? = nil) -> RequestBuilder<PaginatedEventList> {
        let localVariablePath = "/events/events/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "action": (wrappedValue: action?.encodeToJSON(), isExplode: true),
            "client_ip": (wrappedValue: clientIp?.encodeToJSON(), isExplode: true),
            "context_authorized_app": (wrappedValue: contextAuthorizedApp?.encodeToJSON(), isExplode: true),
            "context_model_app": (wrappedValue: contextModelApp?.encodeToJSON(), isExplode: true),
            "context_model_name": (wrappedValue: contextModelName?.encodeToJSON(), isExplode: true),
            "context_model_pk": (wrappedValue: contextModelPk?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
            "tenant_name": (wrappedValue: tenantName?.encodeToJSON(), isExplode: true),
            "username": (wrappedValue: username?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedEventList>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter eventUuid: (path) A UUID string identifying this Event. 
     - parameter patchedEventRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func eventsEventsPartialUpdate(eventUuid: UUID, patchedEventRequest: PatchedEventRequest? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Event?, _ error: Error?) -> Void)) -> RequestTask {
        return eventsEventsPartialUpdateWithRequestBuilder(eventUuid: eventUuid, patchedEventRequest: patchedEventRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /events/events/{event_uuid}/
     - Event Read-Only Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter eventUuid: (path) A UUID string identifying this Event. 
     - parameter patchedEventRequest: (body)  (optional)
     - returns: RequestBuilder<Event> 
     */
    open class func eventsEventsPartialUpdateWithRequestBuilder(eventUuid: UUID, patchedEventRequest: PatchedEventRequest? = nil) -> RequestBuilder<Event> {
        var localVariablePath = "/events/events/{event_uuid}/"
        let eventUuidPreEscape = "\(APIHelper.mapValueToPathItem(eventUuid))"
        let eventUuidPostEscape = eventUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{event_uuid}", with: eventUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedEventRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Event>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter action: (query)  (optional)
     - parameter query: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func eventsEventsPerMonthList(action: String? = nil, query: String? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: [Coordinate]?, _ error: Error?) -> Void)) -> RequestTask {
        return eventsEventsPerMonthListWithRequestBuilder(action: action, query: query).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /events/events/per_month/
     - Get the count of events per month
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter action: (query)  (optional)
     - parameter query: (query)  (optional)
     - returns: RequestBuilder<[Coordinate]> 
     */
    open class func eventsEventsPerMonthListWithRequestBuilder(action: String? = nil, query: String? = nil) -> RequestBuilder<[Coordinate]> {
        let localVariablePath = "/events/events/per_month/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "action": (wrappedValue: action?.encodeToJSON(), isExplode: true),
            "query": (wrappedValue: query?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[Coordinate]>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter eventUuid: (path) A UUID string identifying this Event. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func eventsEventsRetrieve(eventUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Event?, _ error: Error?) -> Void)) -> RequestTask {
        return eventsEventsRetrieveWithRequestBuilder(eventUuid: eventUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /events/events/{event_uuid}/
     - Event Read-Only Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter eventUuid: (path) A UUID string identifying this Event. 
     - returns: RequestBuilder<Event> 
     */
    open class func eventsEventsRetrieveWithRequestBuilder(eventUuid: UUID) -> RequestBuilder<Event> {
        var localVariablePath = "/events/events/{event_uuid}/"
        let eventUuidPreEscape = "\(APIHelper.mapValueToPathItem(eventUuid))"
        let eventUuidPostEscape = eventUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{event_uuid}", with: eventUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Event>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter action: (query)  (optional)
     - parameter topN: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func eventsEventsTopPerUserList(action: String? = nil, topN: Int? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: [EventTopPerUser]?, _ error: Error?) -> Void)) -> RequestTask {
        return eventsEventsTopPerUserListWithRequestBuilder(action: action, topN: topN).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /events/events/top_per_user/
     - Get the top_n events grouped by user count
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter action: (query)  (optional)
     - parameter topN: (query)  (optional)
     - returns: RequestBuilder<[EventTopPerUser]> 
     */
    open class func eventsEventsTopPerUserListWithRequestBuilder(action: String? = nil, topN: Int? = nil) -> RequestBuilder<[EventTopPerUser]> {
        let localVariablePath = "/events/events/top_per_user/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "action": (wrappedValue: action?.encodeToJSON(), isExplode: true),
            "top_n": (wrappedValue: topN?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[EventTopPerUser]>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter eventUuid: (path) A UUID string identifying this Event. 
     - parameter eventRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func eventsEventsUpdate(eventUuid: UUID, eventRequest: EventRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Event?, _ error: Error?) -> Void)) -> RequestTask {
        return eventsEventsUpdateWithRequestBuilder(eventUuid: eventUuid, eventRequest: eventRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /events/events/{event_uuid}/
     - Event Read-Only Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter eventUuid: (path) A UUID string identifying this Event. 
     - parameter eventRequest: (body)  
     - returns: RequestBuilder<Event> 
     */
    open class func eventsEventsUpdateWithRequestBuilder(eventUuid: UUID, eventRequest: EventRequest) -> RequestBuilder<Event> {
        var localVariablePath = "/events/events/{event_uuid}/"
        let eventUuidPreEscape = "\(APIHelper.mapValueToPathItem(eventUuid))"
        let eventUuidPostEscape = eventUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{event_uuid}", with: eventUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: eventRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Event>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter uuid: (path) A UUID string identifying this Notification. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func eventsNotificationsDestroy(uuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return eventsNotificationsDestroyWithRequestBuilder(uuid: uuid).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /events/notifications/{uuid}/
     - Notification Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter uuid: (path) A UUID string identifying this Notification. 
     - returns: RequestBuilder<Void> 
     */
    open class func eventsNotificationsDestroyWithRequestBuilder(uuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/events/notifications/{uuid}/"
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter severity
     */
    public enum Severity_eventsNotificationsList: String, CaseIterable {
        case alert = "alert"
        case notice = "notice"
        case warning = "warning"
    }

    /**

     - parameter body: (query)  (optional)
     - parameter created: (query)  (optional)
     - parameter event: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter seen: (query)  (optional)
     - parameter severity: (query) * &#x60;notice&#x60; - Notice * &#x60;warning&#x60; - Warning * &#x60;alert&#x60; - Alert (optional)
     - parameter user: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func eventsNotificationsList(body: String? = nil, created: Date? = nil, event: UUID? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, seen: Bool? = nil, severity: Severity_eventsNotificationsList? = nil, user: Int? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedNotificationList?, _ error: Error?) -> Void)) -> RequestTask {
        return eventsNotificationsListWithRequestBuilder(body: body, created: created, event: event, ordering: ordering, page: page, pageSize: pageSize, search: search, seen: seen, severity: severity, user: user).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /events/notifications/
     - Notification Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter body: (query)  (optional)
     - parameter created: (query)  (optional)
     - parameter event: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter seen: (query)  (optional)
     - parameter severity: (query) * &#x60;notice&#x60; - Notice * &#x60;warning&#x60; - Warning * &#x60;alert&#x60; - Alert (optional)
     - parameter user: (query)  (optional)
     - returns: RequestBuilder<PaginatedNotificationList> 
     */
    open class func eventsNotificationsListWithRequestBuilder(body: String? = nil, created: Date? = nil, event: UUID? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, seen: Bool? = nil, severity: Severity_eventsNotificationsList? = nil, user: Int? = nil) -> RequestBuilder<PaginatedNotificationList> {
        let localVariablePath = "/events/notifications/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "body": (wrappedValue: body?.encodeToJSON(), isExplode: true),
            "created": (wrappedValue: created?.encodeToJSON(), isExplode: true),
            "event": (wrappedValue: event?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
            "seen": (wrappedValue: seen?.encodeToJSON(), isExplode: true),
            "severity": (wrappedValue: severity?.encodeToJSON(), isExplode: true),
            "user": (wrappedValue: user?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedNotificationList>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func eventsNotificationsMarkAllSeenCreate(apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return eventsNotificationsMarkAllSeenCreateWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /events/notifications/mark_all_seen/
     - Mark all the user's notifications as seen
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - returns: RequestBuilder<Void> 
     */
    open class func eventsNotificationsMarkAllSeenCreateWithRequestBuilder() -> RequestBuilder<Void> {
        let localVariablePath = "/events/notifications/mark_all_seen/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter uuid: (path) A UUID string identifying this Notification. 
     - parameter patchedNotificationRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func eventsNotificationsPartialUpdate(uuid: UUID, patchedNotificationRequest: PatchedNotificationRequest? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Notification?, _ error: Error?) -> Void)) -> RequestTask {
        return eventsNotificationsPartialUpdateWithRequestBuilder(uuid: uuid, patchedNotificationRequest: patchedNotificationRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /events/notifications/{uuid}/
     - Notification Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter uuid: (path) A UUID string identifying this Notification. 
     - parameter patchedNotificationRequest: (body)  (optional)
     - returns: RequestBuilder<Notification> 
     */
    open class func eventsNotificationsPartialUpdateWithRequestBuilder(uuid: UUID, patchedNotificationRequest: PatchedNotificationRequest? = nil) -> RequestBuilder<Notification> {
        var localVariablePath = "/events/notifications/{uuid}/"
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedNotificationRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Notification>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter uuid: (path) A UUID string identifying this Notification. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func eventsNotificationsRetrieve(uuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Notification?, _ error: Error?) -> Void)) -> RequestTask {
        return eventsNotificationsRetrieveWithRequestBuilder(uuid: uuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /events/notifications/{uuid}/
     - Notification Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter uuid: (path) A UUID string identifying this Notification. 
     - returns: RequestBuilder<Notification> 
     */
    open class func eventsNotificationsRetrieveWithRequestBuilder(uuid: UUID) -> RequestBuilder<Notification> {
        var localVariablePath = "/events/notifications/{uuid}/"
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Notification>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter uuid: (path) A UUID string identifying this Notification. 
     - parameter notificationRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func eventsNotificationsUpdate(uuid: UUID, notificationRequest: NotificationRequest? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Notification?, _ error: Error?) -> Void)) -> RequestTask {
        return eventsNotificationsUpdateWithRequestBuilder(uuid: uuid, notificationRequest: notificationRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /events/notifications/{uuid}/
     - Notification Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter uuid: (path) A UUID string identifying this Notification. 
     - parameter notificationRequest: (body)  (optional)
     - returns: RequestBuilder<Notification> 
     */
    open class func eventsNotificationsUpdateWithRequestBuilder(uuid: UUID, notificationRequest: NotificationRequest? = nil) -> RequestBuilder<Notification> {
        var localVariablePath = "/events/notifications/{uuid}/"
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: notificationRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Notification>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter uuid: (path) A UUID string identifying this Notification. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func eventsNotificationsUsedByList(uuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: [UsedBy]?, _ error: Error?) -> Void)) -> RequestTask {
        return eventsNotificationsUsedByListWithRequestBuilder(uuid: uuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /events/notifications/{uuid}/used_by/
     - Get a list of all objects that use this object
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter uuid: (path) A UUID string identifying this Notification. 
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func eventsNotificationsUsedByListWithRequestBuilder(uuid: UUID) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/events/notifications/{uuid}/used_by/"
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter notificationRuleRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func eventsRulesCreate(notificationRuleRequest: NotificationRuleRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: NotificationRule?, _ error: Error?) -> Void)) -> RequestTask {
        return eventsRulesCreateWithRequestBuilder(notificationRuleRequest: notificationRuleRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /events/rules/
     - NotificationRule Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter notificationRuleRequest: (body)  
     - returns: RequestBuilder<NotificationRule> 
     */
    open class func eventsRulesCreateWithRequestBuilder(notificationRuleRequest: NotificationRuleRequest) -> RequestBuilder<NotificationRule> {
        let localVariablePath = "/events/rules/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: notificationRuleRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NotificationRule>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter pbmUuid: (path) A UUID string identifying this Notification Rule. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func eventsRulesDestroy(pbmUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return eventsRulesDestroyWithRequestBuilder(pbmUuid: pbmUuid).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /events/rules/{pbm_uuid}/
     - NotificationRule Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter pbmUuid: (path) A UUID string identifying this Notification Rule. 
     - returns: RequestBuilder<Void> 
     */
    open class func eventsRulesDestroyWithRequestBuilder(pbmUuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/events/rules/{pbm_uuid}/"
        let pbmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pbmUuid))"
        let pbmUuidPostEscape = pbmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pbm_uuid}", with: pbmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter severity
     */
    public enum Severity_eventsRulesList: String, CaseIterable {
        case alert = "alert"
        case notice = "notice"
        case warning = "warning"
    }

    /**

     - parameter groupName: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter severity: (query) Controls which severity level the created notifications will have.  * &#x60;notice&#x60; - Notice * &#x60;warning&#x60; - Warning * &#x60;alert&#x60; - Alert (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func eventsRulesList(groupName: String? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, severity: Severity_eventsRulesList? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedNotificationRuleList?, _ error: Error?) -> Void)) -> RequestTask {
        return eventsRulesListWithRequestBuilder(groupName: groupName, name: name, ordering: ordering, page: page, pageSize: pageSize, search: search, severity: severity).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /events/rules/
     - NotificationRule Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter groupName: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter severity: (query) Controls which severity level the created notifications will have.  * &#x60;notice&#x60; - Notice * &#x60;warning&#x60; - Warning * &#x60;alert&#x60; - Alert (optional)
     - returns: RequestBuilder<PaginatedNotificationRuleList> 
     */
    open class func eventsRulesListWithRequestBuilder(groupName: String? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, severity: Severity_eventsRulesList? = nil) -> RequestBuilder<PaginatedNotificationRuleList> {
        let localVariablePath = "/events/rules/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "group__name": (wrappedValue: groupName?.encodeToJSON(), isExplode: true),
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
            "severity": (wrappedValue: severity?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedNotificationRuleList>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter pbmUuid: (path) A UUID string identifying this Notification Rule. 
     - parameter patchedNotificationRuleRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func eventsRulesPartialUpdate(pbmUuid: UUID, patchedNotificationRuleRequest: PatchedNotificationRuleRequest? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: NotificationRule?, _ error: Error?) -> Void)) -> RequestTask {
        return eventsRulesPartialUpdateWithRequestBuilder(pbmUuid: pbmUuid, patchedNotificationRuleRequest: patchedNotificationRuleRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /events/rules/{pbm_uuid}/
     - NotificationRule Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter pbmUuid: (path) A UUID string identifying this Notification Rule. 
     - parameter patchedNotificationRuleRequest: (body)  (optional)
     - returns: RequestBuilder<NotificationRule> 
     */
    open class func eventsRulesPartialUpdateWithRequestBuilder(pbmUuid: UUID, patchedNotificationRuleRequest: PatchedNotificationRuleRequest? = nil) -> RequestBuilder<NotificationRule> {
        var localVariablePath = "/events/rules/{pbm_uuid}/"
        let pbmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pbmUuid))"
        let pbmUuidPostEscape = pbmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pbm_uuid}", with: pbmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedNotificationRuleRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NotificationRule>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter pbmUuid: (path) A UUID string identifying this Notification Rule. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func eventsRulesRetrieve(pbmUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: NotificationRule?, _ error: Error?) -> Void)) -> RequestTask {
        return eventsRulesRetrieveWithRequestBuilder(pbmUuid: pbmUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /events/rules/{pbm_uuid}/
     - NotificationRule Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter pbmUuid: (path) A UUID string identifying this Notification Rule. 
     - returns: RequestBuilder<NotificationRule> 
     */
    open class func eventsRulesRetrieveWithRequestBuilder(pbmUuid: UUID) -> RequestBuilder<NotificationRule> {
        var localVariablePath = "/events/rules/{pbm_uuid}/"
        let pbmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pbmUuid))"
        let pbmUuidPostEscape = pbmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pbm_uuid}", with: pbmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NotificationRule>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter pbmUuid: (path) A UUID string identifying this Notification Rule. 
     - parameter notificationRuleRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func eventsRulesUpdate(pbmUuid: UUID, notificationRuleRequest: NotificationRuleRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: NotificationRule?, _ error: Error?) -> Void)) -> RequestTask {
        return eventsRulesUpdateWithRequestBuilder(pbmUuid: pbmUuid, notificationRuleRequest: notificationRuleRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /events/rules/{pbm_uuid}/
     - NotificationRule Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter pbmUuid: (path) A UUID string identifying this Notification Rule. 
     - parameter notificationRuleRequest: (body)  
     - returns: RequestBuilder<NotificationRule> 
     */
    open class func eventsRulesUpdateWithRequestBuilder(pbmUuid: UUID, notificationRuleRequest: NotificationRuleRequest) -> RequestBuilder<NotificationRule> {
        var localVariablePath = "/events/rules/{pbm_uuid}/"
        let pbmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pbmUuid))"
        let pbmUuidPostEscape = pbmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pbm_uuid}", with: pbmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: notificationRuleRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NotificationRule>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter pbmUuid: (path) A UUID string identifying this Notification Rule. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func eventsRulesUsedByList(pbmUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: [UsedBy]?, _ error: Error?) -> Void)) -> RequestTask {
        return eventsRulesUsedByListWithRequestBuilder(pbmUuid: pbmUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /events/rules/{pbm_uuid}/used_by/
     - Get a list of all objects that use this object
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter pbmUuid: (path) A UUID string identifying this Notification Rule. 
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func eventsRulesUsedByListWithRequestBuilder(pbmUuid: UUID) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/events/rules/{pbm_uuid}/used_by/"
        let pbmUuidPreEscape = "\(APIHelper.mapValueToPathItem(pbmUuid))"
        let pbmUuidPostEscape = pbmUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pbm_uuid}", with: pbmUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter notificationTransportRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func eventsTransportsCreate(notificationTransportRequest: NotificationTransportRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: NotificationTransport?, _ error: Error?) -> Void)) -> RequestTask {
        return eventsTransportsCreateWithRequestBuilder(notificationTransportRequest: notificationTransportRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /events/transports/
     - NotificationTransport Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter notificationTransportRequest: (body)  
     - returns: RequestBuilder<NotificationTransport> 
     */
    open class func eventsTransportsCreateWithRequestBuilder(notificationTransportRequest: NotificationTransportRequest) -> RequestBuilder<NotificationTransport> {
        let localVariablePath = "/events/transports/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: notificationTransportRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NotificationTransport>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter uuid: (path) A UUID string identifying this Notification Transport. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func eventsTransportsDestroy(uuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return eventsTransportsDestroyWithRequestBuilder(uuid: uuid).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /events/transports/{uuid}/
     - NotificationTransport Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter uuid: (path) A UUID string identifying this Notification Transport. 
     - returns: RequestBuilder<Void> 
     */
    open class func eventsTransportsDestroyWithRequestBuilder(uuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/events/transports/{uuid}/"
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter mode
     */
    public enum Mode_eventsTransportsList: String, CaseIterable {
        case email = "email"
        case local = "local"
        case webhook = "webhook"
        case webhookSlack = "webhook_slack"
    }

    /**

     - parameter mode: (query) * &#x60;local&#x60; - authentik inbuilt notifications * &#x60;webhook&#x60; - Generic Webhook * &#x60;webhook_slack&#x60; - Slack Webhook (Slack/Discord) * &#x60;email&#x60; - Email (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter sendOnce: (query)  (optional)
     - parameter webhookUrl: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func eventsTransportsList(mode: Mode_eventsTransportsList? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, sendOnce: Bool? = nil, webhookUrl: String? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedNotificationTransportList?, _ error: Error?) -> Void)) -> RequestTask {
        return eventsTransportsListWithRequestBuilder(mode: mode, name: name, ordering: ordering, page: page, pageSize: pageSize, search: search, sendOnce: sendOnce, webhookUrl: webhookUrl).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /events/transports/
     - NotificationTransport Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter mode: (query) * &#x60;local&#x60; - authentik inbuilt notifications * &#x60;webhook&#x60; - Generic Webhook * &#x60;webhook_slack&#x60; - Slack Webhook (Slack/Discord) * &#x60;email&#x60; - Email (optional)
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter sendOnce: (query)  (optional)
     - parameter webhookUrl: (query)  (optional)
     - returns: RequestBuilder<PaginatedNotificationTransportList> 
     */
    open class func eventsTransportsListWithRequestBuilder(mode: Mode_eventsTransportsList? = nil, name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, search: String? = nil, sendOnce: Bool? = nil, webhookUrl: String? = nil) -> RequestBuilder<PaginatedNotificationTransportList> {
        let localVariablePath = "/events/transports/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "mode": (wrappedValue: mode?.encodeToJSON(), isExplode: true),
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
            "send_once": (wrappedValue: sendOnce?.encodeToJSON(), isExplode: true),
            "webhook_url": (wrappedValue: webhookUrl?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedNotificationTransportList>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter uuid: (path) A UUID string identifying this Notification Transport. 
     - parameter patchedNotificationTransportRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func eventsTransportsPartialUpdate(uuid: UUID, patchedNotificationTransportRequest: PatchedNotificationTransportRequest? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: NotificationTransport?, _ error: Error?) -> Void)) -> RequestTask {
        return eventsTransportsPartialUpdateWithRequestBuilder(uuid: uuid, patchedNotificationTransportRequest: patchedNotificationTransportRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /events/transports/{uuid}/
     - NotificationTransport Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter uuid: (path) A UUID string identifying this Notification Transport. 
     - parameter patchedNotificationTransportRequest: (body)  (optional)
     - returns: RequestBuilder<NotificationTransport> 
     */
    open class func eventsTransportsPartialUpdateWithRequestBuilder(uuid: UUID, patchedNotificationTransportRequest: PatchedNotificationTransportRequest? = nil) -> RequestBuilder<NotificationTransport> {
        var localVariablePath = "/events/transports/{uuid}/"
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedNotificationTransportRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NotificationTransport>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter uuid: (path) A UUID string identifying this Notification Transport. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func eventsTransportsRetrieve(uuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: NotificationTransport?, _ error: Error?) -> Void)) -> RequestTask {
        return eventsTransportsRetrieveWithRequestBuilder(uuid: uuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /events/transports/{uuid}/
     - NotificationTransport Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter uuid: (path) A UUID string identifying this Notification Transport. 
     - returns: RequestBuilder<NotificationTransport> 
     */
    open class func eventsTransportsRetrieveWithRequestBuilder(uuid: UUID) -> RequestBuilder<NotificationTransport> {
        var localVariablePath = "/events/transports/{uuid}/"
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NotificationTransport>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter uuid: (path) A UUID string identifying this Notification Transport. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func eventsTransportsTestCreate(uuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: NotificationTransportTest?, _ error: Error?) -> Void)) -> RequestTask {
        return eventsTransportsTestCreateWithRequestBuilder(uuid: uuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /events/transports/{uuid}/test/
     - Send example notification using selected transport. Requires Modify permissions.
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter uuid: (path) A UUID string identifying this Notification Transport. 
     - returns: RequestBuilder<NotificationTransportTest> 
     */
    open class func eventsTransportsTestCreateWithRequestBuilder(uuid: UUID) -> RequestBuilder<NotificationTransportTest> {
        var localVariablePath = "/events/transports/{uuid}/test/"
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NotificationTransportTest>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter uuid: (path) A UUID string identifying this Notification Transport. 
     - parameter notificationTransportRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func eventsTransportsUpdate(uuid: UUID, notificationTransportRequest: NotificationTransportRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: NotificationTransport?, _ error: Error?) -> Void)) -> RequestTask {
        return eventsTransportsUpdateWithRequestBuilder(uuid: uuid, notificationTransportRequest: notificationTransportRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /events/transports/{uuid}/
     - NotificationTransport Viewset
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter uuid: (path) A UUID string identifying this Notification Transport. 
     - parameter notificationTransportRequest: (body)  
     - returns: RequestBuilder<NotificationTransport> 
     */
    open class func eventsTransportsUpdateWithRequestBuilder(uuid: UUID, notificationTransportRequest: NotificationTransportRequest) -> RequestBuilder<NotificationTransport> {
        var localVariablePath = "/events/transports/{uuid}/"
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: notificationTransportRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NotificationTransport>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter uuid: (path) A UUID string identifying this Notification Transport. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func eventsTransportsUsedByList(uuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: [UsedBy]?, _ error: Error?) -> Void)) -> RequestTask {
        return eventsTransportsUsedByListWithRequestBuilder(uuid: uuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /events/transports/{uuid}/used_by/
     - Get a list of all objects that use this object
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter uuid: (path) A UUID string identifying this Notification Transport. 
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func eventsTransportsUsedByListWithRequestBuilder(uuid: UUID) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/events/transports/{uuid}/used_by/"
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
