//
// ManagedAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ManagedAPI {

    /**

     - parameter instanceUuid: (path) A UUID string identifying this Blueprint Instance. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func managedBlueprintsApplyCreate(instanceUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: BlueprintInstance?, _ error: Error?) -> Void)) -> RequestTask {
        return managedBlueprintsApplyCreateWithRequestBuilder(instanceUuid: instanceUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /managed/blueprints/{instance_uuid}/apply/
     - Apply a blueprint
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter instanceUuid: (path) A UUID string identifying this Blueprint Instance. 
     - returns: RequestBuilder<BlueprintInstance> 
     */
    open class func managedBlueprintsApplyCreateWithRequestBuilder(instanceUuid: UUID) -> RequestBuilder<BlueprintInstance> {
        var localVariablePath = "/managed/blueprints/{instance_uuid}/apply/"
        let instanceUuidPreEscape = "\(APIHelper.mapValueToPathItem(instanceUuid))"
        let instanceUuidPostEscape = instanceUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{instance_uuid}", with: instanceUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BlueprintInstance>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func managedBlueprintsAvailableList(apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: [BlueprintFile]?, _ error: Error?) -> Void)) -> RequestTask {
        return managedBlueprintsAvailableListWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /managed/blueprints/available/
     - Get blueprints
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - returns: RequestBuilder<[BlueprintFile]> 
     */
    open class func managedBlueprintsAvailableListWithRequestBuilder() -> RequestBuilder<[BlueprintFile]> {
        let localVariablePath = "/managed/blueprints/available/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[BlueprintFile]>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter blueprintInstanceRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func managedBlueprintsCreate(blueprintInstanceRequest: BlueprintInstanceRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: BlueprintInstance?, _ error: Error?) -> Void)) -> RequestTask {
        return managedBlueprintsCreateWithRequestBuilder(blueprintInstanceRequest: blueprintInstanceRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /managed/blueprints/
     - Blueprint instances
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter blueprintInstanceRequest: (body)  
     - returns: RequestBuilder<BlueprintInstance> 
     */
    open class func managedBlueprintsCreateWithRequestBuilder(blueprintInstanceRequest: BlueprintInstanceRequest) -> RequestBuilder<BlueprintInstance> {
        let localVariablePath = "/managed/blueprints/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: blueprintInstanceRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BlueprintInstance>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter instanceUuid: (path) A UUID string identifying this Blueprint Instance. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func managedBlueprintsDestroy(instanceUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return managedBlueprintsDestroyWithRequestBuilder(instanceUuid: instanceUuid).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /managed/blueprints/{instance_uuid}/
     - Blueprint instances
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter instanceUuid: (path) A UUID string identifying this Blueprint Instance. 
     - returns: RequestBuilder<Void> 
     */
    open class func managedBlueprintsDestroyWithRequestBuilder(instanceUuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/managed/blueprints/{instance_uuid}/"
        let instanceUuidPreEscape = "\(APIHelper.mapValueToPathItem(instanceUuid))"
        let instanceUuidPostEscape = instanceUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{instance_uuid}", with: instanceUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = authentikClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter path: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func managedBlueprintsList(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, path: String? = nil, search: String? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedBlueprintInstanceList?, _ error: Error?) -> Void)) -> RequestTask {
        return managedBlueprintsListWithRequestBuilder(name: name, ordering: ordering, page: page, pageSize: pageSize, path: path, search: search).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /managed/blueprints/
     - Blueprint instances
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter name: (query)  (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter pageSize: (query) Number of results to return per page. (optional)
     - parameter path: (query)  (optional)
     - parameter search: (query) A search term. (optional)
     - returns: RequestBuilder<PaginatedBlueprintInstanceList> 
     */
    open class func managedBlueprintsListWithRequestBuilder(name: String? = nil, ordering: String? = nil, page: Int? = nil, pageSize: Int? = nil, path: String? = nil, search: String? = nil) -> RequestBuilder<PaginatedBlueprintInstanceList> {
        let localVariablePath = "/managed/blueprints/"
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "ordering": (wrappedValue: ordering?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "path": (wrappedValue: path?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedBlueprintInstanceList>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter instanceUuid: (path) A UUID string identifying this Blueprint Instance. 
     - parameter patchedBlueprintInstanceRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func managedBlueprintsPartialUpdate(instanceUuid: UUID, patchedBlueprintInstanceRequest: PatchedBlueprintInstanceRequest? = nil, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: BlueprintInstance?, _ error: Error?) -> Void)) -> RequestTask {
        return managedBlueprintsPartialUpdateWithRequestBuilder(instanceUuid: instanceUuid, patchedBlueprintInstanceRequest: patchedBlueprintInstanceRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /managed/blueprints/{instance_uuid}/
     - Blueprint instances
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter instanceUuid: (path) A UUID string identifying this Blueprint Instance. 
     - parameter patchedBlueprintInstanceRequest: (body)  (optional)
     - returns: RequestBuilder<BlueprintInstance> 
     */
    open class func managedBlueprintsPartialUpdateWithRequestBuilder(instanceUuid: UUID, patchedBlueprintInstanceRequest: PatchedBlueprintInstanceRequest? = nil) -> RequestBuilder<BlueprintInstance> {
        var localVariablePath = "/managed/blueprints/{instance_uuid}/"
        let instanceUuidPreEscape = "\(APIHelper.mapValueToPathItem(instanceUuid))"
        let instanceUuidPostEscape = instanceUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{instance_uuid}", with: instanceUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedBlueprintInstanceRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BlueprintInstance>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter instanceUuid: (path) A UUID string identifying this Blueprint Instance. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func managedBlueprintsRetrieve(instanceUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: BlueprintInstance?, _ error: Error?) -> Void)) -> RequestTask {
        return managedBlueprintsRetrieveWithRequestBuilder(instanceUuid: instanceUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /managed/blueprints/{instance_uuid}/
     - Blueprint instances
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter instanceUuid: (path) A UUID string identifying this Blueprint Instance. 
     - returns: RequestBuilder<BlueprintInstance> 
     */
    open class func managedBlueprintsRetrieveWithRequestBuilder(instanceUuid: UUID) -> RequestBuilder<BlueprintInstance> {
        var localVariablePath = "/managed/blueprints/{instance_uuid}/"
        let instanceUuidPreEscape = "\(APIHelper.mapValueToPathItem(instanceUuid))"
        let instanceUuidPostEscape = instanceUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{instance_uuid}", with: instanceUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BlueprintInstance>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter instanceUuid: (path) A UUID string identifying this Blueprint Instance. 
     - parameter blueprintInstanceRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func managedBlueprintsUpdate(instanceUuid: UUID, blueprintInstanceRequest: BlueprintInstanceRequest, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: BlueprintInstance?, _ error: Error?) -> Void)) -> RequestTask {
        return managedBlueprintsUpdateWithRequestBuilder(instanceUuid: instanceUuid, blueprintInstanceRequest: blueprintInstanceRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /managed/blueprints/{instance_uuid}/
     - Blueprint instances
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter instanceUuid: (path) A UUID string identifying this Blueprint Instance. 
     - parameter blueprintInstanceRequest: (body)  
     - returns: RequestBuilder<BlueprintInstance> 
     */
    open class func managedBlueprintsUpdateWithRequestBuilder(instanceUuid: UUID, blueprintInstanceRequest: BlueprintInstanceRequest) -> RequestBuilder<BlueprintInstance> {
        var localVariablePath = "/managed/blueprints/{instance_uuid}/"
        let instanceUuidPreEscape = "\(APIHelper.mapValueToPathItem(instanceUuid))"
        let instanceUuidPostEscape = instanceUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{instance_uuid}", with: instanceUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: blueprintInstanceRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BlueprintInstance>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter instanceUuid: (path) A UUID string identifying this Blueprint Instance. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func managedBlueprintsUsedByList(instanceUuid: UUID, apiResponseQueue: DispatchQueue = authentikClientAPI.apiResponseQueue, completion: @escaping ((_ data: [UsedBy]?, _ error: Error?) -> Void)) -> RequestTask {
        return managedBlueprintsUsedByListWithRequestBuilder(instanceUuid: instanceUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /managed/blueprints/{instance_uuid}/used_by/
     - Get a list of all objects that use this object
     - API Key:
       - type: apiKey Authorization 
       - name: authentik
     - parameter instanceUuid: (path) A UUID string identifying this Blueprint Instance. 
     - returns: RequestBuilder<[UsedBy]> 
     */
    open class func managedBlueprintsUsedByListWithRequestBuilder(instanceUuid: UUID) -> RequestBuilder<[UsedBy]> {
        var localVariablePath = "/managed/blueprints/{instance_uuid}/used_by/"
        let instanceUuidPreEscape = "\(APIHelper.mapValueToPathItem(instanceUuid))"
        let instanceUuidPostEscape = instanceUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{instance_uuid}", with: instanceUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = authentikClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UsedBy]>.Type = authentikClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
