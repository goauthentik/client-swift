//
// FlowErrorChallenge.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/// Challenge class when an unhandled error occurs during a stage. Normal users are shown an error message, superusers are shown a full stacktrace. 
public struct FlowErrorChallenge: Codable {
    public var type: String? = "native"
    public var flowInfo: ContextualFlowInfo?
    public var component: String? = "ak-stage-flow-error"
    public var responseErrors: [String: [ErrorDetail]]?
    public var requestId: String
    public var error: String?
    public var traceback: String?

    public init(type: String? = "native", flowInfo: ContextualFlowInfo? = nil, component: String? = "ak-stage-flow-error", responseErrors: [String: [ErrorDetail]]? = nil, requestId: String, error: String? = nil, traceback: String? = nil) {
        self.type = type
        self.flowInfo = flowInfo
        self.component = component
        self.responseErrors = responseErrors
        self.requestId = requestId
        self.error = error
        self.traceback = traceback
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case type
        case flowInfo = "flow_info"
        case component
        case responseErrors = "response_errors"
        case requestId = "request_id"
        case error
        case traceback
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        type = try container.decodeIfPresent(String.self, forKey: .type)
        flowInfo = try container.decodeIfPresent(ContextualFlowInfo.self, forKey: .flowInfo)
        component = try container.decodeIfPresent(String.self, forKey: .component)
        responseErrors = try container.decodeIfPresent([String: [ErrorDetail]].self, forKey: .responseErrors)
        requestId = try container.decode(String.self, forKey: .requestId)
        error = try container.decodeIfPresent(String.self, forKey: .error)
        traceback = try container.decodeIfPresent(String.self, forKey: .traceback)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(flowInfo, forKey: .flowInfo)
        try container.encodeIfPresent(component, forKey: .component)
        try container.encodeIfPresent(responseErrors, forKey: .responseErrors)
        try container.encode(requestId, forKey: .requestId)
        try container.encodeIfPresent(error, forKey: .error)
        try container.encodeIfPresent(traceback, forKey: .traceback)
    }
}
