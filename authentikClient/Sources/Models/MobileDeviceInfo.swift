//
// MobileDeviceInfo.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/// Info about a mobile device 
public struct MobileDeviceInfo: Codable {
    public var platform: PlatformEnum
    public var osVersion: String
    public var model: String
    public var hostname: String
    public var appVersion: String
    public var others: [String: Any]

    public init(platform: PlatformEnum, osVersion: String, model: String, hostname: String, appVersion: String, others: [String: Any]) {
        self.platform = platform
        self.osVersion = osVersion
        self.model = model
        self.hostname = hostname
        self.appVersion = appVersion
        self.others = others
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case platform
        case osVersion = "os_version"
        case model
        case hostname
        case appVersion = "app_version"
        case others
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        platform = try container.decode(PlatformEnum.self, forKey: .platform)
        osVersion = try container.decode(String.self, forKey: .osVersion)
        model = try container.decode(String.self, forKey: .model)
        hostname = try container.decode(String.self, forKey: .hostname)
        appVersion = try container.decode(String.self, forKey: .appVersion)
        others = try container.decode([String: Any].self, forKey: .others)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(platform, forKey: .platform)
        try container.encode(osVersion, forKey: .osVersion)
        try container.encode(model, forKey: .model)
        try container.encode(hostname, forKey: .hostname)
        try container.encode(appVersion, forKey: .appVersion)
        try container.encode(try JSONSerialization.data(withJSONObject: others), forKey: .others)
    }
}
