//
// Token.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/// Token Serializer 
public struct Token: Codable {
    public var pk: UUID
    /// Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
    public var managed: String?
    public var identifier: String
    public var intent: IntentEnum?
    public var user: Int?
    public var userObj: User
    public var description: String?
    public var expires: Date?
    public var expiring: Bool?

    public init(pk: UUID, managed: String? = nil, identifier: String, intent: IntentEnum? = nil, user: Int? = nil, userObj: User, description: String? = nil, expires: Date? = nil, expiring: Bool? = nil) {
        self.pk = pk
        self.managed = managed
        self.identifier = identifier
        self.intent = intent
        self.user = user
        self.userObj = userObj
        self.description = description
        self.expires = expires
        self.expiring = expiring
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pk
        case managed
        case identifier
        case intent
        case user
        case userObj = "user_obj"
        case description
        case expires
        case expiring
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        pk = try container.decode(UUID.self, forKey: .pk)
        managed = try container.decodeIfPresent(String.self, forKey: .managed)
        identifier = try container.decode(String.self, forKey: .identifier)
        intent = try container.decodeIfPresent(IntentEnum.self, forKey: .intent)
        user = try container.decodeIfPresent(Int.self, forKey: .user)
        userObj = try container.decode(User.self, forKey: .userObj)
        description = try container.decodeIfPresent(String.self, forKey: .description)
        expires = try container.decodeIfPresent(Date.self, forKey: .expires)
        expiring = try container.decodeIfPresent(Bool.self, forKey: .expiring)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pk, forKey: .pk)
        try container.encodeIfPresent(managed, forKey: .managed)
        try container.encode(identifier, forKey: .identifier)
        try container.encodeIfPresent(intent, forKey: .intent)
        try container.encodeIfPresent(user, forKey: .user)
        try container.encode(userObj, forKey: .userObj)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(expires, forKey: .expires)
        try container.encodeIfPresent(expiring, forKey: .expiring)
    }
}
