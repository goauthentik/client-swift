//
// BlueprintInstanceRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/// Info about a single blueprint instance file 
public struct BlueprintInstanceRequest: Codable {
    public var name: String
    public var path: String? = ""
    public var context: [String: Any]?
    public var enabled: Bool?
    public var content: String?

    public init(name: String, path: String? = "", context: [String: Any]? = nil, enabled: Bool? = nil, content: String? = nil) {
        self.name = name
        self.path = path
        self.context = context
        self.enabled = enabled
        self.content = content
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case path
        case context
        case enabled
        case content
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        name = try container.decode(String.self, forKey: .name)
        path = try container.decodeIfPresent(String.self, forKey: .path)
        context = try container.decodeIfPresent([String: Any].self, forKey: .context)
        enabled = try container.decodeIfPresent(Bool.self, forKey: .enabled)
        content = try container.decodeIfPresent(String.self, forKey: .content)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(path, forKey: .path)
        if let context = context {
            try container.encodeIfPresent(try JSONSerialization.data(withJSONObject: context), forKey: .context)
        }
        try container.encodeIfPresent(enabled, forKey: .enabled)
        try container.encodeIfPresent(content, forKey: .content)
    }
}
