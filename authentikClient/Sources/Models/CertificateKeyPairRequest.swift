//
// CertificateKeyPairRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/// CertificateKeyPair Serializer 
public struct CertificateKeyPairRequest: Codable {
    public var name: String
    /// PEM-encoded Certificate data
    public var certificateData: String
    /// Optional Private Key. If this is set, you can use this keypair for encryption.
    public var keyData: String?

    public init(name: String, certificateData: String, keyData: String? = nil) {
        self.name = name
        self.certificateData = certificateData
        self.keyData = keyData
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case certificateData = "certificate_data"
        case keyData = "key_data"
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        name = try container.decode(String.self, forKey: .name)
        certificateData = try container.decode(String.self, forKey: .certificateData)
        keyData = try container.decodeIfPresent(String.self, forKey: .keyData)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(name, forKey: .name)
        try container.encode(certificateData, forKey: .certificateData)
        try container.encodeIfPresent(keyData, forKey: .keyData)
    }
}
