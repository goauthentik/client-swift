//
// AuthenticatorValidationChallengeResponseRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/// Challenge used for Code-based and WebAuthn authenticators 
public struct AuthenticatorValidationChallengeResponseRequest: Codable {
    public var component: String? = "ak-stage-authenticator-validate"
    public var selectedChallenge: DeviceChallengeRequest?
    public var selectedStage: String?
    public var code: String?
    public var webauthn: [String: Any]?
    public var duo: Int?
    public var mobile: String?

    public init(component: String? = "ak-stage-authenticator-validate", selectedChallenge: DeviceChallengeRequest? = nil, selectedStage: String? = nil, code: String? = nil, webauthn: [String: Any]? = nil, duo: Int? = nil, mobile: String? = nil) {
        self.component = component
        self.selectedChallenge = selectedChallenge
        self.selectedStage = selectedStage
        self.code = code
        self.webauthn = webauthn
        self.duo = duo
        self.mobile = mobile
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case component
        case selectedChallenge = "selected_challenge"
        case selectedStage = "selected_stage"
        case code
        case webauthn
        case duo
        case mobile
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        component = try container.decodeIfPresent(String.self, forKey: .component)
        selectedChallenge = try container.decodeIfPresent(DeviceChallengeRequest.self, forKey: .selectedChallenge)
        selectedStage = try container.decodeIfPresent(String.self, forKey: .selectedStage)
        code = try container.decodeIfPresent(String.self, forKey: .code)
        webauthn = try container.decodeIfPresent([String: Any].self, forKey: .webauthn)
        duo = try container.decodeIfPresent(Int.self, forKey: .duo)
        mobile = try container.decodeIfPresent(String.self, forKey: .mobile)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(component, forKey: .component)
        try container.encodeIfPresent(selectedChallenge, forKey: .selectedChallenge)
        try container.encodeIfPresent(selectedStage, forKey: .selectedStage)
        try container.encodeIfPresent(code, forKey: .code)
        if let webauthn = webauthn {
            try container.encodeIfPresent(try JSONSerialization.data(withJSONObject: webauthn), forKey: .webauthn)
        }
        try container.encodeIfPresent(duo, forKey: .duo)
        try container.encodeIfPresent(mobile, forKey: .mobile)
    }
}
