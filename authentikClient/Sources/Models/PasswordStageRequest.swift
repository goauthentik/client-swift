//
// PasswordStageRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/// PasswordStage Serializer 
public struct PasswordStageRequest: Codable {
    public var name: String
    public var flowSet: [FlowSetRequest]?
    /// Selection of backends to test the password against.
    public var backends: [BackendsEnum]
    /// Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage.
    public var configureFlow: UUID?
    /// How many attempts a user has before the flow is canceled. To lock the user out, use a reputation policy and a user_write stage.
    public var failedAttemptsBeforeCancel: Int?

    public init(name: String, flowSet: [FlowSetRequest]? = nil, backends: [BackendsEnum], configureFlow: UUID? = nil, failedAttemptsBeforeCancel: Int? = nil) {
        self.name = name
        self.flowSet = flowSet
        self.backends = backends
        self.configureFlow = configureFlow
        self.failedAttemptsBeforeCancel = failedAttemptsBeforeCancel
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case flowSet = "flow_set"
        case backends
        case configureFlow = "configure_flow"
        case failedAttemptsBeforeCancel = "failed_attempts_before_cancel"
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        name = try container.decode(String.self, forKey: .name)
        flowSet = try container.decodeIfPresent([FlowSetRequest].self, forKey: .flowSet)
        backends = try container.decode([BackendsEnum].self, forKey: .backends)
        configureFlow = try container.decodeIfPresent(UUID.self, forKey: .configureFlow)
        failedAttemptsBeforeCancel = try container.decodeIfPresent(Int.self, forKey: .failedAttemptsBeforeCancel)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(flowSet, forKey: .flowSet)
        try container.encode(backends, forKey: .backends)
        try container.encodeIfPresent(configureFlow, forKey: .configureFlow)
        try container.encodeIfPresent(failedAttemptsBeforeCancel, forKey: .failedAttemptsBeforeCancel)
    }
}
