//
// ErrorReportingConfig.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/// Config for error reporting 
public struct ErrorReportingConfig: Codable {
    public var enabled: Bool
    public var sentryDsn: String
    public var environment: String
    public var sendPii: Bool
    public var tracesSampleRate: Double

    public init(enabled: Bool, sentryDsn: String, environment: String, sendPii: Bool, tracesSampleRate: Double) {
        self.enabled = enabled
        self.sentryDsn = sentryDsn
        self.environment = environment
        self.sendPii = sendPii
        self.tracesSampleRate = tracesSampleRate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case enabled
        case sentryDsn = "sentry_dsn"
        case environment
        case sendPii = "send_pii"
        case tracesSampleRate = "traces_sample_rate"
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        enabled = try container.decode(Bool.self, forKey: .enabled)
        sentryDsn = try container.decode(String.self, forKey: .sentryDsn)
        environment = try container.decode(String.self, forKey: .environment)
        sendPii = try container.decode(Bool.self, forKey: .sendPii)
        tracesSampleRate = try container.decode(Double.self, forKey: .tracesSampleRate)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(enabled, forKey: .enabled)
        try container.encode(sentryDsn, forKey: .sentryDsn)
        try container.encode(environment, forKey: .environment)
        try container.encode(sendPii, forKey: .sendPii)
        try container.encode(tracesSampleRate, forKey: .tracesSampleRate)
    }
}
