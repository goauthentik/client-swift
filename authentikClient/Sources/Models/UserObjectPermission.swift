//
// UserObjectPermission.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/// User-bound object level permission 
public struct UserObjectPermission: Codable {
    public var id: Int
    public var codename: String
    public var model: String
    public var appLabel: String
    public var objectPk: String
    public var name: String

    public init(id: Int, codename: String, model: String, appLabel: String, objectPk: String, name: String) {
        self.id = id
        self.codename = codename
        self.model = model
        self.appLabel = appLabel
        self.objectPk = objectPk
        self.name = name
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case codename
        case model
        case appLabel = "app_label"
        case objectPk = "object_pk"
        case name
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        id = try container.decode(Int.self, forKey: .id)
        codename = try container.decode(String.self, forKey: .codename)
        model = try container.decode(String.self, forKey: .model)
        appLabel = try container.decode(String.self, forKey: .appLabel)
        objectPk = try container.decode(String.self, forKey: .objectPk)
        name = try container.decode(String.self, forKey: .name)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(codename, forKey: .codename)
        try container.encode(model, forKey: .model)
        try container.encode(appLabel, forKey: .appLabel)
        try container.encode(objectPk, forKey: .objectPk)
        try container.encode(name, forKey: .name)
    }
}
