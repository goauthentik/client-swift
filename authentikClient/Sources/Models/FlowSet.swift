//
// FlowSet.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/// Stripped down flow serializer 
public struct FlowSet: Codable {
    public var pk: UUID
    public var policybindingmodelPtrId: UUID
    public var name: String
    /// Visible in the URL.
    public var slug: String
    /// Shown as the Title in Flow pages.
    public var title: String
    public var designation: FlowDesignationEnum
    /// Get the URL to the background image. If the name is /static or starts with http it is returned as-is
    public var background: String
    public var policyEngineMode: PolicyEngineMode?
    /// Enable compatibility mode, increases compatibility with password managers on mobile devices.
    public var compatibilityMode: Bool?
    /// Get export URL for flow
    public var exportUrl: String
    public var layout: LayoutEnum?
    public var deniedAction: DeniedActionEnum?

    public init(pk: UUID, policybindingmodelPtrId: UUID, name: String, slug: String, title: String, designation: FlowDesignationEnum, background: String, policyEngineMode: PolicyEngineMode? = nil, compatibilityMode: Bool? = nil, exportUrl: String, layout: LayoutEnum? = nil, deniedAction: DeniedActionEnum? = nil) {
        self.pk = pk
        self.policybindingmodelPtrId = policybindingmodelPtrId
        self.name = name
        self.slug = slug
        self.title = title
        self.designation = designation
        self.background = background
        self.policyEngineMode = policyEngineMode
        self.compatibilityMode = compatibilityMode
        self.exportUrl = exportUrl
        self.layout = layout
        self.deniedAction = deniedAction
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pk
        case policybindingmodelPtrId = "policybindingmodel_ptr_id"
        case name
        case slug
        case title
        case designation
        case background
        case policyEngineMode = "policy_engine_mode"
        case compatibilityMode = "compatibility_mode"
        case exportUrl = "export_url"
        case layout
        case deniedAction = "denied_action"
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        pk = try container.decode(UUID.self, forKey: .pk)
        policybindingmodelPtrId = try container.decode(UUID.self, forKey: .policybindingmodelPtrId)
        name = try container.decode(String.self, forKey: .name)
        slug = try container.decode(String.self, forKey: .slug)
        title = try container.decode(String.self, forKey: .title)
        designation = try container.decode(FlowDesignationEnum.self, forKey: .designation)
        background = try container.decode(String.self, forKey: .background)
        policyEngineMode = try container.decodeIfPresent(PolicyEngineMode.self, forKey: .policyEngineMode)
        compatibilityMode = try container.decodeIfPresent(Bool.self, forKey: .compatibilityMode)
        exportUrl = try container.decode(String.self, forKey: .exportUrl)
        layout = try container.decodeIfPresent(LayoutEnum.self, forKey: .layout)
        deniedAction = try container.decodeIfPresent(DeniedActionEnum.self, forKey: .deniedAction)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pk, forKey: .pk)
        try container.encode(policybindingmodelPtrId, forKey: .policybindingmodelPtrId)
        try container.encode(name, forKey: .name)
        try container.encode(slug, forKey: .slug)
        try container.encode(title, forKey: .title)
        try container.encode(designation, forKey: .designation)
        try container.encode(background, forKey: .background)
        try container.encodeIfPresent(policyEngineMode, forKey: .policyEngineMode)
        try container.encodeIfPresent(compatibilityMode, forKey: .compatibilityMode)
        try container.encode(exportUrl, forKey: .exportUrl)
        try container.encodeIfPresent(layout, forKey: .layout)
        try container.encodeIfPresent(deniedAction, forKey: .deniedAction)
    }
}
