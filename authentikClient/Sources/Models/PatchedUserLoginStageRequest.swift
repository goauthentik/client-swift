//
// PatchedUserLoginStageRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/// UserLoginStage Serializer 
public struct PatchedUserLoginStageRequest: Codable {
    public var name: String?
    public var flowSet: [FlowSetRequest]?
    /// Determines how long a session lasts. Default of 0 means that the sessions lasts until the browser is closed. (Format: hours=-1;minutes=-2;seconds=-3)
    public var sessionDuration: String?
    /// Terminate all other sessions of the user logging in.
    public var terminateOtherSessions: Bool?
    /// Offset the session will be extended by when the user picks the remember me option. Default of 0 means that the remember me option will not be shown. (Format: hours=-1;minutes=-2;seconds=-3)
    public var rememberMeOffset: String?

    public init(name: String? = nil, flowSet: [FlowSetRequest]? = nil, sessionDuration: String? = nil, terminateOtherSessions: Bool? = nil, rememberMeOffset: String? = nil) {
        self.name = name
        self.flowSet = flowSet
        self.sessionDuration = sessionDuration
        self.terminateOtherSessions = terminateOtherSessions
        self.rememberMeOffset = rememberMeOffset
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case flowSet = "flow_set"
        case sessionDuration = "session_duration"
        case terminateOtherSessions = "terminate_other_sessions"
        case rememberMeOffset = "remember_me_offset"
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        name = try container.decodeIfPresent(String.self, forKey: .name)
        flowSet = try container.decodeIfPresent([FlowSetRequest].self, forKey: .flowSet)
        sessionDuration = try container.decodeIfPresent(String.self, forKey: .sessionDuration)
        terminateOtherSessions = try container.decodeIfPresent(Bool.self, forKey: .terminateOtherSessions)
        rememberMeOffset = try container.decodeIfPresent(String.self, forKey: .rememberMeOffset)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(flowSet, forKey: .flowSet)
        try container.encodeIfPresent(sessionDuration, forKey: .sessionDuration)
        try container.encodeIfPresent(terminateOtherSessions, forKey: .terminateOtherSessions)
        try container.encodeIfPresent(rememberMeOffset, forKey: .rememberMeOffset)
    }
}
