//
// GroupMember.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/// Stripped down user serializer to show relevant users for groups 
public struct GroupMember: Codable {
    public var pk: Int
    /// Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
    public var username: String
    /// User's display name.
    public var name: String
    /// Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
    public var isActive: Bool?
    public var lastLogin: Date?
    public var email: String?
    public var attributes: [String: Any]?
    public var uid: String

    public init(pk: Int, username: String, name: String, isActive: Bool? = nil, lastLogin: Date? = nil, email: String? = nil, attributes: [String: Any]? = nil, uid: String) {
        self.pk = pk
        self.username = username
        self.name = name
        self.isActive = isActive
        self.lastLogin = lastLogin
        self.email = email
        self.attributes = attributes
        self.uid = uid
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pk
        case username
        case name
        case isActive = "is_active"
        case lastLogin = "last_login"
        case email
        case attributes
        case uid
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        pk = try container.decode(Int.self, forKey: .pk)
        username = try container.decode(String.self, forKey: .username)
        name = try container.decode(String.self, forKey: .name)
        isActive = try container.decodeIfPresent(Bool.self, forKey: .isActive)
        lastLogin = try container.decodeIfPresent(Date.self, forKey: .lastLogin)
        email = try container.decodeIfPresent(String.self, forKey: .email)
        attributes = try container.decodeIfPresent([String: Any].self, forKey: .attributes)
        uid = try container.decode(String.self, forKey: .uid)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pk, forKey: .pk)
        try container.encode(username, forKey: .username)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(isActive, forKey: .isActive)
        try container.encodeIfPresent(lastLogin, forKey: .lastLogin)
        try container.encodeIfPresent(email, forKey: .email)
        if let attributes = attributes {
            try container.encodeIfPresent(try JSONSerialization.data(withJSONObject: attributes), forKey: .attributes)
        }
        try container.encode(uid, forKey: .uid)
    }
}
