//
// AuthenticatorMobileChallenge.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/// Mobile Challenge 
public struct AuthenticatorMobileChallenge: Codable {
    public var type: ChallengeChoices
    public var flowInfo: ContextualFlowInfo?
    public var component: String? = "ak-stage-authenticator-mobile"
    public var responseErrors: [String: [ErrorDetail]]?
    public var pendingUser: String
    public var pendingUserAvatar: String
    public var payload: AuthenticatorMobilePayloadChallenge

    public init(type: ChallengeChoices, flowInfo: ContextualFlowInfo? = nil, component: String? = "ak-stage-authenticator-mobile", responseErrors: [String: [ErrorDetail]]? = nil, pendingUser: String, pendingUserAvatar: String, payload: AuthenticatorMobilePayloadChallenge) {
        self.type = type
        self.flowInfo = flowInfo
        self.component = component
        self.responseErrors = responseErrors
        self.pendingUser = pendingUser
        self.pendingUserAvatar = pendingUserAvatar
        self.payload = payload
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case type
        case flowInfo = "flow_info"
        case component
        case responseErrors = "response_errors"
        case pendingUser = "pending_user"
        case pendingUserAvatar = "pending_user_avatar"
        case payload
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        type = try container.decode(ChallengeChoices.self, forKey: .type)
        flowInfo = try container.decodeIfPresent(ContextualFlowInfo.self, forKey: .flowInfo)
        component = try container.decodeIfPresent(String.self, forKey: .component)
        responseErrors = try container.decodeIfPresent([String: [ErrorDetail]].self, forKey: .responseErrors)
        pendingUser = try container.decode(String.self, forKey: .pendingUser)
        pendingUserAvatar = try container.decode(String.self, forKey: .pendingUserAvatar)
        payload = try container.decode(AuthenticatorMobilePayloadChallenge.self, forKey: .payload)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(type, forKey: .type)
        try container.encodeIfPresent(flowInfo, forKey: .flowInfo)
        try container.encodeIfPresent(component, forKey: .component)
        try container.encodeIfPresent(responseErrors, forKey: .responseErrors)
        try container.encode(pendingUser, forKey: .pendingUser)
        try container.encode(pendingUserAvatar, forKey: .pendingUserAvatar)
        try container.encode(payload, forKey: .payload)
    }
}
