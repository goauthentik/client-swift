//
// ProxyOutpostConfig.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/// Proxy provider serializer for outposts 
public struct ProxyOutpostConfig: Codable {
    public var pk: Int
    public var name: String
    public var internalHost: String?
    public var externalHost: String
    /// Validate SSL Certificates of upstream servers
    public var internalHostSslValidation: Bool?
    public var clientId: String?
    public var clientSecret: String?
    public var oidcConfiguration: OpenIDConnectConfiguration
    public var cookieSecret: String?
    public var certificate: UUID?
    /// Regular expressions for which authentication is not required. Each new line is interpreted as a new Regular Expression.
    public var skipPathRegex: String?
    /// Set a custom HTTP-Basic Authentication header based on values from authentik.
    public var basicAuthEnabled: Bool?
    /// User/Group Attribute used for the password part of the HTTP-Basic Header.
    public var basicAuthPasswordAttribute: String?
    /// User/Group Attribute used for the user part of the HTTP-Basic Header. If not set, the user's Email address is used.
    public var basicAuthUserAttribute: String?
    public var mode: ProxyMode?
    public var cookieDomain: String?
    /// Get token validity as second count
    public var accessTokenValidity: Double?
    /// When enabled, this provider will intercept the authorization header and authenticate requests based on its value.
    public var interceptHeaderAuth: Bool?
    /// Get all the scope names the outpost should request, including custom-defined ones
    public var scopesToRequest: [String]
    /// Internal application name, used in URLs.
    public var assignedApplicationSlug: String
    /// Application's display Name.
    public var assignedApplicationName: String

    public init(pk: Int, name: String, internalHost: String? = nil, externalHost: String, internalHostSslValidation: Bool? = nil, clientId: String? = nil, clientSecret: String? = nil, oidcConfiguration: OpenIDConnectConfiguration, cookieSecret: String? = nil, certificate: UUID? = nil, skipPathRegex: String? = nil, basicAuthEnabled: Bool? = nil, basicAuthPasswordAttribute: String? = nil, basicAuthUserAttribute: String? = nil, mode: ProxyMode? = nil, cookieDomain: String? = nil, accessTokenValidity: Double?, interceptHeaderAuth: Bool? = nil, scopesToRequest: [String], assignedApplicationSlug: String, assignedApplicationName: String) {
        self.pk = pk
        self.name = name
        self.internalHost = internalHost
        self.externalHost = externalHost
        self.internalHostSslValidation = internalHostSslValidation
        self.clientId = clientId
        self.clientSecret = clientSecret
        self.oidcConfiguration = oidcConfiguration
        self.cookieSecret = cookieSecret
        self.certificate = certificate
        self.skipPathRegex = skipPathRegex
        self.basicAuthEnabled = basicAuthEnabled
        self.basicAuthPasswordAttribute = basicAuthPasswordAttribute
        self.basicAuthUserAttribute = basicAuthUserAttribute
        self.mode = mode
        self.cookieDomain = cookieDomain
        self.accessTokenValidity = accessTokenValidity
        self.interceptHeaderAuth = interceptHeaderAuth
        self.scopesToRequest = scopesToRequest
        self.assignedApplicationSlug = assignedApplicationSlug
        self.assignedApplicationName = assignedApplicationName
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pk
        case name
        case internalHost = "internal_host"
        case externalHost = "external_host"
        case internalHostSslValidation = "internal_host_ssl_validation"
        case clientId = "client_id"
        case clientSecret = "client_secret"
        case oidcConfiguration = "oidc_configuration"
        case cookieSecret = "cookie_secret"
        case certificate
        case skipPathRegex = "skip_path_regex"
        case basicAuthEnabled = "basic_auth_enabled"
        case basicAuthPasswordAttribute = "basic_auth_password_attribute"
        case basicAuthUserAttribute = "basic_auth_user_attribute"
        case mode
        case cookieDomain = "cookie_domain"
        case accessTokenValidity = "access_token_validity"
        case interceptHeaderAuth = "intercept_header_auth"
        case scopesToRequest = "scopes_to_request"
        case assignedApplicationSlug = "assigned_application_slug"
        case assignedApplicationName = "assigned_application_name"
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        pk = try container.decode(Int.self, forKey: .pk)
        name = try container.decode(String.self, forKey: .name)
        internalHost = try container.decodeIfPresent(String.self, forKey: .internalHost)
        externalHost = try container.decode(String.self, forKey: .externalHost)
        internalHostSslValidation = try container.decodeIfPresent(Bool.self, forKey: .internalHostSslValidation)
        clientId = try container.decodeIfPresent(String.self, forKey: .clientId)
        clientSecret = try container.decodeIfPresent(String.self, forKey: .clientSecret)
        oidcConfiguration = try container.decode(OpenIDConnectConfiguration.self, forKey: .oidcConfiguration)
        cookieSecret = try container.decodeIfPresent(String.self, forKey: .cookieSecret)
        certificate = try container.decodeIfPresent(UUID.self, forKey: .certificate)
        skipPathRegex = try container.decodeIfPresent(String.self, forKey: .skipPathRegex)
        basicAuthEnabled = try container.decodeIfPresent(Bool.self, forKey: .basicAuthEnabled)
        basicAuthPasswordAttribute = try container.decodeIfPresent(String.self, forKey: .basicAuthPasswordAttribute)
        basicAuthUserAttribute = try container.decodeIfPresent(String.self, forKey: .basicAuthUserAttribute)
        mode = try container.decodeIfPresent(ProxyMode.self, forKey: .mode)
        cookieDomain = try container.decodeIfPresent(String.self, forKey: .cookieDomain)
        accessTokenValidity = try container.decode(Double.self, forKey: .accessTokenValidity)
        interceptHeaderAuth = try container.decodeIfPresent(Bool.self, forKey: .interceptHeaderAuth)
        scopesToRequest = try container.decode([String].self, forKey: .scopesToRequest)
        assignedApplicationSlug = try container.decode(String.self, forKey: .assignedApplicationSlug)
        assignedApplicationName = try container.decode(String.self, forKey: .assignedApplicationName)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pk, forKey: .pk)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(internalHost, forKey: .internalHost)
        try container.encode(externalHost, forKey: .externalHost)
        try container.encodeIfPresent(internalHostSslValidation, forKey: .internalHostSslValidation)
        try container.encodeIfPresent(clientId, forKey: .clientId)
        try container.encodeIfPresent(clientSecret, forKey: .clientSecret)
        try container.encode(oidcConfiguration, forKey: .oidcConfiguration)
        try container.encodeIfPresent(cookieSecret, forKey: .cookieSecret)
        try container.encodeIfPresent(certificate, forKey: .certificate)
        try container.encodeIfPresent(skipPathRegex, forKey: .skipPathRegex)
        try container.encodeIfPresent(basicAuthEnabled, forKey: .basicAuthEnabled)
        try container.encodeIfPresent(basicAuthPasswordAttribute, forKey: .basicAuthPasswordAttribute)
        try container.encodeIfPresent(basicAuthUserAttribute, forKey: .basicAuthUserAttribute)
        try container.encodeIfPresent(mode, forKey: .mode)
        try container.encodeIfPresent(cookieDomain, forKey: .cookieDomain)
        try container.encode(accessTokenValidity, forKey: .accessTokenValidity)
        try container.encodeIfPresent(interceptHeaderAuth, forKey: .interceptHeaderAuth)
        try container.encode(scopesToRequest, forKey: .scopesToRequest)
        try container.encode(assignedApplicationSlug, forKey: .assignedApplicationSlug)
        try container.encode(assignedApplicationName, forKey: .assignedApplicationName)
    }
}
