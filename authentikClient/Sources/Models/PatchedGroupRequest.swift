//
// PatchedGroupRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/// Group Serializer 
public struct PatchedGroupRequest: Codable {
    public var name: String?
    /// Users added to this group will be superusers.
    public var isSuperuser: Bool?
    public var parent: UUID?
    public var users: [Int]?
    public var attributes: [String: AnyCodable]?
    public var roles: [UUID]?

    public init(name: String? = nil, isSuperuser: Bool? = nil, parent: UUID? = nil, users: [Int]? = nil, attributes: [String: AnyCodable]? = nil, roles: [UUID]? = nil) {
        self.name = name
        self.isSuperuser = isSuperuser
        self.parent = parent
        self.users = users
        self.attributes = attributes
        self.roles = roles
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case isSuperuser = "is_superuser"
        case parent
        case users
        case attributes
        case roles
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        name = try container.decodeIfPresent(String.self, forKey: .name)
        isSuperuser = try container.decodeIfPresent(Bool.self, forKey: .isSuperuser)
        parent = try container.decodeIfPresent(UUID.self, forKey: .parent)
        users = try container.decodeIfPresent([Int].self, forKey: .users)
        attributes = try container.decodeIfPresent([String: AnyCodable].self, forKey: .attributes)
        roles = try container.decodeIfPresent([UUID].self, forKey: .roles)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(isSuperuser, forKey: .isSuperuser)
        try container.encodeIfPresent(parent, forKey: .parent)
        try container.encodeIfPresent(users, forKey: .users)
        try container.encodeIfPresent(attributes, forKey: .attributes)
        try container.encodeIfPresent(roles, forKey: .roles)
    }
}
