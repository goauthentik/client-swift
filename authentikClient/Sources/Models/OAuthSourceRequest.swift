//
// OAuthSourceRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/// OAuth Source Serializer 
public struct OAuthSourceRequest: Codable {
    /// Source's display Name.
    public var name: String
    /// Internal source name, used in URLs.
    public var slug: String
    public var enabled: Bool?
    /// Flow to use when authenticating existing users.
    public var authenticationFlow: UUID?
    /// Flow to use when enrolling new users.
    public var enrollmentFlow: UUID?
    public var policyEngineMode: PolicyEngineMode?
    public var userMatchingMode: UserMatchingModeEnum?
    public var userPathTemplate: String?
    public var providerType: ProviderTypeEnum
    /// URL used to request the initial token. This URL is only required for OAuth 1.
    public var requestTokenUrl: String?
    /// URL the user is redirect to to conest the flow.
    public var authorizationUrl: String?
    /// URL used by authentik to retrieve tokens.
    public var accessTokenUrl: String?
    /// URL used by authentik to get user information.
    public var profileUrl: String?
    public var consumerKey: String
    public var consumerSecret: String
    public var additionalScopes: String?
    public var oidcWellKnownUrl: String?
    public var oidcJwksUrl: String?
    public var oidcJwks: [String: AnyCodable]?

    public init(name: String, slug: String, enabled: Bool? = nil, authenticationFlow: UUID? = nil, enrollmentFlow: UUID? = nil, policyEngineMode: PolicyEngineMode? = nil, userMatchingMode: UserMatchingModeEnum? = nil, userPathTemplate: String? = nil, providerType: ProviderTypeEnum, requestTokenUrl: String? = nil, authorizationUrl: String? = nil, accessTokenUrl: String? = nil, profileUrl: String? = nil, consumerKey: String, consumerSecret: String, additionalScopes: String? = nil, oidcWellKnownUrl: String? = nil, oidcJwksUrl: String? = nil, oidcJwks: [String: AnyCodable]? = nil) {
        self.name = name
        self.slug = slug
        self.enabled = enabled
        self.authenticationFlow = authenticationFlow
        self.enrollmentFlow = enrollmentFlow
        self.policyEngineMode = policyEngineMode
        self.userMatchingMode = userMatchingMode
        self.userPathTemplate = userPathTemplate
        self.providerType = providerType
        self.requestTokenUrl = requestTokenUrl
        self.authorizationUrl = authorizationUrl
        self.accessTokenUrl = accessTokenUrl
        self.profileUrl = profileUrl
        self.consumerKey = consumerKey
        self.consumerSecret = consumerSecret
        self.additionalScopes = additionalScopes
        self.oidcWellKnownUrl = oidcWellKnownUrl
        self.oidcJwksUrl = oidcJwksUrl
        self.oidcJwks = oidcJwks
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case slug
        case enabled
        case authenticationFlow = "authentication_flow"
        case enrollmentFlow = "enrollment_flow"
        case policyEngineMode = "policy_engine_mode"
        case userMatchingMode = "user_matching_mode"
        case userPathTemplate = "user_path_template"
        case providerType = "provider_type"
        case requestTokenUrl = "request_token_url"
        case authorizationUrl = "authorization_url"
        case accessTokenUrl = "access_token_url"
        case profileUrl = "profile_url"
        case consumerKey = "consumer_key"
        case consumerSecret = "consumer_secret"
        case additionalScopes = "additional_scopes"
        case oidcWellKnownUrl = "oidc_well_known_url"
        case oidcJwksUrl = "oidc_jwks_url"
        case oidcJwks = "oidc_jwks"
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        name = try container.decode(String.self, forKey: .name)
        slug = try container.decode(String.self, forKey: .slug)
        enabled = try container.decodeIfPresent(Bool.self, forKey: .enabled)
        authenticationFlow = try container.decodeIfPresent(UUID.self, forKey: .authenticationFlow)
        enrollmentFlow = try container.decodeIfPresent(UUID.self, forKey: .enrollmentFlow)
        policyEngineMode = try container.decodeIfPresent(PolicyEngineMode.self, forKey: .policyEngineMode)
        userMatchingMode = try container.decodeIfPresent(UserMatchingModeEnum.self, forKey: .userMatchingMode)
        userPathTemplate = try container.decodeIfPresent(String.self, forKey: .userPathTemplate)
        providerType = try container.decode(ProviderTypeEnum.self, forKey: .providerType)
        requestTokenUrl = try container.decodeIfPresent(String.self, forKey: .requestTokenUrl)
        authorizationUrl = try container.decodeIfPresent(String.self, forKey: .authorizationUrl)
        accessTokenUrl = try container.decodeIfPresent(String.self, forKey: .accessTokenUrl)
        profileUrl = try container.decodeIfPresent(String.self, forKey: .profileUrl)
        consumerKey = try container.decode(String.self, forKey: .consumerKey)
        consumerSecret = try container.decode(String.self, forKey: .consumerSecret)
        additionalScopes = try container.decodeIfPresent(String.self, forKey: .additionalScopes)
        oidcWellKnownUrl = try container.decodeIfPresent(String.self, forKey: .oidcWellKnownUrl)
        oidcJwksUrl = try container.decodeIfPresent(String.self, forKey: .oidcJwksUrl)
        oidcJwks = try container.decodeIfPresent([String: AnyCodable].self, forKey: .oidcJwks)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(name, forKey: .name)
        try container.encode(slug, forKey: .slug)
        try container.encodeIfPresent(enabled, forKey: .enabled)
        try container.encodeIfPresent(authenticationFlow, forKey: .authenticationFlow)
        try container.encodeIfPresent(enrollmentFlow, forKey: .enrollmentFlow)
        try container.encodeIfPresent(policyEngineMode, forKey: .policyEngineMode)
        try container.encodeIfPresent(userMatchingMode, forKey: .userMatchingMode)
        try container.encodeIfPresent(userPathTemplate, forKey: .userPathTemplate)
        try container.encode(providerType, forKey: .providerType)
        try container.encodeIfPresent(requestTokenUrl, forKey: .requestTokenUrl)
        try container.encodeIfPresent(authorizationUrl, forKey: .authorizationUrl)
        try container.encodeIfPresent(accessTokenUrl, forKey: .accessTokenUrl)
        try container.encodeIfPresent(profileUrl, forKey: .profileUrl)
        try container.encode(consumerKey, forKey: .consumerKey)
        try container.encode(consumerSecret, forKey: .consumerSecret)
        try container.encodeIfPresent(additionalScopes, forKey: .additionalScopes)
        try container.encodeIfPresent(oidcWellKnownUrl, forKey: .oidcWellKnownUrl)
        try container.encodeIfPresent(oidcJwksUrl, forKey: .oidcJwksUrl)
        try container.encodeIfPresent(oidcJwks, forKey: .oidcJwks)
    }
}
