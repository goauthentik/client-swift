//
// AuthenticatorValidateStage.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/// AuthenticatorValidateStage Serializer 
public struct AuthenticatorValidateStage: Codable {
    public var pk: UUID
    public var name: String
    /// Get object type so that we know how to edit the object
    public var component: String
    /// Return object's verbose_name
    public var verboseName: String
    /// Return object's plural verbose_name
    public var verboseNamePlural: String
    /// Return internal model name
    public var metaModelName: String
    public var flowSet: [FlowSet]?
    public var notConfiguredAction: NotConfiguredActionEnum?
    /// Device classes which can be used to authenticate
    public var deviceClasses: [DeviceClassesEnum]?
    /// Stages used to configure Authenticator when user doesn't have any compatible devices. After this configuration Stage passes, the user is not prompted again.
    public var configurationStages: [UUID]?
    /// If any of the user's device has been used within this threshold, this stage will be skipped
    public var lastAuthThreshold: String?
    public var webauthnUserVerification: UserVerificationEnum?

    public init(pk: UUID, name: String, component: String, verboseName: String, verboseNamePlural: String, metaModelName: String, flowSet: [FlowSet]? = nil, notConfiguredAction: NotConfiguredActionEnum? = nil, deviceClasses: [DeviceClassesEnum]? = nil, configurationStages: [UUID]? = nil, lastAuthThreshold: String? = nil, webauthnUserVerification: UserVerificationEnum? = nil) {
        self.pk = pk
        self.name = name
        self.component = component
        self.verboseName = verboseName
        self.verboseNamePlural = verboseNamePlural
        self.metaModelName = metaModelName
        self.flowSet = flowSet
        self.notConfiguredAction = notConfiguredAction
        self.deviceClasses = deviceClasses
        self.configurationStages = configurationStages
        self.lastAuthThreshold = lastAuthThreshold
        self.webauthnUserVerification = webauthnUserVerification
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pk
        case name
        case component
        case verboseName = "verbose_name"
        case verboseNamePlural = "verbose_name_plural"
        case metaModelName = "meta_model_name"
        case flowSet = "flow_set"
        case notConfiguredAction = "not_configured_action"
        case deviceClasses = "device_classes"
        case configurationStages = "configuration_stages"
        case lastAuthThreshold = "last_auth_threshold"
        case webauthnUserVerification = "webauthn_user_verification"
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        pk = try container.decode(UUID.self, forKey: .pk)
        name = try container.decode(String.self, forKey: .name)
        component = try container.decode(String.self, forKey: .component)
        verboseName = try container.decode(String.self, forKey: .verboseName)
        verboseNamePlural = try container.decode(String.self, forKey: .verboseNamePlural)
        metaModelName = try container.decode(String.self, forKey: .metaModelName)
        flowSet = try container.decodeIfPresent([FlowSet].self, forKey: .flowSet)
        notConfiguredAction = try container.decodeIfPresent(NotConfiguredActionEnum.self, forKey: .notConfiguredAction)
        deviceClasses = try container.decodeIfPresent([DeviceClassesEnum].self, forKey: .deviceClasses)
        configurationStages = try container.decodeIfPresent([UUID].self, forKey: .configurationStages)
        lastAuthThreshold = try container.decodeIfPresent(String.self, forKey: .lastAuthThreshold)
        webauthnUserVerification = try container.decodeIfPresent(UserVerificationEnum.self, forKey: .webauthnUserVerification)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pk, forKey: .pk)
        try container.encode(name, forKey: .name)
        try container.encode(component, forKey: .component)
        try container.encode(verboseName, forKey: .verboseName)
        try container.encode(verboseNamePlural, forKey: .verboseNamePlural)
        try container.encode(metaModelName, forKey: .metaModelName)
        try container.encodeIfPresent(flowSet, forKey: .flowSet)
        try container.encodeIfPresent(notConfiguredAction, forKey: .notConfiguredAction)
        try container.encodeIfPresent(deviceClasses, forKey: .deviceClasses)
        try container.encodeIfPresent(configurationStages, forKey: .configurationStages)
        try container.encodeIfPresent(lastAuthThreshold, forKey: .lastAuthThreshold)
        try container.encodeIfPresent(webauthnUserVerification, forKey: .webauthnUserVerification)
    }
}
