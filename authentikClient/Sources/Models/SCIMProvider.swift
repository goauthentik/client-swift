//
// SCIMProvider.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/// SCIMProvider Serializer 
public struct SCIMProvider: Codable {
    public var pk: Int
    public var name: String
    public var propertyMappings: [UUID]?
    /// Property mappings used for group creation/updating.
    public var propertyMappingsGroup: [UUID]?
    /// Get object component so that we know how to edit the object
    public var component: String
    /// Internal application name, used in URLs.
    public var assignedBackchannelApplicationSlug: String
    /// Application's display Name.
    public var assignedBackchannelApplicationName: String
    /// Return object's verbose_name
    public var verboseName: String
    /// Return object's plural verbose_name
    public var verboseNamePlural: String
    /// Return internal model name
    public var metaModelName: String
    /// Base URL to SCIM requests, usually ends in /v2
    public var url: String
    /// Authentication token
    public var token: String
    public var excludeUsersServiceAccount: Bool?
    public var filterGroup: UUID?

    public init(pk: Int, name: String, propertyMappings: [UUID]? = nil, propertyMappingsGroup: [UUID]? = nil, component: String, assignedBackchannelApplicationSlug: String, assignedBackchannelApplicationName: String, verboseName: String, verboseNamePlural: String, metaModelName: String, url: String, token: String, excludeUsersServiceAccount: Bool? = nil, filterGroup: UUID? = nil) {
        self.pk = pk
        self.name = name
        self.propertyMappings = propertyMappings
        self.propertyMappingsGroup = propertyMappingsGroup
        self.component = component
        self.assignedBackchannelApplicationSlug = assignedBackchannelApplicationSlug
        self.assignedBackchannelApplicationName = assignedBackchannelApplicationName
        self.verboseName = verboseName
        self.verboseNamePlural = verboseNamePlural
        self.metaModelName = metaModelName
        self.url = url
        self.token = token
        self.excludeUsersServiceAccount = excludeUsersServiceAccount
        self.filterGroup = filterGroup
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pk
        case name
        case propertyMappings = "property_mappings"
        case propertyMappingsGroup = "property_mappings_group"
        case component
        case assignedBackchannelApplicationSlug = "assigned_backchannel_application_slug"
        case assignedBackchannelApplicationName = "assigned_backchannel_application_name"
        case verboseName = "verbose_name"
        case verboseNamePlural = "verbose_name_plural"
        case metaModelName = "meta_model_name"
        case url
        case token
        case excludeUsersServiceAccount = "exclude_users_service_account"
        case filterGroup = "filter_group"
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        pk = try container.decode(Int.self, forKey: .pk)
        name = try container.decode(String.self, forKey: .name)
        propertyMappings = try container.decodeIfPresent([UUID].self, forKey: .propertyMappings)
        propertyMappingsGroup = try container.decodeIfPresent([UUID].self, forKey: .propertyMappingsGroup)
        component = try container.decode(String.self, forKey: .component)
        assignedBackchannelApplicationSlug = try container.decode(String.self, forKey: .assignedBackchannelApplicationSlug)
        assignedBackchannelApplicationName = try container.decode(String.self, forKey: .assignedBackchannelApplicationName)
        verboseName = try container.decode(String.self, forKey: .verboseName)
        verboseNamePlural = try container.decode(String.self, forKey: .verboseNamePlural)
        metaModelName = try container.decode(String.self, forKey: .metaModelName)
        url = try container.decode(String.self, forKey: .url)
        token = try container.decode(String.self, forKey: .token)
        excludeUsersServiceAccount = try container.decodeIfPresent(Bool.self, forKey: .excludeUsersServiceAccount)
        filterGroup = try container.decodeIfPresent(UUID.self, forKey: .filterGroup)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pk, forKey: .pk)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(propertyMappings, forKey: .propertyMappings)
        try container.encodeIfPresent(propertyMappingsGroup, forKey: .propertyMappingsGroup)
        try container.encode(component, forKey: .component)
        try container.encode(assignedBackchannelApplicationSlug, forKey: .assignedBackchannelApplicationSlug)
        try container.encode(assignedBackchannelApplicationName, forKey: .assignedBackchannelApplicationName)
        try container.encode(verboseName, forKey: .verboseName)
        try container.encode(verboseNamePlural, forKey: .verboseNamePlural)
        try container.encode(metaModelName, forKey: .metaModelName)
        try container.encode(url, forKey: .url)
        try container.encode(token, forKey: .token)
        try container.encodeIfPresent(excludeUsersServiceAccount, forKey: .excludeUsersServiceAccount)
        try container.encodeIfPresent(filterGroup, forKey: .filterGroup)
    }
}
