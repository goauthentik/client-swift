//
// UserGroup.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/// Simplified Group Serializer for user&#39;s groups 
public struct UserGroup: Codable {
    public var pk: UUID
    /// Get a numerical, int32 ID for the group
    public var numPk: Int
    public var name: String
    /// Users added to this group will be superusers.
    public var isSuperuser: Bool?
    public var parent: UUID?
    public var parentName: String
    public var attributes: [String: Any]?

    public init(pk: UUID, numPk: Int, name: String, isSuperuser: Bool? = nil, parent: UUID? = nil, parentName: String, attributes: [String: Any]? = nil) {
        self.pk = pk
        self.numPk = numPk
        self.name = name
        self.isSuperuser = isSuperuser
        self.parent = parent
        self.parentName = parentName
        self.attributes = attributes
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pk
        case numPk = "num_pk"
        case name
        case isSuperuser = "is_superuser"
        case parent
        case parentName = "parent_name"
        case attributes
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        pk = try container.decode(UUID.self, forKey: .pk)
        numPk = try container.decode(Int.self, forKey: .numPk)
        name = try container.decode(String.self, forKey: .name)
        isSuperuser = try container.decodeIfPresent(Bool.self, forKey: .isSuperuser)
        parent = try container.decodeIfPresent(UUID.self, forKey: .parent)
        parentName = try container.decode(String.self, forKey: .parentName)
        attributes = try container.decodeIfPresent([String: Any].self, forKey: .attributes)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pk, forKey: .pk)
        try container.encode(numPk, forKey: .numPk)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(isSuperuser, forKey: .isSuperuser)
        try container.encodeIfPresent(parent, forKey: .parent)
        try container.encode(parentName, forKey: .parentName)
        if let attributes = attributes {
            try container.encodeIfPresent(try JSONSerialization.data(withJSONObject: attributes), forKey: .attributes)
        }
    }
}
