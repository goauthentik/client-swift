//
// Pagination.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct Pagination: Codable {
    public var next: Double
    public var previous: Double
    public var count: Double
    public var current: Double
    public var totalPages: Double
    public var startIndex: Double
    public var endIndex: Double

    public init(next: Double, previous: Double, count: Double, current: Double, totalPages: Double, startIndex: Double, endIndex: Double) {
        self.next = next
        self.previous = previous
        self.count = count
        self.current = current
        self.totalPages = totalPages
        self.startIndex = startIndex
        self.endIndex = endIndex
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case next
        case previous
        case count
        case current
        case totalPages = "total_pages"
        case startIndex = "start_index"
        case endIndex = "end_index"
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        next = try container.decode(Double.self, forKey: .next)
        previous = try container.decode(Double.self, forKey: .previous)
        count = try container.decode(Double.self, forKey: .count)
        current = try container.decode(Double.self, forKey: .current)
        totalPages = try container.decode(Double.self, forKey: .totalPages)
        startIndex = try container.decode(Double.self, forKey: .startIndex)
        endIndex = try container.decode(Double.self, forKey: .endIndex)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(next, forKey: .next)
        try container.encode(previous, forKey: .previous)
        try container.encode(count, forKey: .count)
        try container.encode(current, forKey: .current)
        try container.encode(totalPages, forKey: .totalPages)
        try container.encode(startIndex, forKey: .startIndex)
        try container.encode(endIndex, forKey: .endIndex)
    }
}
