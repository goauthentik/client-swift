//
// OAuth2Provider.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/// OAuth2Provider Serializer 
public struct OAuth2Provider: Codable {
    public var pk: Int
    public var name: String
    /// Flow used for authentication when the associated application is accessed by an un-authenticated user.
    public var authenticationFlow: UUID?
    /// Flow used when authorizing this provider.
    public var authorizationFlow: UUID
    public var propertyMappings: [UUID]?
    /// Get object component so that we know how to edit the object
    public var component: String
    /// Internal application name, used in URLs.
    public var assignedApplicationSlug: String
    /// Application's display Name.
    public var assignedApplicationName: String
    /// Internal application name, used in URLs.
    public var assignedBackchannelApplicationSlug: String
    /// Application's display Name.
    public var assignedBackchannelApplicationName: String
    /// Return object's verbose_name
    public var verboseName: String
    /// Return object's plural verbose_name
    public var verboseNamePlural: String
    /// Return internal model name
    public var metaModelName: String
    public var clientType: ClientTypeEnum?
    public var clientId: String?
    public var clientSecret: String?
    /// Access codes not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3).
    public var accessCodeValidity: String?
    /// Tokens not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3).
    public var accessTokenValidity: String?
    /// Tokens not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3).
    public var refreshTokenValidity: String?
    /// Include User claims from scopes in the id_token, for applications that don't access the userinfo endpoint.
    public var includeClaimsInIdToken: Bool?
    /// Key used to sign the tokens. Only required when JWT Algorithm is set to RS256.
    public var signingKey: UUID?
    /// Enter each URI on a new line.
    public var redirectUris: String?
    public var subMode: SubModeEnum?
    public var issuerMode: IssuerModeEnum?
    public var jwksSources: [UUID]?

    public init(pk: Int, name: String, authenticationFlow: UUID? = nil, authorizationFlow: UUID, propertyMappings: [UUID]? = nil, component: String, assignedApplicationSlug: String, assignedApplicationName: String, assignedBackchannelApplicationSlug: String, assignedBackchannelApplicationName: String, verboseName: String, verboseNamePlural: String, metaModelName: String, clientType: ClientTypeEnum? = nil, clientId: String? = nil, clientSecret: String? = nil, accessCodeValidity: String? = nil, accessTokenValidity: String? = nil, refreshTokenValidity: String? = nil, includeClaimsInIdToken: Bool? = nil, signingKey: UUID? = nil, redirectUris: String? = nil, subMode: SubModeEnum? = nil, issuerMode: IssuerModeEnum? = nil, jwksSources: [UUID]? = nil) {
        self.pk = pk
        self.name = name
        self.authenticationFlow = authenticationFlow
        self.authorizationFlow = authorizationFlow
        self.propertyMappings = propertyMappings
        self.component = component
        self.assignedApplicationSlug = assignedApplicationSlug
        self.assignedApplicationName = assignedApplicationName
        self.assignedBackchannelApplicationSlug = assignedBackchannelApplicationSlug
        self.assignedBackchannelApplicationName = assignedBackchannelApplicationName
        self.verboseName = verboseName
        self.verboseNamePlural = verboseNamePlural
        self.metaModelName = metaModelName
        self.clientType = clientType
        self.clientId = clientId
        self.clientSecret = clientSecret
        self.accessCodeValidity = accessCodeValidity
        self.accessTokenValidity = accessTokenValidity
        self.refreshTokenValidity = refreshTokenValidity
        self.includeClaimsInIdToken = includeClaimsInIdToken
        self.signingKey = signingKey
        self.redirectUris = redirectUris
        self.subMode = subMode
        self.issuerMode = issuerMode
        self.jwksSources = jwksSources
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pk
        case name
        case authenticationFlow = "authentication_flow"
        case authorizationFlow = "authorization_flow"
        case propertyMappings = "property_mappings"
        case component
        case assignedApplicationSlug = "assigned_application_slug"
        case assignedApplicationName = "assigned_application_name"
        case assignedBackchannelApplicationSlug = "assigned_backchannel_application_slug"
        case assignedBackchannelApplicationName = "assigned_backchannel_application_name"
        case verboseName = "verbose_name"
        case verboseNamePlural = "verbose_name_plural"
        case metaModelName = "meta_model_name"
        case clientType = "client_type"
        case clientId = "client_id"
        case clientSecret = "client_secret"
        case accessCodeValidity = "access_code_validity"
        case accessTokenValidity = "access_token_validity"
        case refreshTokenValidity = "refresh_token_validity"
        case includeClaimsInIdToken = "include_claims_in_id_token"
        case signingKey = "signing_key"
        case redirectUris = "redirect_uris"
        case subMode = "sub_mode"
        case issuerMode = "issuer_mode"
        case jwksSources = "jwks_sources"
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        pk = try container.decode(Int.self, forKey: .pk)
        name = try container.decode(String.self, forKey: .name)
        authenticationFlow = try container.decodeIfPresent(UUID.self, forKey: .authenticationFlow)
        authorizationFlow = try container.decode(UUID.self, forKey: .authorizationFlow)
        propertyMappings = try container.decodeIfPresent([UUID].self, forKey: .propertyMappings)
        component = try container.decode(String.self, forKey: .component)
        assignedApplicationSlug = try container.decode(String.self, forKey: .assignedApplicationSlug)
        assignedApplicationName = try container.decode(String.self, forKey: .assignedApplicationName)
        assignedBackchannelApplicationSlug = try container.decode(String.self, forKey: .assignedBackchannelApplicationSlug)
        assignedBackchannelApplicationName = try container.decode(String.self, forKey: .assignedBackchannelApplicationName)
        verboseName = try container.decode(String.self, forKey: .verboseName)
        verboseNamePlural = try container.decode(String.self, forKey: .verboseNamePlural)
        metaModelName = try container.decode(String.self, forKey: .metaModelName)
        clientType = try container.decodeIfPresent(ClientTypeEnum.self, forKey: .clientType)
        clientId = try container.decodeIfPresent(String.self, forKey: .clientId)
        clientSecret = try container.decodeIfPresent(String.self, forKey: .clientSecret)
        accessCodeValidity = try container.decodeIfPresent(String.self, forKey: .accessCodeValidity)
        accessTokenValidity = try container.decodeIfPresent(String.self, forKey: .accessTokenValidity)
        refreshTokenValidity = try container.decodeIfPresent(String.self, forKey: .refreshTokenValidity)
        includeClaimsInIdToken = try container.decodeIfPresent(Bool.self, forKey: .includeClaimsInIdToken)
        signingKey = try container.decodeIfPresent(UUID.self, forKey: .signingKey)
        redirectUris = try container.decodeIfPresent(String.self, forKey: .redirectUris)
        subMode = try container.decodeIfPresent(SubModeEnum.self, forKey: .subMode)
        issuerMode = try container.decodeIfPresent(IssuerModeEnum.self, forKey: .issuerMode)
        jwksSources = try container.decodeIfPresent([UUID].self, forKey: .jwksSources)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pk, forKey: .pk)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(authenticationFlow, forKey: .authenticationFlow)
        try container.encode(authorizationFlow, forKey: .authorizationFlow)
        try container.encodeIfPresent(propertyMappings, forKey: .propertyMappings)
        try container.encode(component, forKey: .component)
        try container.encode(assignedApplicationSlug, forKey: .assignedApplicationSlug)
        try container.encode(assignedApplicationName, forKey: .assignedApplicationName)
        try container.encode(assignedBackchannelApplicationSlug, forKey: .assignedBackchannelApplicationSlug)
        try container.encode(assignedBackchannelApplicationName, forKey: .assignedBackchannelApplicationName)
        try container.encode(verboseName, forKey: .verboseName)
        try container.encode(verboseNamePlural, forKey: .verboseNamePlural)
        try container.encode(metaModelName, forKey: .metaModelName)
        try container.encodeIfPresent(clientType, forKey: .clientType)
        try container.encodeIfPresent(clientId, forKey: .clientId)
        try container.encodeIfPresent(clientSecret, forKey: .clientSecret)
        try container.encodeIfPresent(accessCodeValidity, forKey: .accessCodeValidity)
        try container.encodeIfPresent(accessTokenValidity, forKey: .accessTokenValidity)
        try container.encodeIfPresent(refreshTokenValidity, forKey: .refreshTokenValidity)
        try container.encodeIfPresent(includeClaimsInIdToken, forKey: .includeClaimsInIdToken)
        try container.encodeIfPresent(signingKey, forKey: .signingKey)
        try container.encodeIfPresent(redirectUris, forKey: .redirectUris)
        try container.encodeIfPresent(subMode, forKey: .subMode)
        try container.encodeIfPresent(issuerMode, forKey: .issuerMode)
        try container.encodeIfPresent(jwksSources, forKey: .jwksSources)
    }
}
