//
// AuthenticatorMobileStage.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/// AuthenticatorMobileStage Serializer 
public struct AuthenticatorMobileStage: Codable {
    public var pk: UUID
    public var name: String
    /// Get object type so that we know how to edit the object
    public var component: String
    /// Return object's verbose_name
    public var verboseName: String
    /// Return object's plural verbose_name
    public var verboseNamePlural: String
    /// Return internal model name
    public var metaModelName: String
    public var flowSet: [FlowSet]?
    /// Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage.
    public var configureFlow: UUID?
    public var friendlyName: String?
    public var itemMatchingMode: ItemMatchingModeEnum?
    public var cgwEndpoint: String

    public init(pk: UUID, name: String, component: String, verboseName: String, verboseNamePlural: String, metaModelName: String, flowSet: [FlowSet]? = nil, configureFlow: UUID? = nil, friendlyName: String? = nil, itemMatchingMode: ItemMatchingModeEnum? = nil, cgwEndpoint: String) {
        self.pk = pk
        self.name = name
        self.component = component
        self.verboseName = verboseName
        self.verboseNamePlural = verboseNamePlural
        self.metaModelName = metaModelName
        self.flowSet = flowSet
        self.configureFlow = configureFlow
        self.friendlyName = friendlyName
        self.itemMatchingMode = itemMatchingMode
        self.cgwEndpoint = cgwEndpoint
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pk
        case name
        case component
        case verboseName = "verbose_name"
        case verboseNamePlural = "verbose_name_plural"
        case metaModelName = "meta_model_name"
        case flowSet = "flow_set"
        case configureFlow = "configure_flow"
        case friendlyName = "friendly_name"
        case itemMatchingMode = "item_matching_mode"
        case cgwEndpoint = "cgw_endpoint"
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        pk = try container.decode(UUID.self, forKey: .pk)
        name = try container.decode(String.self, forKey: .name)
        component = try container.decode(String.self, forKey: .component)
        verboseName = try container.decode(String.self, forKey: .verboseName)
        verboseNamePlural = try container.decode(String.self, forKey: .verboseNamePlural)
        metaModelName = try container.decode(String.self, forKey: .metaModelName)
        flowSet = try container.decodeIfPresent([FlowSet].self, forKey: .flowSet)
        configureFlow = try container.decodeIfPresent(UUID.self, forKey: .configureFlow)
        friendlyName = try container.decodeIfPresent(String.self, forKey: .friendlyName)
        itemMatchingMode = try container.decodeIfPresent(ItemMatchingModeEnum.self, forKey: .itemMatchingMode)
        cgwEndpoint = try container.decode(String.self, forKey: .cgwEndpoint)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pk, forKey: .pk)
        try container.encode(name, forKey: .name)
        try container.encode(component, forKey: .component)
        try container.encode(verboseName, forKey: .verboseName)
        try container.encode(verboseNamePlural, forKey: .verboseNamePlural)
        try container.encode(metaModelName, forKey: .metaModelName)
        try container.encodeIfPresent(flowSet, forKey: .flowSet)
        try container.encodeIfPresent(configureFlow, forKey: .configureFlow)
        try container.encodeIfPresent(friendlyName, forKey: .friendlyName)
        try container.encodeIfPresent(itemMatchingMode, forKey: .itemMatchingMode)
        try container.encode(cgwEndpoint, forKey: .cgwEndpoint)
    }
}
