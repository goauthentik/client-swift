//
// ConsentStageRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/// ConsentStage Serializer 
public struct ConsentStageRequest: Codable {
    public var name: String
    public var flowSet: [FlowSetRequest]?
    public var mode: ConsentStageModeEnum?
    /// Offset after which consent expires. (Format: hours=1;minutes=2;seconds=3).
    public var consentExpireIn: String?

    public init(name: String, flowSet: [FlowSetRequest]? = nil, mode: ConsentStageModeEnum? = nil, consentExpireIn: String? = nil) {
        self.name = name
        self.flowSet = flowSet
        self.mode = mode
        self.consentExpireIn = consentExpireIn
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case flowSet = "flow_set"
        case mode
        case consentExpireIn = "consent_expire_in"
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        name = try container.decode(String.self, forKey: .name)
        flowSet = try container.decodeIfPresent([FlowSetRequest].self, forKey: .flowSet)
        mode = try container.decodeIfPresent(ConsentStageModeEnum.self, forKey: .mode)
        consentExpireIn = try container.decodeIfPresent(String.self, forKey: .consentExpireIn)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(flowSet, forKey: .flowSet)
        try container.encodeIfPresent(mode, forKey: .mode)
        try container.encodeIfPresent(consentExpireIn, forKey: .consentExpireIn)
    }
}
