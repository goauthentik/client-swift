//
// TransactionApplicationRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/// Serializer for creating a provider and an application in one transaction 
public struct TransactionApplicationRequest: Codable {
    public var app: ApplicationRequest
    public var providerModel: ProviderModelEnum
    public var provider: ModelRequest

    public init(app: ApplicationRequest, providerModel: ProviderModelEnum, provider: ModelRequest) {
        self.app = app
        self.providerModel = providerModel
        self.provider = provider
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case app
        case providerModel = "provider_model"
        case provider
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        app = try container.decode(ApplicationRequest.self, forKey: .app)
        providerModel = try container.decode(ProviderModelEnum.self, forKey: .providerModel)
        provider = try container.decode(ModelRequest.self, forKey: .provider)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(app, forKey: .app)
        try container.encode(providerModel, forKey: .providerModel)
        try container.encode(provider, forKey: .provider)
    }
}
