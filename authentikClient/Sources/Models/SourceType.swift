//
// SourceType.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/// Serializer for SourceType 
public struct SourceType: Codable {
    public var name: String
    public var slug: String
    public var urlsCustomizable: Bool
    public var requestTokenUrl: String?
    public var authorizationUrl: String?
    public var accessTokenUrl: String?
    public var profileUrl: String?
    public var oidcWellKnownUrl: String?
    public var oidcJwksUrl: String?

    public init(name: String, slug: String, urlsCustomizable: Bool, requestTokenUrl: String?, authorizationUrl: String?, accessTokenUrl: String?, profileUrl: String?, oidcWellKnownUrl: String?, oidcJwksUrl: String?) {
        self.name = name
        self.slug = slug
        self.urlsCustomizable = urlsCustomizable
        self.requestTokenUrl = requestTokenUrl
        self.authorizationUrl = authorizationUrl
        self.accessTokenUrl = accessTokenUrl
        self.profileUrl = profileUrl
        self.oidcWellKnownUrl = oidcWellKnownUrl
        self.oidcJwksUrl = oidcJwksUrl
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case slug
        case urlsCustomizable = "urls_customizable"
        case requestTokenUrl = "request_token_url"
        case authorizationUrl = "authorization_url"
        case accessTokenUrl = "access_token_url"
        case profileUrl = "profile_url"
        case oidcWellKnownUrl = "oidc_well_known_url"
        case oidcJwksUrl = "oidc_jwks_url"
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        name = try container.decode(String.self, forKey: .name)
        slug = try container.decode(String.self, forKey: .slug)
        urlsCustomizable = try container.decode(Bool.self, forKey: .urlsCustomizable)
        requestTokenUrl = try container.decode(String.self, forKey: .requestTokenUrl)
        authorizationUrl = try container.decode(String.self, forKey: .authorizationUrl)
        accessTokenUrl = try container.decode(String.self, forKey: .accessTokenUrl)
        profileUrl = try container.decode(String.self, forKey: .profileUrl)
        oidcWellKnownUrl = try container.decode(String.self, forKey: .oidcWellKnownUrl)
        oidcJwksUrl = try container.decode(String.self, forKey: .oidcJwksUrl)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(name, forKey: .name)
        try container.encode(slug, forKey: .slug)
        try container.encode(urlsCustomizable, forKey: .urlsCustomizable)
        try container.encode(requestTokenUrl, forKey: .requestTokenUrl)
        try container.encode(authorizationUrl, forKey: .authorizationUrl)
        try container.encode(accessTokenUrl, forKey: .accessTokenUrl)
        try container.encode(profileUrl, forKey: .profileUrl)
        try container.encode(oidcWellKnownUrl, forKey: .oidcWellKnownUrl)
        try container.encode(oidcJwksUrl, forKey: .oidcJwksUrl)
    }
}
