//
// ServiceConnection.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/// ServiceConnection Serializer 
public struct ServiceConnection: Codable {
    public var pk: UUID
    public var name: String
    /// If enabled, use the local connection. Required Docker socket/Kubernetes Integration
    public var local: Bool?
    /// Return component used to edit this object
    public var component: String
    /// Return object's verbose_name
    public var verboseName: String
    /// Return object's plural verbose_name
    public var verboseNamePlural: String
    /// Return internal model name
    public var metaModelName: String

    public init(pk: UUID, name: String, local: Bool? = nil, component: String, verboseName: String, verboseNamePlural: String, metaModelName: String) {
        self.pk = pk
        self.name = name
        self.local = local
        self.component = component
        self.verboseName = verboseName
        self.verboseNamePlural = verboseNamePlural
        self.metaModelName = metaModelName
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pk
        case name
        case local
        case component
        case verboseName = "verbose_name"
        case verboseNamePlural = "verbose_name_plural"
        case metaModelName = "meta_model_name"
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        pk = try container.decode(UUID.self, forKey: .pk)
        name = try container.decode(String.self, forKey: .name)
        local = try container.decodeIfPresent(Bool.self, forKey: .local)
        component = try container.decode(String.self, forKey: .component)
        verboseName = try container.decode(String.self, forKey: .verboseName)
        verboseNamePlural = try container.decode(String.self, forKey: .verboseNamePlural)
        metaModelName = try container.decode(String.self, forKey: .metaModelName)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pk, forKey: .pk)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(local, forKey: .local)
        try container.encode(component, forKey: .component)
        try container.encode(verboseName, forKey: .verboseName)
        try container.encode(verboseNamePlural, forKey: .verboseNamePlural)
        try container.encode(metaModelName, forKey: .metaModelName)
    }
}
