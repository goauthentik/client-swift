//
// PatchedKubernetesServiceConnectionRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/// KubernetesServiceConnection Serializer 
public struct PatchedKubernetesServiceConnectionRequest: Codable {
    public var name: String?
    /// If enabled, use the local connection. Required Docker socket/Kubernetes Integration
    public var local: Bool?
    /// Paste your kubeconfig here. authentik will automatically use the currently selected context.
    public var kubeconfig: [String: AnyCodable]?
    /// Verify SSL Certificates of the Kubernetes API endpoint
    public var verifySsl: Bool?

    public init(name: String? = nil, local: Bool? = nil, kubeconfig: [String: AnyCodable]? = nil, verifySsl: Bool? = nil) {
        self.name = name
        self.local = local
        self.kubeconfig = kubeconfig
        self.verifySsl = verifySsl
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case local
        case kubeconfig
        case verifySsl = "verify_ssl"
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        name = try container.decodeIfPresent(String.self, forKey: .name)
        local = try container.decodeIfPresent(Bool.self, forKey: .local)
        kubeconfig = try container.decodeIfPresent([String: AnyCodable].self, forKey: .kubeconfig)
        verifySsl = try container.decodeIfPresent(Bool.self, forKey: .verifySsl)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(local, forKey: .local)
        try container.encodeIfPresent(kubeconfig, forKey: .kubeconfig)
        try container.encodeIfPresent(verifySsl, forKey: .verifySsl)
    }
}
