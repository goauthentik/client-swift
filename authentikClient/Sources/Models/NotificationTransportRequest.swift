//
// NotificationTransportRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/// NotificationTransport Serializer 
public struct NotificationTransportRequest: Codable {
    public var name: String
    public var mode: NotificationTransportModeEnum?
    public var webhookUrl: String?
    public var webhookMapping: UUID?
    /// Only send notification once, for example when sending a webhook into a chat channel.
    public var sendOnce: Bool?

    public init(name: String, mode: NotificationTransportModeEnum? = nil, webhookUrl: String? = nil, webhookMapping: UUID? = nil, sendOnce: Bool? = nil) {
        self.name = name
        self.mode = mode
        self.webhookUrl = webhookUrl
        self.webhookMapping = webhookMapping
        self.sendOnce = sendOnce
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case mode
        case webhookUrl = "webhook_url"
        case webhookMapping = "webhook_mapping"
        case sendOnce = "send_once"
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        name = try container.decode(String.self, forKey: .name)
        mode = try container.decodeIfPresent(NotificationTransportModeEnum.self, forKey: .mode)
        webhookUrl = try container.decodeIfPresent(String.self, forKey: .webhookUrl)
        webhookMapping = try container.decodeIfPresent(UUID.self, forKey: .webhookMapping)
        sendOnce = try container.decodeIfPresent(Bool.self, forKey: .sendOnce)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(mode, forKey: .mode)
        try container.encodeIfPresent(webhookUrl, forKey: .webhookUrl)
        try container.encodeIfPresent(webhookMapping, forKey: .webhookMapping)
        try container.encodeIfPresent(sendOnce, forKey: .sendOnce)
    }
}
