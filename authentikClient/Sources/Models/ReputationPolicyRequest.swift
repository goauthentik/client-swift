//
// ReputationPolicyRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/// Reputation Policy Serializer 
public struct ReputationPolicyRequest: Codable {
    public var name: String
    /// When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged.
    public var executionLogging: Bool?
    public var checkIp: Bool?
    public var checkUsername: Bool?
    public var threshold: Int?

    public init(name: String, executionLogging: Bool? = nil, checkIp: Bool? = nil, checkUsername: Bool? = nil, threshold: Int? = nil) {
        self.name = name
        self.executionLogging = executionLogging
        self.checkIp = checkIp
        self.checkUsername = checkUsername
        self.threshold = threshold
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case executionLogging = "execution_logging"
        case checkIp = "check_ip"
        case checkUsername = "check_username"
        case threshold
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        name = try container.decode(String.self, forKey: .name)
        executionLogging = try container.decodeIfPresent(Bool.self, forKey: .executionLogging)
        checkIp = try container.decodeIfPresent(Bool.self, forKey: .checkIp)
        checkUsername = try container.decodeIfPresent(Bool.self, forKey: .checkUsername)
        threshold = try container.decodeIfPresent(Int.self, forKey: .threshold)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(executionLogging, forKey: .executionLogging)
        try container.encodeIfPresent(checkIp, forKey: .checkIp)
        try container.encodeIfPresent(checkUsername, forKey: .checkUsername)
        try container.encodeIfPresent(threshold, forKey: .threshold)
    }
}
