//
// Invitation.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/// Invitation Serializer 
public struct Invitation: Codable {
    public var pk: UUID
    public var name: String
    public var expires: Date?
    public var fixedData: [String: Any]?
    public var createdBy: GroupMember
    /// When enabled, the invitation will be deleted after usage.
    public var singleUse: Bool?
    /// When set, only the configured flow can use this invitation.
    public var flow: UUID?
    public var flowObj: Flow

    public init(pk: UUID, name: String, expires: Date? = nil, fixedData: [String: Any]? = nil, createdBy: GroupMember, singleUse: Bool? = nil, flow: UUID? = nil, flowObj: Flow) {
        self.pk = pk
        self.name = name
        self.expires = expires
        self.fixedData = fixedData
        self.createdBy = createdBy
        self.singleUse = singleUse
        self.flow = flow
        self.flowObj = flowObj
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pk
        case name
        case expires
        case fixedData = "fixed_data"
        case createdBy = "created_by"
        case singleUse = "single_use"
        case flow
        case flowObj = "flow_obj"
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        pk = try container.decode(UUID.self, forKey: .pk)
        name = try container.decode(String.self, forKey: .name)
        expires = try container.decodeIfPresent(Date.self, forKey: .expires)
        fixedData = try container.decodeIfPresent([String: Any].self, forKey: .fixedData)
        createdBy = try container.decode(GroupMember.self, forKey: .createdBy)
        singleUse = try container.decodeIfPresent(Bool.self, forKey: .singleUse)
        flow = try container.decodeIfPresent(UUID.self, forKey: .flow)
        flowObj = try container.decode(Flow.self, forKey: .flowObj)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pk, forKey: .pk)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(expires, forKey: .expires)
        if let fixedData = fixedData {
            try container.encodeIfPresent(try JSONSerialization.data(withJSONObject: fixedData), forKey: .fixedData)
        }
        try container.encode(createdBy, forKey: .createdBy)
        try container.encodeIfPresent(singleUse, forKey: .singleUse)
        try container.encodeIfPresent(flow, forKey: .flow)
        try container.encode(flowObj, forKey: .flowObj)
    }
}
