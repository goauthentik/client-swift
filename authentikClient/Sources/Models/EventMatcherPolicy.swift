//
// EventMatcherPolicy.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/// Event Matcher Policy Serializer 
public struct EventMatcherPolicy: Codable {
    public var pk: UUID
    public var name: String
    /// When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged.
    public var executionLogging: Bool?
    /// Get object component so that we know how to edit the object
    public var component: String
    /// Return object's verbose_name
    public var verboseName: String
    /// Return object's plural verbose_name
    public var verboseNamePlural: String
    /// Return internal model name
    public var metaModelName: String
    /// Return objects policy is bound to
    public var boundTo: Int
    public var action: EventActions?
    /// Matches Event's Client IP (strict matching, for network matching use an Expression Policy)
    public var clientIp: String?
    public var app: AppEnum?
    public var model: ModelEnum?

    public init(pk: UUID, name: String, executionLogging: Bool? = nil, component: String, verboseName: String, verboseNamePlural: String, metaModelName: String, boundTo: Int, action: EventActions? = nil, clientIp: String? = nil, app: AppEnum? = nil, model: ModelEnum? = nil) {
        self.pk = pk
        self.name = name
        self.executionLogging = executionLogging
        self.component = component
        self.verboseName = verboseName
        self.verboseNamePlural = verboseNamePlural
        self.metaModelName = metaModelName
        self.boundTo = boundTo
        self.action = action
        self.clientIp = clientIp
        self.app = app
        self.model = model
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pk
        case name
        case executionLogging = "execution_logging"
        case component
        case verboseName = "verbose_name"
        case verboseNamePlural = "verbose_name_plural"
        case metaModelName = "meta_model_name"
        case boundTo = "bound_to"
        case action
        case clientIp = "client_ip"
        case app
        case model
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        pk = try container.decode(UUID.self, forKey: .pk)
        name = try container.decode(String.self, forKey: .name)
        executionLogging = try container.decodeIfPresent(Bool.self, forKey: .executionLogging)
        component = try container.decode(String.self, forKey: .component)
        verboseName = try container.decode(String.self, forKey: .verboseName)
        verboseNamePlural = try container.decode(String.self, forKey: .verboseNamePlural)
        metaModelName = try container.decode(String.self, forKey: .metaModelName)
        boundTo = try container.decode(Int.self, forKey: .boundTo)
        action = try container.decodeIfPresent(EventActions.self, forKey: .action)
        clientIp = try container.decodeIfPresent(String.self, forKey: .clientIp)
        app = try container.decodeIfPresent(AppEnum.self, forKey: .app)
        model = try container.decodeIfPresent(ModelEnum.self, forKey: .model)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pk, forKey: .pk)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(executionLogging, forKey: .executionLogging)
        try container.encode(component, forKey: .component)
        try container.encode(verboseName, forKey: .verboseName)
        try container.encode(verboseNamePlural, forKey: .verboseNamePlural)
        try container.encode(metaModelName, forKey: .metaModelName)
        try container.encode(boundTo, forKey: .boundTo)
        try container.encodeIfPresent(action, forKey: .action)
        try container.encodeIfPresent(clientIp, forKey: .clientIp)
        try container.encodeIfPresent(app, forKey: .app)
        try container.encodeIfPresent(model, forKey: .model)
    }
}
