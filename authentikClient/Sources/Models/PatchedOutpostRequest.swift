//
// PatchedOutpostRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/// Outpost Serializer 
public struct PatchedOutpostRequest: Codable {
    public var name: String?
    public var type: OutpostTypeEnum?
    public var providers: [Int]?
    /// Select Service-Connection authentik should use to manage this outpost. Leave empty if authentik should not handle the deployment.
    public var serviceConnection: UUID?
    public var config: [String: Any]?
    /// Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
    public var managed: String?

    public init(name: String? = nil, type: OutpostTypeEnum? = nil, providers: [Int]? = nil, serviceConnection: UUID? = nil, config: [String: Any]? = nil, managed: String? = nil) {
        self.name = name
        self.type = type
        self.providers = providers
        self.serviceConnection = serviceConnection
        self.config = config
        self.managed = managed
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case type
        case providers
        case serviceConnection = "service_connection"
        case config
        case managed
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        name = try container.decodeIfPresent(String.self, forKey: .name)
        type = try container.decodeIfPresent(OutpostTypeEnum.self, forKey: .type)
        providers = try container.decodeIfPresent([Int].self, forKey: .providers)
        serviceConnection = try container.decodeIfPresent(UUID.self, forKey: .serviceConnection)
        config = try container.decodeIfPresent([String: Any].self, forKey: .config)
        managed = try container.decodeIfPresent(String.self, forKey: .managed)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(providers, forKey: .providers)
        try container.encodeIfPresent(serviceConnection, forKey: .serviceConnection)
        if let config = config {
            try container.encodeIfPresent(try JSONSerialization.data(withJSONObject: config), forKey: .config)
        }
        try container.encodeIfPresent(managed, forKey: .managed)
    }
}
