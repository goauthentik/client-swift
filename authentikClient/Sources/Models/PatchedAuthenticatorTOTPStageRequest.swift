//
// PatchedAuthenticatorTOTPStageRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/// AuthenticatorTOTPStage Serializer 
public struct PatchedAuthenticatorTOTPStageRequest: Codable {
    public var name: String?
    public var flowSet: [FlowSetRequest]?
    /// Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage.
    public var configureFlow: UUID?
    public var friendlyName: String?
    public var digits: DigitsEnum?

    public init(name: String? = nil, flowSet: [FlowSetRequest]? = nil, configureFlow: UUID? = nil, friendlyName: String? = nil, digits: DigitsEnum? = nil) {
        self.name = name
        self.flowSet = flowSet
        self.configureFlow = configureFlow
        self.friendlyName = friendlyName
        self.digits = digits
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case flowSet = "flow_set"
        case configureFlow = "configure_flow"
        case friendlyName = "friendly_name"
        case digits
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        name = try container.decodeIfPresent(String.self, forKey: .name)
        flowSet = try container.decodeIfPresent([FlowSetRequest].self, forKey: .flowSet)
        configureFlow = try container.decodeIfPresent(UUID.self, forKey: .configureFlow)
        friendlyName = try container.decodeIfPresent(String.self, forKey: .friendlyName)
        digits = try container.decodeIfPresent(DigitsEnum.self, forKey: .digits)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(flowSet, forKey: .flowSet)
        try container.encodeIfPresent(configureFlow, forKey: .configureFlow)
        try container.encodeIfPresent(friendlyName, forKey: .friendlyName)
        try container.encodeIfPresent(digits, forKey: .digits)
    }
}
