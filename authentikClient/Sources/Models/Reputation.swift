//
// Reputation.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/// Reputation Serializer 
public struct Reputation: Codable {
    public var pk: UUID?
    public var identifier: String
    public var ip: String
    public var ipGeoData: [String: AnyCodable]?
    public var score: Int64?
    public var updated: Date

    public init(pk: UUID? = nil, identifier: String, ip: String, ipGeoData: [String: AnyCodable]? = nil, score: Int64? = nil, updated: Date) {
        self.pk = pk
        self.identifier = identifier
        self.ip = ip
        self.ipGeoData = ipGeoData
        self.score = score
        self.updated = updated
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pk
        case identifier
        case ip
        case ipGeoData = "ip_geo_data"
        case score
        case updated
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        pk = try container.decodeIfPresent(UUID.self, forKey: .pk)
        identifier = try container.decode(String.self, forKey: .identifier)
        ip = try container.decode(String.self, forKey: .ip)
        ipGeoData = try container.decodeIfPresent([String: AnyCodable].self, forKey: .ipGeoData)
        score = try container.decodeIfPresent(Int64.self, forKey: .score)
        updated = try container.decode(Date.self, forKey: .updated)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(pk, forKey: .pk)
        try container.encode(identifier, forKey: .identifier)
        try container.encode(ip, forKey: .ip)
        try container.encodeIfPresent(ipGeoData, forKey: .ipGeoData)
        try container.encodeIfPresent(score, forKey: .score)
        try container.encode(updated, forKey: .updated)
    }
}
