//
// DummyPolicy.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/// Dummy Policy Serializer 
public struct DummyPolicy: Codable {
    public var pk: UUID
    public var name: String
    /// When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged.
    public var executionLogging: Bool?
    /// Get object component so that we know how to edit the object
    public var component: String
    /// Return object's verbose_name
    public var verboseName: String
    /// Return object's plural verbose_name
    public var verboseNamePlural: String
    /// Return internal model name
    public var metaModelName: String
    /// Return objects policy is bound to
    public var boundTo: Int
    public var result: Bool?
    public var waitMin: Int?
    public var waitMax: Int?

    public init(pk: UUID, name: String, executionLogging: Bool? = nil, component: String, verboseName: String, verboseNamePlural: String, metaModelName: String, boundTo: Int, result: Bool? = nil, waitMin: Int? = nil, waitMax: Int? = nil) {
        self.pk = pk
        self.name = name
        self.executionLogging = executionLogging
        self.component = component
        self.verboseName = verboseName
        self.verboseNamePlural = verboseNamePlural
        self.metaModelName = metaModelName
        self.boundTo = boundTo
        self.result = result
        self.waitMin = waitMin
        self.waitMax = waitMax
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pk
        case name
        case executionLogging = "execution_logging"
        case component
        case verboseName = "verbose_name"
        case verboseNamePlural = "verbose_name_plural"
        case metaModelName = "meta_model_name"
        case boundTo = "bound_to"
        case result
        case waitMin = "wait_min"
        case waitMax = "wait_max"
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        pk = try container.decode(UUID.self, forKey: .pk)
        name = try container.decode(String.self, forKey: .name)
        executionLogging = try container.decodeIfPresent(Bool.self, forKey: .executionLogging)
        component = try container.decode(String.self, forKey: .component)
        verboseName = try container.decode(String.self, forKey: .verboseName)
        verboseNamePlural = try container.decode(String.self, forKey: .verboseNamePlural)
        metaModelName = try container.decode(String.self, forKey: .metaModelName)
        boundTo = try container.decode(Int.self, forKey: .boundTo)
        result = try container.decodeIfPresent(Bool.self, forKey: .result)
        waitMin = try container.decodeIfPresent(Int.self, forKey: .waitMin)
        waitMax = try container.decodeIfPresent(Int.self, forKey: .waitMax)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pk, forKey: .pk)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(executionLogging, forKey: .executionLogging)
        try container.encode(component, forKey: .component)
        try container.encode(verboseName, forKey: .verboseName)
        try container.encode(verboseNamePlural, forKey: .verboseNamePlural)
        try container.encode(metaModelName, forKey: .metaModelName)
        try container.encode(boundTo, forKey: .boundTo)
        try container.encodeIfPresent(result, forKey: .result)
        try container.encodeIfPresent(waitMin, forKey: .waitMin)
        try container.encodeIfPresent(waitMax, forKey: .waitMax)
    }
}
