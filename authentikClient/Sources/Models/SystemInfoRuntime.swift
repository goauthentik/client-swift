//
// SystemInfoRuntime.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/// Get versions 
public struct SystemInfoRuntime: Codable {
    public var pythonVersion: String
    public var gunicornVersion: String
    public var environment: String
    public var architecture: String
    public var platform: String
    public var uname: String

    public init(pythonVersion: String, gunicornVersion: String, environment: String, architecture: String, platform: String, uname: String) {
        self.pythonVersion = pythonVersion
        self.gunicornVersion = gunicornVersion
        self.environment = environment
        self.architecture = architecture
        self.platform = platform
        self.uname = uname
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pythonVersion = "python_version"
        case gunicornVersion = "gunicorn_version"
        case environment
        case architecture
        case platform
        case uname
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        pythonVersion = try container.decode(String.self, forKey: .pythonVersion)
        gunicornVersion = try container.decode(String.self, forKey: .gunicornVersion)
        environment = try container.decode(String.self, forKey: .environment)
        architecture = try container.decode(String.self, forKey: .architecture)
        platform = try container.decode(String.self, forKey: .platform)
        uname = try container.decode(String.self, forKey: .uname)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pythonVersion, forKey: .pythonVersion)
        try container.encode(gunicornVersion, forKey: .gunicornVersion)
        try container.encode(environment, forKey: .environment)
        try container.encode(architecture, forKey: .architecture)
        try container.encode(platform, forKey: .platform)
        try container.encode(uname, forKey: .uname)
    }
}
